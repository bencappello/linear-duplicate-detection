[
  {
    "id": "40bf787a-81eb-49f8-84b0-3b1efcaf5142",
    "identifier": "BUG-788",
    "title": "Incorrect type for API data",
    "description": "This is a parent ticket to group all data type issues on the API\n\nWe should check all submissions and make sure we fix them all",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-03T18:50:43.596Z",
    "updatedAt": "2025-07-03T18:50:48.815Z",
    "assignee": null,
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": []
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-788/incorrect-type-for-api-data"
  },
  {
    "id": "27333874-2e19-4401-8dc6-890721fa165d",
    "identifier": "BUG-787",
    "title": "Incorrect Error Schemata",
    "description": "This parent ticket abridges any data issues in error responses.\nStatus codes not included, only return data.",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-03T18:47:25.067Z",
    "updatedAt": "2025-07-03T18:47:33.066Z",
    "assignee": null,
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": []
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-787/incorrect-error-schemata"
  },
  {
    "id": "fba13a04-d44a-4df2-8956-6dab5d371543",
    "identifier": "BUG-786",
    "title": "Incorrect or missing openAPI documentation",
    "description": "Parent ticket for any issues regarding wrong, missing or incorrect documentation.\n\nScope: descriptions, names, anything not related to an schema.",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-03T18:26:52.585Z",
    "updatedAt": "2025-07-03T20:05:09.104Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": []
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-786/incorrect-or-missing-openapi-documentation"
  },
  {
    "id": "b0fe583f-30a4-481e-ae52-24f3bea61c52",
    "identifier": "BUG-785",
    "title": "API Error exposing app internals",
    "description": "Parent group for all tickets that describe API response that are exposing any internals they shouldn't.",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-03T18:17:32.314Z",
    "updatedAt": "2025-07-03T18:21:24.451Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": []
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-785/api-error-exposing-app-internals"
  },
  {
    "id": "12325070-e255-4bcd-a852-83481c4c77ba",
    "identifier": "BUG-784",
    "title": "Review OAuth2 Scopes",
    "description": null,
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-03T12:38:50.265Z",
    "updatedAt": "2025-07-03T12:56:58.782Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": []
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-784/review-oauth2-scopes"
  },
  {
    "id": "78fbc8ef-81df-45c7-8b5a-63a602ea7aad",
    "identifier": "BUG-783",
    "title": "QTI query request excessive response time",
    "description": "**Reporter:** Kriss Strikis (kriss.strikis@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** API response took longer than 1 minute to complete\n\n**Summary:** \nAPI response took longer than 1 minute to complete\n\n**Steps to Reproduce:**\nGET [https://qti.alpha-1edtech.com/api/assessment-items?query=universe](https://qti.alpha-1edtech.com/api/assessment-items?query=universe)\n\n**Expected:** \nAPI response should complete within 5 seconds\n\n**Environment:** production QTI API endpoint\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-03T01:45:34.943Z",
    "updatedAt": "2025-07-03T01:45:34.943Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-783/qti-query-request-excessive-response-time"
  },
  {
    "id": "c1a37b35-ddda-4c89-b920-7aea68582b6c",
    "identifier": "BUG-782",
    "title": "API returns 500 Internal Server Error instead of 404 Not Found for non-existent lesson in GET /powerpath/getAttempts",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** When a GET request is made to /powerpath/getAttempts for a lessonId that does not exist in the PowerPath system, the API returns a 500 Internal Server Error.\n\nThe response body is an HTML document containing a stack trace, which indicates an unhandled exception on the server. The specific error message from the logs is:\nError: Lesson unit-1-topic-1-reading-resource not found\n\n**Summary:** \nWhen a GET request is made to /powerpath/getAttempts for a lessonId that does not exist in the PowerPath system, the API returns a 500 Internal Server Error.\n\nThe response body is an HTML document containing a stack trace, which indicates an unhandled exception on the server. The specific error message from the logs is:\nError: Lesson unit-1-topic-1-reading-resource not found\n\n**Steps to Reproduce:**\nHuman-Readable Steps:\n\nObtain a valid bearer token for the Timeback API.\n\nIdentify a studentId and a lessonId where the lesson exists in the OneRoster system but not in the PowerPath attempts system. Based on our logs, these values will reproduce the issue:\n\nstudentId: student-maya-rodriguez-9th-2025\n\nlessonId: unit-1-topic-1-reading-resource\n\nMake a GET request to the /powerpath/getAttempts endpoint using these query parameters.\n\nObserve the server's response.\n\nCurl Command:\n\nGenerated bash\n\n# Replace $SERVER_URL with the base URL of the Timeback API\n\n# Replace $TOKEN with a valid bearer token\n\ncurl -X GET \n'$SERVER_URL/powerpath/getAttempts?student=student-maya-rodriguez-9th-2025&lesson=unit-1-topic-1-reading-resource' \n-H 'Authorization: Bearer $TOKEN' \n-v\n\n**Expected:** \nAccording to standard RESTful API design principles, when a client requests a resource that cannot be found, the server MUST return a 404 Not Found status code.\n\nThe response body should be a well-formed JSON object, either an empty array for the attempts key (e.g., {\"attempts\": \\[\\]}) or a standard JSON error object. The response MUST NOT be an HTML error page.\n\nOur client-side ETL script (script/extract-timeback-data.ts) is specifically designed to handle 404 status codes gracefully by treating them as \"no attempts found\" and continuing its process. The current 500 error breaks this contract and crashes the entire data extraction pipeline.\n\n**Environment:** typescript\n**Additional Notes:** This bug is classified as Critical because it stems from an unhandled exception on the server, violating fundamental REST principles and causing catastrophic failure in client applications.\n\nImpact Analysis:\nThe immediate impact is the complete failure of our multi-hour ETL process. A single invalid lesson ID out of tens of thousands of API calls halts the entire operation because the client receives an unexpected 500 error instead of the anticipated 404.\n\nDeviation from Specification and Best Practices:\n\nIncorrect Status Code: Returning a 500 error for a \"not found\" condition is incorrect. It masks the true nature of the problem (missing resource) and signals a server-side crash rather than a predictable client-side error.\n\nIncorrect Response Format: The API returns an HTML document, which violates the Accept header contract for a JSON API. Clients expecting JSON will fail to parse this response.\n\nThis bug points to a larger issue of data inconsistency between the OneRoster service and the PowerPath service, but the immediate and most critical problem is the lack of robust error handling in the /powerpath/getAttempts endpoint.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-03T00:57:35.544Z",
    "updatedAt": "2025-07-03T00:57:35.544Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-782/api-returns-500-internal-server-error-instead-of-404-not-found-for-non"
  },
  {
    "id": "a9b243f0-d816-4a4f-81f8-9cd8a186f4b9",
    "identifier": "BUG-781",
    "title": "Critical: Course Components endpoint omits required 'unlockDate' field, violating API contract",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API response from `GET /ims/oneroster/rostering/v1p2/courses/components` is returning `CourseComponent` objects that are missing the mandatory `unlockDate` field. The provided logs show this error occurring for records at index 496 and 497. This causes client-side validation against the OpenAPI specification to fail, as the server is not adhering to its own documented data contract.\n\n**Summary:** \nThe API response from `GET /ims/oneroster/rostering/v1p2/courses/components` is returning `CourseComponent` objects that are missing the mandatory `unlockDate` field. The provided logs show this error occurring for records at index 496 and 497. This causes client-side validation against the OpenAPI specification to fail, as the server is not adhering to its own documented data contract.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid Bearer token for the TimeBack API.\n2. Make a GET request to the `/ims/oneroster/rostering/v1p2/courses/components` endpoint. Use a `limit` parameter of 1000 to fetch a large batch of records.\n3. Inspect the JSON response. Observe that records within the `courseComponents` array (specifically at indices 496 and 497 in the provided logs) are missing the `unlockDate` field entirely.\n\nCurl Command:\n(Note: Replace `<YOUR_ACCESS_TOKEN>` with a valid token)\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/components?limit=1000&offset=0' \\\n-H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n-H 'Content-Type: application/json'\n\n**Expected:** \nAccording to the `oneroster.yaml` OpenAPI specification, every object within the `courseComponents` array must contain a required `unlockDate` field of type `string`. The server should always return this field for every course component record and it should never be null or undefined.\n\n**Environment:** nodeEnv=development\nAPI Server=https://api.alpha-1edtech.com\n**Additional Notes:** This is a critical data integrity bug. The server is violating its own API contract as defined in `oneroster.yaml`. The specification for the `CourseComponent` object, returned by the `getAllCourseComponents` operation, explicitly lists `unlockDate` in its `required` array. The log file confirms that the server is returning records where this required field is `undefined`, leading to a \"paginated schema invalid\" error on any client that strictly follows the specification. This must be fixed on the server to ensure data consistency and reliability.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T23:53:12.052Z",
    "updatedAt": "2025-07-03T06:06:28.208Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-781/critical-course-components-endpoint-omits-required-unlockdate-field"
  },
  {
    "id": "d9b7c468-b35c-4998-b446-251f674eca7a",
    "identifier": "BUG-780",
    "title": "Review CASE API documentation",
    "description": "Document extra fields\n\nDocument non-standard error response",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-02T20:33:11.198Z",
    "updatedAt": "2025-07-03T06:04:01.782Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-780/review-case-api-documentation"
  },
  {
    "id": "dead35c1-dde9-493e-9bc8-73ec42c58d7c",
    "identifier": "BUG-779",
    "title": "Verify assessnentLineItems non-standard fields are documented",
    "description": "component and componentResource are custom field we've added and they should be properly documented, if they're not already.",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-02T20:12:20.555Z",
    "updatedAt": "2025-07-03T06:03:47.996Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-779/verify-assessnentlineitems-non-standard-fields-are-documented"
  },
  {
    "id": "ed3ede76-19c4-4e8b-a6fa-8f6f7fee5ce3",
    "identifier": "BUG-778",
    "title": "Incorrect Data Type for Pagination Parameters in `GET /stimuli`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `page` and `limit` query parameters for the `GET /stimuli` endpoint are defined with `type: string` in the OpenAPI specification.\n\n**Summary:** \nThe `page` and `limit` query parameters for the `GET /stimuli` endpoint are defined with `type: string` in the OpenAPI specification.\n\n**Steps to Reproduce:**\n\"**Human-Readable Steps:**\n\n1. Examine the parameters for the `GET /stimuli` endpoint in the local OpenAPI specification.\n2. Observe the `page` and `limit` parameters.\n3. Note that their schema is defined as `type: string`.\n\n**cURL Command (Illustrative):**\n\n```bash\n# This request works, but the server-side validation based on the schema is weak\n# The API spec implies 'page' and 'limit' are just strings, not numbers.\ncurl -X GET 'https://qti.alpha-1edtech.com/api/stimuli?page=1&limit=25' \\\n-H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \n\"While it is technically true that query parameters are transmitted as strings in a URL, they semantically represent numerical values. OpenAPI specifications should define such parameters by their semantic type to enable better documentation, client-side validation, and server-side validation tooling.\n\nThe `page` and `limit` parameters should be defined as `type: integer` or `type: number`. This is also consistent with the response body, where `page`, `limit`, `total`, and `pages` are all correctly defined as `type: number`.\n\nCorrect schema definition:\n```yaml\n- in: query\n  name: page\n  description: Page number for pagination\n  schema:\n    type: integer\n    default: 1\n    minimum: 1\n- in: query\n  name: limit\n  description: Number of items per page\n  schema:\n    type: integer\n    default: 10\n    minimum: 1\n    maximum: 100\n```\n\nUsing `integer` also allows for the use of validation keywords like `minimum` and `maximum`.\"\n\n**Environment:** \"API Route: /stimuli\nLocal Spec: /stimuli.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: This is a general API design issue, not specific to a QTI content model, but affects the usability of a QTI-serving API.\"\n**Additional Notes:** This is a low-severity bug that does not violate the QTI specification itself but represents a failure to follow API design best practices. It creates an inconsistency between the data type of the request parameters and their counterparts in the response body. Using the correct type (`integer`) improves the quality and robustness of the API contract, making it easier and safer for clients to use.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:53:59.741Z",
    "updatedAt": "2025-07-03T12:02:44.521Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-778/incorrect-data-type-for-pagination-parameters-in-get-stimuli"
  },
  {
    "id": "6672911b-4986-47a4-9c9e-b84bf2501a52",
    "identifier": "BUG-777",
    "title": "LOW: Incorrect Data Type for Pagination Query Parameters",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `page` and `limit` query parameters, which are conceptually numbers used for pagination, are incorrectly defined with `type: string` in the OpenAPI specification.\n\n**Summary:** \nThe `page` and `limit` query parameters, which are conceptually numbers used for pagination, are incorrectly defined with `type: string` in the OpenAPI specification.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the parameters for the `GET /assessment-tests` endpoint.\n2. Observe the `page` and `limit` query parameters.\n3. Note that their schema is defined as `type: string`.\n\ncURL Command to demonstrate the issue:\nThis is a specification issue, but it means the server must handle string inputs for numeric concepts.\n\n```bash\n# The 'page' and 'limit' parameters are sent as strings, as per the spec.\n# The server is expected to parse these into numbers.\ncurl -X GET 'https://qti.alpha-1edtech.com/api/assessment-tests?page=2&limit=25' \\\n-H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \n\"According to OpenAPI best practices and the logical nature of the data, these parameters should be defined as `type: integer`. This allows for better automatic validation by tooling and client generators, and it correctly describes the expected data type. The server-side code should not have to perform string-to-integer conversion for these fundamental parameters.\n\nCorrected schema definition:\n```yaml\n- in: query\n  name: page\n  description: Page number for pagination\n  schema:\n    type: integer  # Should be integer\n    default: 1\n    example: 1\n- in: query\n  name: limit\n  description: Number of items per page\n  schema:\n    type: integer  # Should be integer\n    default: 10\n    example: 10\n```\"\n\n**Environment:** \"API Route: /assessment-tests\nLocal Spec: /assessment/tests.filtered.yaml\nQTI Specification: N/A (This is an OpenAPI best practice issue)\nQTI Context: API usability and discoverability.\"\n**Additional Notes:** While this does not violate the QTI specification itself, it is a flaw in the API design that can lead to bugs and poor developer experience. Defining parameters with their correct types is a cornerstone of creating a robust and self-documenting API. It ensures that clients send the correct data format and reduces the burden of defensive type-casting on the server.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:52:25.916Z",
    "updatedAt": "2025-07-03T12:02:48.656Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-777/low-incorrect-data-type-for-pagination-query-parameters"
  },
  {
    "id": "5976d3a4-6d78-4ffa-8cbb-a846e0566e74",
    "identifier": "BUG-776",
    "title": "LOW: Non-Standard `qtiVersion` Attribute on Assessment Item Model",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The assessment item model in the API includes a top-level `qtiVersion` attribute, which defaults to '3.0'.\n\n**Summary:** \nThe assessment item model in the API includes a top-level `qtiVersion` attribute, which defaults to '3.0'.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make a GET request to the `/assessment-tests/{identifier}/questions` endpoint.\n2. Observe the `qtiVersion` field at the top level of each `question` object in the response.\n3. This attribute is not part of the standard QTI `assessmentItem` specification.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \nThe official QTI 3.0 specification for `assessmentItem` (Section 4.1) does not define a `qtiVersion` or `version` attribute on the root element. Versioning of the specification is typically handled at a higher level, such as in the Content Packaging manifest (`imsmanifest.xml`), not on each individual item file. While this attribute may be intended for convenience, it is non-standard and pollutes the QTI-defined data model. It should be moved into the generic `metadata` object to clearly separate it from standard fields.\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** This is a minor deviation, but it reflects a pattern of adding convenient but non-standard fields to the core data model. For strict QTI compliance, only fields and structures defined in the specification should be present at the top level of the JSON object representing the QTI entity. Custom extensions and metadata should be contained within a dedicated `metadata` or `extension` object.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:51:14.276Z",
    "updatedAt": "2025-07-03T06:03:05.282Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-776/low-non-standard-qtiversion-attribute-on-assessment-item-model"
  },
  {
    "id": "6d5e4e40-5e8c-4c6f-b4c8-f87745d7e598",
    "identifier": "BUG-775",
    "title": "LOW: Inconsistent API Path Naming with QTI Terminology",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API uses the path `/assessment-tests/.../test-parts`. This naming convention (pluralized kebab-case) is inconsistent with the official QTI entity names `assessmentTest` and `testPart` (camelCase).\n\n**Summary:** \nThe API uses the path `/assessment-tests/.../test-parts`. This naming convention (pluralized kebab-case) is inconsistent with the official QTI entity names `assessmentTest` and `testPart` (camelCase).\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Observe the API route: `/assessment-tests/{assessmentTestIdentifier}/test-parts`.\n2. Compare the path segments `assessment-tests` and `test-parts` with the formal QTI entity names.\n3. The official QTI specification uses `assessmentTest` and `testPart` (camelCase).\n4. The local API uses a pluralized, kebab-case convention.\"\n\n**Expected:** \nFor maximum clarity and alignment with the source specification, API paths should mirror the standard QTI terminology as closely as possible. While pluralization for collection endpoints is a common REST pattern, a more compliant path structure might look like `/assessmentTest/{assessmentTestIdentifier}/testPart`. The chosen convention is not technically wrong from a REST perspective, but it creates a disconnect from the QTI specification's vocabulary.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: API Design and Naming Conventions\"\n**Additional Notes:** This is a minor issue of style and developer ergonomics. However, for an API that purports to be a direct implementation of a specification, using the specification's own terminology consistently, even in URL structure, reduces cognitive load for developers who work directly with the QTI standard. The current naming is a choice, but it is a deviation from the source material.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:50:25.954Z",
    "updatedAt": "2025-07-03T12:04:45.667Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-775/low-inconsistent-api-path-naming-with-qti-terminology"
  },
  {
    "id": "bb0a4d64-f8ce-4595-b9a8-db7775e6e256",
    "identifier": "BUG-774",
    "title": "LOW: Non-Standard `sequence` Attribute on `assessmentSection` Schema",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API exposes a `sequence` integer field on `assessmentSection` objects. This attribute is not defined in the QTI 3.0 specification for this entity.\n\n**Summary:** \nThe API exposes a `sequence` integer field on `assessmentSection` objects. This attribute is not defined in the QTI 3.0 specification for this entity.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `GET /.../test-parts` response schema.\n2. The `qti-assessment-section` object contains a `sequence` property of type integer.\n3. Review the QTI 3.0 specification for `AssessmentSection` (section `4.2`).\n4. There is no standard `sequence` attribute. The order of sections is determined by their order within the XML document.\n\n`curl` command to see the non-standard field:\n\n```bash\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/some-test-id/test-parts' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \nIn QTI, the sequence of elements like `assessmentSection` is determined by their physical order in the XML document. While a system may use a sequence number internally, exposing it as a first-class, un-namespaced attribute in the API can be misleading. It suggests it is a standard QTI property, which it is not. If this custom data is necessary, it should be namespaced (e.g., `alpha-1edtech:sequence`) or placed within a `dataExtension` object to clearly separate it from the standard QTI model.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** This deviation can cause confusion for developers familiar with the QTI standard, who would not expect such a field and might misinterpret its meaning or immutability. It pollutes the standard QTI data model with implementation-specific logic. The standard way to handle such extensions is via the `dataExtension` point.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:49:30.409Z",
    "updatedAt": "2025-07-03T12:18:33.394Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-774/low-non-standard-sequence-attribute-on-assessmentsection-schema"
  },
  {
    "id": "ea91b2ed-32c5-46fe-8a56-2a7dce220a20",
    "identifier": "BUG-773",
    "title": "LOW: Leaked Implementation-Specific Detail `_id` in `assessmentSection` Schema",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API response for an `assessmentSection` includes the `_id` field, which is explicitly documented as a MongoDB document ID. This is an internal database identifier.\n\n**Summary:** \nThe API response for an `assessmentSection` includes the `_id` field, which is explicitly documented as a MongoDB document ID. This is an internal database identifier.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `GET /.../test-parts` response schema.\n2. In the `qti-assessment-section` object properties, observe the presence of an `_id` field.\n3. The description identifies this as a \"MongoDB document ID\".\n4. This field is not part of the QTI specification for an `assessmentSection`.\n\n`curl` command to demonstrate the leaked field:\n\n```bash\n# The response from this GET request will contain an '_id' field for each section,\n# which is an internal database key.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/some-test-id/test-parts' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \nPublic APIs should not expose internal implementation details like database-specific primary keys. The stable, public identifier for a QTI entity is its `identifier` attribute. The `_id` field should be removed from the public API response to provide a clean, backend-agnostic contract.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** Leaking implementation details makes the API brittle and harder to maintain. If the backend database were to ever change from MongoDB, this field would change or disappear, breaking clients who may have inadvertently come to rely on it. The QTI `identifier` is the contractually stable ID that must be used.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:48:17.623Z",
    "updatedAt": "2025-07-03T12:25:32.761Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-773/low-leaked-implementation-specific-detail-id-in-assessmentsection"
  },
  {
    "id": "0c83f728-6753-487e-801d-73a657ac399d",
    "identifier": "BUG-772",
    "title": "Pagination parameters `page` and `limit` use incorrect `string` type.",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The pagination parameters `page` and `limit`, which are inherently numerical, are defined in the API specification as strings.\n\n**Summary:** \nThe pagination parameters `page` and `limit`, which are inherently numerical, are defined in the API specification as strings.\n\n**Steps to Reproduce:**\n\"1. Inspect the `parameters` section for the `GET /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections` operation in the local OpenAPI specification.\n2. Find the definitions for the `page` and `limit` query parameters.\n3. Observe that both are defined with `schema: { type: string }`.\"\n\n**Expected:** \nThese parameters should be defined with the correct data type, which is `integer`. The schema should be `{ type: integer, default: 1 }` for `page` and `{ type: integer, default: 10 }` for `limit`. This provides clear, unambiguous type information to API clients and code generators and aligns with OpenAPI best practices.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** While this is not a violation of the QTI specification itself, it is a clear bug in the API's design. It can lead to fragile backend code that must defensively parse strings into numbers, and it may cause issues with client-side validation and code generation tools that rely on the schema being accurate. Correctly typing parameters is fundamental to creating a reliable and easy-to-use API.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:47:08.174Z",
    "updatedAt": "2025-07-03T12:02:48.656Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-772/pagination-parameters-page-and-limit-use-incorrect-string-type"
  },
  {
    "id": "ff2d0df8-ee14-408a-b72e-08b86790342a",
    "identifier": "BUG-771",
    "title": "Low: Vague Path Parameter Name `{identifier}` for Section Identifier",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API path uses the generic parameter name `{identifier}` to represent the unique identifier for an `AssessmentSection`. This is ambiguous and can be confused with other identifiers within the QTI ecosystem.\n\n**Summary:** \nThe API path uses the generic parameter name `{identifier}` to represent the unique identifier for an `AssessmentSection`. This is ambiguous and can be confused with other identifiers within the QTI ecosystem.\n\n**Steps to Reproduce:**\n\"1. Look at the API path: `/assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items`.\n2. Note the path parameter name `{identifier}` is used to specify the section.\n3. In the context of this operation, the request body also contains an `identifier` field for the assessment item being added.\n4. This creates ambiguity between the identifier in the path (for the section) and the identifier in the body (for the item).\"\n\n**Expected:** \n\"For clarity and to prevent developer error, path parameters should be named specifically. The parameter name `{identifier}` should be changed to `{sectionIdentifier}`.\n\nThe corrected path should be:\n`/assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{sectionIdentifier}/items`\n\nThe corresponding parameter object in the OpenAPI specification should also be updated to `name: sectionIdentifier`.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier/sections/{identifier}/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: General API Design Best Practices in a QTI Context.\"\n**Additional Notes:** While this does not violate a specific QTI rule, it is poor API design that can lead to confusion and bugs in client applications, especially in a complex domain like QTI where multiple entities have identifiers. A developer might mistakenly use an item identifier in the path, leading to `404 Not Found` errors that are difficult to debug. Adopting specific parameter names is a standard best practice that improves API usability and robustness.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:46:13.879Z",
    "updatedAt": "2025-07-03T06:01:57.667Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-771/low-vague-path-parameter-name-identifier-for-section-identifier"
  },
  {
    "id": "ac6ec7ad-82c2-4585-9072-e730e5b95b74",
    "identifier": "BUG-770",
    "title": "Ambiguous API Design: Generic Path Parameter `{identifier}` for Section Lacks Context",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The path parameter for identifying the `AssessmentSection` is named `identifier`. In a deeply nested resource path that contains multiple other named identifiers, this generic name is ambiguous and forces developers to rely on its position in the URL for context.\n\n**Summary:** \nThe path parameter for identifying the `AssessmentSection` is named `identifier`. In a deeply nested resource path that contains multiple other named identifiers, this generic name is ambiguous and forces developers to rely on its position in the URL for context.\n\n**Steps to Reproduce:**\n\"This is an API design and usability bug, reproducible by reviewing the spec.\n\n1. Examine the full API path: `/assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}`.\n2. Observe the multiple identifiers present in the path: `assessmentTestIdentifier`, `testPartIdentifier`, `identifier`, `itemIdentifier`.\n3. Note that the parameter for the section is simply `{identifier}`, while other parameters are named specifically.\n4. This requires a developer to infer from the path segment `/sections/` that `{identifier}` refers to the section, which is poor practice in a complex, nested path.\"\n\n**Expected:** \n\"All path parameters should have names that are specific and self-descriptive to improve API clarity, readability, and maintainability. The parameter `{identifier}` should be renamed to reflect the resource it identifies.\n\nCorrect implementation:\n`.../test-parts/{testPartIdentifier}/sections/{sectionIdentifier}/items/...`\n\nThis makes the API contract clearer and reduces the chance of developer error when constructing requests, especially in generated client code where parameters might be listed out of path order. While the QTI `AssessmentSection` class (Section 4.2.1) has a characteristic named `identifier`, this name should be contextualized within the API's URL structure for clarity.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Section Management\"\n**Additional Notes:** This is a low-severity bug as the API remains functional, but it violates API design best practices. For a complex specification like QTI, creating a clear and unambiguous API is essential for user adoption and reducing integration errors. This kind of ambiguity, when repeated across a large API surface, can significantly degrade the developer experience.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:45:57.903Z",
    "updatedAt": "2025-07-03T06:01:56.523Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-770/ambiguous-api-design-generic-path-parameter-identifier-for-section"
  },
  {
    "id": "6dee0acd-ede6-472c-8a73-7b1ee656d71a",
    "identifier": "BUG-769",
    "title": "Document search query parameter",
    "description": "We should add documentation around the `search` query parameter",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:45:09.775Z",
    "updatedAt": "2025-07-03T18:15:07.400Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        }
      ]
    },
    "project": null,
    "url": "https://linear.app/ae-studio/issue/BUG-769/document-search-query-parameter"
  },
  {
    "id": "391aee53-8a32-47aa-b934-c512600e8dc0",
    "identifier": "BUG-768",
    "title": "Medium: Redundant Identifier Required in `PUT /stimuli/{identifier}` Request Body",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `PUT /stimuli/{identifier}` operation requires the client to send the stimulus identifier in three separate locations: once in the URL path, and twice within the JSON request body. This is a fragile and unconventional API design pattern.\n\n**Summary:** \nThe `PUT /stimuli/{identifier}` operation requires the client to send the stimulus identifier in three separate locations: once in the URL path, and twice within the JSON request body. This is a fragile and unconventional API design pattern.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Attempt to update a stimulus using the `PUT /stimuli/{identifier}` endpoint.\n2. Construct the request body.\n3. According to the schema, the request body requires a top-level `params` object containing the `identifier`, AND a `body` object which is a `Stimulus` schema that ALSO requires the `identifier`.\n4. The same identifier must be passed in three places: the URL path, `requestBody.params.identifier`, and `requestBody.body.identifier`.\n\ncURL command demonstrating the redundant structure:\n\n```bash\ncurl -X PUT \\\n  'https://qti.alpha-1edtech.com/api/stimuli/stimulus-001' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"params\": {\n        \"identifier\": \"stimulus-001\" # Redundant Identifier 1\n    },\n    \"body\": {\n        \"identifier\": \"stimulus-001\", # Redundant Identifier 2\n        \"title\": \"Updated Stimulus Title\",\n        \"content\": \"&lt;p&gt;Updated content.&lt;/p&gt;\"\n    }\n}'\n```\"\n\n**Expected:** \n\"Following RESTful API design principles, the resource to be acted upon should be uniquely identified by the URL path. The request body should contain the new representation of that resource.\n\nThe `identifier` should be removed from the request body entirely. The server should rely exclusively on the `{identifier}` from the path to identify the stimulus to update. The request body schema (`Stimulus`) should not require the `identifier` for `PUT` operations, and the extraneous `params` wrapper should be removed.\n\nThe request body should be simplified to:\n```json\n{\n    \"title\": \"Updated Stimulus Title\",\n    \"content\": \"&lt;p&gt;Updated content.&lt;/p&gt;\"\n}\n```\"\n\n**Environment:** \"API Route: /stimuli/{identifier}\nLocal Spec: /stimuli/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: General API Design for QTI entity management\"\n**Additional Notes:** While not a direct violation of the QTI content specification itself, this is a significant flaw in the API that wraps the QTI functionality. It creates ambiguity: what should the server do if the three identifiers do not match? This can lead to unpredictable behavior and hard-to-debug errors on the client side. It violates the principle of a single source of truth and unnecessarily complicates the client implementation, forcing it to maintain and transmit redundant data. This increases the surface area for bugs and makes the API less robust and harder to use.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:44:14.850Z",
    "updatedAt": "2025-07-03T06:00:40.744Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-768/medium-redundant-identifier-required-in-put-stimuliidentifier-request"
  },
  {
    "id": "438db6d8-7679-4109-b2f6-0af9f856b676",
    "identifier": "BUG-767",
    "title": "MEDIUM: Inconsistent Property Naming Convention (camelCase vs. kebab-case)",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API uses two different naming conventions for QTI properties within the same JSON response. The top-level, \"friendly\" JSON representation uses `camelCase`, while the more literal `content` object (representing the XML) uses the `kebab-case` standard from the QTI specification.\n\n**Summary:** \nThe API uses two different naming conventions for QTI properties within the same JSON response. The top-level, \"friendly\" JSON representation uses `camelCase`, while the more literal `content` object (representing the XML) uses the `kebab-case` standard from the QTI specification.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the response schema for `GET /assessment-tests`.\n2. Note that the top-level JSON properties use `camelCase` (e.g., `navigationMode`, `submissionMode`, `baseType`).\n3. Now examine the nested `content` property, which represents the parsed XML.\n4. Note that the attributes inside `content` use `kebab-case` (e.g., `navigation-mode`, `submission-mode`, `base-type`), which aligns with the XML specification.\n5. This creates an inconsistent and confusing mapping between the simplified JSON model and the underlying QTI structure.\n\ncURL Command to demonstrate the issue:\n\n```bash\n# The JSON response from this command will exhibit the naming inconsistency.\ncurl -X GET 'https://qti.alpha-1edtech.com/api/assessment-tests/some-test-id' \\\n-H 'Authorization: Bearer $TOKEN'\n\n# Example Response Snippet:\n# {\n#   ...\n#   \"qti-test-part\": [{\n#     \"navigationMode\": \"linear\",  <-- camelCase\n#     ...\n#   }],\n#   \"content\": {\n#     \"qti-assessment-test\": {\n#       \"qti-test-part\": [{\n#         \"_attributes\": {\n#           \"navigation-mode\": \"linear\" <-- kebab-case\n#         }\n#       }]\n#     }\n#   }\n#   ...\n# }\n```\"\n\n**Expected:** \nA consistent naming convention should be adopted for the entire JSON payload to improve developer experience and predictability. The recommended approach would be to use `kebab-case` for all QTI-derived properties (e.g., `navigation-mode`, `submission-mode`, `base-type`) throughout the JSON response. This directly aligns the JSON representation with the QTI XML standard, reducing ambiguity and making the API feel like a more faithful implementation of QTI. While `camelCase` is common in JavaScript, using `kebab-case` reinforces the API's connection to the QTI specification.\n\n**Environment:** \"API Route: /assessment-tests\nLocal Spec: /assessment/tests.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: API Design and Developer Experience.\"\n**Additional Notes:** While not a direct violation of QTI content models (which are XML-based), this inconsistency creates a confusing and brittle API. Developers have to be aware of two different naming schemes for the same conceptual data. This increases cognitive load and the likelihood of programming errors. Adopting the spec's `kebab-case` would make the custom JSON abstraction a cleaner, more intuitive mirror of the underlying QTI data.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:43:16.507Z",
    "updatedAt": "2025-07-03T06:00:26.471Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-767/medium-inconsistent-property-naming-convention-camelcase-vs-kebab-case"
  },
  {
    "id": "26cbcffe-6169-49dd-b196-8d4c679a9a5a",
    "identifier": "BUG-766",
    "title": "MEDIUM: `cardinality` attribute not enforced as required for `qti-outcome-declaration`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The schema for `qti-outcome-declaration` within the `AssessmentTest` component does not mark `cardinality` as a required field. Although it has a `default` value of `single`, the API will accept payloads that omit this mandatory QTI attribute.\n\n**Summary:** \nThe schema for `qti-outcome-declaration` within the `AssessmentTest` component does not mark `cardinality` as a required field. Although it has a `default` value of `single`, the API will accept payloads that omit this mandatory QTI attribute.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Construct a JSON payload for a `PUT` request to `/assessment-tests/{identifier}`.\n2. Include a `qti-outcome-declaration` object in the payload.\n3. Omit the `cardinality` attribute from this object, providing only `identifier` and `baseType`.\n4. Send the request to the API.\n\nCURL command to reproduce:\n\n```bash\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/outcome-test\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"identifier\": \"outcome-test\",\n  \"title\": \"Test with Incomplete Outcome\",\n  \"qti-outcome-declaration\": [\n    {\n      \"identifier\": \"SCORE\",\n      \"baseType\": \"float\"\n      /* \"cardinality\" attribute is missing */\n    }\n  ],\n  \"qti-test-part\": [\n    ...\n  ]\n}'\n```\"\n\n**Expected:** \n\"The API should reject any `qti-outcome-declaration` that is missing the `cardinality` attribute with a `400 Bad Request` error. According to the QTI 3.0 specification, section **4.5.2 \"cardinality\" Characteristic Description**, this attribute is **required**. The specification states: \"The cardinality of a variable is the set of values it can take. This characteristic is required.\"\n\nWhile providing a default is helpful internally, an API that aims for strict QTI compliance should enforce the specification's constraints on its clients. This prevents ambiguity and ensures that data being imported into the system is explicit and complete. The `cardinality` should be added to the `required` array in the schema for `qti-outcome-declaration`.\"\n\n**Environment:** \"API Route: /assessment/tests/{identifier}\nLocal Spec: /assessment/tests/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Outcome processing and variable declaration\"\n**Additional Notes:** Lax validation of required fields can lead to interoperability issues. A system that exports QTI content might rely on the receiving system to validate the data. By accepting an incomplete declaration, the API is not holding up its end of the contract defined by the QTI specification. This can mask errors in upstream systems and lead to subtle bugs in outcome processing. Enforcing this requirement improves the robustness of the entire ecosystem.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:42:50.361Z",
    "updatedAt": "2025-07-03T06:00:03.395Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-766/medium-cardinality-attribute-not-enforced-as-required-for-qti-outcome"
  },
  {
    "id": "21ac87eb-21f8-41af-9732-792558d504fd",
    "identifier": "BUG-765",
    "title": "MEDIUM: Feedback Element Content Model is Oversimplified to a String",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The content of all feedback elements (`modalFeedback`, `feedbackInline`, `feedbackBlock`) is modeled as a simple string. This does not allow for any rich text formatting, images, tables, or other HTML elements.\n\n**Summary:** \nThe content of all feedback elements (`modalFeedback`, `feedbackInline`, `feedbackBlock`) is modeled as a simple string. This does not allow for any rich text formatting, images, tables, or other HTML elements.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the schema for `modalFeedback`, `feedbackInline`, or `feedbackBlock` in the response of the `/assessment-tests/{identifier}/questions` endpoint.\n2. Observe that the `content` property for each is defined as `type: string`.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \nThe QTI 3.0 specification defines the content of feedback elements using rich content models like `flowStatic`. This allows authors to create richly formatted feedback, including paragraphs, lists, images, and other HTML constructs. The API should model the `content` property as a structure capable of holding HTML (e.g., still a string, but with `format: html` to be explicit, or a more complex object model if desired) instead of an implicitly plain-text string. This ensures that formatting is preserved.\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** This simplification results in a loss of data fidelity. Authors cannot create richly formatted feedback, and systems cannot render it correctly. While the core feedback logic might work (showing/hiding based on outcomes), the presentation layer is severely crippled. This reduces the pedagogical value of the feedback that can be delivered through the platform.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:41:10.819Z",
    "updatedAt": "2025-07-03T05:59:44.934Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-765/medium-feedback-element-content-model-is-oversimplified-to-a-string"
  },
  {
    "id": "2a736858-0ab6-4bde-8a7c-65084cb5192f",
    "identifier": "BUG-764",
    "title": "AssessmentSection Schema Missing Standard `keep-together` Attribute",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The schema definition for `qti-assessment-section` in the local API specification does not include the `keep-together` attribute.\n\n**Summary:** \nThe schema definition for `qti-assessment-section` in the local API specification does not include the `keep-together` attribute.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make a successful call to `PUT /assessment-tests/{identifier}/metadata`.\n2. In the response, inspect the schema for the `qti-assessment-section` objects.\n3. Compare the available properties with the QTI 3.0 specification, Section 4.2 (\"AssessmentSection\" Root Class Description).\n4. Observe that the `keep-together` attribute (Section 4.2.7) is missing from the local API's schema.\n\nCURL command:\n\n```bash\n# A successful request to the endpoint will return a response with AssessmentSection objects that lack the 'keep-together' property.\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/TEST-001/metadata\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \"metadata\": {} }'\n```\"\n\n**Expected:** \nThe `AssessmentSection` schema should include the optional `keep-together` boolean attribute as defined in Section 4.2.7 of the QTI 3.0 specification. This attribute is a hint to the rendering engine that the content of the section should be presented without being split across pages or screens if possible. Omitting it means the API cannot fully represent or control the intended presentation of QTI content.\n\n**Environment:** \"API Route: /assessment/tests/{identifier}/metadata\nLocal Spec: /assessment/tests/{identifier}/metadata.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test Management\"\n**Additional Notes:** This omission is a deviation from the full QTI specification. While a `Medium` severity, it prevents content authors from controlling an important aspect of assessment presentation. A delivery system that receives data from this API will not have the information needed to honor the author's intent regarding section layout, potentially leading to a suboptimal or confusing candidate experience.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:40:24.993Z",
    "updatedAt": "2025-07-03T05:59:35.917Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-764/assessmentsection-schema-missing-standard-keep-together-attribute"
  },
  {
    "id": "80c70e78-4006-4a30-88a5-b964d2bd7420",
    "identifier": "BUG-763",
    "title": "Response Polluted with Non-Standard, Implementation-Specific Fields",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The response schema for an `AssessmentTest` includes several fields (`_id`, `__v`, `createdAt`, `updatedAt`) that are not defined in the QTI specification. These appear to be internal database fields (specifically from MongoDB) that have been exposed directly in the API response.\n\n**Summary:** \nThe response schema for an `AssessmentTest` includes several fields (`_id`, `__v`, `createdAt`, `updatedAt`) that are not defined in the QTI specification. These appear to be internal database fields (specifically from MongoDB) that have been exposed directly in the API response.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make any successful call to `PUT /assessment-tests/{identifier}/metadata`.\n2. Examine the root level of the `200 OK` JSON response body.\n3. Observe the presence of the fields `_id`, `__v`, `createdAt`, and `updatedAt`.\n4. Note that these fields are not part of the `AssessmentTest` information model described in the QTI 3.0 specification.\n\nCURL command:\n\n```bash\n# This request will return a response containing the non-standard fields.\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/ANY-TEST/metadata\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \"metadata\": {} }'\n```\"\n\n**Expected:** \nA pure QTI API should represent the `AssessmentTest` data model as defined in the specification. Implementation-specific details should not be mixed at the same level as standard QTI properties. If these fields must be exposed, they should be namespaced within a custom extension object, for example: `_providerExtensions: { mongoId: \"...\", version: 0, ... }`, to maintain a clear separation between the standard model and proprietary additions.\n\n**Environment:** \"API Route: /assessment/tests/{identifier}/metadata\nLocal Spec: /assessment/tests/{identifier}/metadata.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test Management\"\n**Additional Notes:** While common in custom APIs, exposing backend-specific fields in a standards-based API is poor practice. It couples clients to a specific implementation (MongoDB), pollutes the standard data model, and can cause naming conflicts with future versions of the QTI specification. This hinders the goal of creating a truly interoperable, implementation-agnostic QTI service.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:39:40.379Z",
    "updatedAt": "2025-07-03T12:25:41.565Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-763/response-polluted-with-non-standard-implementation-specific-fields"
  },
  {
    "id": "7b5e1226-e81e-4a76-89f4-18dcc2630760",
    "identifier": "BUG-762",
    "title": "MEDIUM: `testPart` Schema in GET Response Missing Standard QTI Child Elements",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** When retrieving a list of test parts, the API response only includes the most basic attributes. It omits other important child elements of a `testPart` defined in the QTI specification, such as those controlling time limits, branching, and rubrics for the entire part.\n\n**Summary:** \nWhen retrieving a list of test parts, the API response only includes the most basic attributes. It omits other important child elements of a `testPart` defined in the QTI specification, such as those controlling time limits, branching, and rubrics for the entire part.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `GET /.../test-parts` response schema.\n2. The object for each test part in the `items` array only contains `identifier`, `navigationMode`, `submissionMode`, and `qti-assessment-section`.\n3. Review the QTI specification for the `testPart` structure, which is a child of `assessmentTest` (see spec section `4.4.12`). A `testPart` can contain several other control elements.\n4. Note the absence of fields corresponding to `qti-time-limits`, `qti-rubric-block`, `qti-branch-rule`, and `qti-item-session-control`.\n\n`curl` command to retrieve the incomplete `testPart` objects:\n\n```bash\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/some-test-id/test-parts' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \nThe `GET` response for a test part should expose all its configured properties as defined in the QTI standard. The schema should be extended to include optional objects/fields for `timeLimits`, `rubricBlock`, `branchRule`, and `itemSessionControl` to give clients a complete view of the test part's configuration.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Test Part Management\"\n**Additional Notes:** While the core functionality of grouping sections is present, this omission prevents clients from reading or managing more advanced test part behaviors. A user would not be able to see if a time limit is applied to a test part, for example, which is a significant limitation for an assessment platform API. This forces clients to fall back to parsing the raw XML if available, defeating the purpose of a structured JSON API.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:38:45.915Z",
    "updatedAt": "2025-07-03T05:59:08.478Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-762/medium-testpart-schema-in-get-response-missing-standard-qti-child"
  },
  {
    "id": "49824ba4-8fee-4828-845e-1a5c5589ca7e",
    "identifier": "BUG-761",
    "title": "API response for `assessmentSection` exposes internal database identifier `_id`.",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API response for listing sections includes an `_id` field, which is explicitly documented as a MongoDB-specific internal database identifier.\n\n**Summary:** \nThe API response for listing sections includes an `_id` field, which is explicitly documented as a MongoDB-specific internal database identifier.\n\n**Steps to Reproduce:**\n\"1. Call the `GET /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections` endpoint.\n\n```bash\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-A/sections' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\n2. Observe the JSON response. Each object in the `items` array contains a field named `_id`.\n3. The description for this field in the OpenAPI specification is: \"MongoDB document ID generated by the database...\".\"\n\n**Expected:** \nThe API contract should be independent of the underlying database technology. The standard QTI `identifier` attribute (Section 4.2.1) is the designated unique identifier for interoperability and should be the only identifier exposed publicly for addressing the resource. Internal database keys like `_id` should not be part of the public API response.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** Exposing internal database identifiers is a form of implementation leakage. It tightly couples the API clients to a specific database technology (MongoDB), making future backend migrations more difficult. While not a direct violation of the QTI data model, it goes against best practices for building robust, interoperable, and secure APIs. The QTI `identifier` is sufficient for all public identification purposes.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:37:44.856Z",
    "updatedAt": "2025-07-03T12:25:41.574Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-761/api-response-for-assessmentsection-exposes-internal-database"
  },
  {
    "id": "cc65e25f-e107-4ab6-a554-ead8dc3684a9",
    "identifier": "BUG-760",
    "title": "QTI Compliance Violation: `assessmentSection` Schema Missing Core Attributes `class` and `keep-together`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API's `Section` model is missing two standard attributes defined in the QTI `assessmentSection` specification: `class` and `keep-together`.\n\n**Summary:** \nThe local API's `Section` model is missing two standard attributes defined in the QTI `assessmentSection` specification: `class` and `keep-together`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the JSON schema for the GET and PUT endpoints for a section.\n2. Observe that the properties `class` and `keep-together` are not defined in the schema.\n3. An attempt to set a `class` for styling or a `keep-together` rule for pagination on a section would fail.\n\nCurl command to demonstrate the missing fields in the response:\n\n```bash\n# This command retrieves an existing section.\n# The JSON response is missing the 'class' and 'keep-together' attributes.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/section-A' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\nThis bug affects content authoring and presentation workflows. Authors cannot apply shared CSS classes to sections for consistent styling (`class`), nor can they provide hints to the delivery system to prevent a section from being split across a page break (`keep-together`).\"\n\n**Expected:** \n\"According to the official QTI 3.0 specification for the `AssessmentSection` class, the model must support the following attributes:\n\n* `class` (Spec 4.2.5): A list of strings used for classification or applying styles from a stylesheet. This is a common and important mechanism for styling content.\n* `keep-together` (Spec 4.2.7): A boolean flag that indicates to the delivery system that the content of the section should be kept together on the screen where possible (e.g., avoiding a page break in the middle of the section).\n\nThe API schema should include these optional attributes to be fully compliant.\"\n\n**Environment:** \"API Route: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section Management\"\n**Additional Notes:** While the omission of these attributes may not break the most basic assessment delivery, it represents a clear violation of the specification and limits the richness of content authoring. The `class` attribute is particularly important for any implementation that uses stylesheets for rendering, which is a standard practice. The `keep-together` attribute is a key accessibility and usability feature for presentation. Their absence indicates an incomplete implementation of the QTI data model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:36:45.080Z",
    "updatedAt": "2025-07-03T05:59:35.445Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-760/qti-compliance-violation-assessmentsection-schema-missing-core"
  },
  {
    "id": "5a7414de-f6b5-4814-93b3-436fbcfe16ce",
    "identifier": "BUG-759",
    "title": "Medium: Ambiguous and Non-Standard `sequence` Attribute on `assessmentItemRef` and `Section` objects",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API introduces a custom, non-standard `sequence` attribute. Its placement is inconsistent: it is part of the item reference object in the request body, but part of the parent section object in the response. The description in the response is incorrect and refers to the item's sequence, not the section's.\n\n**Summary:** \nThe API introduces a custom, non-standard `sequence` attribute. Its placement is inconsistent: it is part of the item reference object in the request body, but part of the parent section object in the response. The description in the response is incorrect and refers to the item's sequence, not the section's.\n\n**Steps to Reproduce:**\n\"1. Examine the `requestBody` schema for the `POST .../items` endpoint. Note the presence of a `sequence` property of type integer.\n2. Examine the `201` response schema for the same endpoint. Note the presence of a `sequence` property, also of type integer, but at the top level of the returned `Section` object, not on the individual item references.\n3. Read the description for the `sequence` property in the response: \"Defines the sequential order of this item within its parent section.\" This description is contradictory, as the property is on the section, not the item.\n4. Search the QTI 3.0 specification (Sections 4.2 for `AssessmentSection` and 5.6 for `AssessmentItemRef`) for a `sequence` attribute. None exists.\n\ncURL to demonstrate:\n\n```bash\n# This request body is valid per the local spec but uses a non-standard attribute\ncurl -X POST \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-123/test-parts/part-abc/sections/section-xyz/items' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"identifier\": \"item-id-456\",\n    \"href\": \"/assessment-items/item-id-456\",\n    \"sequence\": 1 \n  }'\n```\"\n\n**Expected:** \nThe API introduces a custom, non-standard `sequence` attribute. Its placement is inconsistent: it is part of the item reference object in the request body, but part of the parent section object in the response. The description in the response is incorrect and refers to the item's sequence, not the section's.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier/sections/{identifier}/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment authoring and item ordering.\"\n**Additional Notes:** This inconsistency introduces significant confusion for API consumers. A developer would not know whether to look for `sequence` on the section or the item, and the incorrect description in the response schema actively misleads them. While not a direct violation of a required QTI feature, this poor implementation of a custom extension can lead to bugs and interoperability problems with clients built against this API. It indicates a lack of rigor in the API design.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:35:39.677Z",
    "updatedAt": "2025-07-03T12:20:08.539Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-759/medium-ambiguous-and-non-standard-sequence-attribute-on"
  },
  {
    "id": "2dd1e7e5-63b5-4728-b684-671347ae5556",
    "identifier": "BUG-758",
    "title": "MEDIUM: Response Includes Implementation-Specific `_id` Field",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `200 OK` response for the updated section includes a field named `_id`, described as a \"MongoDB document ID\". This field is a database-specific internal identifier from the service provider's backend.\n\n**Summary:** \nThe `200 OK` response for the updated section includes a field named `_id`, described as a \"MongoDB document ID\". This field is a database-specific internal identifier from the service provider's backend.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Send a `PUT` request to the item reordering endpoint.\n2. Observe the `200 OK` JSON response.\n3. Note the presence of an `_id` field at the top level of the JSON object, which is marked as a required field in the response schema.\n\n`curl` command:\n\n```bash\ncurl -X PUT \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/math-section-1/items/order' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"items\": [\n        { \"identifier\": \"item-002\" },\n        { \"identifier\": \"item-001\" }\n    ]\n}'\n```\"\n\n**Expected:** \nA QTI-compliant API should expose data according to the QTI information model, not its internal database schema. The official unique identifier for any QTI element is the `identifier` attribute (per spec section 4.2.1 for `AssessmentSection`). Exposing backend-specific identifiers like a MongoDB `_id` leaks implementation details, couples the client to a specific database technology, and pollutes the clean, interoperable data model that QTI aims to provide. The response should not contain the `_id` field.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/order\nLocal Spec: local_spec_for_route\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Section Management\"\n**Additional Notes:** While this may not break immediate functionality for a tightly-coupled client, it is poor API design and a significant barrier to true interoperability. A different system attempting to consume this API would have to handle and then ignore this proprietary field. The canonical QTI identifier is the only one that should be used for entity referencing across systems.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:34:55.283Z",
    "updatedAt": "2025-07-03T12:25:40.665Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-758/medium-response-includes-implementation-specific-id-field"
  },
  {
    "id": "7b961293-a84a-40f9-af01-91aabf4f3312",
    "identifier": "BUG-757",
    "title": "Inconsistent Path Naming: Plural Segment `/test-parts/` Deviates from Singular QTI `TestPart` Model",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API specification uses the path segment `/test-parts/` to address a single `TestPart` resource. The QTI 3.0 specification consistently names this model entity in the singular form, `TestPart`. While using plural nouns for collections is a common REST pattern (e.g., `GET /test-parts`), using it as the identifier for a single member of that collection (`.../test-parts/{id}`) is inconsistent with the domain language defined by the QTI specification.\n\n**Summary:** \nThe local API specification uses the path segment `/test-parts/` to address a single `TestPart` resource. The QTI 3.0 specification consistently names this model entity in the singular form, `TestPart`. While using plural nouns for collections is a common REST pattern (e.g., `GET /test-parts`), using it as the identifier for a single member of that collection (`.../test-parts/{id}`) is inconsistent with the domain language defined by the QTI specification.\n\n**Steps to Reproduce:**\n\"This is an API design and consistency bug, reproducible by reviewing the spec.\n\n1. Examine the API path: `/assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/...`.\n2. Note the segment `test-parts` is plural.\n3. The parameter `{testPartIdentifier}` identifies a single `TestPart` instance.\n4. Review the QTI 3.0 specification, which consistently refers to the entity as `TestPart` (singular) as a child of `AssessmentTest` (e.g., Section 4.4.12 `qti-test-part`).\n\nThe path segment `test-parts/{id}` uses a plural noun to identify a singular resource, which is inconsistent with the QTI domain model's terminology.\"\n\n**Expected:** \n\"An API that implements a specification should strive to use the terminology of that specification to provide a clear and predictable developer experience. The path segment should align with the QTI `TestPart` model.\n\nA more consistent and less ambiguous path structure would be:\n`/assessment-tests/{id}/testParts/{id}` (using camelCase singular for the resource)\nor if the plural convention is strictly enforced for collections:\n`.../testParts/{testPartIdentifier}` (where the collection is `testParts`, not `test-parts`)\n\nThis change improves consistency with the source specification (Section 4.4 \"AssessmentTest\" and its `qti-test-part` attribute) and makes the API more intuitive for those versed in QTI.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Test Part Management\"\n**Additional Notes:** While this may be seen as a stylistic choice, it represents a deviation from the Ubiquitous Language of the QTI domain. For a specialized, technical standard like QTI, adhering to its specific terminology in the API contract is crucial for interoperability and ease of adoption. This inconsistency adds cognitive load for developers who must mentally map the API's terminology back to the official specification's terms.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:33:38.981Z",
    "updatedAt": "2025-07-03T12:04:45.667Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-757/inconsistent-path-naming-plural-segment-test-parts-deviates-from"
  },
  {
    "id": "e6a0f574-5ffd-4de1-9691-308cd009cc56",
    "identifier": "BUG-756",
    "title": "MEDIUM: Schema Includes Non-Standard, Implementation-Specific Fields (`_id`, `sequence`)",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `assessmentSection` schema returned by the API is polluted with two fields that are not part of the QTI specification: `_id` (an internal database key) and `sequence` (a proprietary ordering mechanism). Exposing internal implementation details like a MongoDB ID violates abstraction principles. Adding a `sequence` attribute deviates from the QTI standard, which uses XML document order to determine sequence.\n\n**Summary:** \nThe `assessmentSection` schema returned by the API is polluted with two fields that are not part of the QTI specification: `_id` (an internal database key) and `sequence` (a proprietary ordering mechanism). Exposing internal implementation details like a MongoDB ID violates abstraction principles. Adding a `sequence` attribute deviates from the QTI standard, which uses XML document order to determine sequence.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `GET` response schema for `qti-assessment-section`.\n2. Observe the presence of the `_id` field, described as a \"MongoDB document ID\".\n3. Observe the presence of the `sequence` field, an integer to define order.\n4. Search the official QTI 3.0 specification for `assessmentSection` (Section 4.2). Neither `_id` nor `sequence` are standard attributes.\n\ncURL command to retrieve non-standard fields:\n\n```bash\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/history101/test-parts/midterm' \\\n  -H 'Authorization: Bearer $TOKEN'\n# Expected response fragment for a section:\n# { \"_id\": \"60c7c9e1c9d4a4a1f8e1e1e1\", \"identifier\": \"s1\", \"sequence\": 1, ... }\n```\"\n\n**Expected:** \n\"An API implementing a standard like QTI should return a data model that is as pure an implementation of that standard as possible to ensure interoperability.\n1.  Internal database identifiers (`_id`) should not be exposed in the public API response model. The QTI `identifier` is the correct, interoperable way to uniquely identify an entity.\n2.  The `sequence` attribute should be removed. The order of elements in the `qti-assessment-section` array should be considered the canonical order, as is standard practice in QTI XML. Systems consuming this data should rely on array order, not a proprietary `sequence` field.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section Data Model\"\n**Additional Notes:** This deviation harms interoperability. A system built strictly to the QTI specification would not know to look for a `sequence` field and would process sections in the order they appear in the array. If the `sequence` field were the true source of ordering, the test would be interpreted incorrectly by a compliant system. Exposing the `_id` is a data leak of the underlying technology stack and couples clients to a specific database implementation, which is poor API design.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:32:41.164Z",
    "updatedAt": "2025-07-03T12:20:08.610Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-756/medium-schema-includes-non-standard-implementation-specific-fields-id"
  },
  {
    "id": "17ef1766-37ad-498b-9106-a6c4751fb7b7",
    "identifier": "BUG-755",
    "title": "MEDIUM: Inconsistent JSON Property Naming Convention (camelCase vs kebab-case)",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API uses two different naming conventions for the same QTI attributes. The `GET` endpoint returns a simplified JSON object with camelCase properties (`navigationMode`). The `PUT` endpoint, however, returns a structure that mimics the QTI XML, using kebab-case (`navigation-mode`). This inconsistency makes the API unpredictable and harder to work with for client developers.\n\n**Summary:** \nThe API uses two different naming conventions for the same QTI attributes. The `GET` endpoint returns a simplified JSON object with camelCase properties (`navigationMode`). The `PUT` endpoint, however, returns a structure that mimics the QTI XML, using kebab-case (`navigation-mode`). This inconsistency makes the API unpredictable and harder to work with for client developers.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Inspect the `GET` response schema for `/assessment-tests/.../test-parts/{identifier}`. Notice the properties `navigationMode` and `submissionMode` use camelCase.\n2. Inspect the `PUT` success response (`200 OK`) schema for the same route. Inside `content['qti-test-part']._attributes`, the corresponding properties are `navigation-mode` and `submission-mode`, using kebab-case.\n3. The official QTI XML specification uses kebab-case for all attributes (e.g., `navigation-mode`).\n\ncURL command to demonstrate:\n\n```bash\n# The GET response uses camelCase\ncurl -X GET 'https://qti.alpha-1edtech.com/api/assessment-tests/math101/test-parts/part1' -H 'Authorization: Bearer $TOKEN'\n# Expected response fragment: { \"navigationMode\": \"linear\", ... }\n\n# A successful PUT response would contain kebab-case\n# Response fragment: { \"content\": { \"qti-test-part\": { \"_attributes\": { \"navigation-mode\": \"linear\" } } } }\n```\"\n\n**Expected:** \nAn API should be consistent in its data representation. The local implementation should choose one naming convention and apply it everywhere. Given that QTI is an XML-based standard that uses kebab-case, the most compliant and consistent approach would be to use kebab-case for all JSON properties that map to QTI attributes. For example, the `GET` response schema should use `navigation-mode` and `submission-mode` instead of `navigationMode` and `submissionMode`.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: API Design and Data Modeling\"\n**Additional Notes:** While not a direct violation of a specific QTI content rule, this inconsistency signals a flawed mapping between the QTI XML model and the API's JSON representation. It creates a poor developer experience and can lead to bugs in client applications that have to handle both conventions. For a specification focused on interoperability, such internal inconsistencies are a significant design flaw that undermines the goal of predictable data exchange.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:31:18.425Z",
    "updatedAt": "2025-07-03T06:00:25.749Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-755/medium-inconsistent-json-property-naming-convention-camelcase-vs-kebab"
  },
  {
    "id": "d1e8b2d5-1f6d-4d2b-88f9-78b6aa2d87b6",
    "identifier": "BUG-754",
    "title": "Medium Severity: `assessmentItem` Schema is Missing Standard Informational Attributes",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API's `AssessmentItem` model omits several standard attributes from the QTI `assessmentItem` class. Important metadata fields for authoring tool identification (`toolName`, `toolVersion`), internal labeling (`label`), and language specification (`language`) are not supported.\n\n**Summary:** \nThe local API's `AssessmentItem` model omits several standard attributes from the QTI `assessmentItem` class. Important metadata fields for authoring tool identification (`toolName`, `toolVersion`), internal labeling (`label`), and language specification (`language`) are not supported.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the top-level properties of the `AssessmentItem` schema in the local spec.\n2. Compare these properties against the attributes of the `assessmentItem` class in the QTI 3.0 specification, Section 4.1.\n3. Note the absence of `label`, `xml:lang` (or a JSON equivalent like `language`), `toolName`, and `toolVersion` at the item's root level.\"\n\n**Expected:** \n\"To be fully compliant and interoperable, the `AssessmentItem` schema should include properties that map to the standard QTI attributes. The schema should be extended to include:\n\n* `label`: A string for an internal label.\n* `language`: An optional string specifying the primary language of the item (e.g., \"en-US\"), mapping to `xml:lang`.\n* `toolName`: A string to identify the authoring tool.\n* `toolVersion`: A string for the authoring tool's version.\n\nThese fields provide crucial context about the item's origin and intended use, as defined in QTI 3.0 Spec Section 4.1.\"\n\n**Environment:** \"API Route: /assessment/items\nLocal Spec: /assessment/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item Management\"\n**Additional Notes:** While the absence of these fields may not break the core rendering of an item, it represents a loss of important metadata. This hinders content management, tracking, and diagnostics. For example, knowing which `toolName` created an item can be vital for debugging rendering issues. This is a significant gap in achieving full QTI compliance.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:28:28.137Z",
    "updatedAt": "2025-07-03T12:54:20.441Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-754/medium-severity-assessmentitem-schema-is-missing-standard"
  },
  {
    "id": "45719c9b-ba72-4fdc-8a18-1fc109738efa",
    "identifier": "BUG-753",
    "title": "MEDIUM - API design prevents creation of composite items with multiple interactions",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API uses a top-level `type` field and a single `interaction` object to define an item's question, which structurally enforces that an `assessmentItem` can only have one interaction. This is a deviation from the QTI specification, where an `itemBody` can contain a mix of content and multiple interaction elements.\n\n**Summary:** \nThe API uses a top-level `type` field and a single `interaction` object to define an item's question, which structurally enforces that an `assessmentItem` can only have one interaction. This is a deviation from the QTI specification, where an `itemBody` can contain a mix of content and multiple interaction elements.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Analyze the API's authoring model. Note the top-level `type` property on the `assessmentItem` (e.g., \"choice\", \"text-entry\").\n2. Note the `interaction` object in the examples, which defines a single interaction.\n3. This design implies a one-to-one relationship between an assessment item and an interaction.\n4. Review the QTI specification (Section 4.1.18, `qti-item-body`). The `itemBody` can contain multiple interaction elements (e.g., `qti-text-entry-interaction` followed by a `qti-choice-interaction`).\n5. The API's design does not provide a way to specify more than one interaction for a single item.\"\n\n**Expected:** \nThe API design should be refactored to align with the QTI content model. Instead of a single top-level `type` and `interaction` object, the API should model the `itemBody`. A more compliant design might involve an `itemBody` field which is an array of objects, where each object can be a block of content (like a paragraph) or an interaction object. This would allow authors to create composite items with multiple interactions as supported by the QTI specification.\n\n**Environment:** \"API Route: /assessment/items/{identifier}\nLocal Spec: /assessment/items/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation, Section 4.1.18\nQTI Context: Assessment Item authoring, composite items\"\n**Additional Notes:** While many assessment items have only one interaction, the ability to create composite items is a key feature of QTI. For example, an item could present a passage of text and then ask multiple, different types of questions about it within the same item scope. The current API design makes this impossible, limiting the pedagogical and assessment strategies that can be implemented.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:27:17.026Z",
    "updatedAt": "2025-07-03T05:57:31.735Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-753/medium-api-design-prevents-creation-of-composite-items-with-multiple"
  },
  {
    "id": "a01b5f3e-6712-4660-b115-2d7e5e225f28",
    "identifier": "BUG-752",
    "title": "Incorrect Cardinality for `stylesheet` Property Violates QTI Specification",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API defines the `stylesheet` property as a single object. This incorrectly implies that a QTI stimulus can only be associated with a single external stylesheet.\n\n**Summary:** \nThe local API defines the `stylesheet` property as a single object. This incorrectly implies that a QTI stimulus can only be associated with a single external stylesheet.\n\n**Steps to Reproduce:**\n\"**Human-Readable Steps:**\n\n1. Analyze the `stylesheet` property in both the `GET /stimuli` response schema and the `POST /stimuli` request schema (`#/components/schemas/Stimulus`).\n2. Note that the `stylesheet` property is defined as `type: object`.\n3. Compare this to the QTI 3.0 specification, Section 4.3.8 \"qti-stylesheet\".\n\n**cURL Command (Illustrative):**\nThis request would fail or be misinterpreted by a strictly compliant QTI system, which expects the possibility of multiple stylesheets. The local API incorrectly restricts this to one.\n\n```bash\n# This request is valid against the local spec but non-compliant with QTI's cardinality rules\ncurl -X POST 'https://qti.alpha-1edtech.com/api/stimuli' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"identifier\": \"stimulus-124\",\n  \"title\": \"Stimulus with Single Stylesheet\",\n  \"content\": \"<p>Some stimulus content.</p>\",\n  \"stylesheet\": {\n    \"href\": \"https://example.com/style.css\",\n    \"type\": \"text/css\"\n  }\n}'\n```\n\nThere is no way to specify a second stylesheet.\"\n\n**Expected:** \n\"According to the official QTI 3.0 specification, Section 4.3.8 (\"qti-stylesheet\" Attribute Description), a `qti-assessment-stimulus` can contain **zero or more** `qti-stylesheet` elements. The specification states: \"The set of external style sheets that are associated with the Stimulus. The order of definition is significant.\"\n\nTo comply with this, the `stylesheet` property in the API schema must be an array of objects, not a single object.\n\nCorrect schema definition:\n\n```yaml\nstylesheet:\n  type: array\n  items:\n    type: object\n    properties:\n      href:\n        type: string\n      type:\n        type: string\n    required:\n      - href\n      - type\n```\"\n\n**Environment:** \"API Route: /stimuli\nLocal Spec: /stimuli.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: AssessmentStimulus content model definition.\"\n**Additional Notes:** This bug imposes an artificial limitation that directly contradicts the QTI specification. It prevents authors from using multiple stylesheets, which is a common practice for separating structural, thematic, and print-specific styles. This is a significant deviation from the standard that limits functionality and harms interoperability with other QTI systems that correctly support multiple stylesheets.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:25:42.712Z",
    "updatedAt": "2025-07-03T23:20:27.409Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-752/incorrect-cardinality-for-stylesheet-property-violates-qti"
  },
  {
    "id": "8893cc4d-3e1e-4661-bfb2-6475c866d042",
    "identifier": "BUG-751",
    "title": "High: Incorrect Data Model for `catalogInfo` Misrepresents QTI Hierarchy",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local specification defines `catalogInfo` as a flattened array of objects. Each object in the array combines the `id` from the parent `qti-catalog` element with the `support` and `content` from a child `qti-card` element. This incorrectly assigns the catalog's unique identifier to each individual card within it.\n\n**Summary:** \nThe local specification defines `catalogInfo` as a flattened array of objects. Each object in the array combines the `id` from the parent `qti-catalog` element with the `support` and `content` from a child `qti-card` element. This incorrectly assigns the catalog's unique identifier to each individual card within it.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Call `GET /stimuli/{identifier}` for a stimulus that has accessibility catalog information.\n2. Observe the `catalogInfo` property in the JSON response.\n3. It is a flat array of objects, where each object contains `id`, `support`, and `content`.\n\ncURL command to demonstrate the issue:\n\n```bash\n# This command retrieves a stimulus and shows the problematic catalogInfo structure.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/stimuli/stimulus-with-catalog' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\nThe response will contain a structure like this:\n\n```json\n\"catalogInfo\": [\n  {\n    \"id\": \"CATALOG-01\",\n    \"support\": \"braille\",\n    \"content\": \"...\"\n  }\n]\n```\n\nThis is incorrect because the `id` \"CATALOG-01\" belongs to the catalog, not the individual \"braille\" card.\"\n\n**Expected:** \n\"The QTI 3.0 Specification, Section **4.3.10 \"qti-catalog-info\" Attribute Description**, defines a clear hierarchy. A `qti-catalog-info` contains one or more `qti-catalog` elements. Each `qti-catalog` has a unique `id` and contains one or more `qti-card` elements. Each `qti-card` defines a specific `support`.\n\nThis hierarchical relationship (Catalog -> has many Cards) is lost in the flattened implementation. The API's JSON model should reflect this structure to be accurate. A correct implementation might look like this, preserving the one-to-many relationship:\n\n```json\n\"catalogInfo\": [\n  {\n    \"id\": \"CATALOG-01\",\n    \"cards\": [\n      {\n        \"support\": \"braille\",\n        \"content\": \"Braille content here.\"\n      },\n      {\n        \"support\": \"ASL\",\n        \"content\": \"Link to ASL video.\"\n      }\n    ]\n  }\n]\n```\n\nThe current implementation makes it impossible to represent a single catalog that contains multiple cards for different accessibility supports, which is a key feature of the QTI specification.\"\n\n**Environment:** \"API Route: /stimuli/{identifier}\nLocal Spec: /stimuli/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: AssessmentStimulus accessibility features\"\n**Additional Notes:** This bug represents a significant misinterpretation of the QTI accessibility data model. While it may function for simple cases (one catalog with one card), it fundamentally breaks when a content author defines a single catalog of, for example, \"American Sign Language\" resources (`id=\"asl-resources\"`) that contains multiple cards for different parts of the stimulus (`support=\"asl-for-paragraph-1\"`, `support=\"asl-for-image-caption\"`). The current API model cannot represent this valid QTI structure, leading to data loss and a failure to deliver critical accessibility accommodations.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:24:17.182Z",
    "updatedAt": "2025-07-03T05:57:03.085Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-751/high-incorrect-data-model-for-cataloginfo-misrepresents-qti-hierarchy"
  },
  {
    "id": "6ef20775-9fb1-4123-a577-7bd6e19e9f34",
    "identifier": "BUG-750",
    "title": "HIGH: Missing Core Configuration Attributes and Elements in AssessmentTest Schema",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `AssessmentTest` schema in the local API is missing several important child elements defined in the QTI specification. These elements are used for styling, providing instructions (rubrics), defining test-level feedback, and specifying outcome processing rules.\n\n**Summary:** \nThe `AssessmentTest` schema in the local API is missing several important child elements defined in the QTI specification. These elements are used for styling, providing instructions (rubrics), defining test-level feedback, and specifying outcome processing rules.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the response schema for `GET /assessment-tests` and the request schema for `POST /assessment-tests`.\n2. Compare the top-level properties of the `AssessmentTest` object with the QTI 3.0 specification, Section 4.4 \"AssessmentTest\" Root Class Description.\n3. Note the absence of several configuration elements like `qti-stylesheet`, `qti-rubric-block`, and `qti-outcome-processing`.\n\ncURL Command to demonstrate the issue:\nThis is a schema definition bug. The API does not provide a way to specify these standard QTI elements.\n\n```bash\n# This GET request will return assessment tests that do not, and cannot,\n# contain standard QTI elements like qti-stylesheet or qti-test-feedback.\ncurl -X GET 'https://qti.alpha-1edtech.com/api/assessment-tests' \\\n-H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \n\"The `AssessmentTest` schema must be updated to support all the elements defined in QTI 3.0 Spec Section 4.4. The primary missing elements and attributes are:\n- `class` (4.4.3): An attribute for classifying the test.\n- `qti-stylesheet` (4.4.10): For linking external CSS stylesheets to control presentation.\n- `qti-rubric-block` (4.4.11): For providing overall instructions to the candidate.\n- `qti-outcome-processing` (4.4.13): For defining rules to aggregate scores and calculate final outcomes *after* test parts are complete.\n- `qti-test-feedback` (4.4.14): For providing feedback to the candidate based on the overall test result.\n\nOmitting these elements prevents authors from controlling the visual presentation, providing instructions, or defining summative scoring and feedback rules in a standard, interoperable way.\"\n\n**Environment:** \"API Route: /assessment-tests\nLocal Spec: /assessment/tests.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Overall assessment test authoring, styling, and results processing.\"\n**Additional Notes:** The absence of `qti-outcome-processing` is particularly severe, as it's the standard mechanism for calculating the final score from the outcomes of individual items and sections. Without it, the system must be using a proprietary, non-standard method for score aggregation, which breaks QTI compliance. The lack of stylesheet and rubric support hinders the creation of professionally formatted and user-friendly assessments.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:23:26.029Z",
    "updatedAt": "2025-07-03T23:20:27.800Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-750/high-missing-core-configuration-attributes-and-elements-in"
  },
  {
    "id": "4b4cfcc0-ae16-432c-8106-25d9f80b866b",
    "identifier": "BUG-749",
    "title": "HIGH: Incomplete QTI OutcomeDeclaration Schema Lacks Key Scoring and Interpretation Attributes",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `OutcomeDeclaration` schema is missing several attributes and a child element that are part of the official QTI specification. These missing fields are used to provide context about how an outcome variable should be interpreted, used, and scored.\n\n**Summary:** \nThe `OutcomeDeclaration` schema is missing several attributes and a child element that are part of the official QTI specification. These missing fields are used to provide context about how an outcome variable should be interpreted, used, and scored.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the schema for `qti-outcome-declaration` in both the GET response and the POST request body (`components.schemas.AssessmentTest`).\n2. Observe that the schema only includes `identifier`, `cardinality`, `baseType`, `normalMaximum`, `normalMinimum`, and `defaultValue`.\n3. Compare this against the QTI 3.0 specification, Section 4.5 \"OutcomeDeclaration\" Root Class Description.\n4. Note the numerous missing attributes related to score interpretation, views, and lookup tables.\n\ncURL Command to demonstrate the issue:\n\n```bash\n# A POST request to create a test. The qti-outcome-declaration object\n# does not support standard QTI attributes like 'interpretation' or 'mastery-value'.\ncurl -X POST 'https://qti.alpha-1edtech.com/api/assessment-tests' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"identifier\": \"test-with-incomplete-outcomes\",\n  \"title\": \"Test with Incomplete Outcomes\",\n  \"qti-outcome-declaration\": [{\n    \"identifier\": \"SCORE\",\n    \"cardinality\": \"single\",\n    \"baseType\": \"float\",\n    \"interpretation\": \"score\" // This field is not in the local spec and would fail validation or be ignored.\n  }],\n  \"qti-test-part\": [...]\n}'\n```\"\n\n**Expected:** \n\"The `OutcomeDeclaration` schema should be updated to include all attributes and children from the QTI 3.0 spec (Section 4.5):\n- **Missing Attributes:**\n  - `view` (4.5.4): Describes who can see the variable's value.\n  - `interpretation` (4.5.5): A machine-readable string describing the variable's purpose (e.g., \"score\", \"norm-referenced score\").\n  - `long-interpretation` (4.5.6): A URI pointing to a longer human-readable description.\n  - `mastery-value` (4.5.9): A value indicating the cutoff for mastery.\n  - `external-scored` (4.5.10): Indicates if the variable is scored by an external engine.\n- **Missing Child Element:**\n  - `lookupTable` (4.5.13): A powerful feature for mapping discrete values to outcomes, essential for complex scoring rubrics.\n\nThe absence of these makes it difficult for consuming systems to properly interpret scores and apply grading policies.\"\n\n**Environment:** \"API Route: /assessment-tests\nLocal Spec: /assessment/tests.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment scoring, results processing, and interpretation.\"\n**Additional Notes:** While basic scoring might work, this deviation prevents the implementation of more advanced scoring models. The `interpretation` attribute is key for interoperability, allowing other systems to understand the *meaning* of a score. The `lookupTable` is a fundamental tool for non-linear scoring. Omitting these features severely restricts the platform's scoring capabilities and its compliance with the QTI standard.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:22:32.689Z",
    "updatedAt": "2025-07-03T23:20:27.913Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-749/high-incomplete-qti-outcomedeclaration-schema-lacks-key-scoring-and"
  },
  {
    "id": "6e7c81fb-481d-4fc6-a8f9-921889acd644",
    "identifier": "BUG-748",
    "title": "HIGH: Non-standard `sequence` attribute on `assessmentSection`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `assessmentSection` model in the local API specification includes a custom `sequence` attribute, presumably for ordering. This field is not defined anywhere in the official QTI 3.0 specification for an `assessmentSection`.\n\n**Summary:** \nThe `assessmentSection` model in the local API specification includes a custom `sequence` attribute, presumably for ordering. This field is not defined anywhere in the official QTI 3.0 specification for an `assessmentSection`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `Section` schema in the `components` section.\n2. Note the presence of a `sequence` property of type `integer`.\n3. Call the `GET /assessment-tests/{identifier}` endpoint and observe the non-standard `sequence` field in the response for each section.\n\nCURL command to demonstrate (PUT):\n\n```bash\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/sequenced-test\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"identifier\": \"sequenced-test\",\n  \"title\": \"A Test with Sequenced Sections\",\n  \"qti-test-part\": [{\n      \"identifier\": \"part1\",\n      \"navigationMode\": \"linear\",\n      \"submissionMode\": \"individual\",\n      \"qti-assessment-section\": [{\n          \"identifier\": \"section1\",\n          \"title\": \"First Section\",\n          \"visible\": true,\n          \"sequence\": 1 /* Non-standard attribute */\n      },{\n          \"identifier\": \"section2\",\n          \"title\": \"Second Section\",\n          \"visible\": true,\n          \"sequence\": 2 /* Non-standard attribute */\n      }]\n  }]\n}'\n```\"\n\n**Expected:** \n\"The `sequence` attribute must be removed from the `assessmentSection` model. In QTI, the order of elements such as test parts, sections, and item references is determined by their **document order**. In an XML context, this is the physical order in which the elements appear. In a JSON context, this maps directly to the order of objects within an array.\n\nIntroducing a separate `sequence` number is redundant and non-standard. It creates a potential conflict if the `sequence` number contradicts the array order, leading to ambiguity. To reorder sections, a client should `PUT` the entire test with the `qti-assessment-section` array in the new desired order. The API should always treat the array order as the source of truth for sequencing.\"\n\n**Environment:** \"API Route: /assessment/tests/{identifier}\nLocal Spec: /assessment/tests/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment structure and sequencing\"\n**Additional Notes:** This deviation introduces a proprietary ordering mechanism that breaks QTI's reliance on standard XML/JSON structure for sequencing. A QTI-compliant authoring tool would have no knowledge of this `sequence` field and would rely on array ordering. An assessment engine consuming data from this API would have to choose between the array order and the `sequence` field, leading to unpredictable behavior. This proprietary extension hinders interoperability and should be removed in favor of the standard mechanism.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:21:28.505Z",
    "updatedAt": "2025-07-03T12:18:43.092Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-748/high-non-standard-sequence-attribute-on-assessmentsection"
  },
  {
    "id": "a5596b53-1a5b-42bc-a96a-214f66e69b5f",
    "identifier": "BUG-747",
    "title": "HIGH: Non-standard `maxAttempts` attribute on `assessmentTest`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API specification for `assessmentTest` includes a top-level attribute `maxAttempts`. This attribute is present in both the `GET` response and the `PUT` request body schema.\n\n**Summary:** \nThe local API specification for `assessmentTest` includes a top-level attribute `maxAttempts`. This attribute is present in both the `GET` response and the `PUT` request body schema.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the `AssessmentTest` schema in the `components` section, used for `PUT` requests.\n2. Observe the presence of the `maxAttempts` property.\n3. Call the `GET /assessment-tests/{identifier}` endpoint and observe `maxAttempts` in the response.\n\nCURL command to demonstrate:\n\n```bash\n# This GET request returns a non-standard field\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \n\"The `maxAttempts` attribute should be removed from the `assessmentTest` model. This attribute is not part of the **QTI 3.0 specification** for the `assessmentTest` class (see section 4.4). While this attribute existed in QTI 2.x, it was deprecated and removed in version 3.0.\n\nIn QTI 3.0, attempt-related controls are managed by the `itemSessionControl` element (spec section 4.2.11), which can be applied at the `assessmentSection` or `assessmentItemRef` level. This provides more granular control over attempts. Including a test-level `maxAttempts` is a significant deviation that will cause confusion and interoperability failures with compliant QTI 3.0 systems.\"\n\n**Environment:** \"API Route: /assessment/tests/{identifier}\nLocal Spec: /assessment/tests/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test session control\"\n**Additional Notes:** This bug suggests that the implementation may be based on an outdated understanding of the QTI specification or is mixing concepts from different versions. To be compliant, the API must not expose or accept this non-standard attribute. If the functionality is required, it must be implemented using the correct QTI 3.0 mechanism, `itemSessionControl`, which provides attributes like `max-attempts` and `show-feedback`.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:21:04.365Z",
    "updatedAt": "2025-07-03T12:49:08.930Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-747/high-non-standard-maxattempts-attribute-on-assessmenttest"
  },
  {
    "id": "36b256da-1faa-42d7-8185-49949fcdec5b",
    "identifier": "BUG-746",
    "title": "HIGH: Non-Standard `type` Field on Assessment Item Model",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API response for an assessment item includes a top-level `type` field with an enum of interaction types. This field is used to classify the entire item.\n\n**Summary:** \nThe API response for an assessment item includes a top-level `type` field with an enum of interaction types. This field is used to classify the entire item.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make a GET request to the `/assessment-tests/{identifier}/questions` endpoint.\n2. Observe the `type` field within any of the returned `question` objects (e.g., \"choice\", \"text-entry\").\n3. This field is a proprietary abstraction not found in the QTI specification for an `assessmentItem`.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \nThe QTI 3.0 specification does not have a \"type\" attribute on the `assessmentItem` itself. An item's \"type\" is determined by the specific `qti-*Interaction` element(s) found within its `qti-item-body`. An item can even contain multiple different interaction types (a composite item). A single top-level `type` property is an oversimplification that cannot represent composite items and is non-compliant with the QTI model. The type should be inferred by clients from the `qti-item-body` content.\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** While intended as a convenience, this proprietary field promotes a non-standard and inaccurate view of the QTI data model. It breaks the ability to represent composite items and forces a one-item-one-interaction-type paradigm which is not required by QTI. This can lead to interoperability problems when exchanging data with other QTI-compliant systems.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:19:22.676Z",
    "updatedAt": "2025-07-03T12:54:20.449Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-746/high-non-standard-type-field-on-assessment-item-model"
  },
  {
    "id": "6253248a-7834-4331-8995-40a7de96785a",
    "identifier": "BUG-745",
    "title": "HIGH: `feedbackInline` and `feedbackBlock` are Incorrectly Located at the Item's Top Level",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API model for an assessment item includes `feedbackInline` and `feedbackBlock` as top-level arrays, parallel to properties like `responseDeclarations` and `responseProcessing`.\n\n**Summary:** \nThe API model for an assessment item includes `feedbackInline` and `feedbackBlock` as top-level arrays, parallel to properties like `responseDeclarations` and `responseProcessing`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the OpenAPI schema for the `/assessment-tests/{identifier}/questions` endpoint.\n2. In the `question` schema, observe the presence of `feedbackInline` and `feedbackBlock` as top-level properties.\n3. This structural placement does not align with the QTI specification.\n\nCurl command:\n\n```bash\n# This is a structural schema issue.\ncurl -X GET \"\"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\"\" \\\n-H \"\"Authorization: Bearer $TOKEN\"\"\n```\"\n\n**Expected:** \nIn the QTI 3.0 specification, `feedbackInline` and `feedbackBlock` are not top-level elements of an `assessmentItem`. They are content elements that must appear within the `qti-item-body`. They are used to provide contextual feedback directly within the flow of the question content, for example, next to a specific choice in a multiple-choice question. Placing them at the top level divorces them from their context and violates the QTI data model.\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** This structural error demonstrates a misunderstanding of how QTI feedback is designed to work. It makes it impossible to author or render feedback that is contextually tied to specific parts of an interaction. All feedback is treated as if it were test-level or item-level modal feedback, which is incorrect. These properties should be removed from the top level and modeled correctly within the (currently missing) `qti-item-body` schema.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:18:10.728Z",
    "updatedAt": "2025-07-03T05:59:42.927Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-745/high-feedbackinline-and-feedbackblock-are-incorrectly-located-at-the"
  },
  {
    "id": "89b7c1f7-98ab-4c43-8bda-dd23213844a6",
    "identifier": "BUG-744",
    "title": "HIGH: `outcomeDeclaration` Schema is Missing Key Attributes from QTI Specification",
    "description": "**Reporter:** ameer alnseirat  (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API schema for `outcomeDeclaration` is incomplete. It only models the `identifier`, `cardinality`, and `baseType` attributes.\n\n**Summary:** \nThe API schema for `outcomeDeclaration` is incomplete. It only models the `identifier`, `cardinality`, and `baseType` attributes.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make a GET request to the `/assessment-tests/{identifier}/questions` endpoint.\n2. Observe the `outcomeDeclarations` array within any of the returned `question` objects.\n3. Note that the objects in this array only contain `identifier`, `cardinality`, and `baseType`. Many important QTI attributes are missing.\n\nCurl command:\n\n```bash\ncurl -X GET \"\"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\"\" \\\n-H \"\"Authorization: Bearer $TOKEN\"\"\n```\"\n\n**Expected:** \n\"The QTI 3.0 specification (Section 4.5) defines a much richer model for `outcomeDeclaration`. The API schema should be extended to include support for other standard, optional attributes which are vital for scoring and reporting, such as:\n- `normal-maximum`\n- `normal-minimum`\n- `mastery-value`\n- `view`\n- `interpretation`\n- `long-interpretation`\n- `qti-default-value` (child element)\n- `lookupTable` (child element)\"\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** While the existing attributes are fundamental, the absence of the others severely limits the platform's ability to handle advanced assessment scenarios. For example, without `normal-maximum`, it's impossible to programmatically know the maximum possible score for an item. Without `interpretation`, the semantic meaning of a score (e.g., \"percentile\", \"grade-level\") is lost. This is a significant feature gap that hinders interoperability and functionality.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:16:43.009Z",
    "updatedAt": "2025-07-03T05:56:43.018Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-744/high-outcomedeclaration-schema-is-missing-key-attributes-from-qti"
  },
  {
    "id": "8b5ccaf7-0ccd-4ef3-83fa-a914254a77f0",
    "identifier": "BUG-743",
    "title": "`timeLimit` Field is a Non-Compliant Simplification of QTI `qti-time-limits`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API represents the test's time limit with a single, top-level property `timeLimit` of type `number`. This is an oversimplification of the official QTI specification.\n\n**Summary:** \nThe local API represents the test's time limit with a single, top-level property `timeLimit` of type `number`. This is an oversimplification of the official QTI specification.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Author an `AssessmentTest` in a compliant tool that uses the `qti-time-limits` element with both `min-time` and `max-time` attributes.\n2. Ingest this test into the local system.\n3. Call the `PUT /assessment-tests/{identifier}/metadata` endpoint to retrieve the test data.\n4. Observe the response contains a single `timeLimit` property of type `number`.\n5. Note that the information about the minimum time is lost, as it cannot be represented by the simplified model.\n\nCURL command:\n\n```bash\n# This request will return a response that has flattened the complex QTI time-limits structure into a single number.\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/TEST-WITH-TIMELIMITS/metadata\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \"metadata\": {} }'\n```\"\n\n**Expected:** \nThe API should model the `qti-time-limits` element as defined in the QTI 3.0 specification (Section 4.4.9 for tests, 4.2.12 for sections). This is a complex type that can contain `min-time` and `max-time` attributes. A compliant API would represent this as an object, for example: `timeLimits: { minTime: 300, maxTime: 3600 }`. By using a single number, the API loses crucial information and cannot support tests that enforce a minimum completion time.\n\n**Environment:** \"API Route: /assessment/tests/{identifier}/metadata\nLocal Spec: /assessment/tests/{identifier}/metadata.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test Management\"\n**Additional Notes:** This simplification breaks compliance with the QTI time control model. It prevents the system from importing or exporting tests that use both minimum and maximum time limits, a feature used in many high-stakes testing scenarios to prevent candidates from rushing through an assessment. This is a high-severity interoperability issue.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:12:09.293Z",
    "updatedAt": "2025-07-03T05:55:38.629Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-743/timelimit-field-is-a-non-compliant-simplification-of-qti-qti-time"
  },
  {
    "id": "438962dd-9531-4ee7-8cbf-84dec8e1047c",
    "identifier": "BUG-742",
    "title": "HIGH: `assessmentSection` Schema Missing Standard QTI Attributes `keep-together` and `class`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API's data model for an `assessmentSection` does not include the standard QTI attributes `keep-together` or `class`. There is no way for a client to set or retrieve these values via the API.\n\n**Summary:** \nThe API's data model for an `assessmentSection` does not include the standard QTI attributes `keep-together` or `class`. There is no way for a client to set or retrieve these values via the API.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the schemas for `assessmentSection` in the `GET` response and the `Section` component schema.\n2. Note that the attributes `keep-together` and `class` are absent.\n3. Cross-reference with the QTI 3.0 specification, section `4.2 \"AssessmentSection\" Root Class Description`.\n4. The spec defines `keep-together` (section `4.2.7`) and `class` (section `4.2.5`) as standard attributes.\n\n`curl` command to retrieve a payload lacking these fields:\n\n```bash\n# The response from this GET request will contain assessmentSection objects\n# that are missing the 'keep-together' and 'class' fields, even if they\n# exist in the underlying QTI XML.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/some-test-id/test-parts' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \nA compliant QTI implementation must expose the standard attributes of its entities. The API should include `keepTogether` (of type boolean) and `class` (of type string array) in its `Section` schema and `GET` response payload. `keep-together` is a hint to the rendering engine about page breaks, and `class` is essential for applying custom styling or semantics.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** The absence of these attributes limits the expressive power of the authoring tool. Test authors cannot control the pagination behavior (`keep-together`) or apply custom styles/scripts via classes, both of which are common requirements for creating professional-grade assessments. This represents a significant feature gap and a deviation from the full QTI specification.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:08:05.289Z",
    "updatedAt": "2025-07-03T05:59:34.570Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-742/high-assessmentsection-schema-missing-standard-qti-attributes-keep"
  },
  {
    "id": "be6a0a89-362a-4cf9-8a25-8d789ad408b5",
    "identifier": "BUG-741",
    "title": "HIGH: Incomplete `assessmentItemRef` Schema Missing Multiple Standard QTI Attributes and Control Elements",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API's representation of an `assessmentItemRef` is severely limited, only providing `identifier` and `href`. It is missing a large number of standard attributes and child elements defined in the QTI specification.\n\n**Summary:** \nThe local API's representation of an `assessmentItemRef` is severely limited, only providing `identifier` and `href`. It is missing a large number of standard attributes and child elements defined in the QTI specification.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the API schema for `qti-assessment-item-ref` within an `assessmentSection` in both the `GET` and `POST` paths.\n2. The schema only contains `identifier` and `href`.\n3. Review the QTI 3.0 specification, section `5.6 \"AssessmentItemRef\" Class Description`.\n4. Observe that numerous attributes and child elements for controlling item behavior are missing from the local implementation.\n\n`curl` command to demonstrate the issue:\n\n```bash\n# A GET request will return assessmentItemRef objects that lack standard QTI fields.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/some-test-id/test-parts' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \nAccording to QTI 3.0 spec section `5.6`, an `assessmentItemRef` should support several other attributes for controlling selection and appearance, including `required`, `fixed`, `class`, and `category`. More importantly, it should support child elements that define runtime behavior, such as `qti-time-limits`, `qti-weight` (for scoring), `qti-variable-mapping`, and `qti-branch-rule`. The current API provides no way to set or retrieve this critical information.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section and Test Part management\"\n**Additional Notes:** This omission severely cripples the functionality of the assessment engine. Without these attributes, it is impossible to build complex tests with weighted scoring, item-specific time limits, branching logic, or category-based selection. The API supports only the most rudimentary form of test construction, failing to implement a large part of the QTI test model's power and flexibility. This makes the platform unsuitable for many common assessment scenarios.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:05:57.901Z",
    "updatedAt": "2025-07-03T12:54:04.008Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-741/high-incomplete-assessmentitemref-schema-missing-multiple-standard-qti"
  },
  {
    "id": "5bd28668-735c-4c76-9fff-10aad1029bd1",
    "identifier": "BUG-740",
    "title": "API uses a non-standard `sequence` attribute for ordering instead of QTI-compliant document order.",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API introduces a proprietary integer field named `sequence` to explicitly manage the order of sections. This is not part of the QTI 3.0 specification.\n\n**Summary:** \nThe local API introduces a proprietary integer field named `sequence` to explicitly manage the order of sections. This is not part of the QTI 3.0 specification.\n\n**Steps to Reproduce:**\n\"1. Examine the `Section` schema in the `components` section and the response schema for the `GET` operation.\n2. Note the presence of a `sequence` property, defined as an integer. Its description states it \"Defines the sequential order of this item within its parent section.\"\n3. Search the QTI 3.0 specification for the `assessmentSection` class (Section 4.2).\n4. Observe there is no `sequence` attribute defined. QTI implies ordering through the physical ordering of elements within the parent XML structure (e.g., the order of `assessmentSection` or `assessmentItemRef` elements within a `testPart` or parent `assessmentSection`).\"\n\n**Expected:** \nThe API should handle ordering in a QTI-compliant manner. In a RESTful context, this is typically achieved by accepting an array of sections/items in the desired order in a `POST` or `PUT` request, and the system should persist and return them in that same order. Relying on the order of elements in a JSON array mirrors the document order concept in XML. The proprietary `sequence` field should be removed.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** Introducing a proprietary ordering mechanism breaks interoperability. When exporting QTI content from this system, the `sequence` numbers would need to be translated back into correct XML element ordering. When importing QTI content, the implicit document order would need to be translated into `sequence` numbers. This process is fragile and deviates from the standard, making the system incompatible with other QTI-compliant tools that expect ordering to be handled implicitly.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:04:23.661Z",
    "updatedAt": "2025-07-03T12:19:56.572Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-740/api-uses-a-non-standard-sequence-attribute-for-ordering-instead-of-qti"
  },
  {
    "id": "63f44403-2748-4d5c-9fa1-f337238c022c",
    "identifier": "BUG-739",
    "title": "Incorrect default value for `required` attribute in `assessmentSection` schema.",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API specification defines the default value for the `required` attribute on a section as `true`. If a client creates a section without specifying this attribute, it will incorrectly be marked as required.\n\n**Summary:** \nThe local API specification defines the default value for the `required` attribute on a section as `true`. If a client creates a section without specifying this attribute, it will incorrectly be marked as required.\n\n**Steps to Reproduce:**\n\"1. Inspect the `Section` schema definition in the provided local spec (`#/components/schemas/Section`).\n2. Locate the `required` property.\n3. Observe that its definition is `type: boolean` with `default: true`.\n4. Refer to the QTI 3.0 specification, Section 4.2.2 `\"required\" Characteristic Description`.\n5. The specification states: \"The default value is 'false'.\"\"\n\n**Expected:** \nAccording to the QTI 3.0 specification, the `required` attribute should default to `false`. This means that unless explicitly specified otherwise, a section or item is considered optional within a selection rule. The API's default should be changed to `false` to align with the specification and ensure correct assessment behavior.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** This bug inverts a fundamental default behavior defined by QTI. It can lead to significant interoperability problems and incorrect assessment logic. Content authored in other compliant tools might behave unexpectedly when imported, and content authored with this API will not behave as expected in other QTI systems. It directly impacts the logic of item selection within a test.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T19:00:26.126Z",
    "updatedAt": "2025-07-03T05:54:47.755Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-739/incorrect-default-value-for-required-attribute-in-assessmentsection"
  },
  {
    "id": "e84bc02a-9560-451d-8834-77b9d06e9eb1",
    "identifier": "BUG-738",
    "title": "QTI Compliance Violation: `assessmentSection` Schema Contains Proprietary `_id` and Non-Standard `sequence` Attributes",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `Section` schema in the local API includes two non-standard fields: `_id` and `sequence`. The `_id` field appears to be a leaked internal database identifier. The `sequence` field is a proprietary mechanism for defining order, which is not part of the QTI specification for an `assessmentSection`.\n\n**Summary:** \nThe `Section` schema in the local API includes two non-standard fields: `_id` and `sequence`. The `_id` field appears to be a leaked internal database identifier. The `sequence` field is a proprietary mechanism for defining order, which is not part of the QTI specification for an `assessmentSection`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Execute a `GET` request to retrieve any section.\n2. Observe the JSON response body.\n3. Note the presence of the `_id` field (a MongoDB object ID) and a `sequence` field.\n\nCurl command to demonstrate the non-standard fields:\n\n```bash\n# The response to this GET request will contain the non-standard '_id' and 'sequence' fields.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/section-A' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\nThis issue impacts interoperability. A compliant QTI system consuming this API's output would not understand the `_id` or `sequence` fields. Furthermore, the `sequence` field creates ambiguity about ordering, as it conflicts with the standard QTI mechanisms (document order and `qti-ordering` rules).\"\n\n**Expected:** \n\"The `assessmentSection` model should adhere strictly to the QTI specification.\n\n* **Proprietary Extensions**: If custom data is required, it should be placed within a `dataExtension` object, as defined in the QTI specification (Section 4.2.8). Exposing internal database keys like `_id` at the root level is incorrect and leaks implementation details.\n* **Ordering**: The `sequence` attribute is incorrect. In QTI, the order of elements is determined by their order in the XML document. The ability to shuffle is controlled by the `qti-ordering` element, and the ability to prevent a specific item from being shuffled is controlled by the `fixed` attribute on the `assessmentItemRef`. A proprietary `sequence` number has no meaning in the QTI standard and will be ignored by compliant systems.\"\n\n**Environment:** \"API Route: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section Management\"\n**Additional Notes:** While not as functionally destructive as missing core features, this deviation is severe. Leaking database identifiers is a poor security practice. Introducing a non-standard `sequence` attribute creates a parallel, proprietary ordering system that directly conflicts with the specified QTI model. This will lead to unpredictable behavior when content is moved between systems and demonstrates a fundamental misunderstanding of the QTI ordering model, severely compromising interoperability.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:59:24.702Z",
    "updatedAt": "2025-07-03T12:18:37.872Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-738/qti-compliance-violation-assessmentsection-schema-contains-proprietary"
  },
  {
    "id": "2166fd02-bbb1-48f4-a352-b3d23caf083f",
    "identifier": "BUG-737",
    "title": "High: API Fails to Expose Key `AssessmentSection` Attributes like `qti-branch-rule` and `qti-time-limits`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `Section` object returned by the API is missing numerous attributes that are defined in the QTI 3.0 specification for the `AssessmentSection` class. The implementation only exposes a minimal set of properties.\n\n**Summary:** \nThe `Section` object returned by the API is missing numerous attributes that are defined in the QTI 3.0 specification for the `AssessmentSection` class. The implementation only exposes a minimal set of properties.\n\n**Steps to Reproduce:**\n\"1. Review the `201` response schema for the `POST .../items` endpoint, which returns a full `Section` object.\n2. Compare the properties available in the local `Section` schema (`_id`, `identifier`, `title`, `visible`, `required`, `fixed`, `sequence`, `qti-assessment-item-ref`) with the official `AssessmentSection` class definition in the QTI specification.\n3. Note the absence of several optional but functionally critical attributes from the local schema.\n\ncURL is not applicable for this schema-level bug, as it relates to missing features in the data model.\"\n\n**Expected:** \n\"A compliant and robust QTI implementation should expose all attributes of the `AssessmentSection` class, even if they are optional. The response schema should include properties for advanced QTI features. Based on Section 4.2 of the QTI spec, missing attributes include, but are not limited to:\n\n* `class` (Section 4.2.5)\n* `keep-together` (Section 4.2.7)\n* `qti-pre-condition` (Section 4.2.9)\n* `qti-branch-rule` (Section 4.2.10)\n* `qti-item-session-control` (Section 4.2.11)\n* `qti-time-limits` (Section 4.2.12)\n* `adaptive` (Section 4.2.13)\n* `qti-rubric-block` (Section 4.2.14)\n\nThe response schema should be updated to include these optional fields so that clients can read and potentially set these crucial assessment behaviors.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier/sections/{identifier}/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section authoring and configuration.\"\n**Additional Notes:** Omitting these attributes means the API does not support fundamental QTI capabilities like conditional branching (`qti-branch-rule`), time limits per section (`qti-time-limits`), or adaptive item selection (`adaptive`). This severely restricts the system's ability to create sophisticated and dynamic assessments, which is a key purpose of the QTI 3.0 specification. While the attributes are optional in the spec, their complete absence from the API model indicates a major feature gap.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:58:23.259Z",
    "updatedAt": "2025-07-03T05:55:25.113Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-737/high-api-fails-to-expose-key-assessmentsection-attributes-like-qti"
  },
  {
    "id": "f0b84ba8-4326-4a61-b7bc-c1c9c37bbe40",
    "identifier": "BUG-736",
    "title": "HIGH: Non-Standard `sequence` Attribute on `AssessmentSection` Response Model",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The JSON object returned for the `AssessmentSection` in the `200 OK` response contains a non-standard `sequence` field. This field is not defined in the QTI 3.0 specification for the `AssessmentSection` class.\n\n**Summary:** \nThe JSON object returned for the `AssessmentSection` in the `200 OK` response contains a non-standard `sequence` field. This field is not defined in the QTI 3.0 specification for the `AssessmentSection` class.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Send a `PUT` request to the item reordering endpoint.\n2. Observe the `200 OK` JSON response.\n3. Note the presence of a `sequence` field at the top level of the JSON object representing the section.\n\n`curl` command:\n\n```bash\ncurl -X PUT \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/math-section-1/items/order' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"items\": [\n        { \"identifier\": \"item-002\" },\n        { \"identifier\": \"item-001\" }\n    ]\n}'\n```\"\n\n**Expected:** \nAccording to QTI 3.0 specification Section 4.2 (\"AssessmentSection\" Root Class Description), there is no `sequence` attribute for an `AssessmentSection`. The presentation order of sections is determined by their document order within the parent `qti-test-part`. Introducing a custom `sequence` attribute creates a discrepancy between the API's data model and the canonical QTI XML representation, leading to potential data synchronization issues and confusion for developers trying to map the API to the QTI standard. The response should not contain this non-standard field.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/order\nLocal Spec: local_spec_for_route\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Section Management\"\n**Additional Notes:** This deviation introduces ambiguity. Does the `sequence` attribute in the API override the implicit document order from the QTI standard? How should a system that exports this data back to QTI XML handle this field? Such non-standard additions pollute the data model and create interoperability challenges, which defeats the purpose of adhering to the QTI specification. The same issue is present in the request body, which requires a `sequence` integer that has no direct mapping to a standard QTI attribute.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:57:04.842Z",
    "updatedAt": "2025-07-03T12:25:41.520Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-736/high-non-standard-sequence-attribute-on-assessmentsection-response"
  },
  {
    "id": "56b3d4e9-5caa-4087-97ff-3eef12290ab7",
    "identifier": "BUG-735",
    "title": "HIGH: `qti-assessment-item-ref` Response Model is Incomplete",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `200 OK` response contains a `qti-assessment-item-ref` array. Each object within this array, representing a reference to an `AssessmentItem`, only includes the `identifier` and `href` properties. It is missing other standard and important `AssessmentItemRef` attributes.\n\n**Summary:** \nThe `200 OK` response contains a `qti-assessment-item-ref` array. Each object within this array, representing a reference to an `AssessmentItem`, only includes the `identifier` and `href` properties. It is missing other standard and important `AssessmentItemRef` attributes.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Trigger a `PUT` request to the item reordering endpoint as described in the previous bug report.\n2. Examine the `qti-assessment-item-ref` array within the `200 OK` response.\n3. Note that each object in the array only contains `identifier` and `href`.\n4. Compare these fields with the official attributes for the `AssessmentItemRef` class in the QTI 3.0 specification.\n\n`curl` command:\n\n```bash\ncurl -X PUT \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/math-section-1/items/order' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"items\": [\n        { \"identifier\": \"item-002\" },\n        { \"identifier\": \"item-001\" }\n    ]\n}'\n```\"\n\n**Expected:** \nBased on the QTI 3.0 specification, Section 5.6 (\"AssessmentItemRef\" Class Description), an `AssessmentItemRef` has several other optional but crucial attributes that define its behavior within the section. These include `required` (5.6.2), `fixed` (5.6.3), `category` (5.6.6), `qti-weight`, and `qti-variable-mapping`. A compliant API response should include these attributes if they are set on the item reference. By omitting them, the API prevents the client from knowing if an item's position is fixed (cannot be shuffled), if it's required for selection, or how its score weight and variables are mapped.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/order\nLocal Spec: local_spec_for_route\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Section Management\"\n**Additional Notes:** This omission severely limits the utility of the API for any system that needs to understand the fine-grained control and scoring rules within a section. For example, a delivery engine would not know that an item has a `fixed=\"true\"` attribute and might incorrectly shuffle it. Likewise, it would not be able to apply the correct scoring `qti-weight` or map item outcomes to test-level outcomes via `qti-variable-mapping`. This is a significant data model inconsistency that undermines key QTI features.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:55:39.493Z",
    "updatedAt": "2025-07-03T12:54:55.404Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-735/high-qti-assessment-item-ref-response-model-is-incomplete"
  },
  {
    "id": "46395f30-38ce-45ef-b293-2d28bda2fb9e",
    "identifier": "BUG-734",
    "title": "Incorrect QTI Semantics: Path Segment `/items/` Conflates `assessmentItem` with `assessmentItemRef`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API uses the path segment `/items/` to manage what are explicitly defined as `assessmentItemRef` entities in the QTI specification. This incorrectly implies that the operation targets the `assessmentItem` resource itself, leading to semantic ambiguity and a violation of the principle of representing resources accurately in a REST API.\n\n**Summary:** \nThe API uses the path segment `/items/` to manage what are explicitly defined as `assessmentItemRef` entities in the QTI specification. This incorrectly implies that the operation targets the `assessmentItem` resource itself, leading to semantic ambiguity and a violation of the principle of representing resources accurately in a REST API.\n\n**Steps to Reproduce:**\n\"This is an API design and semantic bug, reproducible by reviewing the spec.\n\n1. Examine the API path: `/assessment-tests/.../sections/{identifier}/items/{itemIdentifier}`.\n2. Note that the final segment is `items`, which in RESTful design refers to a collection of \"item\" resources.\n3. Read the operation's description: \"Remove an assessment item **reference** from a section. This only removes the reference link; the actual assessment item remains...\".\n4. Compare this with the QTI 3.0 data model, which makes a clear distinction between the `AssessmentItem` class (the question) and the `AssessmentItemRef` class (Section 5.6, a pointer within a section).\n\nThe API's path contradicts its documented behavior and the underlying QTI model.\"\n\n**Expected:** \n\"The API path must accurately reflect the resource being manipulated to be compliant with the QTI information model. The path should use a name that clearly identifies the resource as an item *reference*.\n\nA correct path would be:\n`.../sections/{sectionIdentifier}/item-references/{itemRefIdentifier}`\nor\n`.../sections/{sectionIdentifier}/assessment-item-refs/{itemRefIdentifier}`\n\nThis change makes the API self-documenting, aligns it with the official QTI terminology (Section 5.6 \"AssessmentItemRef\" Class Description), and eliminates confusion for developers about whether they are deleting an item or just its inclusion in a section.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Section Management\"\n**Additional Notes:** This is not a mere stylistic issue; it's a fundamental misrepresentation of the QTI data model. In QTI, the distinction between an item and a reference to it is crucial for test construction, allowing items to be reused across different tests and sections. An API that conflates these two concepts is difficult to use correctly and indicates a potential misunderstanding of the QTI specification. This will lead to developer errors and can make the API non-intuitive for anyone familiar with QTI.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:54:23.068Z",
    "updatedAt": "2025-07-03T12:54:55.400Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-734/incorrect-qti-semantics-path-segment-items-conflates-assessmentitem"
  },
  {
    "id": "551e8df5-f223-4d26-aa11-a93a089563e9",
    "identifier": "BUG-733",
    "title": "HIGH: `assessmentItemRef` Schema is Missing Standard QTI Attributes for Item Control",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `qti-assessment-item-ref` schema in the local API specification is incomplete. It only includes `identifier` and `href`. It is missing key attributes like `required`, `fixed`, and `category`, which are defined in the QTI specification to control the behavior and organization of individual items within a section.\n\n**Summary:** \nThe `qti-assessment-item-ref` schema in the local API specification is incomplete. It only includes `identifier` and `href`. It is missing key attributes like `required`, `fixed`, and `category`, which are defined in the QTI specification to control the behavior and organization of individual items within a section.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the schema for `qti-assessment-item-ref` within the `qti-assessment-section`.\n2. Observe that it only contains `identifier` and `href`.\n3. Cross-reference this with the QTI 3.0 specification, Section 5.6 `\"AssessmentItemRef\" Class Description`.\n4. Note the absence of several attributes that provide item-level control within a section.\n\ncURL command to demonstrate:\n\n```bash\n# A GET request will return item references without crucial attributes like 'required', 'fixed', or 'category'.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/science9/test-parts/final-exam/` \\\n  -H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \n\"Based on the QTI 3.0 spec (Section 5.6), the `assessmentItemRef` class contains several attributes that should be exposed in the API schema. The schema for `qti-assessment-item-ref` should be extended to include:\n- `required` (Section 5.6.2): A boolean indicating if a response is required for this item.\n- `fixed` (Section 5.6.3): A boolean to prevent this item from being shuffled, even if the section's items are randomized.\n- `category` (Section 5.6.6): An identifier used to group items for outcome processing (e.g., calculating sub-scores).\n- `class` (Section 5.6.4): For applying stylesheets.\n- `qti-weight` (Section 5.6.13): For assigning a weight to the item's score during outcome processing.\n\nThe local spec incorrectly places `required` and `fixed` on the parent `Section` object, but they are also valid (and have distinct meaning) on the `assessmentItemRef` itself.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section/Item Management\"\n**Additional Notes:** Missing these attributes significantly reduces the authoring control intended by the QTI specification. Without item-level `required` and `fixed` attributes, it's impossible to create sections with a mix of optional/required or fixed/randomized items. The absence of `category` and `qti-weight` cripples the ability to perform standards-based outcome processing and scoring, which is a major use case for QTI. This is a serious feature gap that compromises QTI compliance.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:53:03.000Z",
    "updatedAt": "2025-07-03T12:54:55.387Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-733/high-assessmentitemref-schema-is-missing-standard-qti-attributes-for"
  },
  {
    "id": "03e2402d-363b-4db2-8bcb-f6b6f4bdd2c7",
    "identifier": "BUG-732",
    "title": "High Severity: Request Body Schema for `POST /assessment-items` is Incomplete",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The OpenAPI schema for creating an `AssessmentItem` is missing properties that are demonstrated in its own examples. Specifically, the `stimulus` and `rubrics` properties are used in the examples but are not defined in the `AssessmentItem` component schema. This makes the API contract incomplete and inaccurate.\n\n**Summary:** \nThe OpenAPI schema for creating an `AssessmentItem` is missing properties that are demonstrated in its own examples. Specifically, the `stimulus` and `rubrics` properties are used in the examples but are not defined in the `AssessmentItem` component schema. This makes the API contract incomplete and inaccurate.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the `requestBody` schema for `POST /assessment-items`, which references `#/components/schemas/AssessmentItem`.\n2. Examine the properties defined within the `AssessmentItem` schema.\n3. Note that fields like `stimulus` and `rubrics` are missing from the schema definition.\n4. Now review the `examples` provided for the request body (e.g., `json-choice`, `json-text-entry`).\n5. Observe that these examples consistently use `stimulus` and `rubrics` fields, which are not defined in the schema.\"\n\n**Expected:** \n\"The `AssessmentItem` schema must be updated to include all fields that the API accepts during creation. Based on the examples and QTI standards, the following should be added:\n\n```yaml\n# In components.schemas.AssessmentItem.properties\nstimulus:\n  type: object\n  properties:\n    identifier:\n      type: string\n      description: The identifier of the qti-assessment-stimulus to associate with this item.\n    # A compliant implementation should also support 'href'\n  description: A reference to a shared stimulus. Maps to qti-assessment-stimulus-ref.\nrubrics:\n  type: array\n  items:\n    type: object\n    properties:\n      use:\n        type: string\n        description: Specifies the purpose of the rubric. Should align with qti-rubric-block 'use' attribute.\n      view:\n        type: string\n        description: Specifies the intended audience for the rubric. Aligns with qti-rubric-block 'view' attribute.\n      body:\n        type: string\n        description: The HTML content of the rubric block.\n    description: A rubric providing scoring or instructional guidance. Maps to qti-rubric-block.\n```\n\nThis would make the schema accurately reflect the API's capabilities as shown in the examples.\"\n\n**Environment:** \"API Route: /assessment/items\nLocal Spec: /assessment/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item Authoring\"\n**Additional Notes:** An incomplete schema breaks automated client generation and contract-based testing. It forces developers to reverse-engineer the API's behavior from examples instead of relying on the formal specification. This is a serious API design flaw. Furthermore, the `stimulus` object should ideally align more closely with `qti-assessment-stimulus-ref`, which also has an `href` attribute for locating the resource.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:51:51.879Z",
    "updatedAt": "2025-07-03T05:53:10.222Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-732/high-severity-request-body-schema-for-post-assessment-items-is"
  },
  {
    "id": "853f742c-610f-4323-85bb-0d9a43787ff7",
    "identifier": "BUG-731",
    "title": "High Severity: `outcomeDeclaration` Schema is Missing Most Standard QTI Attributes",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `outcomeDeclaration` schema in the local API is severely stripped down, implementing only the most basic attributes. It lacks the majority of the attributes defined in the QTI 3.0 specification that are crucial for defining how outcome variables (like scores) should be interpreted, viewed, and processed.\n\n**Summary:** \nThe `outcomeDeclaration` schema in the local API is severely stripped down, implementing only the most basic attributes. It lacks the majority of the attributes defined in the QTI 3.0 specification that are crucial for defining how outcome variables (like scores) should be interpreted, viewed, and processed.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `outcomeDeclarations` schema in the local specification for both GET and POST endpoints.\n2. Note that it only contains `identifier`, `cardinality`, and `baseType`.\n3. Compare this to the `OutcomeDeclaration` class definition in the QTI 3.0 specification, Section 4.5.\n4. Observe the large number of missing attributes (`view`, `interpretation`, `normal-maximum`, etc.) and child elements (`qti-default-value`, `qti-lookup-table`).\"\n\n**Expected:** \n\"The `outcomeDeclaration` schema should fully support the QTI 3.0 specification (Section 4.5). This includes adding support for at least the following standard attributes:\n\n* `view`: Controls the visibility of the outcome variable to different roles (e.g., 'candidate', 'proctor').\n* `interpretation`: Provides a short, machine-readable description of how the score should be interpreted.\n* `long-interpretation`: A URI pointing to a longer, human-readable interpretation.\n* `normal-maximum` / `normal-minimum`: The expected range of the outcome value.\n* `mastery-value`: The cutoff value for demonstrating mastery.\n* `qti-default-value` (child element): A default value for the variable.\n* `qti-lookup-table` (child element): For mapping discrete values to other values (e.g., raw scores to grades).\n\nWithout these, the API cannot support the creation or display of QTI-compliant items with rich scoring semantics.\"\n\n**Environment:** \"API Route: /assessment/items\nLocal Spec: /assessment/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item Management\"\n**Additional Notes:** This feature gap severely limits the utility of the platform. It prevents users from defining common assessment scenarios, such as score ranges, mastery levels, or custom score mappings (e.g., mapping a raw score of 5 to a \"Pass\" grade). This makes the implementation incompatible with any content that relies on these standard QTI features for outcome processing.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:48:31.688Z",
    "updatedAt": "2025-07-03T06:00:00.096Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-731/high-severity-outcomedeclaration-schema-is-missing-most-standard-qti"
  },
  {
    "id": "a9554371-3b01-4d9b-b0fd-e0a472b1b1ec",
    "identifier": "BUG-730",
    "title": "HIGH - `assessmentItem` Model is Missing Key QTI Child Elements",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API's JSON representation of an `assessmentItem` omits several important, optional child elements from the QTI specification. There is no way to specify item templates, link external stylesheets, provide companion materials, or include accessibility catalogs.\n\n**Summary:** \nThe API's JSON representation of an `assessmentItem` omits several important, optional child elements from the QTI specification. There is no way to specify item templates, link external stylesheets, provide companion materials, or include accessibility catalogs.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the top-level properties of the `assessmentItem` schema in the `GET` response and `PUT` request body.\n2. Compare these properties against the child elements of the `AssessmentItem` class in the QTI 3.0 specification, Section 4.1.\n3. Observe that the API's JSON model does not include fields that map to the following standard QTI elements: `qti-template-declaration`, `qti-template-processing`, `qti-stylesheet`, `qti-companion-materials-info`, and `qti-catalog-info`.\"\n\n**Expected:** \n\"The `assessmentItem` schema in the API should be updated to include optional fields that map to the missing QTI elements. For example:\n\n* `templateDeclarations`: an array to represent `qti-template-declaration`\n* `templateProcessing`: an object/string to represent `qti-template-processing`\n* `stylesheets`: an array to represent `qti-stylesheet`\n* `companionMaterialsInfo`: an object to represent `qti-companion-materials-info`\n* `catalogInfo`: an array to represent `qti-catalog-info` for accessibility.\n  This would bring the API closer to full compliance with the QTI item structure.\"\n\n**Environment:** \"API Route: /assessment/items/{identifier}\nLocal Spec: /assessment/items/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation, Section 4.1\nQTI Context: Assessment Item Management, Item Structure\"\n**Additional Notes:** \"The omission of these elements prevents users from leveraging significant features of the QTI specification.\n\n* **Templating (**`qti-template-declaration`, `qti-template-processing`): Essential for programmatically generating families of related items (e.g., math problems with different numbers).\n* **Accessibility (**`qti-catalog-info`): Critical for creating accessible assessments that can provide alternatives (e.g., text descriptions for images) to users with disabilities. Its absence is a major gap.\n* **Presentation (**`qti-stylesheet`): The standard mechanism for applying custom CSS to an item.\n  Lacking these features severely limits the authoring capabilities of the API.\"",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:47:05.691Z",
    "updatedAt": "2025-07-03T05:52:47.254Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-730/high-assessmentitem-model-is-missing-key-qti-child-elements"
  },
  {
    "id": "9c7bdd1d-7f49-4aeb-b05f-1477a8f1c654",
    "identifier": "BUG-729",
    "title": "Ambiguous `POST /stimuli` Request Body with Contradictory Schema and Example",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The OpenAPI specification for the `POST /stimuli` endpoint is internally inconsistent. The defined JSON schema for the request body is contradicted by the provided JSON example. This makes the API contract ambiguous and impossible to implement reliably from the specification alone.\n\n**Summary:** \nThe OpenAPI specification for the `POST /stimuli` endpoint is internally inconsistent. The defined JSON schema for the request body is contradicted by the provided JSON example. This makes the API contract ambiguous and impossible to implement reliably from the specification alone.\n\n**Steps to Reproduce:**\n\"**Human-Readable Steps:**\n\n1. Examine the `POST /stimuli` endpoint definition in the local OpenAPI specification.\n2. Note that `requestBody.content['application/json'].schema` references `#/components/schemas/Stimulus`.\n3. The `Stimulus` schema defines a JSON object with properties like `identifier`, `title`, and `content` (as an HTML string).\n4. Now, examine the example provided under `requestBody.content['application/json'].examples.xml-example`.\n5. The example shows a completely different JSON structure: `{ \"format\": \"xml\", \"xml\": \"...\" }`, which does not conform to the `Stimulus` schema.\n\n**cURL Command (Illustrating the conflict):**\n\nA client following the schema would send:\n\n```bash\n# This matches the SCHEMA\ncurl -X POST 'https://qti.alpha-1edtech.com/api/stimuli' -H 'Content-Type: application/json' -d '{\"identifier\":\"id-1\", \"title\":\"title-1\", \"content\":\"<p>hi</p>\"}'\n```\n\nA client following the example would send:\n\n```bash\n# This matches the EXAMPLE\ncurl -X POST 'https://qti.alpha-1edtech.com/api/stimuli' -H 'Content-Type: application/json' -d '{\"format\":\"xml\", \"xml\":\"<qti-assessment-stimulus>...</qti-assessment-stimulus>\"}'\n```\n\nIt is impossible for both to be correct for the same media type.\"\n\n**Expected:** \n\"The example provided for a given media type (`application/json`) MUST be valid against the schema defined for that same media type. The specification must be corrected to be consistent.\n\n**Option 1 (Fix the example):** The `xml-example` should be removed or changed to be a valid instance of the `Stimulus` schema.\n**Option 2 (Fix the schema):** The schema should be updated to reflect the `{\"format\": \"xml\", \"xml\": \"...\"}` structure if that is the intended way to submit raw QTI XML within a JSON payload. A more robust solution would be to use a `oneOf` compositor to allow either the simplified `Stimulus` object or the XML wrapper object.\n**Option 3 (Use multiple content types):** Define `application/json` for the simplified schema and `application/xml` for raw XML submissions, which is a more standard RESTful approach.\n\nRegardless of the solution, the current state is a critical documentation and contract bug.\"\n\n**Environment:** \"API Route: /stimuli\nLocal Spec: /stimuli.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: AssessmentStimulus creation workflow.\"\n**Additional Notes:** A broken API contract is a critical issue. Developers cannot build a reliable client against this endpoint. This ambiguity directly impacts the ability to author and create QTI content in the system. If the system intends to support both a simplified JSON format and a raw XML submission, the OpenAPI specification must explicitly and correctly define how to do so. The current specification fails to do this.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:46:04.499Z",
    "updatedAt": "2025-07-03T05:52:40.519Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-729/ambiguous-post-stimuli-request-body-with-contradictory-schema-and"
  },
  {
    "id": "ae2985f4-b348-4a99-b0e0-681429b0a332",
    "identifier": "BUG-728",
    "title": "Critical QTI Content Model Violation in `catalogInfo` Structure",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API implementation defines the `catalogInfo` property as a simple array of objects, where each object contains `id`, `support`, and `content`. This is a non-standard, flattened representation of the QTI accessibility catalog feature.\n\n**Summary:** \nThe local API implementation defines the `catalogInfo` property as a simple array of objects, where each object contains `id`, `support`, and `content`. This is a non-standard, flattened representation of the QTI accessibility catalog feature.\n\n**Steps to Reproduce:**\n\"**Human-Readable Steps:**\n\n1. Observe the schema for the `catalogInfo` property in the response of a `GET /stimuli` request.\n2. Observe the schema for the `catalogInfo` property in the `Stimulus` component schema used by the `POST /stimuli` request body.\n3. The schema is a flat array of objects: `[{id, support, content}]`.\n4. Compare this structure to the official QTI 3.0 specification for `qti-catalog-info` (Section 4.3.10).\n\n**cURL Command (Illustrative):**\nThis cURL command demonstrates a `POST` request attempting to create a stimulus with the non-compliant, flattened `catalogInfo` structure accepted by the local API.\n\n```bash\ncurl -X POST 'https://qti.alpha-1edtech.com/api/stimuli' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"identifier\": \"stimulus-123\",\n  \"title\": \"Stimulus with Non-Compliant Catalog\",\n  \"content\": \"<p>Some stimulus content.</p>\",\n  \"catalogInfo\": [\n    {\n      \"id\": \"glossary-catalog\",\n      \"support\": \"glossary\",\n      \"content\": \"<div>Term: Photosynthesis</div>\"\n    }\n  ]\n}'\n```\"\n\n**Expected:** \n\"According to the QTI 3.0 specification Section 4.3.10 (\"qti-catalog-info\" Attribute Description), an `AssessmentStimulus` can contain a `<qti-catalog-info>` element. This element, in turn, contains one or more `<qti-catalog>` elements, and each `<qti-catalog>` contains one or more `<qti-card>` elements.\n\nThe API's JSON representation must preserve this official nested hierarchy to be compliant. A correct JSON structure would look something like this:\n\n```json\n\"catalogInfo\": {\n  \"catalogs\": [\n    {\n      \"id\": \"glossary-catalog\",\n      \"cards\": [\n        {\n          \"support\": \"glossary\",\n          \"content\": \"<div>...</div>\"\n        },\n        {\n          \"support\": \"definitions\",\n          \"content\": \"<div>...</div>\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nThis preserves the ability to group multiple support cards under a single catalog, which is a key feature of the specification that the current implementation breaks.\"\n\n**Environment:** \"API Route: /stimuli\nLocal Spec: /stimuli.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: AssessmentStimulus management and Accessibility features.\"\n**Additional Notes:** This is a critical violation of the QTI content model. The `qti-catalog-info` structure is fundamental for delivering accessibility features (like glossaries, translations, or alternative representations) in a standardized way. By flattening the structure, the API breaks the relationship between a catalog and its cards, making it impossible to correctly interpret or exchange this accessibility information with other QTI-compliant systems. This significantly undermines the interoperability promise of QTI.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:44:48.771Z",
    "updatedAt": "2025-07-03T05:57:02.598Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-728/critical-qti-content-model-violation-in-cataloginfo-structure"
  },
  {
    "id": "4c26dc19-f269-4cc1-9f57-0d64447b959a",
    "identifier": "BUG-727",
    "title": "Critical: `stylesheet` Property Incorrectly Implemented as Single Object, Violating QTI Multiplicity",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API specification for both the `GET` response and the `PUT` request body (`components.schemas.Stimulus`) defines the `stylesheet` property as a single object (`type: object`). This forces a one-to-one relationship between a stimulus and a stylesheet.\n\n**Summary:** \nThe local API specification for both the `GET` response and the `PUT` request body (`components.schemas.Stimulus`) defines the `stylesheet` property as a single object (`type: object`). This forces a one-to-one relationship between a stimulus and a stylesheet.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Obtain a valid OAuth token.\n2. Attempt to create or update a stimulus that references two separate stylesheets (e.g., a base style and a high-contrast style).\n3. The API will reject this request because the schema for `stylesheet` is a single object, not an array of objects.\n4. Alternatively, call `GET` on an existing stimulus. The response schema for `stylesheet` is a single object, making it impossible for the API to represent a QTI-compliant stimulus that legitimately uses multiple stylesheets.\n\ncURL command (Conceptual - will fail against the current schema):\n\n```bash\n# This request attempts to update a stimulus with an array of stylesheets,\n# which is compliant with the QTI spec but will fail validation against the local API spec.\ncurl -X PUT \\\n  'https://qti.alpha-1edtech.com/api/stimuli/stimulus-001' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"params\": {\n        \"identifier\": \"stimulus-001\"\n    },\n    \"body\": {\n        \"identifier\": \"stimulus-001\",\n        \"title\": \"Stimulus with Multiple Stylesheets\",\n        \"content\": \"&lt;p&gt;This is the stimulus content.&lt;/p&gt;\",\n        \"stylesheet\": [\n            { \"href\": \"/styles/base.css\", \"type\": \"text/css\" },\n            { \"href\": \"/styles/theme.css\", \"type\": \"text/css\" }\n        ]\n    }\n}'\n```\"\n\n**Expected:** \n\"According to the official QTI 3.0 Specification, Section **4.3.8 \"qti-stylesheet\" Attribute Description**, the `qti-stylesheet` element has a multiplicity of **0..***. This means a single `qti-assessment-stimulus` can have zero, one, or many associated stylesheets.\n\nTherefore, the `stylesheet` property in the API's JSON representation must be an array of objects to correctly model this relationship. The schema should be:\n```yaml\nstylesheet:\n  type: array\n  description: The set of external style sheets that are associated with the Stimulus. The order of definition is significant.\n  items:\n    type: object\n    properties:\n      href:\n        type: string\n        description: The identifier or location of the external stylesheet.\n      type:\n        type: string\n        description: The type of the external stylesheet.\n    required:\n      - href\n      - type\n```\"\n\n**Environment:** \"API Route: /stimuli/{identifier}\nLocal Spec: /stimuli/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: AssessmentStimulus management\"\n**Additional Notes:** This is a critical violation of the QTI 3.0 content model. It breaks interoperability and prevents the use of common assessment design patterns. For example, it is standard practice to layer stylesheets for different purposes, such as a base layout, a specific theme, or accessibility accommodations (e.g., a high-contrast mode). This implementation cannot support such valid, QTI-compliant content, leading to data loss and an inability to render assessments correctly. Any system consuming data from this API would receive an incomplete representation of the stimulus's styling requirements.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:43:44.544Z",
    "updatedAt": "2025-07-03T05:57:12.288Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-727/critical-stylesheet-property-incorrectly-implemented-as-single-object"
  },
  {
    "id": "da0e94c0-b32f-4cfa-8a4e-ba538fdc42d5",
    "identifier": "BUG-726",
    "title": "CRITICAL: Missing Essential Flow Control and Configuration Elements in AssessmentSection Schema",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API's representation of an `AssessmentSection` is missing several critical child elements defined in the QTI specification. It omits features for conditional logic and granular control, which are fundamental to creating structured and adaptive assessments.\n\n**Summary:** \nThe API's representation of an `AssessmentSection` is missing several critical child elements defined in the QTI specification. It omits features for conditional logic and granular control, which are fundamental to creating structured and adaptive assessments.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the OpenAPI schema for an `AssessmentSection` (`components.schemas.Section`).\n2. Observe the defined properties: `identifier`, `title`, `visible`, `required`, `fixed`, `sequence`.\n3. Compare this to the QTI 3.0 specification, section 4.2 \"AssessmentSection\" Root Class Description.\n4. Note the absence of elements for preconditions, branching, time limits, and session control.\n\ncURL Command to demonstrate the issue:\nThis is a schema definition bug. A GET request to `/assessment-tests` would return `assessmentSection` objects that are missing these QTI-specified fields.\n\n```bash\n# The response from this call will show assessment sections lacking the\n# QTI-specified control structures like pre-conditions or branch rules.\ncurl -X GET 'https://qti.alpha-1edtech.com/api/assessment-tests' \\\n-H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \n\"The `AssessmentSection` schema must be extended to include all elements defined in QTI 3.0 Spec Section 4.2. The missing elements are:\n- `qti-pre-condition` (4.2.9): For defining conditions that must be met for the section to be presented.\n- `qti-branch-rule` (4.2.10): For directing the candidate to another part of the test based on their performance.\n- `qti-item-session-control` (4.2.11): For controlling settings like max attempts and feedback at the section level.\n- `qti-time-limits` (4.2.12): For applying specific time limits to the entire section.\n- `qti-rubric-block` (4.2.14): For including instructional material for the section.\n\nAdditionally, the `keep-together` (4.2.7) and `class` (4.2.5) attributes are missing. The `sequence` property is non-standard; ordering is determined by document order and the `fixed` attribute.\"\n\n**Environment:** \"API Route: /assessment-tests\nLocal Spec: /assessment/tests.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment test structure, navigation, and adaptive logic.\"\n**Additional Notes:** Without these elements, the API cannot support any form of adaptive testing, conditional branching, or even basic section-level time management as defined by the QTI standard. This is a severe limitation that prevents the implementation from being considered QTI-compliant. Any QTI content containing these common constructs would be broken upon import. The proprietary `sequence` attribute should be removed in favor of standard document ordering.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:42:53.189Z",
    "updatedAt": "2025-07-03T05:55:26.681Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-726/critical-missing-essential-flow-control-and-configuration-elements-in"
  },
  {
    "id": "69a2dfec-0526-4abb-b13f-c1fae823b048",
    "identifier": "BUG-725",
    "title": "CRITICAL: Non-Standard 'timeLimit' and 'maxAttempts' Attributes Violate QTI Structure",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API introduces proprietary, flattened attributes `timeLimit` and `maxAttempts` at the root of an `AssessmentTest`. This is a significant deviation from the QTI specification. QTI manages time limits via a structured `<qti-time-limits>` element (which can specify min and max times) and attempt limits via `<qti-item-session-control>`, which can be applied at the section or item level, offering more granular control.\n\n**Summary:** \nThe local API introduces proprietary, flattened attributes `timeLimit` and `maxAttempts` at the root of an `AssessmentTest`. This is a significant deviation from the QTI specification. QTI manages time limits via a structured `<qti-time-limits>` element (which can specify min and max times) and attempt limits via `<qti-item-session-control>`, which can be applied at the section or item level, offering more granular control.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `POST /assessment-tests` request body schema `components.schemas.AssessmentTest`.\n2. Observe the top-level properties `timeLimit` (number) and `maxAttempts` (number).\n3. Cross-reference with the QTI 3.0 spec, sections 4.4.9 (\"qti-time-limits\") and 4.2.11 (\"qti-item-session-control\").\n4. Note that the official specification defines structured XML elements for these concepts (`<qti-time-limits>` and `<qti-item-session-control>`), not simple numeric properties at the top level of the test.\n\ncURL Command to demonstrate the issue:\n\n```bash\n# This POST request uses the non-standard 'timeLimit' and 'maxAttempts' fields.\n# While the API may accept this, it deviates from the QTI spec's structured approach.\ncurl -X POST 'https://qti.alpha-1edtech.com/api/assessment-tests' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"identifier\": \"test-with-non-standard-controls\",\n  \"title\": \"Test with Non-Standard Controls\",\n  \"timeLimit\": 3600,\n  \"maxAttempts\": 3,\n  \"qti-test-part\": [\n    {\n      \"identifier\": \"part1\",\n      \"navigationMode\": \"linear\",\n      \"submissionMode\": \"individual\",\n      \"qti-assessment-section\": [\n        {\n          \"identifier\": \"section1\",\n          \"title\": \"Section 1\",\n          \"visible\": true,\n          \"qti-assessment-item-ref\": [\n            { \"identifier\": \"item1\", \"href\": \"...\" }\n          ]\n        }\n      ]\n    }\n  ]\n}'\n```\"\n\n**Expected:** \n\"The API should model the QTI specification accurately.\n1.  **Time Limits:** Instead of a single `timeLimit` number, the API should accept an object representing the `<qti-time-limits>` element, which can contain `min-time` and `max-time`. This element can be a child of `assessmentTest`, `testPart`, `assessmentSection`, or `assessmentItemRef`. See QTI spec section 4.4.9.\n2.  **Attempt Limits:** The `maxAttempts` concept should be implemented via an `itemSessionControl` object, corresponding to the `<qti-item-session-control>` element. This element has a `max-attempts` attribute and is applicable within sections or to specific item references, not as a blanket setting on the entire test. See QTI spec section 4.2.11.\n\nImplementing these as flattened, top-level attributes breaks compliance and removes the granular control that is a key feature of the QTI standard.\"\n\n**Environment:** \"API Route: /assessment-tests\nLocal Spec: /assessment/tests.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test configuration, session control.\"\n**Additional Notes:** This simplification fundamentally misunderstands and misrepresents the QTI model for test control. By flattening these complex structures into simple numbers, the API loses the ability to define different time limits for different parts of a test or control attempts on a per-section basis. This makes the system incompatible with any QTI content that uses these standard features and severely limits the authoring capabilities of the platform.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:41:47.652Z",
    "updatedAt": "2025-07-03T12:49:01.058Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-725/critical-non-standard-timelimit-and-maxattempts-attributes-violate-qti"
  },
  {
    "id": "171b01ee-6c4c-4c51-9981-367e0ebc1064",
    "identifier": "BUG-724",
    "title": "CRITICAL: Missing Core QTI Control Elements in AssessmentItemRef Schema",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API specification for `qti-assessment-item-ref` is severely incomplete. It only defines `identifier` and `href`. This omits a vast number of attributes that are essential for controlling test behavior, scoring, and adaptive logic at the item level within a section.\n\n**Summary:** \nThe local API specification for `qti-assessment-item-ref` is severely incomplete. It only defines `identifier` and `href`. This omits a vast number of attributes that are essential for controlling test behavior, scoring, and adaptive logic at the item level within a section.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the OpenAPI specification for the GET /assessment-tests endpoint.\n2. Navigate to the response schema: `components.schemas.AssessmentTest` -> `properties.qti-test-part` -> `items` -> `properties.qti-assessment-section` -> `items` -> `properties.qti-assessment-item-ref`.\n3. Observe that the schema for an item reference only includes `identifier` and `href`.\n4. Compare this to the official QTI 3.0 specification, section 5.6 \"AssessmentItemRef\" Class Description.\n5. Note the absence of numerous required and optional attributes critical for test functionality.\n\ncURL Command to demonstrate the issue:\nThis bug is in the API's contract (OpenAPI spec), not just a runtime data error. A GET request will return data that lacks these specified fields.\n\n```bash\n# This command retrieves assessment tests. The response will lack the full QTI-compliant\n# structure for assessment item references, demonstrating the missing fields.\ncurl -X GET 'https://qti.alpha-1edtech.com/api/assessment-tests' \\\n-H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \n\"According to the QTI 3.0 specification (Section 5.6 \"AssessmentItemRef\" Class Description), the `assessmentItemRef` class should support a much richer set of attributes. The local schema is missing:\n- **Core Attributes:** `required` (5.6.2), `fixed` (5.6.3), `class` (5.6.4), `category` (5.6.6).\n- **Flow Control:** `qti-pre-condition` (5.6.8), `qti-branch-rule` (5.6.9).\n- **Session Control:** `qti-item-session-control` (5.6.10), `qti-time-limits` (5.6.11).\n- **Variable and Scoring Control:** `qti-variable-mapping` (5.6.12), `qti-weight` (5.6.13).\n- **Templating:** `qti-template-default` (5.6.14).\n\nThe absence of these features prevents the creation of any moderately complex test, such as those with branching, time limits per item, variable weighting, or adaptive behavior.\"\n\n**Environment:** \"API Route: /assessment-tests\nLocal Spec: /assessment/tests.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test authoring and delivery, specifically section and item composition.\"\n**Additional Notes:** This is a critical violation of the QTI specification. It renders the API unusable for creating tests that leverage fundamental QTI features like branching rules, variable weighting for scoring, and item-level time limits. Interoperability with other QTI-compliant systems is impossible, as any imported test using these features would be broken. This bug cripples the system's ability to represent the dynamic nature of a QTI assessment.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:40:16.693Z",
    "updatedAt": "2025-07-03T12:54:10.707Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-724/critical-missing-core-qti-control-elements-in-assessmentitemref-schema"
  },
  {
    "id": "06609ec1-cda3-4aaa-ae52-d54d5f971b4d",
    "identifier": "BUG-723",
    "title": "CRITICAL: `timeLimit` implementation is a non-compliant simplification of `qti-time-limits`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local specification implements test time limits as a single, top-level numeric property named `timeLimit`. This is a custom simplification that does not exist in the QTI 3.0 specification.\n\n**Summary:** \nThe local specification implements test time limits as a single, top-level numeric property named `timeLimit`. This is a custom simplification that does not exist in the QTI 3.0 specification.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the schema for an `AssessmentTest` in both the `GET` response and the `PUT` request body.\n2. Note that it includes a top-level property `timeLimit` of type `number`.\n\nCURL command example (for PUT):\n\n```bash\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/timed-test\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"identifier\": \"timed-test\",\n  \"title\": \"A Timed Test\",\n  \"timeLimit\": 3600, /* Non-compliant simple property */\n  \"qti-test-part\": [\n    ...\n  ]\n}'\n```\n\nThis affects any assessment workflow that requires specific time constraints, as the implementation does not support the full QTI standard.\"\n\n**Expected:** \n\"The API must model the `qti-time-limits` element correctly. According to the QTI 3.0 Specification, section **4.4.9 \"qti-time-limits\" Attribute Description**, time limits on an `assessmentTest` are defined by a complex child element `<qti-time-limits>`. This element contains attributes for `max-time` (the maximum duration allowed) and `min-time` (the minimum duration required).\n\nThe JSON representation should be a structured object, for example:\n\n```json\n\"qti-time-limits\": {\n  \"max-time\": \"PT1H30M0S\", // ISO 8601 Duration format\n  \"min-time\": \"PT0H15M0S\"\n}\n```\n\nThe current implementation is a lossy, non-compliant abstraction that prevents authors from setting both minimum and maximum times and uses a simple integer instead of the standard ISO 8601 duration format.\"\n\n**Environment:** \"API Route: /assessment/tests/{identifier}\nLocal Spec: /assessment/tests/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test configuration and delivery\"\n**Additional Notes:** This deviation breaks QTI compliance and interoperability. A system exporting a test with both `min-time` and `max-time` would lose information when importing into this API. Conversely, a test authored in this API could not be correctly represented in a standard-compliant QTI system. The use of a simple integer for seconds instead of the specified ISO 8601 duration string (`P...T...`) is also a major violation. This must be corrected to align with the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:39:08.974Z",
    "updatedAt": "2025-07-03T12:49:08.930Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-723/critical-timelimit-implementation-is-a-non-compliant-simplification-of"
  },
  {
    "id": "f2e61a3c-bde5-47c6-a847-b87940f88edc",
    "identifier": "BUG-722",
    "title": "CRITICAL: `href` attribute is not enforced as required for `qti-assessment-item-ref`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The OpenAPI schema for the `PUT` request body (`components/schemas/Section`) defines the `qti-assessment-item-ref` properties but only lists `identifier` as required. The `href` attribute, which contains the URI to the actual assessment item, is defined as optional. This allows clients to create assessment tests with item references that point to nothing, breaking the test's integrity.\n\n**Summary:** \nThe OpenAPI schema for the `PUT` request body (`components/schemas/Section`) defines the `qti-assessment-item-ref` properties but only lists `identifier` as required. The `href` attribute, which contains the URI to the actual assessment item, is defined as optional. This allows clients to create assessment tests with item references that point to nothing, breaking the test's integrity.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Construct a JSON payload to update an assessment test via the `PUT` method.\n2. In the payload, define a `qti-test-part` containing a `qti-assessment-section`.\n3. Within the `qti-assessment-section`, include an item in the `qti-assessment-item-ref` array.\n4. For this item, provide only the `identifier` attribute and completely omit the `href` attribute.\n5. Send a `PUT` request to `/assessment-tests/{identifier}` with this malformed payload.\n\nCURL command to reproduce:\n\n```bash\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"identifier\": \"some-test\",\n  \"title\": \"Test with Invalid Item Reference\",\n  \"qti-test-part\": [\n    {\n      \"identifier\": \"part1\",\n      \"navigationMode\": \"linear\",\n      \"submissionMode\": \"individual\",\n      \"qti-assessment-section\": [\n        {\n          \"identifier\": \"section1\",\n          \"title\": \"Section with Invalid Ref\",\n          \"visible\": true,\n          \"qti-assessment-item-ref\": [\n            {\n              \"identifier\": \"item-without-href\"\n              /* \"href\" attribute is missing */\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}'\n```\n\nThis affects the core assessment authoring workflow, as it allows for the creation of structurally incomplete and unusable tests.\"\n\n**Expected:** \nThe API must reject any request that attempts to create or update an `assessmentItemRef` without the `href` attribute. According to the official QTI 3.0 Specification, section **5.6.5 \"href\" Characteristic Description**, the `href` attribute is **required**. Its purpose is to provide the URI for the referenced `assessmentItem`. An `assessmentItemRef` without an `href` is invalid and useless. The API should return a `400 Bad Request` status code with a clear error message indicating that the `href` field is missing.\n\n**Environment:** \"API Route: /assessment/tests/{identifier}\nLocal Spec: /assessment/tests/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test authoring and management\"\n**Additional Notes:** This is a critical violation of the QTI 3.0 specification. The `href` attribute is the entire point of an `<assessmentItemRef>` element; it's the link that connects a test structure to an actual question. Allowing its omission can lead to silent data corruption where tests appear valid in the system but will fail catastrophically during delivery when the assessment engine tries to load the non-existent item. This breaks the fundamental principle of interoperability and data integrity that QTI is built upon.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:33:09.107Z",
    "updatedAt": "2025-07-03T12:54:55.402Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-722/critical-href-attribute-is-not-enforced-as-required-for-qti-assessment"
  },
  {
    "id": "d70c0b42-e5c0-417c-aafa-f06f8dee4c89",
    "identifier": "BUG-721",
    "title": "CRITICAL: `content.qti-response-processing` Schema is Empty, Omitting Scoring Logic",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `content` object, which is supposed to be a parsed representation of the QTI XML, defines the `qti-response-processing` key with an empty object as its value. This completely omits the actual scoring and feedback logic from the structured part of the response.\n\n**Summary:** \nThe `content` object, which is supposed to be a parsed representation of the QTI XML, defines the `qti-response-processing` key with an empty object as its value. This completely omits the actual scoring and feedback logic from the structured part of the response.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make a GET request to the `/assessment-tests/{identifier}/questions` endpoint.\n2. Inspect the `content.qti-assessment-item.qti-response-processing` field in the JSON response.\n3. Observe that the schema is defined as an empty object (`{}`), providing no details on the actual response processing rules.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \nThe `qti-response-processing` element is a core part of an assessment item. Its schema should be fully defined to represent its contents, as specified in QTI 3.0 (Section 4.1.20 and 4.6). This includes either a `template` attribute or a full hierarchy of `responseRule`s (`qti-response-if`, `qti-response-else-if`, `qti-response-else`) and the expressions they contain. The API fails to provide this critical information in a structured way.\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** This bug is directly related to the proprietary `responseProcessing` model. The API developers created a custom abstraction and then failed to correctly model the *actual* QTI structure in the `content` field. This leaves API consumers with no structured way to understand an item's scoring logic, forcing them to parse the `rawXml` for any meaningful operation, which negates the value of the parsed `content` object.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:30:56.153Z",
    "updatedAt": "2025-07-03T05:51:06.564Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-721/critical-contentqti-response-processing-schema-is-empty-omitting"
  },
  {
    "id": "a8c26de8-b4cd-4b86-ba1c-17ed612877a1",
    "identifier": "BUG-720",
    "title": "Missing 'format' Validator for date-time Strings",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local specification for date fields such as `validFrom`, `validUntil`, and `awardedDate` declares them as type `string` but omits the required `format: date-time` validator.\n\n**Summary:** \nThe local specification for date fields such as `validFrom`, `validUntil`, and `awardedDate` declares them as type `string` but omits the required `format: date-time` validator.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schema for date-related fields like `validFrom` and `awardedDate` within the local spec's `data` object.\n2. Note that they are defined only as `type: string`.\n3. Examine the corresponding fields in the upstream `ClrCredential` schema in the JSON spec.\n4. Observe that these fields are defined with `type: string` and `format: date-time`.\n\n**Expected:** \nAll date-time fields should include the `format: date-time` attribute in their schema to enforce the correct ISO8601 format, as specified in the upstream spec. For example, `validFrom` in the upstream spec is:\n`\"validFrom\": { \"type\": \"string\", \"description\": \"...\", \"format\": \"date-time\", ... }`\nThe local spec's omission means it is less strict and does not enforce the proper data format for these critical fields.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** Lacking the `format` validator can lead to inconsistent date formats being stored and returned, causing parsing errors for clients that expect a valid ISO8601 date-time string. This reduces the robustness and reliability of the API.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:30:25.856Z",
    "updatedAt": "2025-07-03T05:50:56.478Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-720/missing-format-validator-for-date-time-strings"
  },
  {
    "id": "b4d5504d-8272-4cb5-ae9d-f87a0f6b4f0c",
    "identifier": "BUG-719",
    "title": "CRITICAL: Incorrect Cardinality for `content.qti-assessment-stimulus-ref`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The schema for `qti-assessment-stimulus-ref` within the `content` object defines it as a single object. This incorrectly implies that an assessment item can only be associated with one stimulus.\n\n**Summary:** \nThe schema for `qti-assessment-stimulus-ref` within the `content` object defines it as a single object. This incorrectly implies that an assessment item can only be associated with one stimulus.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make a GET request to the `/assessment-tests/{identifier}/questions` endpoint.\n2. Inspect the `content.qti-assessment-item.qti-assessment-stimulus-ref` field in the JSON response for any question.\n3. Observe that it is defined as a single JSON object, not an array of objects.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \nAccording to the QTI 3.0 specification (Section 4.1.15), the `qti-assessment-stimulus-ref` element has a multiplicity of 0 or more (`0...*`). This means an item can reference zero, one, or multiple stimuli. Therefore, the corresponding `qti-assessment-stimulus-ref` property in the JSON schema must be an array of objects to correctly model this relationship.\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** This bug prevents the correct representation of items that rely on multiple pieces of stimulus material (e.g., a passage of text and a related data table or image). This is a valid and necessary use case in many assessment scenarios. Fixing this requires changing the schema from `type: object` to `type: array, items: { ... }`.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:29:54.859Z",
    "updatedAt": "2025-07-03T05:50:47.194Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-719/critical-incorrect-cardinality-for-contentqti-assessment-stimulus-ref"
  },
  {
    "id": "e1dead91-7a06-4d1b-bb2a-36cb2a81bd29",
    "identifier": "BUG-718",
    "title": "Incomplete Schema for the 'proof' Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local specification incorrectly defines all properties within the `proof` object as required.\n\n**Summary:** \nThe local specification incorrectly defines all properties within the `proof` object as required.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `proof` object schema within the local spec's response body.\n2. Note that all of its properties (`type`, `cryptosuite`, `created`, `proofPurpose`, `verificationMethod`, `proofValue`) are marked as `required`.\n3. Examine the `Proof` schema in the upstream JSON spec (`components.schemas.Proof`).\n4. Observe that only the `type` property is required. All other properties are optional.\n\n**Expected:** \nThe implementation should match the upstream `Proof` schema, where only the `type` property is required. All other properties, such as `cryptosuite`, `created`, and `proofValue`, are optional. This allows for different types of proof mechanisms which may not use all of these fields. The local spec's strict requirements are a deviation from this flexibility.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This bug could cause validation issues for clients consuming our API. If a valid `ClrCredential` from another system contains a `proof` object with only the required `type` field, our system or a client using our spec might incorrectly reject it as invalid. This undermines interoperability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:28:55.746Z",
    "updatedAt": "2025-07-03T05:50:38.579Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-718/incomplete-schema-for-the-proof-object"
  },
  {
    "id": "e765f5ee-41e2-4f53-b03d-addec898ade8",
    "identifier": "BUG-717",
    "title": "Missing Required Security Scope in Endpoint Definition",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local API specification's security definition for the endpoint is `OAuth2: []`, which fails to specify the required OAuth2 scope for this operation.\n\n**Summary:** \nThe local API specification's security definition for the endpoint is `OAuth2: []`, which fails to specify the required OAuth2 scope for this operation.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `security` section under the `get` operation in the local spec. It shows `OAuth2: []`.\n2. Examine the `security` section for the `getCredentials` operation in the upstream JSON spec.\n3. Note that the upstream spec requires a specific scope to be present.\n\n**Expected:** \nThe API definition must include the specific scope required to access the endpoint. According to the upstream JSON and HTML specifications (Section 5.2.1), the `getCredentials` operation requires the `https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.readonly` scope.\n\nThe upstream JSON spec defines it as:\n`\"security\": [ { \"OAuth2ACG\": [ \"https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.readonly\" ] } ]`\n\nThis omission in the local spec is a serious security and documentation issue.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** Failing to document the required security scope can lead to implementation errors in both clients and the authorization server. It could result in access control being either too permissive or too restrictive, and it misrepresents the security requirements of the API.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:27:53.765Z",
    "updatedAt": "2025-07-03T05:50:27.618Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-717/missing-required-security-scope-in-endpoint-definition"
  },
  {
    "id": "735e46ab-0ab6-41a2-95b6-2056c5e45546",
    "identifier": "BUG-716",
    "title": "CRITICAL: `correctResponse` in `responseDeclaration` is Incorrectly Marked as Required",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API schema mandates that every `responseDeclaration` must include a `correctResponse`. This is enforced by the `required: [- identifier, - cardinality, - correctResponse]` constraint in the `responseDeclarations` item schema.\n\n**Summary:** \nThe API schema mandates that every `responseDeclaration` must include a `correctResponse`. This is enforced by the `required: [- identifier, - cardinality, - correctResponse]` constraint in the `responseDeclarations` item schema.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the OpenAPI schema for the `/assessment-tests/{identifier}/questions` endpoint.\n2. Navigate to `components.schemas.AssessmentItem.properties.responseDeclarations`.\n3. Observe that the `correctResponse` property is listed in the `required` array for each item in `responseDeclarations`.\n4. This implies that any system using this API must provide a correct response, even for items where one is not applicable.\n\nCurl command:\n\n```bash\n# This is a schema validation issue, not a runtime one, but a POST/PUT would fail without a correctResponse.\n# A GET response would presumably always include a correctResponse, even if it's empty/null,\n# which still incorrectly represents the QTI model.\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \nAccording to the QTI 3.0 specification, the `qti-correct-response` element is an optional (multiplicity 0..1) child of `qti-response-declaration`. This is crucial for supporting item types that do not have a single correct answer, such as opinion surveys, personality assessments, or unscored essay prompts. The API schema must be updated to make the `correctResponse` property optional.\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** This bug makes it impossible for the platform to be compliant with QTI, as it cannot represent a significant and valid category of assessment items. Forcing a `correctResponse` breaks authoring workflows and prevents interoperability with content from other systems that correctly model items without correct answers.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:27:48.218Z",
    "updatedAt": "2025-07-03T05:50:15.720Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-716/critical-correctresponse-in-responsedeclaration-is-incorrectly-marked"
  },
  {
    "id": "39cf9e18-f946-4c6d-98a3-aac96e52f42e",
    "identifier": "BUG-715",
    "title": "CRITICAL: `content.qti-item-body` Schema is Empty, Omitting Essential Item Content",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The schema for `qti-item-body` within the `content` object (the parsed XML representation) is defined as an empty object. This means the API response provides no structured information about the actual question prompt, interaction types (like multiple choice, text entry), or any other content presented to the user.\n\n**Summary:** \nThe schema for `qti-item-body` within the `content` object (the parsed XML representation) is defined as an empty object. This means the API response provides no structured information about the actual question prompt, interaction types (like multiple choice, text entry), or any other content presented to the user.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make a GET request to the `/assessment-tests/{identifier}/questions` endpoint.\n2. Inspect the `content.qti-assessment-item.qti-item-body` field in the JSON response for any question.\n3. Observe that the schema is defined as an empty object (`{}`).\n\nCurl command:\n\n```bash\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \nAccording to the QTI 3.0 specification (Section 4.1.18), the `qti-item-body` is a required (1..1) element that contains the core content of the assessment item. Its content model is complex, including block and inline static elements (like `<p>`, `<img>`) and at least one interaction element (e.g., `qti-choice-interaction`, `qti-text-entry-interaction`). The OpenAPI schema must fully define this structure to accurately represent the item's content.\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** Failing to model the `qti-item-body` makes the structured `content` part of the API response useless. The `itemBody` is the \"question\" part of the question. Without it, a client cannot render or understand the item without falling back to parsing the `rawXml`. This completely defeats the purpose of providing a parsed JSON representation of the QTI item.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:26:40.991Z",
    "updatedAt": "2025-07-03T05:50:05.103Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-715/critical-contentqti-item-body-schema-is-empty-omitting-essential-item"
  },
  {
    "id": "f4eaa5bb-93f2-4705-bfc5-30847e652ca6",
    "identifier": "BUG-714",
    "title": "Incorrect Error Response Schemas",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation defines custom, verbose, and incorrect schemas for all error responses (e.g., `BadRequestResponse`, `UnauthorizedRequestResponse`). These schemas do not match the standard `Imsx_StatusInfo` object required by the upstream specification. For example, the local `imsx_CodeMinor` is structured differently and there is an extra `imsx_error_details` property.\n\n**Summary:** \nThe local implementation defines custom, verbose, and incorrect schemas for all error responses (e.g., `BadRequestResponse`, `UnauthorizedRequestResponse`). These schemas do not match the standard `Imsx_StatusInfo` object required by the upstream specification. For example, the local `imsx_CodeMinor` is structured differently and there is an extra `imsx_error_details` property.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schemas for error responses (400, 401, 403, etc.) in the local spec's `components` section.\n2. Note their complex structure, including `imsx_CodeMinor` (with a capital C) as an object and an `imsx_error_details` field.\n3. Compare this with the `Imsx_StatusInfo` schema in the upstream JSON spec, which is the required schema for all error responses.\n4. Observe the significant structural differences.\n\n**Expected:** \nAll error responses for this API should return a JSON object that conforms to the `Imsx_StatusInfo` schema as defined in the upstream specification (`/components/schemas/Imsx_StatusInfo`). This schema has a simple structure with `imsx_codeMajor`, `imsx_severity`, `imsx_description`, and an optional `imsx_codeMinor` object that contains an array of fields. The local implementation's error schemas are completely non-standard.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** Consistent and predictable error handling is crucial for API integrations. By using a proprietary error format, we make it impossible for standard clients to correctly parse error conditions and handle them gracefully. This is a critical violation of the specification's contract for all non-2xx responses.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:26:12.037Z",
    "updatedAt": "2025-07-03T18:48:17.870Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-714/incorrect-error-response-schemas"
  },
  {
    "id": "228af7c0-721c-4cc6-a927-2a9b600c6b46",
    "identifier": "BUG-713",
    "title": "CRITICAL: Proprietary `responseProcessing` Model Violates QTI Specification",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `responseProcessing` object in the API response uses a proprietary, simplified schema with fields like `templateType`, `responseDeclarationIdentifier`, `outcomeIdentifier`, `correctResponseIdentifier`, and `incorrectResponseIdentifier`. This custom structure only supports a limited set of hard-coded scoring templates (`match_correct`, `map_response`).\n\n**Summary:** \nThe `responseProcessing` object in the API response uses a proprietary, simplified schema with fields like `templateType`, `responseDeclarationIdentifier`, `outcomeIdentifier`, `correctResponseIdentifier`, and `incorrectResponseIdentifier`. This custom structure only supports a limited set of hard-coded scoring templates (`match_correct`, `map_response`).\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Identify an `assessmentTest` that contains at least one `assessmentItem`.\n2. Make a GET request to the `/assessment-tests/{identifier}/questions` endpoint using the test's identifier.\n3. Observe the `responseProcessing` object within any of the returned `question` objects.\n4. Note that its structure (`templateType`, `responseDeclarationIdentifier`, etc.) is a custom abstraction and not compliant with the QTI 3.0 specification.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://qti.alpha-1edtech.com/api/assessment-tests/some-test-identifier/questions\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\"\n\n**Expected:** \n\"According to the QTI 3.0 specification (Section 4.6), `responseProcessing` must support one of two standard mechanisms:\n1. A `template` attribute that points to a standard response processing template URL (e.g., `http://www.imsglobal.org/question/qti_v3p0/rptemplates/match_correct.xml`).\n2. A full set of `responseRule` elements (`qti-response-if`, `qti-response-else`, etc.) that contain complex expression logic for generalized response processing.\n\nThe local API's custom model completely prevents the use of standard QTI generalized response processing, which is essential for any complex scoring or feedback logic.\"\n\n**Environment:** \"API Route: /assessment-tests/{identifier}/questions\nLocal Spec: /assessment/tests/{identifier}/questions.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item management\"\n**Additional Notes:** This is the most severe violation found. Response processing is a cornerstone of QTI's power and flexibility. By replacing the standard, expression-based model with a rigid, proprietary template system, the API breaks compatibility with a vast majority of valid QTI content. Any item authored with scoring logic more complex than a simple match cannot be correctly represented or processed by this API. The presence of `rawXml` is the only saving grace but does not fix the non-compliant structured JSON representation. This fundamentally undermines the goal of QTI interoperability.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:25:37.065Z",
    "updatedAt": "2025-07-03T05:59:43.709Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-713/critical-proprietary-responseprocessing-model-violates-qti"
  },
  {
    "id": "96a6fb90-027b-4e21-a7bb-d9b0916ceccf",
    "identifier": "BUG-712",
    "title": "Missing Required QTI `OutcomeDeclaration` Attributes in Response Schema",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `qti-outcome-declaration` object in the API response schema is incomplete. It omits several optional but standard attributes defined by the QTI 3.0 specification. The missing attributes are: `view`, `interpretation`, `long-interpretation`, `mastery-value`, `external-scored`, and `variable-identifier-ref`.\n\n**Summary:** \nThe `qti-outcome-declaration` object in the API response schema is incomplete. It omits several optional but standard attributes defined by the QTI 3.0 specification. The missing attributes are: `view`, `interpretation`, `long-interpretation`, `mastery-value`, `external-scored`, and `variable-identifier-ref`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Make a successful call to `PUT /assessment-tests/{identifier}/metadata`.\n2. Examine the `qti-outcome-declaration` array in the JSON response.\n3. Cross-reference the fields present in each object with the QTI 3.0 specification, Section 4.5 (\"OutcomeDeclaration\" Root Class Description).\n4. Observe that standard attributes like `view`, `interpretation`, `long-interpretation`, and `mastery-value` are missing from the response schema.\n\nCURL command:\n\n```bash\n# A successful request to the endpoint will return a response with the incomplete OutcomeDeclaration object.\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/TEST-001/metadata\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \"metadata\": {} }'\n```\"\n\n**Expected:** \nA compliant QTI API must fully support the data model. The response schema for `qti-outcome-declaration` should include all attributes defined in the QTI 3.0 specification, Section 4.5. This allows for a complete and interoperable representation of assessment outcomes, including how they are displayed to candidates (`view`), their semantic meaning (`interpretation`), and criteria for success (`mastery-value`).\n\n**Environment:** \"API Route: /assessment/tests/{identifier}/metadata\nLocal Spec: /assessment/tests/{identifier}/metadata.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test Management\"\n**Additional Notes:** Omitting these attributes constitutes a critical data loss. Systems that rely on the `view` attribute to control feedback visibility or the `interpretation` attribute for programmatic analysis will fail to function correctly. This makes the API non-compliant with the QTI `OutcomeDeclaration` model and severely limits interoperability.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:24:41.627Z",
    "updatedAt": "2025-07-03T05:56:45.539Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-712/missing-required-qti-outcomedeclaration-attributes-in-response-schema"
  },
  {
    "id": "73bd94f0-2114-40a6-a6c2-1d50214fde4e",
    "identifier": "BUG-711",
    "title": "Critical Data Type Mismatch for `visible` Attribute in AssessmentSection",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Within the schema for the `200 OK` response, the `AssessmentSection.visible` attribute has two different data types. In the primary JSON object, it is correctly defined as `boolean`. However, in the nested `content` object (which claims to be a parsed XML representation), the same attribute (`_attributes.visible`) is incorrectly defined as `string`.\n\n**Summary:** \nWithin the schema for the `200 OK` response, the `AssessmentSection.visible` attribute has two different data types. In the primary JSON object, it is correctly defined as `boolean`. However, in the nested `content` object (which claims to be a parsed XML representation), the same attribute (`_attributes.visible`) is incorrectly defined as `string`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Call the `PUT /assessment-tests/{identifier}/metadata` endpoint successfully.\n2. Inspect the `200 OK` response body.\n3. In the main JSON structure, find the `visible` property at the path `qti-test-part[0].qti-assessment-section[0].visible`. Observe its type is `boolean`.\n4. Now inspect the parallel \"parsed XML\" structure within the same response. Find the `visible` property at the path `content.qti-assessment-test.qti-test-part[0].qti-assessment-section[0]._attributes.visible`.\n5. Observe its type is defined as `string`. This is a direct contradiction.\n\nCURL command:\n\n```bash\n# A successful request to the endpoint will return a response with this inconsistency.\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/TEST-001/metadata\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \"metadata\": {} }'\n```\"\n\n**Expected:** \nThe `visible` attribute must have a consistent data type throughout the API response. According to the QTI 3.0 Specification Section 4.2.6, `visible` is a boolean attribute. While its XML representation is the string \"true\" or \"false\", a parsed JSON representation should consistently use the `boolean` type for this value. The `content` object's schema should define `visible` as a `boolean` to match the primary object and the semantic meaning from the QTI spec.\n\n**Environment:** \"API Route: /assessment/tests/{identifier}/metadata\nLocal Spec: /assessment/tests/{identifier}/metadata.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test Management\"\n**Additional Notes:** This is a critical violation of data integrity. A single API call should not return the same piece of information with two different data types. This will cause deserialization errors, unpredictable behavior, and confusion for any client application. It demonstrates a fundamental flaw in how the API model is constructed and serialized.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:23:51.077Z",
    "updatedAt": "2025-07-03T05:49:17.725Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-711/critical-data-type-mismatch-for-visible-attribute-in-assessmentsection"
  },
  {
    "id": "8086c3d9-b7d6-4651-9154-6499fe8c8543",
    "identifier": "BUG-710",
    "title": "Proprietary Wrapper Object in Response Array Instead of Standard ClrCredential Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** Instead of returning an array of standard `ClrCredential` objects, the local implementation returns an array of proprietary wrapper objects. Each wrapper contains metadata fields external to the CLR standard (like `dateCreatedAt`, `status`, etc.) and nests the actual `ClrCredential` inside a `data` property.\n\n**Summary:** \nInstead of returning an array of standard `ClrCredential` objects, the local implementation returns an array of proprietary wrapper objects. Each wrapper contains metadata fields external to the CLR standard (like `dateCreatedAt`, `status`, etc.) and nests the actual `ClrCredential` inside a `data` property.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the items within the `clrs` array in the 200 OK response of the local spec.\n2. Note that each item is a complex object with fields like `id`, `creatorId`, `name`, `status`, and a nested `data` field which contains the actual CLR.\n3. Compare this to the upstream specification, which indicates the response array (`credential`) should contain `ClrCredential` objects directly.\n\n**Expected:** \nThe response array (`credential` as per the spec) should contain `ClrCredential` objects directly, not wrapped in another layer of proprietary objects. The upstream spec's `GetClrCredentialsResponse` schema clearly defines the `credential` property as an `array` of `items: { $ref: '#/components/schemas/ClrCredential' }`. There is no mention of a proprietary wrapper object.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This deviation completely breaks the response contract. A standard client would attempt to parse each item in the response array as a `ClrCredential` and would fail because of the unexpected wrapper structure. This prevents any standard client from consuming our API's credential data.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:23:50.577Z",
    "updatedAt": "2025-07-03T05:49:07.678Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-710/proprietary-wrapper-object-in-response-array-instead-of-standard"
  },
  {
    "id": "6ce83e4d-9585-48a4-af3c-f3e1a133d6f9",
    "identifier": "BUG-709",
    "title": "Incorrect Response Body Schema for GET Credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local spec's successful response body uses a root property named `clrs` to hold the array of credentials and completely omits the standard `compactJwsString` property.\n\n**Summary:** \nThe local spec's successful response body uses a root property named `clrs` to hold the array of credentials and completely omits the standard `compactJwsString` property.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the 200 OK response schema in the local spec. The root object contains a property named `clrs` which is an array.\n2. Examine the 200 OK response schema in the upstream JSON spec, which points to the `GetClrCredentialsResponse` schema.\n3. Note that the `GetClrCredentialsResponse` schema has two properties: `credential` (an array) and `compactJwsString` (an array).\n4. Observe the mismatch in property names (`clrs` vs. `credential`) and the complete omission of the `compactJwsString` property in the local spec.\n\n**Expected:** \nThe response body should conform to the `GetClrCredentialsResponse` schema defined in the upstream specification. This schema requires two properties:\n\n1. `credential`: An array of `ClrCredential` objects for credentials not signed with VC-JWT.\n2. `compactJwsString`: An array of strings for credentials that have been signed with VC-JWT.\n\nThe local implementation's use of `clrs` instead of `credential` and the lack of `compactJwsString` is a critical schema violation.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a critical bug that will cause parsing errors for any client built to the specification. The `compactJwsString` is essential for returning credentials signed with the VC-JWT proof format, and its omission means our API cannot support this part of the standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:22:19.666Z",
    "updatedAt": "2025-07-03T05:48:56.304Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-709/incorrect-response-body-schema-for-get-credentials"
  },
  {
    "id": "533ebf4a-2c61-407d-8fa1-c36cd6c08ec7",
    "identifier": "BUG-708",
    "title": "Invalid Request Body for `PUT /assessment-tests/{identifier}/metadata` - Does Not Update Standard QTI Metadata",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The endpoint `PUT /assessment-tests/{identifier}/metadata` is described as a way to \"Update only the metadata fields (title, description, etc.)\". However, the `requestBody` schema only permits a single, generic `metadata` object with `additionalProperties`, intended for custom data. It does not provide fields to update standard, specified QTI attributes like `title`, `tool-name`, or `tool-version`.\n\n**Summary:** \nThe endpoint `PUT /assessment-tests/{identifier}/metadata` is described as a way to \"Update only the metadata fields (title, description, etc.)\". However, the `requestBody` schema only permits a single, generic `metadata` object with `additionalProperties`, intended for custom data. It does not provide fields to update standard, specified QTI attributes like `title`, `tool-name`, or `tool-version`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Identify an existing assessment test with identifier, e.g., \"TEST-001\" and title \"Initial Title\".\n2. Construct a PUT request to `/assessment-tests/TEST-001/metadata`.\n3. According to the API description (\"Update only the metadata fields\"), attempt to update the test's `title`.\n4. Observe that the `requestBody` schema does not have a `title` property. It only accepts a custom object `{ \"metadata\": { \"custom_key\": \"custom_value\" } }`.\n5. It is impossible to update standard QTI metadata like `title` or `tool-name` via this endpoint, contradicting its stated purpose.\n\nCURL command:\n\n```bash\n# This command will fail validation because 'title' is not a permitted property in the request body.\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/TEST-001/metadata\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"title\": \"New Updated Title\"\n}'\n\n# This is the only valid request, but it doesn't update standard QTI metadata.\ncurl -X PUT \"https://qti.alpha-1edtech.com/api/assessment-tests/TEST-001/metadata\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"metadata\": { \"some_custom_field\": \"some_value\" }\n}'\n```\"\n\n**Expected:** \nThe request body for an endpoint designed to update metadata should accept the standard metadata attributes defined by the QTI specification for an `AssessmentTest`. According to Section 4.4 of the QTI 3.0 spec, this includes `title` (4.4.2), `tool-name` (4.4.4), and `tool-version` (4.4.5). The operation should likely be a `PATCH` on the parent `/assessment-tests/{identifier}` resource, or this PUT operation's request body needs to be changed to allow modification of these core attributes.\n\n**Environment:** \"API Route: /assessment/tests/{identifier}/metadata\nLocal Spec: /assessment/tests/{identifier}/metadata.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test Management\"\n**Additional Notes:** This is a critical semantic and functional flaw. The API provides an endpoint that does not perform its stated function according to the QTI specification. It conflates standard QTI metadata with a proprietary, custom metadata blob. This prevents users from performing basic administrative tasks (like correcting a typo in a test title) in a standard way and breaks the expected workflow for managing QTI entities.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:22:19.408Z",
    "updatedAt": "2025-07-03T05:48:49.450Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-708/invalid-request-body-for-put-assessment-testsidentifiermetadata-does"
  },
  {
    "id": "7789d338-b5bb-4a81-8964-b6f90dfcd269",
    "identifier": "BUG-707",
    "title": "CRITICAL: Incorrect Data Types in POST Response `content` Schema for Boolean Attributes",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** When creating a new test part, the `201 Created` response includes a JSON representation of the created QTI XML. In this JSON structure, the boolean attributes of an `assessmentSection` (`visible`, `required`, `fixed`) are incorrectly typed as strings. For example, `visible: \"true\"` instead of `visible: true`.\n\n**Summary:** \nWhen creating a new test part, the `201 Created` response includes a JSON representation of the created QTI XML. In this JSON structure, the boolean attributes of an `assessmentSection` (`visible`, `required`, `fixed`) are incorrectly typed as strings. For example, `visible: \"true\"` instead of `visible: true`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the `201 Created` response schema for the `POST /.../test-parts` endpoint.\n2. Navigate to the `content.qti-test-part.qti-assessment-section._attributes` object.\n3. Observe that the attributes `visible`, `required`, and `fixed` are defined with `type: string`.\n4. Consult the QTI 3.0 specification for the `AssessmentSection` class (sections `4.2.6`, `4.2.2`, `4.2.3`).\n5. The specification defines these characteristics as having a Boolean value.\n\n`curl` command to trigger the incorrect response schema:\n\n```bash\n# This POST request, upon success, would return a 201 response.\n# The `content` object in that response would incorrectly represent boolean values as strings.\ncurl -X POST \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/some-test-id/test-parts' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"identifier\": \"tp-02\",\n    \"navigationMode\": \"nonlinear\",\n    \"submissionMode\": \"individual\",\n    \"qti-assessment-section\": [\n      {\n        \"identifier\": \"section-B\",\n        \"title\": \"Geometry\",\n        \"visible\": true,\n        \"required\": false,\n        \"fixed\": true\n      }\n    ]\n  }'\n```\"\n\n**Expected:** \nThe QTI data model explicitly defines these attributes as Booleans. A JSON representation of the QTI structure should respect these data types to avoid ambiguity and parsing errors. The response schema should define these attributes as `type: boolean`. For example, section `4.2.6 \"visible\" Characteristic Description` states: \"The value of this characteristic is a Boolean.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Test Part Management\"\n**Additional Notes:** This is a critical data integrity and interoperability issue. A client consuming this API would receive string values like `\"true\"` or `\"false\"`, which are truthy in many languages if not explicitly checked against the string literal. This leads to brittle client-side code and misinterpretation of the test structure. It violates the principle of representing the underlying QTI XML data model accurately.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:21:44.229Z",
    "updatedAt": "2025-07-03T05:49:17.187Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-707/critical-incorrect-data-types-in-post-response-content-schema-for"
  },
  {
    "id": "ee227d64-c9a2-49a2-bc44-0e3bdbb52858",
    "identifier": "BUG-706",
    "title": "CRITICAL: `assessmentSection.required` Attribute Defaults to `true`, Violating QTI Specification",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API specification, in both the `GET` response schema and the `POST` request body's `Section` component schema, defines the `required` attribute on an `assessmentSection` with a default value of `true`.\n\n**Summary:** \nThe local API specification, in both the `GET` response schema and the `POST` request body's `Section` component schema, defines the `required` attribute on an `assessmentSection` with a default value of `true`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the OpenAPI schema for creating or retrieving an `assessmentSection`.\n2. Observe the `required` property within the `Section` schema (`#/components/schemas/Section`) and the `GET` response payload.\n3. The schema specifies `default: true`.\n4. Cross-reference with the official QTI 3.0 specification, section `4.2.2 \"required\" Characteristic Description`.\n5. The official specification states the default value is `false`.\n\n`curl` command to demonstrate the issue via a `POST` request (assuming the API honors the incorrect default):\n\n```bash\n# This command attempts to create a test part with a section.\n# If the 'required' field is omitted from the section object, the server\n# will incorrectly default it to 'true' instead of the QTI standard 'false'.\ncurl -X POST \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/some-test-id/test-parts' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"identifier\": \"tp-01\",\n    \"navigationMode\": \"linear\",\n    \"submissionMode\": \"simultaneous\",\n    \"qti-assessment-section\": [\n      {\n        \"identifier\": \"section-A\",\n        \"title\": \"Algebra\",\n        \"visible\": true\n        // \"required\" field is omitted to test the default\n      }\n    ]\n  }'\n```\"\n\n**Expected:** \nAccording to the official QTI 3.0 specification, section `4.2.2 \"required\" Characteristic Description`, the `required` attribute is optional and **must have a default value of `false`**. A required section means its children must appear in the selection, which has significant implications for test construction and delivery. The current implementation inverts the standard behavior.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** This is a critical violation of the QTI content model. Incorrectly defaulting `required` to `true` fundamentally alters the behavior of test assembly. A test author expecting a section to be optional (the standard default) would find it is mandatory, potentially breaking selection and ordering rules. This will lead to tests that are not interoperable and behave unexpectedly when moved to a compliant system.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:20:27.397Z",
    "updatedAt": "2025-07-03T05:54:47.200Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-706/critical-assessmentsectionrequired-attribute-defaults-to-true"
  },
  {
    "id": "bfe26504-7765-4987-a6fc-6955c090d39e",
    "identifier": "BUG-705",
    "title": "CRITICAL: `assessmentSection` schema is missing numerous required and optional QTI attributes.",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API's `Section` model is a drastically simplified representation of the QTI `assessmentSection`. It omits many attributes that are essential for controlling assessment behavior, such as adaptive testing rules (`qti-pre-condition`, `qti-branch-rule`), time limits (`qti-time-limits`), presentation (`keep-together`), and instructional content (`qti-rubric-block`).\n\n**Summary:** \nThe local API's `Section` model is a drastically simplified representation of the QTI `assessmentSection`. It omits many attributes that are essential for controlling assessment behavior, such as adaptive testing rules (`qti-pre-condition`, `qti-branch-rule`), time limits (`qti-time-limits`), presentation (`keep-together`), and instructional content (`qti-rubric-block`).\n\n**Steps to Reproduce:**\n\"1. Review the `Section` component schema and the `GET` response schema in the local OpenAPI specification.\n2. Compare the list of properties (`identifier`, `title`, `visible`, `required`, `fixed`, `sequence`, `qti-assessment-item-ref`) with the attributes defined for the `AssessmentSection` Root Class in the official QTI 3.0 specification (Section 4.2).\n3. Observe that the following standard QTI attributes are missing from the local implementation:\n    - `class` (4.2.5)\n    - `keep-together` (4.2.7)\n    - `qti-pre-condition` (4.2.9)\n    - `qti-branch-rule` (4.2.10)\n    - `qti-item-session-control` (4.2.11)\n    - `qti-time-limits` (4.2.12)\n    - `adaptive` (4.2.13)\n    - `qti-rubric-block` (4.2.14)\n\nA `POST` request attempting to use any of these standard features would fail validation.\n\n```bash\n# This conceptual request to create a section with a time limit would fail.\ncurl -X POST \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-A/sections' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"identifier\": \"timed-section\",\n    \"title\": \"Timed Section\",\n    \"visible\": true,\n    \"qti-time-limits\": {\n      \"min-time\": \"PT10M\",\n      \"max-time\": \"PT20M\"\n    }\n  }'\n```\"\n\n**Expected:** \nThe API schema for an `assessmentSection` should include all attributes defined in Section 4.2 of the QTI 3.0 specification. This would allow API clients to create and manage fully-featured QTI sections that can control navigation, timing, feedback, and adaptive behavior as intended by the QTI standard. At a minimum, key features for adaptive testing and time limits must be supported for an implementation to be considered robust.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** The absence of these attributes makes the implementation non-compliant with the QTI `assessmentSection` information model. This prevents users from creating anything but the most basic, static assessments. Key QTI use cases, such as adaptive tests, timed sections, and tests with rich instructions (rubrics), are impossible to implement through this API.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:20:01.075Z",
    "updatedAt": "2025-07-03T05:55:25.875Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-705/critical-assessmentsection-schema-is-missing-numerous-required-and"
  },
  {
    "id": "96f08134-39fc-4249-9572-5ffa2ebf1abb",
    "identifier": "BUG-704",
    "title": "Incorrect Pagination Implementation in Response Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation returns pagination metadata as part of the JSON response body.\n\n**Summary:** \nThe local implementation returns pagination metadata as part of the JSON response body.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the 200 OK response schema in the local spec. Note the inclusion of `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` in the JSON body.\n2. Examine the 200 OK response in the upstream JSON and HTML specs.\n3. Note that the upstream spec requires pagination information to be returned in HTTP headers (`Link` and `X-Total-Count`), not in the response body.\n\n**Expected:** \nThe API should follow the standard pagination mechanism defined in the upstream specification.\n\nThe upstream JSON spec shows for the 200 OK response:\n`\"headers\": { \"X-Total-Count\": { \"$ref\": \"#/components/headers/X-Total-Count\" } },`\n`\"links\": { \"next\": { ... }, \"last\": { ... }, \"first\": { ... }, \"prev\": { ... } }`\n\nThis indicates that the total count should be in the `X-Total-Count` header, and pagination URLs should be in the `Link` header, as per Section 5.4 of the HTML documentation. The local implementation's body-based pagination is a severe violation of the standard.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a critical interoperability issue. Clients will be parsing response headers for pagination information and will find none. They will not know to look in the response body for proprietary pagination fields. This completely breaks any standard client's ability to page through results.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:19:58.125Z",
    "updatedAt": "2025-07-03T05:48:07.774Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-704/incorrect-pagination-implementation-in-response-body"
  },
  {
    "id": "f49cce01-87d2-4af7-a050-cdce83b3f9c7",
    "identifier": "BUG-703",
    "title": "CRITICAL: QTI `assessmentSection` content model is incomplete and does not support nested sections, selection, or ordering rules.",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API implementation for an `assessmentSection` only permits a flat list of `qti-assessment-item-ref` children. It completely omits support for the other valid `sectionPart` children defined in the QTI specification, namely nested `assessmentSection`s, `selection` rules (for choosing a subset of items), and `ordering` rules (for shuffling items).\n\n**Summary:** \nThe local API implementation for an `assessmentSection` only permits a flat list of `qti-assessment-item-ref` children. It completely omits support for the other valid `sectionPart` children defined in the QTI specification, namely nested `assessmentSection`s, `selection` rules (for choosing a subset of items), and `ordering` rules (for shuffling items).\n\n**Steps to Reproduce:**\n\"1. Review the local OpenAPI specification for the route `/assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections`.\n2. Observe the schema for the GET response (`items` array) and the POST request body (`Section` schema).\n3. Note that the only child elements allowed within a section are defined by the `qti-assessment-item-ref` array.\n4. Cross-reference this with the official QTI 3.0 specification, section 4.2.15, which defines the `sectionPart` attribute. This attribute specifies that an `assessmentSection` can contain not only `assessmentItemRef` elements but also nested `assessmentSection` elements, `selection` rules, and `ordering` rules.\n\nExample of what is NOT possible with the current API:\nA POST request to create a section with a nested section would be rejected.\n\n```bash\n# This conceptual request would fail because the schema does not allow an assessmentSection within another section.\ncurl -X POST \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-A/sections' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"identifier\": \"main-section\",\n    \"title\": \"Main Section\",\n    \"visible\": true,\n    \"sectionPart\": [\n      {\n        \"assessmentSection\": {\n           \"identifier\": \"nested-section-1\",\n           \"title\": \"A Nested Section\",\n           \"visible\": true,\n           \"qti-assessment-item-ref\": [ ... ]\n        }\n      }\n    ]\n  }'\n```\"\n\n**Expected:** \nAccording to the QTI 3.0 specification (Section 4.2.15 \"sectionPart\" Attribute Description), the content of an `assessmentSection` is defined by a flexible content model. It should be able to contain a mix of `assessmentItemRef`, nested `assessmentSection`, `selection`, and `ordering` elements. This allows for the creation of complex test structures, such as tests with subsections or sections where items are randomly selected and shuffled. The API schema should reflect this complex content model.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section management\"\n**Additional Notes:** This is a critical violation of the QTI content model. It prevents the API from representing a large number of valid QTI test structures. Any tool built on this API would be incapable of authoring or displaying tests that use nested sections or dynamic item selection/ordering, which are fundamental features of the QTI standard. This severely limits interoperability and the functional scope of the assessment engine.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:19:06.223Z",
    "updatedAt": "2025-07-03T05:54:23.724Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-703/critical-qti-assessmentsection-content-model-is-incomplete-and-does"
  },
  {
    "id": "806e5967-1ab9-4294-baec-2dc9858972bc",
    "identifier": "BUG-702",
    "title": "QTI Compliance Violation: `assessmentSection` Model Lacks Support for `qti-ordering`, `qti-selection`, and `qti-rubric-block`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local `Section` model is missing key structural and presentational elements from the QTI specification. It does not provide any mechanism to define item ordering (`qti-ordering`), item selection rules (`qti-selection`), or instructional content (`qti-rubric-block`).\n\n**Summary:** \nThe local `Section` model is missing key structural and presentational elements from the QTI specification. It does not provide any mechanism to define item ordering (`qti-ordering`), item selection rules (`qti-selection`), or instructional content (`qti-rubric-block`).\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Attempt to create or update a section where the items should be presented in a random order, or where a random subset of items should be selected from the referenced list.\n2. Note that the API provides no fields or structures to define `qti-ordering` or `qti-selection` rules.\n3. Attempt to add instructional text (a rubric) to the section. Note that there is no field for `qti-rubric-block`.\n\nCurl command to demonstrate the lack of functionality (conceptual):\n\n```bash\n# This conceptual PUT request attempts to add ordering rules, which would fail\n# because the API schema does not support the 'qti-ordering' element.\ncurl -X PUT \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/section-A' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"identifier\": \"section-A\",\n        \"title\": \"A Section with Shuffled Items\",\n        \"visible\": true,\n        \"qti-ordering\": { \"shuffle\": true },  // This field does not exist in the local spec\n        \"qti-assessment-item-ref\": [...]\n      }'\n```\n\nThis bug affects QTI workflows for building robust tests. It prevents item shuffling/randomization, creating tests that pull a random subset of questions from a larger pool, and providing section-level instructions to candidates.\"\n\n**Expected:** \n\"A compliant `assessmentSection` model must support these fundamental features. According to the QTI 3.0 specification:\n\n* `qti-ordering`: This element should be a child of the section to control the order in which items are presented (e.g., shuffling).\n* `qti-selection`: This element should be a child of the section to define rules for selecting a number of items from the contained list (e.g., select 5 out of 10).\n* `qti-rubric-block` (Spec 4.2.14): This element must be supported to provide candidates with instructions, scoring information, or other relevant content for the section.\n\nThe API should allow for these complex objects to be included in the section's definition.\"\n\n**Environment:** \"API Route: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section Management\"\n**Additional Notes:** The lack of ordering and selection rules is a critical failure. The ability to randomize question order and create dynamic tests by selecting from item pools is a cornerstone of modern assessment platforms and a primary feature of QTI. Omitting `qti-rubric-block` also prevents the delivery of essential contextual information to the test-taker. This deviation severely restricts the platform to creating only static, predefined tests and is a major violation of the QTI specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:18:12.020Z",
    "updatedAt": "2025-07-03T05:54:07.016Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-702/qti-compliance-violation-assessmentsection-model-lacks-support-for-qti"
  },
  {
    "id": "557cc64e-31c6-4a1f-9f2f-a86d4d15e3d4",
    "identifier": "BUG-701",
    "title": "QTI Compliance Violation: `qti-assessment-item-ref` Schema is Severely Incomplete and Missing Numerous Control Attributes",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The schema for an assessment item reference (`qti-assessment-item-ref`) in the API is dangerously minimalistic. It only includes `identifier` and `href`, treating it as a simple hyperlink. It is missing the majority of attributes and child elements defined for the `AssessmentItemRef` class in the QTI specification.\n\n**Summary:** \nThe schema for an assessment item reference (`qti-assessment-item-ref`) in the API is dangerously minimalistic. It only includes `identifier` and `href`, treating it as a simple hyperlink. It is missing the majority of attributes and child elements defined for the `AssessmentItemRef` class in the QTI specification.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Execute a `GET` request to retrieve a section that contains item references.\n2. Examine the JSON response and observe the objects within the `qti-assessment-item-ref` array.\n3. Note that each object only contains `identifier` and `href`.\n\nCurl command to demonstrate the incomplete object:\n\n```bash\n# This command retrieves a section.\n# The objects in the 'qti-assessment-item-ref' array are missing most of their required QTI attributes.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/section-A' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\nThis bug affects any QTI workflow that requires controlling an item's behavior within the context of a test section. For example, it is impossible to set an item's weight for scoring (`qti-weight`), make an item optional (`required=\"false\"`), prevent it from being shuffled (`fixed=\"true\"`), or map its outcome variables to test-level variables (`qti-variable-mapping`).\"\n\n**Expected:** \n\"According to Section 5.6 of the QTI 3.0 specification (`\"AssessmentItemRef\" Class Description`), an item reference is a rich object that must support numerous attributes for controlling its behavior and presentation. The local implementation is missing, at a minimum:\n\n* **Attributes**: `required` (Spec 5.6.2), `fixed` (Spec 5.6.3), `class` (Spec 5.6.4), `category` (Spec 5.6.6), `dataExtension` (Spec 5.6.7).\n* **Child Elements**: `qti-pre-condition` (Spec 5.6.8), `qti-branch-rule` (Spec 5.6.9), `qti-item-session-control` (Spec 5.6.10), `qti-time-limits` (Spec 5.6.11), `qti-variable-mapping` (Spec 5.6.12), `qti-weight` (Spec 5.6.13), `qti-template-default` (Spec 5.6.14).\n\nThe API schema should fully represent this complex object to allow authors to control item-level properties within the context of a test section.\"\n\n**Environment:** \"API Route: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section and Item Reference Management\"\n**Additional Notes:** This omission renders the test construction capabilities of the API almost useless for anything beyond a simple sequence of items. It prevents weighted scoring, conditional item presentation, variable mapping (essential for scoring complex interactions), and applying template defaults. The current implementation misunderstands `assessmentItemRef` as a simple link, whereas in QTI it is a powerful contextual wrapper that dictates how an item behaves within a test. This is a fundamental and critical violation of the QTI data model.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:17:00.172Z",
    "updatedAt": "2025-07-03T12:54:20.514Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-701/qti-compliance-violation-qti-assessment-item-ref-schema-is-severely"
  },
  {
    "id": "8388dd84-7b53-4df0-8a94-ff2d24959acd",
    "identifier": "BUG-700",
    "title": "Missing 'since' Query Parameter in GET Credentials Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation of the GET credentials endpoint is missing the `since` query parameter, which is defined as a standard parameter in the upstream specification.\n\n**Summary:** \nThe local implementation of the GET credentials endpoint is missing the `since` query parameter, which is defined as a standard parameter in the upstream specification.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `parameters` section for the `getCredentials` operation in the upstream JSON and HTML specifications.\n2. Note the standard parameter `since` of type `string` and `format: date-time`.\n3. Examine the `parameters` section in the local spec for the equivalent route.\n4. Observe that the `since` parameter is not implemented.\n\n**Expected:** \nThe API should support the `since` query parameter to allow clients to filter credentials issued after a specific timestamp.\n\nThe upstream JSON spec defines this parameter as:\n`{ \"name\": \"since\", \"in\": \"query\", \"description\": \"Only include ClrCredentials issued after this timestamp.\", \"schema\": { \"type\": \"string\", \"format\": \"date-time\" } }`\n\nThis is a standard feature of the CLR v2.0 API that our implementation fails to provide, thus breaking compliance.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** Omitting a standard parameter is a significant deviation. Clients built to the specification will expect to be able to filter by date using the `since` parameter, and our API will fail to support this, causing integration issues.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:16:56.698Z",
    "updatedAt": "2025-07-03T05:47:18.447Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-700/missing-since-query-parameter-in-get-credentials-endpoint"
  },
  {
    "id": "910d18a3-580b-4b2f-863e-37152ea4b0d3",
    "identifier": "BUG-699",
    "title": "Non-standard Query Parameters Implemented for GET Credentials Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation adds several non-standard query parameters to the GET credentials endpoint: `fields`, `sort`, `orderBy`, `filter`, and `search`.\n\n**Summary:** \nThe local implementation adds several non-standard query parameters to the GET credentials endpoint: `fields`, `sort`, `orderBy`, `filter`, and `search`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `parameters` section of the `get` operation in the local spec.\n2. Note the inclusion of `fields`, `sort`, `orderBy`, `filter`, and `search`.\n3. Compare these with the parameters defined for the `getCredentials` operation in the upstream JSON and HTML specifications.\n4. Observe that these parameters are not part of the official specification.\n\nCurl command demonstrating a non-standard parameter:\n`curl -X GET \"https://api.alpha-1edtech.com/ims/clr/v2p0/credentials/student/some-student-id?filter=status%3D'active'\"`\n\n**Expected:** \nThe implementation should only support the query parameters defined in the official specification. According to the upstream JSON and HTML (Section 5.2.2.1), the only standard query parameters for this endpoint are `limit`, `offset`, and `since`. Any other filtering or sorting capabilities are proprietary extensions and should be documented as such, but as implemented, they represent a deviation from the base specification.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** Adding non-standard parameters for filtering and sorting breaks compliance with the standard. A client built to the spec would not know how to use these parameters. While extending functionality can be useful, it deviates from the goal of interoperability. Furthermore, the standard `since` parameter for filtering by date is completely missing from the local implementation, which is another bug.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:16:05.528Z",
    "updatedAt": "2025-07-03T05:47:17.798Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-699/non-standard-query-parameters-implemented-for-get-credentials-endpoint"
  },
  {
    "id": "632b7737-22ba-479c-983d-c8f57f4f45fb",
    "identifier": "BUG-698",
    "title": "QTI Compliance Violation: `assessmentSection` Model is Missing Critical Child Elements for Control Flow and Timing (`qti-pre-condition`, `qti-branch-rule`, `qti-item-session-control`, `qti-time-limits`)",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API's JSON model for a `Section` completely omits several child elements that are essential for controlling test flow and behavior in the QTI specification. The model does not support `qti-pre-condition`, `qti-branch-rule`, `qti-item-session-control`, or `qti-time-limits`.\n\n**Summary:** \nThe local API's JSON model for a `Section` completely omits several child elements that are essential for controlling test flow and behavior in the QTI specification. The model does not support `qti-pre-condition`, `qti-branch-rule`, `qti-item-session-control`, or `qti-time-limits`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the response schema for a `GET` request to the section endpoint.\n2. Note that there are no fields corresponding to the QTI elements `qti-pre-condition`, `qti-branch-rule`, `qti-item-session-control`, or `qti-time-limits`.\n3. Attempt to `PUT` an update to a section that includes data for conditional branching or section-specific time limits. The API will reject this as there is no corresponding schema.\n\nCurl command to demonstrate the missing fields in the response:\n\n```bash\n# This command retrieves an existing section.\n# The expected correct response should have keys for control flow and timing, but the current implementation will omit them.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/section-A' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\nThe QTI assessment workflow this affects is any form of dynamic or adaptive testing. Authors cannot specify that a section should only be visible if a certain score was achieved previously (`qti-pre-condition`), nor can they direct a candidate to a remedial section upon failure (`qti-branch-rule`). Section-specific time limits (`qti-time-limits`) are also impossible to implement.\"\n\n**Expected:** \n\"According to the official QTI 3.0 specification, the `assessmentSection` class must be able to contain the following elements to control assessment delivery:\n\n* `qti-pre-condition` (Spec 4.2.9): To define conditions that must be met for the section to be presented.\n* `qti-branch-rule` (Spec 4.2.10): To control the flow of the test after the section is completed.\n* `qti-item-session-control` (Spec 4.2.11): To override default session behaviors (e.g., `maxAttempts`, `showFeedback`) for all items within the section.\n* `qti-time-limits` (Spec 4.2.12): To set a specific time limit for the completion of the section.\n\nThe API response and request bodies for a Section should include complex objects representing these control structures, allowing for the creation of adaptive and dynamic tests.\"\n\n**Environment:** \"API Route: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Section Management\"\n**Additional Notes:** This is a critical violation of the QTI specification. The absence of these control flow elements cripples the assessment engine, reducing its capability to only the most basic linear tests. It makes it impossible to implement common assessment scenarios like pre-requisites, branching logic based on performance, or timed sections within a larger test. This fundamentally breaks compliance and prevents interoperability with any content or system that relies on these standard features.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:15:11.138Z",
    "updatedAt": "2025-07-03T05:55:29.144Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-698/qti-compliance-violation-assessmentsection-model-is-missing-critical"
  },
  {
    "id": "559758fc-061d-4da3-b705-cdeafbdc2e40",
    "identifier": "BUG-697",
    "title": "Incorrect API Path and Method for Retrieving Credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation uses a non-standard, proprietary path `/ims/clr/v2p0/credentials/student/{studentSourcedId}` to fetch credentials for a specific student. This introduces a path parameter `studentSourcedId` that is not part of the official specification.\n\n**Summary:** \nThe local implementation uses a non-standard, proprietary path `/ims/clr/v2p0/credentials/student/{studentSourcedId}` to fetch credentials for a specific student. This introduces a path parameter `studentSourcedId` that is not part of the official specification.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the local API specification for the route `/ims/clr/v2p0/credentials/student/{studentSourcedId}`.\n2. Cross-reference this path with the official upstream JSON and HTML specifications.\n3. Note that the official path for retrieving credentials is `/ims/clr/v2p0/credentials` and it does not include the `/student/{studentSourcedId}` segment.\n\nCurl command to demonstrate the correct endpoint vs the local one:\nCorrect (Upstream):\n`curl -X GET \"https://api.alpha-1edtech.com/ims/clr/v2p0/credentials\"`\n\nIncorrect (Local):\n`curl -X GET \"https://api.alpha-1edtech.com/ims/clr/v2p0/credentials/student/some-student-id\"`\n\n**Expected:** \nThe API should conform to the official specification. The correct path for retrieving credentials is `/credentials`, which is appended to the server's base URL (e.g., `https://example.org/ims/clr/v2p0`).\n\nThe upstream JSON specification defines the endpoint as:\n`\"/credentials\": { \"get\": { ... } }`\n\nThe upstream HTML documentation confirms this in section 5.2.2.1 Request:\n`GET /ims/clr/v2p0/credentials?limit={limit}&amp;offset={offset}&amp;since={since}`\n\nThere is no `/student/{studentSourcedId}` segment or `studentSourcedId` path parameter in the official specification for this operation. Filtering by student would typically be handled by a query parameter like `filter`, but even that is not a standard parameter for this endpoint.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials/student/{studentSourcedId}\nLocal Spec: ims/clr/v2p0/credentials/student/{studentSourcedId}.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a critical deviation from the specification. By creating a proprietary path structure, our implementation breaks compatibility with any client built to the official 1EdTech CLR v2.0 standard. This fundamentally alters the resource model of the API and prevents interoperability. The local implementation appears to be for a custom, student-specific use case that is not covered by the generic `getCredentials` endpoint in the upstream spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:13:55.984Z",
    "updatedAt": "2025-07-03T05:46:44.718Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-697/incorrect-api-path-and-method-for-retrieving-credentials"
  },
  {
    "id": "58d047cf-8763-4291-a027-fedfaf30f436",
    "identifier": "BUG-696",
    "title": "CRITICAL: `AssessmentSection` uses non-standard property `qti-assessment-item-ref` instead of `sectionPart` and omits nested sections",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local implementation's `Section` model, returned in the `201` response, uses a custom property named `qti-assessment-item-ref` to hold an array of item references. This implementation is also limited to only holding item references.\n\n**Summary:** \nThe local implementation's `Section` model, returned in the `201` response, uses a custom property named `qti-assessment-item-ref` to hold an array of item references. This implementation is also limited to only holding item references.\n\n**Steps to Reproduce:**\n\"1. Review the `201` response schema for the `POST .../items` endpoint.\n2. Observe that the list of items within the section is contained in a property named `qti-assessment-item-ref`.\n3. Cross-reference this with the QTI 3.0 specification for the `AssessmentSection` class.\n4. Note that the official QTI attribute for containing section children is `sectionPart`.\n5. Further observe that the local schema for `qti-assessment-item-ref` only allows an array of item references, whereas the official `sectionPart` must also support nested `assessmentSection` elements.\n\ncURL is not applicable for this schema-level bug. This is a structural non-conformance.\"\n\n**Expected:** \n\"According to the QTI 3.0 specification, Section 4.2.15, `\"sectionPart\" Attribute Description`, the container for the contents of a section must be named `sectionPart`.\n\nThe specification states: \"This is the list of constituent parts that make up the section. The constituent parts can be qti-assessment-item-refs, qti-assessment-sections or ordering objects.\"\n\nThe API should use the correct property name `sectionPart` and its schema should allow for a polymorphic array containing both `assessmentItemRef` objects and nested `Section` objects to be fully compliant.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier/sections/{identifier}/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test and Section content modeling.\"\n**Additional Notes:** This deviation breaks the structural integrity and composability of QTI tests. Using a non-standard name (`qti-assessment-item-ref` instead of `sectionPart`) makes the API output non-compliant and difficult for standard QTI tools to parse. More importantly, by failing to support nested sections within `sectionPart`, the API cripples a key feature of QTI for organizing complex assessments. This severely limits the expressiveness of the tests that can be created with this system.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:13:12.217Z",
    "updatedAt": "2025-07-03T12:54:55.383Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-696/critical-assessmentsection-uses-non-standard-property-qti-assessment"
  },
  {
    "id": "4563be98-28e1-4a97-9c0c-cd656e88f3d7",
    "identifier": "BUG-695",
    "title": "CRITICAL: `href` Characteristic is Not Required for `assessmentItemRef`, Violating QTI Specification",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local OpenAPI specification for the `POST .../items` route defines the request body and the `201` response schema for an `assessmentItemRef` as only requiring the `identifier` property. The `href` property, which points to the location of the assessment item resource, is marked as optional.\n\n**Summary:** \nThe local OpenAPI specification for the `POST .../items` route defines the request body and the `201` response schema for an `assessmentItemRef` as only requiring the `identifier` property. The `href` property, which points to the location of the assessment item resource, is marked as optional.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Obtain an OAuth2 token with `createput` scope.\n2. Identify a valid `assessmentTestIdentifier`, `testPartIdentifier`, and `sectionIdentifier`.\n3. Identify an existing `assessmentItem` identifier.\n4. Construct a POST request to `/assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{sectionIdentifier}/items`.\n5. In the request body, provide only the `identifier` for the assessment item, omitting the `href` attribute.\n6. Observe that the API likely accepts this request (based on the schema), which is a violation. The `201` response will then also likely return item references without the required `href`.\n\ncURL Command:\n\n```bash\ncurl -X POST \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-123/test-parts/part-abc/sections/section-xyz/items' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"identifier\": \"item-id-456\"\n  }'\n```\n\nThis request is considered valid by the local OpenAPI specification but is invalid according to the QTI 3.0 specification.\"\n\n**Expected:** \n\"According to the official QTI 3.0 specification, the `AssessmentItemRef` class requires both an `identifier` and an `href`. Section 5.6.5, `\"href\" Characteristic Description`, explicitly states: \"The location of the qti-assessment-item. This characteristic is **required**.\"\n\nTherefore, both the request body and the `qti-assessment-item-ref` objects in the `201` response schema must enforce that `href` is a required property. Any request to add an item reference without an `href` should be rejected with a `400 Bad Request` error.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier/sections/{identifier}/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test authoring and structuring.\"\n**Additional Notes:** This is a critical violation of the QTI data model. The `href` attribute is fundamental to the concept of referencing. Without it, a delivery system has no way to locate and load the actual content of the `assessmentItem`. This breaks the core interoperability promise of QTI, as a test exported from this system would be unusable by any other compliant system. The fix is to add `href` to the `required` array in both the `requestBody` schema and the `201` response's `qti-assessment-item-ref` schema.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:09:57.240Z",
    "updatedAt": "2025-07-03T12:54:55.451Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-695/critical-href-characteristic-is-not-required-for-assessmentitemref"
  },
  {
    "id": "750a8bc1-cbd6-4886-900d-c76fcfa7ffb0",
    "identifier": "BUG-694",
    "title": "CRITICAL: `AssessmentSection` Response Model is Incomplete and Missing Standard QTI Attributes",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `200 OK` response returns a JSON object representing the updated `AssessmentSection`. However, this object is a severely stripped-down version of the official QTI model. It is missing numerous standard attributes, including `class`, `keep-together`, `qti-pre-condition`, `qti-branch-rule`, `qti-item-session-control`, `qti-time-limits`, and `qti-rubric-block`.\n\n**Summary:** \nThe `200 OK` response returns a JSON object representing the updated `AssessmentSection`. However, this object is a severely stripped-down version of the official QTI model. It is missing numerous standard attributes, including `class`, `keep-together`, `qti-pre-condition`, `qti-branch-rule`, `qti-item-session-control`, `qti-time-limits`, and `qti-rubric-block`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Identify a valid `assessmentTestIdentifier`, `testPartIdentifier`, and section `identifier`.\n2. Construct a valid request body containing an ordered list of item identifiers that exist within the target section.\n3. Send a `PUT` request to the `/assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/order` endpoint.\n4. Observe the `200 OK` JSON response body.\n5. Compare the fields in the returned JSON object with the official attributes for the `AssessmentSection` class in the QTI 3.0 specification.\n\n`curl` command:\n\n```bash\ncurl -X PUT \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/test-1/test-parts/part-1/sections/math-section-1/items/order' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"items\": [\n        { \"identifier\": \"item-002\" },\n        { \"identifier\": \"item-001\" }\n    ]\n}'\n```\"\n\n**Expected:** \nAccording to the QTI 3.0 specification, Section 4.2 (\"AssessmentSection\" Root Class Description), an `AssessmentSection` object must be capable of representing all its defined attributes to be compliant. A compliant API response representing a section should include all applicable standard fields. By omitting these fields, the API provides an incomplete and misleading representation of the resource, preventing consuming systems from understanding or acting upon crucial section behaviors like branching logic, time constraints, or associated rubrics.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/order\nLocal Spec: local_spec_for_route\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Section Management\"\n**Additional Notes:** This is a critical QTI content model violation. The purpose of QTI is interoperability, which relies on a shared, complete understanding of the data model. An `AssessmentSection` without its branching rules (`qti-branch-rule`), preconditions (`qti-pre-condition`), or time limits (`qti-time-limits`) is not a complete QTI `AssessmentSection`. A system consuming this API would be unable to correctly render the test flow, enforce time limits on the section, or display rubrics, thereby failing to deliver the assessment as designed. This fundamentally breaks QTI compliance.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:08:34.577Z",
    "updatedAt": "2025-07-03T05:55:27.536Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-694/critical-assessmentsection-response-model-is-incomplete-and-missing"
  },
  {
    "id": "392a4516-fd4c-47ad-967b-f8b6b453169b",
    "identifier": "BUG-693",
    "title": "QTI Content Model Violation: Section Schema Incorrectly Omits Required `href` Attribute for `qti-assessment-item-ref`",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `Section` schema within the local API specification defines an `assessmentItemRef` (`qti-assessment-item-ref`) with only one required property: `identifier`. The `href` property, which contains the URI to the actual assessment item, is defined as optional.\n\n**Summary:** \nThe `Section` schema within the local API specification defines an `assessmentItemRef` (`qti-assessment-item-ref`) with only one required property: `identifier`. The `href` property, which contains the URI to the actual assessment item, is defined as optional.\n\n**Steps to Reproduce:**\n\"This is a schema definition bug, not a runtime bug.\n\n1. Review the provided `local_spec_for_route` YAML file.\n2. Locate the `components.schemas.Section.properties.qti-assessment-item-ref.items` definition.\n3. Observe that the `required` array for an item reference only contains `identifier`. The `href` property is defined but not marked as required.\n4. Cross-reference this with the official QTI 3.0 specification document, Section 5.6 \"AssessmentItemRef\" Class Description, specifically characteristic 5.6.5 \"href\".\n\nThis schema error impacts any API client generation or validation tool that relies on this OpenAPI spec, as it would permit the creation of structurally invalid QTI sections that lack the mandatory link to the assessment item resource.\"\n\n**Expected:** \n\"The official QTI 3.0 specification, in Section 5.6.5 (\"href\" Characteristic Description for `AssessmentItemRef`), states that the `href` attribute has a **Multiplicity: 1**. This means it is a mandatory attribute. An `assessmentItemRef` without an `href` is meaningless as it does not reference anything. The local schema must be corrected to enforce this QTI constraint.\n\nThe `required` array for the item reference schema must be:\n\n```yaml\nrequired:\n  - identifier\n  - href\n```\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Section Management\"\n**Additional Notes:** This is a critical violation of the QTI 3.0 information model. An `assessmentItemRef` serves the single purpose of linking a section to an item; without the `href` link, it fails to perform this function. An API that allows the creation of such malformed data is not QTI-compliant. This will lead to severe interoperability failures, as other QTI-compliant systems will reject assessment data generated from this API. The integrity of the assessment structure is compromised at a fundamental level.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:07:12.869Z",
    "updatedAt": "2025-07-03T12:54:55.345Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-693/qti-content-model-violation-section-schema-incorrectly-omits-required"
  },
  {
    "id": "469b68f0-380d-4eb0-8167-1b5491bc4788",
    "identifier": "BUG-692",
    "title": "Critical Security Vulnerability: Destructive DELETE Operation Lacks Required Security Scope",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The OpenAPI definition for the `DELETE .../items/{itemIdentifier}` operation specifies its security requirement as `security: - OAuth2: []`. The empty array `[]` indicates that any authenticated user with *any* valid scope can access this endpoint. A user with a `readonly` token can therefore execute this destructive `DELETE` call.\n\n**Summary:** \nThe OpenAPI definition for the `DELETE .../items/{itemIdentifier}` operation specifies its security requirement as `security: - OAuth2: []`. The empty array `[]` indicates that any authenticated user with *any* valid scope can access this endpoint. A user with a `readonly` token can therefore execute this destructive `DELETE` call.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Obtain an OAuth2 token from the provider with only the `readonly` scope (`https://purl.imsglobal.org/spec/qti/v3/scope/readonly`).\n2. Identify a valid assessment test, test part, section, and item reference identifier.\n3. Construct a `DELETE` request to the endpoint `/assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{sectionIdentifier}/items/{itemIdentifier}` using the token from step 1.\n4. Observe that the request is likely processed, deleting the item reference, even though the token should only grant read access.\n\nFunctional curl command:\n\n```bash\n# This command SHOULD fail with a 403 Forbidden, but due to the bug, it may succeed with a 204 No Content.\n# Assumes $TOKEN is a token with only 'readonly' scope.\ncurl -X DELETE \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  https://qti.alpha-1edtech.com/api/assessment-tests/test-123/test-parts/part-abc/sections/section-xyz/items/itemref-456\n```\n\nThis vulnerability affects the core security model of the assessment authoring workflow, allowing unauthorized modification of test structures.\"\n\n**Expected:** \n\"According to OAuth2 best practices and the Principle of Least Privilege, a destructive operation like `DELETE` must be protected by a specific, restrictive scope. The OpenAPI definition should explicitly require the `delete` scope defined in the `securitySchemes`.\n\nThe correct implementation should be:\n\n```yaml\nsecurity:\n  - OAuth2:\n      - 'https://purl.imsglobal.org/spec/qti/v3/scope/delete'\n```\n\nThis ensures that only clients who have been granted the `delete` permission can remove parts of an assessment, preventing accidental or malicious data loss by unauthorized actors.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{testPartIdentifier}/sections/{identifier}/items/{itemIdentifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test Management\"\n**Additional Notes:** This is a critical security flaw, not just a QTI deviation. It fundamentally breaks the API's access control model. In a QTI context, where assessment integrity is paramount, allowing unauthorized deletion of test components can invalidate entire assessments, corrupt data, and compromise the reliability of the testing platform. The defined scopes (`readonly`, `createput`, `delete`) clearly intend to separate privileges, but the implementation fails to enforce this separation on a critical endpoint.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:06:09.402Z",
    "updatedAt": "2025-07-03T05:45:59.250Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-692/critical-security-vulnerability-destructive-delete-operation-lacks"
  },
  {
    "id": "81786317-41ea-4c16-a65b-17addf4d875c",
    "identifier": "BUG-691",
    "title": "CRITICAL: `assessmentSection` Schema Does Not Support Nested Sections",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API implementation incorrectly models the content of an `assessmentSection`. It only allows a section to contain a flat list of `qti-assessment-item-ref`. The QTI specification explicitly allows for `assessmentSection` elements to be nested within other `assessmentSection`s to create complex test structures (e.g., a \"Math\" section containing \"Algebra\" and \"Geometry\" sub-sections).\n\n**Summary:** \nThe local API implementation incorrectly models the content of an `assessmentSection`. It only allows a section to contain a flat list of `qti-assessment-item-ref`. The QTI specification explicitly allows for `assessmentSection` elements to be nested within other `assessmentSection`s to create complex test structures (e.g., a \"Math\" section containing \"Algebra\" and \"Geometry\" sub-sections).\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `qti-assessment-section` property in the `GET` response schema. Its `items` property is an object that contains a `qti-assessment-item-ref` array.\n2. Note that there is no provision for an `assessmentSection` to contain another `assessmentSection`.\n3. Refer to the QTI 3.0 specification, Section 4.2.15 `\"sectionPart\" Attribute Description`. This section clarifies that an `assessmentSection`'s content model can include other `assessmentSection` elements, allowing for nested structures.\n\ncURL command to demonstrate limitation:\n\n```bash\n# An attempt to PUT a test part with a nested section would fail validation\n# against the local API spec, as it only allows item-refs inside a section.\n# The following conceptual JSON payload is valid QTI but invalid for this API.\n# {\n#   \"identifier\": \"part1\", \"navigationMode\": \"linear\", \"submissionMode\": \"simultaneous\",\n#   \"qti-assessment-section\": [\n#     {\n#       \"identifier\": \"main-section\", \"title\": \"Main Section\", \"visible\": true,\n#       \"qti-assessment-section\": [ // THIS NESTING IS NOT SUPPORTED\n#         { \"identifier\": \"sub-section\", \"title\": \"Sub Section\", \"visible\": true, \"qti-assessment-item-ref\": [...] }\n#       ]\n#     }\n#   ]\n# }\n```\"\n\n**Expected:** \nThe schema for `assessmentSection` must reflect the official QTI content model. According to Section 4.2.15, an `assessmentSection` can contain a mix of `assessmentItemRef`s and other `assessmentSection`s. This is described as the `sectionPart` group. Therefore, the JSON schema for a section should allow its content array to contain objects representing either an item reference or another, complete section object, enabling recursive nesting.\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test/Section Structure\"\n**Additional Notes:** This deviation from the QTI data model fundamentally breaks the structural integrity of tests. The ability to group sections is essential for organizing large assessments and applying rules (like time limits or navigation) to logical blocks of items. By flattening the structure, the API prevents the correct representation of many common assessment designs, severely limiting its utility and failing a core requirement of the QTI specification.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:05:01.100Z",
    "updatedAt": "2025-07-03T12:25:39.922Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-691/critical-assessmentsection-schema-does-not-support-nested-sections"
  },
  {
    "id": "508eed43-b23d-4fb3-9e68-f66ee32151d1",
    "identifier": "BUG-690",
    "title": "CRITICAL: `assessmentSection` Schema is Missing Crucial Child Elements for Test Control (pre-condition, branch-rule, time-limits)",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API's schema for an `assessmentSection` (both in the `GET` response and the `components/schemas/Section` definition) is severely incomplete. It is missing multiple child elements that are fundamental to QTI's functionality for creating dynamic, adaptive, and controlled assessments. Specifically, it lacks support for pre-conditions, branching rules, item session controls, and time limits at the section level.\n\n**Summary:** \nThe local API's schema for an `assessmentSection` (both in the `GET` response and the `components/schemas/Section` definition) is severely incomplete. It is missing multiple child elements that are fundamental to QTI's functionality for creating dynamic, adaptive, and controlled assessments. Specifically, it lacks support for pre-conditions, branching rules, item session controls, and time limits at the section level.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the schema for `qti-assessment-section` in the `GET /assessment-tests/{assessmentTestIdentifier}/test-parts/{identifier}` response.\n2. Observe that the schema only defines properties for basic attributes like `identifier`, `title`, `visible`, etc., and a list of `qti-assessment-item-ref`.\n3. Cross-reference this with the official QTI 3.0 specification, Section 4.2 \"AssessmentSection\" Root Class Description.\n4. Note the absence of several key child elements that are essential for defining test logic and behavior.\n\ncURL command to demonstrate:\n\n```bash\n# This GET request retrieves a test part. The response body for qti-assessment-section\n# will be missing the fields required for advanced test flow control.\ncurl -X GET \\\n  'https://qti.alpha-1edtech.com/api/assessment-tests/math101/test-parts/part1' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\"\n\n**Expected:** \n\"According to the QTI 3.0 specification, Section 4.2 (\"AssessmentSection\" Root Class Description), an `assessmentSection` must support several child elements to control the flow and behavior of the test. The local schema should include support for:\n- `qti-pre-condition` (Section 4.2.9): To define conditions that must be met before the section is shown.\n- `qti-branch-rule` (Section 4.2.10): To define rules for navigating to other parts of the test after the section is complete.\n- `qti-item-session-control` (Section 4.2.11): To control item-level behaviors like feedback and hints for all items in the section.\n- `qti-time-limits` (Section 4.2.12): To apply time limits to the entire section.\n- `qti-rubric-block` (Section 4.2.14): To associate scoring rubrics with the section.\nThe absence of these makes it impossible to implement any form of adaptive testing, conditional navigation, or timed sections, which are core features of the QTI standard.\"\n\n**Environment:** \"API Route: /assessment-tests/{assessmentTestIdentifier}/test-parts/{identifier}\nLocal Spec: /assessment/tests/{assessmentTestIdentifier}/test/parts/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Test/Section Management\"\n**Additional Notes:** This is a critical violation of the QTI content model. Omitting these control structures prevents the creation of assessments that are anything more than simple, linear sequences of items. It breaks compliance with the standard's features for adaptive testing (as defined in `2.8.3 Pre-conditions and Branching` and `2.8.4 Adaptive Sequencing`), timed assessments (`2.8.5 Time Limits`), and feedback control. Any system consuming data from this API would be unable to reconstruct the intended test logic, leading to a complete failure of interoperability for complex assessments.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:04:06.787Z",
    "updatedAt": "2025-07-03T05:55:28.380Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-690/critical-assessmentsection-schema-is-missing-crucial-child-elements"
  },
  {
    "id": "4d18cb73-ffb8-4127-8d0f-2fde01a872e2",
    "identifier": "BUG-689",
    "title": "Missing/Extra Error Status Codes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local API specification documents the non-standard error codes `422 Unprocessable Entity` and `429 Too Many Requests`. Concurrently, it fails to document the standard error codes `405 Method Not Allowed` for both GET and POST operations, and `404 Not Found` for the POST operation.\n\n**Summary:** \nThe local API specification documents the non-standard error codes `422 Unprocessable Entity` and `429 Too Many Requests`. Concurrently, it fails to document the standard error codes `405 Method Not Allowed` for both GET and POST operations, and `404 Not Found` for the POST operation.\n\n**Steps to Reproduce:**\n\n1. Compare the list of documented error status codes for GET and POST on `/credentials` between the local and upstream specs.\n2. The local spec documents `400, 401, 403, 404, 422, 429, 500`.\n3. The upstream spec documents `400, 401, 403, 405, 500` for GET and adds `404` for POST.\n\n**Expected:** \nThe API should only document and return the error codes specified in the upstream standard. The `405 Method Not Allowed` is a standard response for this endpoint and must be supported. `422` and `429` are not part of the CLR v2.0 specification for this route and should be removed or implemented using the standard error reporting mechanism. The local spec's `POST` operation should also document a `404 Not Found` response as per the upstream spec.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This discrepancy in status codes means a client built against the official spec will not be prepared to handle a `422` or `429` response. Conversely, it will be missing logic to handle a `405` error, which could occur if an unsupported HTTP verb is used. This leads to brittle client integrations.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:03:36.875Z",
    "updatedAt": "2025-07-03T05:45:41.570Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-689/missingextra-error-status-codes"
  },
  {
    "id": "72899409-b18d-42d6-b427-3864e2f2085e",
    "identifier": "BUG-688",
    "title": "Critical Defect: JSON Example for `match` Interaction Violates its Own Schema",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The OpenAPI example provided for a JSON-based match interaction (`json-match`) is invalid according to the very schema it is supposed to be an example of. The example uses an array of arrays for the `correctResponse` value, while the schema explicitly defines it as a flat array of strings.\n\n**Summary:** \nThe OpenAPI example provided for a JSON-based match interaction (`json-match`) is invalid according to the very schema it is supposed to be an example of. The example uses an array of arrays for the `correctResponse` value, while the schema explicitly defines it as a flat array of strings.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Locate the `json-match` example under `POST /assessment-items`.\n2. Examine the structure of `responseDeclarations[0].correctResponse.value`. It is an array of string arrays: `[ [\"C1\", \"T1\"], [\"C2\", \"T2\"], ... ]`.\n3. Now, examine the schema definition for that field at `components.schemas.AssessmentItem.properties.responseDeclarations.items.properties.correctResponse.properties.value`.\n4. The schema is defined as `type: array` with `items: { type: string }`.\n5. The example data (`array` of `arrays`) does not match the schema definition (`array` of `strings`).\"\n\n**Expected:** \n\"The example must be corrected to conform to its schema. For a `directedPair` with `multiple` cardinality, the `correctResponse.value` should be an array of strings, where each string contains the space-separated identifiers.\n\nCorrected `correctResponse` value for the `json-match` example:\n\n```json\n\"correctResponse\": {\n  \"value\": [\n    \"C1 T1\",\n    \"C2 T2\",\n    \"C3 T3\",\n    \"C4 T4\"\n  ]\n}\n```\n\nThis format is consistent with the QTI XML representation for `directedPair` and matches the schema definition. The existing example is critically flawed and will cause implementation errors.\"\n\n**Environment:** \"API Route: /assessment/items\nLocal Spec: /assessment/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item Authoring\"\n**Additional Notes:** This is a critical documentation and schema defect. API examples are a core part of the contract, and when they are wrong, they guarantee incorrect client implementations. This error also shows confusion about how to represent core QTI data types (`directedPair`) in JSON. The problem is not just the example, but a potential misunderstanding in the implementation logic that processes this data.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:02:45.482Z",
    "updatedAt": "2025-07-03T05:45:34.541Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-688/critical-defect-json-example-for-match-interaction-violates-its-own"
  },
  {
    "id": "27c36f6c-b2bf-410f-95c5-b8d7598052f5",
    "identifier": "BUG-687",
    "title": "Critical Deviation: `correctResponse` in `responseDeclaration` is Incorrectly Marked as Required",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API schema mandates that every `responseDeclaration` must have a `correctResponse` object. This is a direct contradiction of the QTI specification, which allows for items without a pre-defined correct answer.\n\n**Summary:** \nThe API schema mandates that every `responseDeclaration` must have a `correctResponse` object. This is a direct contradiction of the QTI specification, which allows for items without a pre-defined correct answer.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `responseDeclarations` schema in the local specification.\n2. Find the `required` array within the `items` object.\n3. Observe that `\"correctResponse\"` is listed, making it a mandatory field.\n4. Attempt to design an essay question (`extended-text`) or a survey question which has no single correct answer. This model would prevent its creation.\n\nCURL Command that would fail validation:\n\n```bash\n# This request would be rejected by the API due to the missing 'correctResponse'\ncurl -X POST 'https://qti.alpha-1edtech.com/api/assessment-items' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"identifier\": \"essay-no-correct-response\",\n  \"title\": \"Essay Question\",\n  \"type\": \"extended-text\",\n  \"responseDeclarations\": [{\n    \"identifier\": \"RESPONSE\",\n    \"cardinality\": \"single\",\n    \"baseType\": \"string\"\n    /* \"correctResponse\" is omitted because it is not applicable */\n  }],\n  \"responseProcessing\": { ... }\n}'\n```\"\n\n**Expected:** \nThe `correctResponse` element within a `qti-response-declaration` is optional in the QTI 3.0 specification. It must be omitted for interactions that are manually scored (like essays) or that do not have a correct answer (like surveys). The local API schema should be updated to make the `correctResponse` field optional to align with the specification and support these essential use cases. The `extended-text` JSON example in the spec correctly uses an empty `value` array, but the schema should not require the `correctResponse` key at all.\n\n**Environment:** \"API Route: /assessment/items\nLocal Spec: /assessment/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item Authoring\"\n**Additional Notes:** This bug makes it impossible to create compliant QTI items for many common and important interaction types, including `extendedTextInteraction`, `drawingInteraction`, and `uploadInteraction`. It fundamentally misunderstands the QTI data model, assuming all questions are auto-scorable against a single key. This must be fixed to support a realistic range of assessment content.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:01:17.997Z",
    "updatedAt": "2025-07-03T05:50:15.259Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-687/critical-deviation-correctresponse-in-responsedeclaration-is"
  },
  {
    "id": "44970a4f-c059-4610-82a4-bbd7c09b6f85",
    "identifier": "BUG-686",
    "title": "Incorrect `operationId`, summary, and description for GET /credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local spec for `GET /ims/clr/v2p0/credentials` has the following incorrect fields:\n\n* `operationId`: `getAllClrs`\n* `summary`: `Get all Comprehensive Learner Records (CLRs)`\n* `description`: `Returns a collection of all CLR credentials in the system`\n\n**Summary:** \nThe local spec for `GET /ims/clr/v2p0/credentials` has the following incorrect fields:\n\n* `operationId`: `getAllClrs`\n* `summary`: `Get all Comprehensive Learner Records (CLRs)`\n* `description`: `Returns a collection of all CLR credentials in the system`\n\n**Steps to Reproduce:**\n\n1. Review the `operationId`, `summary`, and `description` fields for the `GET` method on the `/ims/clr/v2p0/credentials` path in the local spec.\n2. Compare these fields to the corresponding fields in the upstream JSON spec.\n3. Observe the differences.\n\n**Expected:** \nThe fields should match the upstream specification for consistency and clear communication of the endpoint's function.\n\n* `operationId` should be `getCredentials`.\n* `summary` should be `The REST GET operation for the getCredentials() API call.`\n* `description` should be `Get issued ClrCredentials from the [=resource server=] for the supplied parameters and access token.`\n\nThis is taken directly from the upstream `clr.upstream.json` file.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** While these are descriptive fields and may not break client functionality that relies solely on path and method, `operationId` is often used for code generation and client library creation. An incorrect `operationId` can lead to broken or mismatched generated code. The summary and description are also important for developer understanding and documentation, and the local versions are less precise than the official ones.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T18:00:47.252Z",
    "updatedAt": "2025-07-03T05:45:23.027Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-686/incorrect-operationid-summary-and-description-for-get-credentials"
  },
  {
    "id": "3a24deee-7423-4d1b-b207-5256fb8463aa",
    "identifier": "BUG-685",
    "title": "Critical Deviation: Proprietary `responseProcessing` Model Violates QTI 3.0 Specification",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API defines a custom, simplified JSON object for `responseProcessing` that does not exist in the QTI specification. This custom structure cannot represent the full range of QTI response rules (e.g., complex conditions, multiple rules, custom operators) and is not translatable to the standard QTI XML format for `qti-response-processing`.\n\n**Summary:** \nThe local API defines a custom, simplified JSON object for `responseProcessing` that does not exist in the QTI specification. This custom structure cannot represent the full range of QTI response rules (e.g., complex conditions, multiple rules, custom operators) and is not translatable to the standard QTI XML format for `qti-response-processing`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the `responseProcessing` object schema in the local specification for `POST /assessment-items`.\n2. Observe its structure: `{ \"templateType\": \"...\", \"responseDeclarationIdentifier\": \"...\", ... }`.\n3. Compare this structure to the official QTI 3.0 specification for the `qti-response-processing` element.\n4. Note that the local implementation is a proprietary abstraction and does not conform to the standard QTI structure.\n\nCURL Command to create an item using the non-standard model:\n\n```bash\ncurl -X POST 'https://qti.alpha-1edtech.com/api/assessment-items' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"identifier\": \"item-rp-bug\",\n  \"title\": \"Item with non-standard Response Processing\",\n  \"type\": \"choice\",\n  \"responseDeclarations\": [{\n    \"identifier\": \"RESPONSE\",\n    \"cardinality\": \"single\",\n    \"baseType\": \"identifier\",\n    \"correctResponse\": { \"value\": [\"A\"] }\n  }],\n  \"outcomeDeclarations\": [{\n    \"identifier\": \"SCORE\",\n    \"cardinality\": \"single\",\n    \"baseType\": \"float\"\n  }],\n  \"responseProcessing\": {\n    \"templateType\": \"match_correct\",\n    \"responseDeclarationIdentifier\": \"RESPONSE\",\n    \"outcomeIdentifier\": \"SCORE\",\n    \"correctResponseIdentifier\": \"1\",\n    \"incorrectResponseIdentifier\": \"0\"\n  }\n}'\n```\n\nThis demonstrates creating an item with a `responseProcessing` block that is not interoperable with any other QTI-compliant system.\"\n\n**Expected:** \n\"According to the QTI 3.0 specification, Section 4.6 (`ResponseProcessing` Class), response processing must be defined in one of two ways:\n\n1. **Using a Standard Template:** The `qti-response-processing` element should have a `template` attribute pointing to a standard URL, e.g., `template=\"http://www.imsglobal.org/question/qti_v3p0/rptemplates/match_correct\"`.\n2. **Using Custom Rules:** The element should contain a sequence of `qti-response-rule` elements (such as `qti-response-condition`, `qti-response-if`, `qti-set-outcome-value`, etc.) that define the processing logic.\n\nThe local API's proprietary model is a critical violation of the specification, making any assessment item's scoring logic non-portable and non-compliant.\"\n\n**Environment:** \"API Route: /assessment/items\nLocal Spec: /assessment/items.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation\nQTI Context: Assessment Item Management\"\n**Additional Notes:** This is the most severe type of bug as it breaks a fundamental pillar of QTI: interoperable scoring and response processing. An assessment item created through this API cannot be reliably interpreted by any other standard QTI delivery or authoring engine. The implementation should either accept raw QTI XML for this section or create a JSON structure that maps one-to-one with the official QTI `responseRule` elements. The current abstraction is insufficient and non-compliant.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:59:27.391Z",
    "updatedAt": "2025-07-03T05:57:31.357Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-685/critical-deviation-proprietary-responseprocessing-model-violates-qti"
  },
  {
    "id": "474f7a5b-d93e-4ab2-bfc5-9272e3d7a363",
    "identifier": "BUG-684",
    "title": "Undocumented Constraints and Defaults for Pagination Parameters",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation for `GET /credentials` imposes an undocumented maximum value (`3000`) and default values (`100` for limit, `0` for offset) on the standard `limit` and `offset` pagination parameters.\n\n**Summary:** \nThe local implementation for `GET /credentials` imposes an undocumented maximum value (`3000`) and default values (`100` for limit, `0` for offset) on the standard `limit` and `offset` pagination parameters.\n\n**Steps to Reproduce:**\n\n1. Review the definitions for the `limit` and `offset` query parameters in the local and upstream specs for the `GET /credentials` endpoint.\n2. The local spec defines a `maximum: 3000` and `default: 100` for the `limit` parameter.\n3. The local spec defines a `default: 0` for the `offset` parameter.\n4. These constraints and defaults are not present in the upstream specification.\n\n**Expected:** \nWhile servers can impose their own limits and defaults, these represent a deviation from the base specification and should be considered an implementation-specific profile. The upstream spec does not define a maximum for `limit` or any defaults. Adhering to the standard means not imposing undocumented constraints that could break a compliant client. If these constraints are necessary, they should be documented as a specific profile of the 1EdTech standard, not presented as the standard behavior.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a low-severity bug, but it represents an inconsistency that can cause issues for client implementations. A client might attempt to request a page size larger than 3000, expecting it to work based on the official spec, only to receive an error from this specific implementation. Similarly, a client might not send default values, and while the API would work, its behavior is not explicitly defined by the standard it claims to implement.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:59:26.443Z",
    "updatedAt": "2025-07-03T05:45:08.471Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-684/undocumented-constraints-and-defaults-for-pagination-parameters"
  },
  {
    "id": "99024c7d-6ef5-4afc-b86a-a6fcb2b8052c",
    "identifier": "BUG-683",
    "title": "CRITICAL - `responseProcessing` Model is an Oversimplified Abstraction Lacking Support for Custom Scoring Logic",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API implements a highly restrictive, proprietary abstraction for response processing. It forces users into one of two simple templates (`match_correct` or `map_response`) and does not expose the underlying rule-based engine (`responseRule`s) that is fundamental to QTI. This prevents the creation of items with any moderately complex scoring logic.\n\n**Summary:** \nThe API implements a highly restrictive, proprietary abstraction for response processing. It forces users into one of two simple templates (`match_correct` or `map_response`) and does not expose the underlying rule-based engine (`responseRule`s) that is fundamental to QTI. This prevents the creation of items with any moderately complex scoring logic.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the `responseProcessing` object in the API schema. It uses a custom `templateType` enum (`match_correct`, `map_response`) and several identifier fields.\n2. Compare this to the QTI 3.0 specification, Section 2.5 (\"Response Processing\") and Section 4.6 (\"ResponseProcessing\" Root Class Description).\n3. The QTI spec describes a powerful rule-based system using `responseCondition`, `responseIf`, `responseElse`, and a rich library of expressions and operators for creating custom scoring logic.\n4. The local API's abstraction completely hides this and only allows two predefined, basic scoring patterns. It is impossible to implement partial credit, scoring based on multiple conditions, or other complex scoring rules.\"\n\n**Expected:** \nThe API should support the full capabilities of QTI response processing. While templates are a part of QTI, the API must also allow for the definition of custom response processing rules. This would involve exposing a schema that maps to QTI's `responseCondition`, `responseIf`/`responseElse` structure and the various QTI expression elements (`match`, `contains`, `substring`, `sum`, `variable`, etc.). At a minimum, the API should allow passing a raw `qti-response-processing` XML block if it does not provide a full JSON abstraction.\n\n**Environment:** \"API Route: /assessment/items/{identifier}\nLocal Spec: /assessment/items/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation, Sections 2.5, 4.6\nQTI Context: Assessment Item Management, Response Processing and Scoring\"\n**Additional Notes:** This is one of the most severe deviations from the QTI specification. Response processing is the \"brain\" of an assessment item, defining how a candidate's response is evaluated. By replacing QTI's flexible system with a rigid, two-option model, the API strips away the power and expressiveness of the specification. This makes it impossible to create items with common scoring schemes like partial credit for \"select all that apply\" questions, negative marking, or mapping different incorrect answers to different feedback.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:58:14.613Z",
    "updatedAt": "2025-07-03T05:59:44.505Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-683/critical-responseprocessing-model-is-an-oversimplified-abstraction"
  },
  {
    "id": "6bbc9c04-2acf-496b-b85e-38a44c9c95be",
    "identifier": "BUG-682",
    "title": "CRITICAL - `outcomeDeclaration` Model is Missing Numerous Required QTI Attributes",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The local API's JSON model for `outcomeDeclarations` is severely incomplete. It only implements `identifier`, `cardinality`, and `baseType`. It omits at least eight other standard attributes and child elements defined in the QTI v3.0 specification for `outcomeDeclaration`.\n\n**Summary:** \nThe local API's JSON model for `outcomeDeclarations` is severely incomplete. It only implements `identifier`, `cardinality`, and `baseType`. It omits at least eight other standard attributes and child elements defined in the QTI v3.0 specification for `outcomeDeclaration`.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Examine the `outcomeDeclarations` object in the response and request schemas for `/assessment-items/{identifier}`.\n2. Note that it only contains fields for `identifier`, `cardinality`, and `baseType`.\n3. Cross-reference this with the official QTI 3.0 Specification, Section 4.5 (\"OutcomeDeclaration\" Root Class Description).\n4. Observe that the official specification includes many other essential attributes like `view`, `interpretation`, `normal-maximum`, `normal-minimum`, `mastery-value`, and child elements like `lookupTable`.\n\ncURL Command (demonstrating what is NOT possible):\nIt is impossible to create an item that specifies a score range or mastery level, which is standard QTI practice. A hypothetical valid request SHOULD look like this, but the current API schema does not support it:\n\n```bash\n# THIS REQUEST WILL FAIL BECAUSE THE SCHEMA IS MISSING THESE FIELDS\ncurl -X PUT 'https://qti.alpha-1edtech.com/api/assessment-items/item-with-mastery' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"identifier\": \"item-with-mastery\",\n    \"title\": \"Item with Mastery Score\",\n    \"type\": \"choice\",\n    \"interaction\": { ... },\n    \"outcomeDeclarations\": [{\n      \"identifier\": \"SCORE\",\n      \"cardinality\": \"single\",\n      \"baseType\": \"float\",\n      \"normalMinimum\": 0.0,\n      \"normalMaximum\": 5.0,\n      \"masteryValue\": 4.0,\n      \"interpretation\": \"Pass/Fail\"\n    }],\n    ...\n}'\n```\"\n\n**Expected:** \nThe `outcomeDeclarations` schema in the API should be extended to fully support the QTI 3.0 specification. It must include support for additional attributes such as `view`, `interpretation`, `long-interpretation`, `normal-maximum`, `normal-minimum`, `mastery-value`, `external-scored`, `variable-identifier-ref`, and child elements like `qti-default-value` and `lookupTable`. This is essential for defining scoring, reporting, and feedback behavior in a QTI-compliant manner.\n\n**Environment:** \"API Route: /assessment/items/{identifier}\nLocal Spec: /assessment/items/{identifier}.filtered.yaml\nQTI Specification: Official QTI 3.0 HTML Documentation, Section 4.5\nQTI Context: Assessment Item Management, Outcome Declaration\"\n**Additional Notes:** This deviation breaks QTI compliance. Without these attributes, it is impossible to create assessment items that have defined score ranges (e.g., a score from 0 to 10), mastery cutoffs, or machine-readable interpretations used by reporting systems. This severely cripples the utility of the API for any serious assessment purpose and makes true interoperability impossible.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:56:50.346Z",
    "updatedAt": "2025-07-03T05:59:57.489Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-682/critical-outcomedeclaration-model-is-missing-numerous-required-qti"
  },
  {
    "id": "aad618c8-3d74-43b0-82c9-04e73d2355e3",
    "identifier": "BUG-681",
    "title": "CRITICAL - Request Body Schema for PUT /assessment-items/{identifier} is Incomplete and Contradicts Examples",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The OpenAPI schema for the `PUT /assessment-items/{identifier}` request body does not define several critical properties that are used in its own examples. The schema is missing objects for `interaction`, `rubrics`, and `stimulus`, among others. However, the examples show these objects are essential for defining the actual content and behavior of the assessment item. This creates a direct contradiction between the documented schema and the provided examples, making it impossible for a client to build a valid and functional request by adhering to the schema.\n\n**Summary:** \nThe OpenAPI schema for the `PUT /assessment-items/{identifier}` request body does not define several critical properties that are used in its own examples. The schema is missing objects for `interaction`, `rubrics`, and `stimulus`, among others. However, the examples show these objects are essential for defining the actual content and behavior of the assessment item. This creates a direct contradiction between the documented schema and the provided examples, making it impossible for a client to build a valid and functional request by adhering to the schema.\n\n**Steps to Reproduce:**\n\"Human-readable steps:\n\n1. Review the OpenAPI specification for the `PUT /assessment-items/{identifier}` operation.\n2. Observe the schema defined under `requestBody.content.'application/json'.schema`. Note the available properties.\n3. Now, review the `examples` provided for the same request body (e.g., `json-choice`, `json-text-entry`).\n4. Compare the fields used in the examples (like `interaction`, `rubrics`, `stimulus`) with the fields defined in the schema.\n5. Notice that the most critical fields for defining an assessment item's content are present in the examples but completely missing from the schema definition.\n\ncURL Command (demonstrating the conflict):\nThis cURL command sends a payload that is VALID according to the `json-choice` example, but INVALID according to the schema, as the `interaction` object is not defined in the schema.\n\n```bash\ncurl -X PUT 'https://qti.alpha-1edtech.com/api/assessment-items/choice-item-1' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"identifier\": \"choice-item-1\",\n    \"title\": \"Sample Choice Question\",\n    \"type\": \"choice\",\n    \"interaction\": {\n      \"type\": \"choice\",\n      \"responseIdentifier\": \"RESPONSE\",\n      \"shuffle\": false,\n      \"maxChoices\": 1,\n      \"questionStructure\": {\n        \"prompt\": \"What is 2 + 2?\",\n        \"choices\": [\n          { \"identifier\": \"A\", \"content\": \"3\" },\n          { \"identifier\": \"B\", \"content\": \"4\" }\n        ]\n      }\n    },\n    \"responseDeclarations\": [{\n      \"identifier\": \"RESPONSE\",\n      \"cardinality\": \"single\",\n      \"baseType\": \"identifier\",\n      \"correctResponse\": { \"value\": [\"B\"] }\n    }]\n}'\n```\"\n\n**Expected:** \nThe OpenAPI schema for the `requestBody` must be the single source of truth and must accurately reflect all possible fields that the server accepts. The schema should be updated to include definitions for the `interaction`, `rubrics`, and `stimulus` objects, and any other fields shown in the examples. This ensures that auto-generated clients and developers can construct valid payloads based on the formal specification. The examples should validate against the schema they are meant to illustrate.\n\n**Environment:** The OpenAPI schema for the `requestBody` must be the single source of truth and must accurately reflect all possible fields that the server accepts. The schema should be updated to include definitions for the `interaction`, `rubrics`, and `stimulus` objects, and any other fields shown in the examples. This ensures that auto-generated clients and developers can construct valid payloads based on the formal specification. The examples should validate against the schema they are meant to illustrate.\n**Additional Notes:** This is a fundamental flaw in the API contract definition. An API whose examples don't match its schema is not properly specified and is effectively unusable for automated tooling or developers who rely on the schema for implementation. The `interaction` object, in particular, contains the core definition of the question (prompt, choices, etc.) which is translated into the QTI `itemBody`. Its omission from the schema is a critical oversight. This issue likely also affects the `POST /assessment-items` endpoint for creating new items.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:54:54.014Z",
    "updatedAt": "2025-07-03T05:53:09.812Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-681/critical-request-body-schema-for-put-assessment-itemsidentifier-is"
  },
  {
    "id": "892952b9-c564-4431-a057-237afd767350",
    "identifier": "BUG-680",
    "title": "Missing Success Status Codes for POST /credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local API specification for `POST /credentials` only documents a `200 OK` success response. It is missing the `201 Created` and `304 Not Modified` responses, which are critical for communicating the result of an \"upsert\" operation.\n\n**Summary:** \nThe local API specification for `POST /credentials` only documents a `200 OK` success response. It is missing the `201 Created` and `304 Not Modified` responses, which are critical for communicating the result of an \"upsert\" operation.\n\n**Steps to Reproduce:**\n\n1. Review the documented success responses for `POST /ims/clr/v2p0/credentials`.\n2. The local spec only documents a `200 OK` response.\n3. The upstream spec documents `200 OK` (for replacement/update), `201 Created` (for new creation), and `304 Not Modified` (if the credential already exists and is identical).\n\n**Expected:** \nThe API should return the correct HTTP status code to reflect the outcome of the POST operation, as specified by the standard. It should return `201 Created` when a new credential is created, `200 OK` when an existing one is replaced, and `304 Not Modified` if the submitted credential is identical to an existing one. The local OpenAPI spec must be updated to reflect this behavior.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This issue is a direct result of the local implementation incorrectly treating the \"upsert\" operation as a simple \"create\" operation. Missing these status codes violates RESTful best practices and the 1EdTech specification, preventing clients from understanding the precise outcome of their request.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:52:32.165Z",
    "updatedAt": "2025-07-03T05:44:35.323Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-680/missing-success-status-codes-for-post-credentials"
  },
  {
    "id": "f5fcd1d1-1818-43a5-88df-4e14a816e4bc",
    "identifier": "BUG-679",
    "title": "Default fields on schemata",
    "description": "Fields like `sourcedId` and `dateLastModified` are marked optional in the schemata on purpose, as we have defaults for them. They should be optional on POST requests.\n\nWe *should* verify that the GET schemata is properly defining the objects as always having those properties, but they *can* be assigned by the application.",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:48:37.905Z",
    "updatedAt": "2025-07-03T14:39:00.597Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-679/default-fields-on-schemata"
  },
  {
    "id": "45a1d6d8-7ff0-4d44-9fbc-dd6932d0dfc0",
    "identifier": "BUG-678",
    "title": "Vague Security Definition Missing Specific OAuth2 Scopes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local specification's security definition is generic (`OAuth2: []`) and does not declare the specific OAuth 2.0 scopes required to access the GET and POST endpoints.\n\n**Summary:** \nThe local specification's security definition is generic (`OAuth2: []`) and does not declare the specific OAuth 2.0 scopes required to access the GET and POST endpoints.\n\n**Steps to Reproduce:**\n\n1. Examine the `security` section of the local spec for both GET and POST operations on `/ims/clr/v2p0/credentials`.\n2. The local spec uses a generic `OAuth2: []`.\n3. Compare this to the `security` section in the upstream JSON spec for the same operations.\n4. The upstream spec defines specific scopes required for each operation, e.g., `https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.readonly`.\n\n**Expected:** \nThe security definition for each operation must explicitly list the required OAuth 2.0 scopes. This ensures that clients know exactly which permissions to request from the user.\n\nFor `GET /credentials`, the upstream spec requires:\n`\"security\": [ { \"OAuth2ACG\": [\"https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.readonly\"] } ]`\n\nFor `POST /credentials`, the upstream spec requires:\n`\"security\": [ { \"OAuth2ACG\": [\"https://purl.imsglobal.org/spec/clr/v2p0/scope/credential.upsert\"] } ]`\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a significant documentation and security issue. Without declaring the required scopes, client developers are left to guess which permissions are needed, leading to implementation errors and potential access-denied issues. It also indicates a potential lack of fine-grained access control on the server side, as the API is not advertising its specific security requirements.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:46:08.535Z",
    "updatedAt": "2025-07-03T05:50:27.008Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-678/vague-security-definition-missing-specific-oauth2-scopes"
  },
  {
    "id": "99dde99e-f3b7-4b16-b4f7-150b4becf8d1",
    "identifier": "BUG-677",
    "title": "Incorrect Error Response Schemas for All Error Codes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation uses a set of custom, complex error response schemas (`BadRequestResponse`, `UnauthorizedRequestResponse`, etc.) that do not match the standard `Imsx_StatusInfo` schema defined in the upstream specification. The field names and object structures are different.\n\n**Summary:** \nThe local implementation uses a set of custom, complex error response schemas (`BadRequestResponse`, `UnauthorizedRequestResponse`, etc.) that do not match the standard `Imsx_StatusInfo` schema defined in the upstream specification. The field names and object structures are different.\n\n**Steps to Reproduce:**\n\n1. Trigger an error condition, for example, a `400 Bad Request`.\n2. Compare the returned error object schema with the upstream specification.\n3. The local spec returns a custom object with fields like `imsx_codeMajor`, `imsx_severity`, `imsx_description`, and a complex `imsx_CodeMinor` object.\n4. The upstream spec expects a simple `Imsx_StatusInfo` object for all errors.\n\n**Expected:** \nAll error responses (`4xx`, `5xx`) should conform to the `Imsx_StatusInfo` schema defined in the upstream specification. This schema includes the properties `imsx_codeMajor`, `imsx_severity`, `imsx_description`, and `imsx_codeMinor`.\n\nThe upstream JSON spec defines this for a `400` error as:\n\n```json\n\"400\": {\n  \"description\": \"...\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/Imsx_StatusInfo\"\n      }\n    }\n  }\n}\n```\n\nThe local error schemas are completely different and more verbose.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a high-severity issue because it breaks standardized error handling. A client built to the official spec would not be able to parse the error messages from this local implementation, making debugging and automated error recovery impossible. The local error schema is a proprietary implementation that violates the standard.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:44:37.040Z",
    "updatedAt": "2025-07-03T18:45:36.317Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-677/incorrect-error-response-schemas-for-all-error-codes"
  },
  {
    "id": "398aded9-1fbd-48cf-b2bf-415ac66b23a0",
    "identifier": "BUG-676",
    "title": "Incorrect Query Parameters for GET /credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation of `GET /ims/clr/v2p0/credentials` supports several non-standard query parameters (`fields`, `sort`, `orderBy`, `filter`, `search`) while also failing to support the standard `since` parameter.\n\n**Summary:** \nThe local implementation of `GET /ims/clr/v2p0/credentials` supports several non-standard query parameters (`fields`, `sort`, `orderBy`, `filter`, `search`) while also failing to support the standard `since` parameter.\n\n**Steps to Reproduce:**\n\n1. Compare the query parameters for `GET /ims/clr/v2p0/credentials` between the local and upstream specs.\n2. Note the discrepancies.\n\n**Local Spec:** `fields`, `limit`, `offset`, `sort`, `orderBy`, `filter`, `search`\n**Upstream Spec:** `limit`, `offset`, `since`\n\n**Expected:** \nThe endpoint should only support the query parameters defined in the upstream specification: `limit`, `offset`, and `since`. Any additional filtering or sorting capabilities are extensions and should be documented as such, but the base required parameters must be supported.\n\nThe upstream JSON spec defines `since` as:\n\n```json\n{\n  \"name\": \"since\",\n  \"in\": \"query\",\n  \"description\": \"Only include ClrCredentials issued after this timestamp.\",\n  \"required\": false,\n  \"schema\": {\n    \"type\": \"string\",\n    \"format\": \"date-time\"\n  }\n}\n```\n\nThe other parameters (`fields`, `sort`, etc.) are not defined in the upstream spec at all for this endpoint.\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** The failure to implement the `since` parameter breaks a standard filtering capability required by the specification. The addition of undocumented, non-standard parameters like `filter` and `sort` creates an API that is inconsistent with the standard and may lead to unexpected behavior for clients built against the official specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:43:20.792Z",
    "updatedAt": "2025-07-03T05:47:16.911Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-676/incorrect-query-parameters-for-get-credentials"
  },
  {
    "id": "e2ecfe74-f7cd-432e-b7c1-4e4d0f8599eb",
    "identifier": "BUG-675",
    "title": "Incorrect Operation Behavior for POST /credentials (Create vs. Upsert)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation of `POST /ims/clr/v2p0/credentials` only supports creating new CLRs. The `operationId` is `createAndSignCLR`, and the description focuses solely on issuance.\n\n**Summary:** \nThe local implementation of `POST /ims/clr/v2p0/credentials` only supports creating new CLRs. The `operationId` is `createAndSignCLR`, and the description focuses solely on issuance.\n\n**Steps to Reproduce:**\n\n1. Review the documentation for `POST /ims/clr/v2p0/credentials` in the local and upstream specs.\n2. The local spec's `operationId` is `createAndSignCLR` and its description implies it only creates new records.\n3. The upstream spec's `operationId` is `upsertCredential` and its description clearly states it should \"Create or replace\" a credential.\n4. The local implementation is missing the \"replace\" (update) part of the required \"upsert\" functionality.\n\n**Expected:** \nThe operation should support \"upsert\" logic (create or replace) as defined by the upstream standard. The `operationId` should be `upsertCredential`. The endpoint should check for the existence of a credential and either create a new one (returning `201 Created`) or replace an existing one (returning `200 OK`).\n\nThe upstream JSON spec description for this operation is: \"Create or replace a ClrCredential on the \\[=resource server=\\], appending it to the list of credentials for the subject, or replacing an existing entry in that list. The \\[=resource server=\\] SHOULD use the \\[=credential equality and comparison=\\] algorithm to compare and determine initial equality. The response code makes clear whether the operation resulted in a replacement or an insertion.\"\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a high-severity functional bug. By not implementing the \"upsert\" behavior, the local API prevents clients from updating or replacing existing credentials, which is a core part of the standard's lifecycle management for CLRs. This is further evidenced by the local spec's failure to document the `201 Created` and `200 OK` distinction.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:41:17.819Z",
    "updatedAt": "2025-07-03T05:44:33.207Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-675/incorrect-operation-behavior-for-post-credentials-create-vs-upsert"
  },
  {
    "id": "3c575a9f-9f2b-4f1e-ae08-1f1d81726c27",
    "identifier": "BUG-674",
    "title": "CRITICAL: Incorrect Pagination and Response Structure for GET /credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local spec for `GET /ims/clr/v2p0/credentials` returns a 200 OK response with a custom JSON structure. It puts pagination information directly in the response body (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) and wraps the credential list in a `clrs` array. This violates the upstream specification for pagination and response structure.\n\n**Summary:** \nThe local spec for `GET /ims/clr/v2p0/credentials` returns a 200 OK response with a custom JSON structure. It puts pagination information directly in the response body (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) and wraps the credential list in a `clrs` array. This violates the upstream specification for pagination and response structure.\n\n**Steps to Reproduce:**\n\n1. Send a valid GET request to the `/ims/clr/v2p0/credentials` endpoint.\n2. Observe the response body and headers.\n3. The response body contains pagination data (`totalCount`, `pageCount`, etc.) and the list of credentials is nested under a `clrs` key.\n4. The response headers are missing the standard `Link` and `X-Total-Count` headers for pagination.\n\nCURL Command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/clr/v2p0/credentials?limit=5' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe endpoint should implement pagination using HTTP headers as defined in the standard. Specifically, it should return a `Link` header for next, previous, first, and last pages, and an `X-Total-Count` header for the total number of records. The response body should be a `GetClrCredentialsResponse` object, containing a top-level `credential` array, not a `clrs` array nested inside another object.\n\nThe upstream HTML documentation (Section 5.4 Paging) and the JSON spec for the `200` response clearly define this header-based approach. The JSON spec shows:\n\n```json\n\"200\": {\n  \"description\": \"...\",\n  \"headers\": {\n    \"X-Total-Count\": {\n      \"$ref\": \"#/components/headers/X-Total-Count\"\n    }\n  },\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/GetClrCredentialsResponse\"\n      }\n    }\n  },\n  \"links\": { ... }\n}\n```\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This deviation breaks standard RESTful pagination practices and violates the 1EdTech specification. Any client built to the official standard will fail to parse the response and will not be able to paginate through results correctly. Furthermore, the response body schema itself is incorrect, as it uses a custom wrapper instead of the specified `GetClrCredentialsResponse` model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:39:44.768Z",
    "updatedAt": "2025-07-03T05:48:04.538Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-674/critical-incorrect-pagination-and-response-structure-for-get"
  },
  {
    "id": "c68c000e-a57f-4cf5-a926-6fb4489799ff",
    "identifier": "BUG-673",
    "title": "CRITICAL: Incorrect Request Body for POST /credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local specification for `POST /ims/clr/v2p0/credentials` defines a request body that is a custom, simplified object containing `userId`, `achievementIds`, `name`, and date fields. It does not accept the official `ClrCredential` object as defined by the upstream standard.\n\n**Summary:** \nThe local specification for `POST /ims/clr/v2p0/credentials` defines a request body that is a custom, simplified object containing `userId`, `achievementIds`, `name`, and date fields. It does not accept the official `ClrCredential` object as defined by the upstream standard.\n\n**Steps to Reproduce:**\n\n1. Construct a valid `ClrCredential` object according to the upstream specification.\n2. Send a POST request to the `/ims/clr/v2p0/credentials` endpoint with the `Content-Type: application/json` header and the `ClrCredential` object as the body.\n3. The request will fail because the local implementation expects a different, non-standard request body.\n\nCURL Command (based on upstream spec):\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/clr/v2p0/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"@context\": [\"https://www.w3.org/ns/credentials/v2\", \"https://purl.imsglobal.org/spec/clr/v2p0/context-2.0.1.json\"],\n  \"id\": \"http://example.edu/credentials/3732\",\n  \"type\": [\"VerifiableCredential\", \"ClrCredential\"],\n  \"issuer\": \"https://example.edu/issuers/565049\",\n  \"validFrom\": \"2010-01-01T00:00:00Z\",\n  \"name\": \"My New CLR\",\n  \"credentialSubject\": {\n    \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n    \"verifiableCredential\": [\n      // ... nested credentials\n    ]\n  }\n}'\n```\n\n**Expected:** \nThe endpoint must accept a full `ClrCredential` object with `Content-Type: application/json` or a JWS string with `Content-Type: text/plain` as the request body. This is the official \"upsertCredential\" operation.\n\nThe upstream JSON specification explicitly defines the request body as:\n\n```json\n\"requestBody\": {\n  \"description\": \"The request body for the upsertCredential operation.\",\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"$ref\": \"#/components/schemas/ClrCredential\"\n      }\n    },\n    \"text/plain\": {\n      \"schema\": {\n        \"pattern\": \"^[a-zA-Z0-9_-]+\\\\.[a-zA-Z0-9_-]*\\\\.[a-zA-Z0-9_-]+$\",\n        \"type\": \"string\",\n        \"description\": \"A `String` in Compact JWS format [[RFC7515]].\"\n      }\n    }\n  },\n  \"required\": true\n}\n```\n\n**Environment:** API Route: /ims/clr/v2p0/credentials\nLocal Spec: local_spec_for_route\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a critical bug as it represents a fundamental deviation from the 1EdTech CLR v2.0 standard. The local implementation has created a proprietary, non-standard method for creating credentials, which breaks interoperability with any other compliant system. Instead of implementing the `upsertCredential` logic, it performs a custom `createAndSignCLR` action based on a simplified payload. This prevents any compliant tool from creating or updating CLRs on this platform.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:38:53.359Z",
    "updatedAt": "2025-07-03T05:46:43.886Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-673/critical-incorrect-request-body-for-post-credentials"
  },
  {
    "id": "f54694bb-e6b8-4890-bee1-4f7c4b1bd5e6",
    "identifier": "BUG-672",
    "title": "Incorrect Schema: `credentialSubject.identifier` items are missing the `salt` property",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation's schema for the items in the `credentialSubject.identifier` array does not include the optional `salt` property.\n\n**Summary:** \nThe local implementation's schema for the items in the `credentialSubject.identifier` array does not include the optional `salt` property.\n\n**Steps to Reproduce:**\n\n1. Examine the schema for `credentialSubject.identifier` in the local spec. This corresponds to an array of `IdentityObject` models.\n2. Note the properties of the items in the array: `type`, `identityHash`, `identityType`, `hashed`.\n3. Compare this to the upstream `IdentityObject` model in the JSON spec.\n4. Observe that the upstream model includes an optional `salt` property.\n\n```bash\n# This curl command with a salted identifier would fail validation against the local spec.\ncurl -X POST \"https://api.alpha-1edtech.com/ims/clr/v2p0/verify\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"...\": \"...\",\n  \"credentialSubject\": {\n    \"...\": \"...\",\n    \"identifier\": [\n      {\n        \"type\": \"IdentityObject\",\n        \"identityHash\": \"...\",\n        \"identityType\": \"emailAddress\",\n        \"hashed\": true,\n        \"salt\": \"some-salt-value\"\n      }\n    ]\n  },\n  \"...\": \"...\"\n}'\n```\n\n**Expected:** \nThe schema should fully match the upstream `IdentityObject` model, which includes the optional `salt` property. The `salt` property is crucial for verifying salted hashes of personally identifiable information, a recommended security practice.\n\n**Environment:** API Route: /ims/clr/v2p0/verify\nLocal Spec: ims/clr/v2p0/verify.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** By omitting the `salt` property from our schema, our API will reject valid credentials that use salted identifier hashes. This limits interoperability and prevents our service from handling credentials that follow the best security practices outlined in the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:36:50.948Z",
    "updatedAt": "2025-07-03T05:42:35.803Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-672/incorrect-schema-credentialsubjectidentifier-items-are-missing-the"
  },
  {
    "id": "1177e550-729a-4433-9737-742ccee86b46",
    "identifier": "BUG-671",
    "title": "Incomplete Schema for `issuer` Object in Request Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation's schema for the `issuer` object is an incomplete representation of the upstream `Profile` model. It is missing a large number of optional fields.\n\n**Summary:** \nThe local implementation's schema for the `issuer` object is an incomplete representation of the upstream `Profile` model. It is missing a large number of optional fields.\n\n**Steps to Reproduce:**\n\n1. Examine the schema for the `issuer` object within the request body of the local spec.\n2. Note its properties: `id`, `type`, `name`, `url`, `email`, `phone`, `address`.\n3. Compare this to the `Profile` model in the upstream JSON spec (`components.schemas.Profile`), which is the model that should be used for the issuer.\n4. Observe that the upstream `Profile` model contains many additional optional properties, such as `endorsement`, `endorsementJwt`, `official`, `parentOrg`, `familyName`, `givenName`, `dateOfBirth`, etc.\n\n**Expected:** \nThe schema for the `issuer` object should fully match the `Profile` model from the upstream specification, including all optional properties. This ensures that our API can correctly parse and validate a fully compliant `Profile` object if it is provided by a client.\n\n**Environment:** API Route: /ims/clr/v2p0/verify\nLocal Spec: ims/clr/v2p0/verify.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** While the missing properties are optional, failing to define them in our schema means our validation logic would likely reject a compliant credential that includes any of them. This is a deviation that limits compatibility. The same issue applies to the `creator` object within `credentialSubject.achievement`, which should also be a `Profile` object.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:34:22.540Z",
    "updatedAt": "2025-07-03T05:42:28.196Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-671/incomplete-schema-for-issuer-object-in-request-body"
  },
  {
    "id": "8414deec-55ac-4bc9-b8b1-cf6d8bc11584",
    "identifier": "BUG-670",
    "title": "Response Schema is Non-Standard",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The `200 OK` response for the `/verify` endpoint returns a custom JSON object with fields like `valid`, `errors`, `warnings`, and `details`.\n\n**Summary:** \nThe `200 OK` response for the `/verify` endpoint returns a custom JSON object with fields like `valid`, `errors`, `warnings`, and `details`.\n\n**Steps to Reproduce:**\n\n1. Make a successful call to `POST /ims/clr/v2p0/verify`.\n2. Observe the response body structure: `{\"valid\": boolean, \"errors\": array, \"warnings\": array, \"details\": object}`.\n3. Compare this to the defined responses for any endpoint in the upstream specification.\n4. Note that this response structure is entirely custom and does not match any standard response model, like `Imsx_StatusInfo` for errors or `GetClrCredentialsResponse` for data retrieval.\n\n**Expected:** \nAs the `/verify` endpoint is itself non-standard, there is no direct upstream response to compare against. However, all standard endpoints in the upstream spec return well-defined models. For error conditions, they return the `Imsx_StatusInfo` object. For data retrieval, they return specific response objects like `GetClrCredentialsResponse`. The local implementation uses a completely bespoke response model, which is a major deviation from standard practices.\n\n**Environment:** API Route: /ims/clr/v2p0/verify\nLocal Spec: ims/clr/v2p0/verify.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This issue compounds the problem of the non-standard endpoint. Not only is the endpoint itself a deviation, but its success and error responses are also proprietary. This makes it impossible for any standard client to interact with or understand the output of our API without custom logic, defeating the purpose of using a standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:33:20.574Z",
    "updatedAt": "2025-07-03T05:42:20.069Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-670/response-schema-is-non-standard"
  },
  {
    "id": "9a54e435-a046-4007-8e0c-2f6f457ebe2c",
    "identifier": "BUG-669",
    "title": "Incorrect Schema: `credentialSubject.achievement` is an object instead of an array",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation defines the `credentialSubject.achievement` field as a single JSON object.\n\n**Summary:** \nThe local implementation defines the `credentialSubject.achievement` field as a single JSON object.\n\n**Steps to Reproduce:**\n\n1. Examine the `requestBody` schema in the local spec.\n2. Navigate to `properties.credentialSubject.properties.achievement`.\n3. Observe its `type` is defined as `object`.\n4. Compare this to the `ClrSubject` model in the upstream JSON spec (`components.schemas.ClrSubject`).\n5. Observe that the `achievement` property is defined as `type: \"array\"` with `minItems: 0`.\n\n```bash\n# This curl command with an array for `achievement` would fail against the local spec.\ncurl -X POST \"https://api.alpha-1edtech.com/ims/clr/v2p0/verify\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"...\": \"...\",\n  \"credentialSubject\": {\n    \"...\": \"...\",\n    \"achievement\": [\n      { \"id\": \"ach1\", ... }\n    ],\n    \"...\": \"...\"\n  },\n  \"...\": \"...\"\n}'\n```\n\n**Expected:** \nAccording to the upstream specification, `achievement` within the `ClrSubject` model must be an array of `Achievement` objects. The upstream JSON spec defines it as: `\"type\": \"array\", \"minItems\": 0, \"items\": { \"$ref\": \"#/components/schemas/Achievement\" }`. This allows for zero, one, or many achievements.\n\n**Environment:** API Route: /ims/clr/v2p0/verify\nLocal Spec: ims/clr/v2p0/verify.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a critical schema violation that makes the local implementation incompatible with the standard. Any CLR containing zero achievements or more than one achievement in the subject block would be incorrectly rejected by our API.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:30:55.572Z",
    "updatedAt": "2025-07-03T05:42:11.678Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-669/incorrect-schema-credentialsubjectachievement-is-an-object-instead-of"
  },
  {
    "id": "afa3d5af-bb86-464e-a9cb-2acf5e4a744f",
    "identifier": "BUG-668",
    "title": "Undocumented maximum \"limit\" value for pagination",
    "description": "We've added a maximum for the `limit` parameter to prevent abuse.\n\nThis is not documented.",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:29:51.437Z",
    "updatedAt": "2025-07-03T05:41:57.354Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-668/undocumented-maximum-limit-value-for-pagination"
  },
  {
    "id": "dae1aa36-e2f2-4d80-b07f-239eddb4c653",
    "identifier": "BUG-667",
    "title": "Incorrect Schema: `issuanceDate` is required in request body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation incorrectly requires an `issuanceDate` field in the request body.\n\n**Summary:** \nThe local implementation incorrectly requires an `issuanceDate` field in the request body.\n\n**Steps to Reproduce:**\n\n1. Examine the `requestBody` schema for `POST /ims/clr/v2p0/verify` in the local spec.\n2. Note that `issuanceDate` is listed in the `required` properties array.\n3. Compare this to the `ClrCredential` definition in the upstream JSON spec.\n4. Observe that the `ClrCredential` model does not have an `issuanceDate` property at all. The `VerifiableCredential` model (from which `ClrCredential` inherits) has a required `validFrom` property instead.\n\n```bash\n# This curl command would fail against the local spec, but is valid according to upstream spec.\ncurl -X POST \"https://api.alpha-1edtech.com/ims/clr/v2p0/verify\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"@context\": [\"https://www.w3.org/ns/credentials/v2\"],\n  \"id\": \"urn:uuid:1234\",\n  \"type\": [\"VerifiableCredential\", \"ClrCredential\"],\n  \"issuer\": \"did:example:123\",\n  \"name\": \"Test Credential\",\n  \"validFrom\": \"2023-01-01T00:00:00Z\",\n  \"credentialSubject\": { ... },\n  \"proof\": { ... }\n}'\n```\n\n**Expected:** \nThe `issuanceDate` field should not be required. The upstream `ClrCredential` specification does not include `issuanceDate` as a property. Instead, it inherits from `VerifiableCredential`, which requires `validFrom`. `issuanceDate` is a property from the older Verifiable Credentials v1.1 data model, and our local spec is incorrectly mixing v1.1 and v2.0 concepts.\n\n**Environment:** API Route: /ims/clr/v2p0/verify\nLocal Spec: ims/clr/v2p0/verify.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This bug will cause compliant payloads built against the CLR v2.0 spec to be rejected by our API. The `ClrCredential` model in the upstream JSON spec explicitly requires `validFrom` and does not mention `issuanceDate`. This indicates a fundamental misunderstanding of the upstream data model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:29:13.588Z",
    "updatedAt": "2025-07-03T05:42:10.438Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-667/incorrect-schema-issuancedate-is-required-in-request-body"
  },
  {
    "id": "4ad16c8b-9241-4d99-a460-711747fceeda",
    "identifier": "BUG-666",
    "title": "Incorrect Schema: `proof` field is required in request body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation incorrectly mandates the presence of the `proof` property within the request body object.\n\n**Summary:** \nThe local implementation incorrectly mandates the presence of the `proof` property within the request body object.\n\n**Steps to Reproduce:**\n\n1. Examine the `requestBody` schema for `POST /ims/clr/v2p0/verify` in the local spec.\n2. Note that `proof` is listed in the `required` properties array at the root of the schema.\n3. Compare this to the `ClrCredential` definition in the upstream JSON spec (`components.schemas.ClrCredential`).\n4. Observe that the `proof` property is defined as optional (`minItems: 0`) and is not in the `required` array.\n\n```bash\n# This curl command would fail against the local spec, but is valid according to upstream spec for a JWT-based credential.\ncurl -X POST \"https://api.alpha-1edtech.com/ims/clr/v2p0/verify\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"@context\": [\"https://www.w3.org/ns/credentials/v2\"],\n  \"id\": \"urn:uuid:1234\",\n  \"type\": [\"VerifiableCredential\", \"ClrCredential\"],\n  \"issuer\": \"did:example:123\",\n  \"validFrom\": \"2023-01-01T00:00:00Z\",\n  \"name\": \"Test Credential\",\n  \"credentialSubject\": { ... },\n  \"issuanceDate\": \"2023-01-01T00:00:00Z\"\n}'\n```\n\n**Expected:** \nThe `proof` property should be optional. The upstream specification allows for both embedded proofs (where the `proof` property is present) and external proofs like VC-JWT, where the proof is not an embedded property of the credential object itself. The upstream JSON spec for `ClrCredential` correctly defines `proof` as an optional array (`minItems: 0`).\n\n**Environment:** API Route: /ims/clr/v2p0/verify\nLocal Spec: ims/clr/v2p0/verify.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** By requiring the `proof` field, the local implementation breaks compatibility with any credential using an external proof format, most notably JSON Web Token (VC-JWT) proofs, which are explicitly supported by the standard (see HTML spec section 7.2). This is a critical interoperability failure.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:26:57.628Z",
    "updatedAt": "2025-07-03T05:50:37.044Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-666/incorrect-schema-proof-field-is-required-in-request-body"
  },
  {
    "id": "0562405e-a98b-45c1-b3f7-5dca96735cf0",
    "identifier": "BUG-665",
    "title": "Missing Security Definition on /verify Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local spec for `POST /ims/clr/v2p0/verify` defines it as an unsecured endpoint (`security: []`). This allows unauthenticated and unauthorized access to a sensitive operation.\n\n**Summary:** \nThe local spec for `POST /ims/clr/v2p0/verify` defines it as an unsecured endpoint (`security: []`). This allows unauthenticated and unauthorized access to a sensitive operation.\n\n**Steps to Reproduce:**\n\n1. Examine the security definition for the `POST /ims/clr/v2p0/verify` operation in the local spec. It is an empty array `security: []`.\n2. Compare this to the security definitions for all data-access endpoints in the upstream JSON specification, such as `POST /credentials` or `GET /profile`.\n3. Observe that all standard endpoints require OAuth 2.0 security with specific scopes.\n\nA `curl` command for this would be:\n\n```bash\n# The following command succeeds without any authentication, which is incorrect.\ncurl -X POST \"https://api.alpha-1edtech.com/ims/clr/v2p0/verify\" \\\n-H \"Content-Type: application/json\" \\\n-d '{...valid ClrCredential object...}'\n```\n\n**Expected:** \nEven though the endpoint itself is non-standard, any endpoint handling Verifiable Credentials must be secured. Based on the upstream specification's security patterns (see HTML spec section 6 and JSON spec security definitions), this endpoint should require `OAuth2` with an appropriate scope. All other data-related endpoints in the spec are secured via `OAuth2ACG`.\n\n**Environment:** API Route: /ims/clr/v2p0/verify\nLocal Spec: ims/clr/v2p0/verify.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a critical security vulnerability. An unauthenticated verification endpoint could be abused for various attacks, such as enumeration of valid credentials, denial-of-service attacks by submitting large payloads, or probing for other vulnerabilities in the verification logic. The upstream specification is explicit about security for all its endpoints.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:25:39.560Z",
    "updatedAt": "2025-07-03T05:41:21.124Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-665/missing-security-definition-on-verify-endpoint"
  },
  {
    "id": "3640a2b8-c115-444e-93c1-3058ecfbb0f3",
    "identifier": "BUG-664",
    "title": "Non-standard API Endpoint Implemented",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The local implementation defines a `POST /ims/clr/v2p0/verify` endpoint. This endpoint does not exist in the official 1EdTech CLR v2.0 specification.\n\n**Summary:** \nThe local implementation defines a `POST /ims/clr/v2p0/verify` endpoint. This endpoint does not exist in the official 1EdTech CLR v2.0 specification.\n\n**Steps to Reproduce:**\n\n1. Review the available paths in the upstream specification (JSON or HTML).\n2. Note the defined paths are `/credentials`, `/profile`, and `/discovery`.\n3. Compare this to the local spec's path `/ims/clr/v2p0/verify`.\n4. Observe that the `/verify` endpoint is not defined in the official specification.\n\nA `curl` command is not applicable as the issue is the existence of the endpoint itself.\n\n**Expected:** \nThe implementation should only expose endpoints defined in the official specification. The standard-defined paths are `/credentials`, `/profile`, and `/discovery`. There is no `/verify` endpoint. The process of verification is a set of steps a consumer performs on a credential, not a dedicated API endpoint provided by the issuer.\n\n**Environment:** API Route: /ims/clr/v2p0/verify\nLocal Spec: ims/clr/v2p0/verify.filtered.yaml\nUpstream Spec (JSON): clr.upstream.json\nUpstream Spec (HTML): clr.upstream.html\n**Additional Notes:** This is a critical deviation. Implementing a non-standard endpoint breaks interoperability and creates a proprietary interface that no other tool built to the CLR standard will be able to use. This completely undermines the purpose of adhering to the specification. The upstream documentation describes verification as a consumer-side process (see HTML spec section 8, \"Verification and Validation\"), not a server-side API call.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T17:23:25.937Z",
    "updatedAt": "2025-07-03T05:42:19.599Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-664/non-standard-api-endpoint-implemented"
  },
  {
    "id": "bf5eb4eb-f81b-4c66-9311-84dd3f3caa1b",
    "identifier": "BUG-663",
    "title": "Patch SQL injection vulnerability in query parameter",
    "description": "Steps:\n\n1. Reproduce & validate\n2. Write regression test\n3. Fix issue",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 1,
    "createdAt": "2025-07-02T17:22:28.735Z",
    "updatedAt": "2025-07-03T16:17:59.453Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-663/patch-sql-injection-vulnerability-in-query-parameter"
  },
  {
    "id": "e6b96ad7-a738-4cd0-8654-2e3798b60d76",
    "identifier": "BUG-662",
    "title": "LOW: Path Inconsistency Between Documentation and Implementation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The documentation comment at the top of the local spec file specifies the route as `/ims/ob/v3p0/issue/badge/verify`. However, the actual path defined in the OpenAPI `paths` object is `/ims/ob/v3p0/issue-badge/verify`.\n\n**Summary:** \nThe documentation comment at the top of the local spec file specifies the route as `/ims/ob/v3p0/issue/badge/verify`. However, the actual path defined in the OpenAPI `paths` object is `/ims/ob/v3p0/issue-badge/verify`.\n\n**Steps to Reproduce:**\n\n1. Look at the `--- ROUTE: ... ---` comment at the top of the local spec file.\n2. Compare this path with the path defined under the `paths` key in the same file.\n\n**Expected:** \nThe documented path should be consistent with the implemented path. The path should be either `issue/badge` or `issue-badge` in both places. This inconsistency can cause confusion for developers reading the specification.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/verify\nLocal Spec: ims/ob/v3p0/issue/badge/verify.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a minor documentation bug but points to a lack of attention to detail. Consistent and accurate documentation is crucial for API usability and maintenance.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:52:35.376Z",
    "updatedAt": "2025-07-03T05:40:52.592Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-662/low-path-inconsistency-between-documentation-and-implementation"
  },
  {
    "id": "10d98f44-55f8-4723-a5df-408f7b7158ba",
    "identifier": "BUG-661",
    "title": "MEDIUM: Content of `type` and `@context` arrays are not validated",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification validates that `type` and `@context` are arrays of strings, but it does not validate their content. Any array of strings will be accepted.\n\n**Summary:** \nThe local specification validates that `type` and `@context` are arrays of strings, but it does not validate their content. Any array of strings will be accepted.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `type` and `@context` properties in the request body.\n2. Observe they are defined as a generic `array` of `string`.\n3. Compare this to the detailed content requirements for these fields in the upstream specification, Sections B.1.2 and B.1.27.\n\n**Expected:** \nThe upstream specification places strict requirements on the content of these arrays.\nFor `type` (Section B.1.2): \"The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'AchievementCredential' or the URI 'OpenBadgeCredential'.\"\nFor `@context` (Section B.1.2): \"The value of the @context property MUST be an ordered set where the first item is a URI with the value '[https://www.w3.org/ns/credentials/v2](https://www.w3.org/ns/credentials/v2)', and the second item is a URI with the value '[https://purl.imsglobal.org/spec/ob/v3p0/context-3.0.3.json](https://purl.imsglobal.org/spec/ob/v3p0/context-3.0.3.json)'.\"\nThe local OpenAPI spec should use `contains`, `enum`, and ordered array validation to enforce these rules.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/verify\nLocal Spec: ims/ob/v3p0/issue/badge/verify.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Without content validation, the service could accept malformed or non-standard credential objects, potentially leading to processing errors or security vulnerabilities downstream. This lax validation violates the MUST clauses of the upstream specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:50:33.267Z",
    "updatedAt": "2025-07-03T05:40:42.695Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-661/medium-content-of-type-and-context-arrays-are-not-validated"
  },
  {
    "id": "8aada77e-573c-4218-893d-15e90b9c9b1c",
    "identifier": "BUG-660",
    "title": "MEDIUM: Request Body Includes Non-Standard `issuanceDate` Property",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification includes an `issuanceDate` field at the root of the credential object.\n\n**Summary:** \nThe local specification includes an `issuanceDate` field at the root of the credential object.\n\n**Steps to Reproduce:**\n\n1. Examine the properties defined for the root object in the `requestBody` schema.\n2. Observe the presence of the `issuanceDate` property.\n3. Compare this to the `AchievementCredential` data model in the upstream specification, Section B.1.2.\n\n**Expected:** \nThe `AchievementCredential` data model (Section B.1.2), which is aligned with Verifiable Credentials v2.0, does not contain an `issuanceDate` property. It uses `validFrom` instead. The `issuanceDate` property is from the older Verifiable Credentials v1.1 data model. Including it in what is meant to be a v2.0-compliant object makes the schema non-standard and causes confusion between data model versions.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/verify\nLocal Spec: ims/ob/v3p0/issue/badge/verify.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This indicates a misunderstanding or mixing of different versions of the Verifiable Credentials data model. While a verifier might be encouraged to support older versions, the local specification should not be defining a request body that mixes properties from different, incompatible standards. This leads to unpredictable behavior and interoperability failures.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:49:29.646Z",
    "updatedAt": "2025-07-03T05:40:34.515Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-660/medium-request-body-includes-non-standard-issuancedate-property"
  },
  {
    "id": "41440a53-2832-4c44-bde4-2fde2873ed14",
    "identifier": "BUG-659",
    "title": "HIGH: `credentialSubject` Incorrectly Requires Both `id` and `identifier`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification requires that the `credentialSubject` object in the request body contain both an `id` property and an `identifier` property.\n\n**Summary:** \nThe local specification requires that the `credentialSubject` object in the request body contain both an `id` property and an `identifier` property.\n\n**Steps to Reproduce:**\n\n1. Examine the `required` list within the `credentialSubject` property of the `requestBody` schema.\n2. Observe that both `id` and `identifier` are listed as required fields.\n3. Compare this with the `AchievementSubject` data model in the upstream specification, Section B.1.3.\n\n**Expected:** \nThe upstream specification's `AchievementSubject` model (Section B.1.3) is clear: \"Either `id` or at least one `identifier` MUST be supplied.\" This means an object is valid if it has `id`, or if it has `identifier`, or if it has both. The local implementation incorrectly rejects valid credentials that identify the subject using only one of these two methods.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/verify\nLocal Spec: ims/ob/v3p0/issue/badge/verify.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This bug causes the rejection of validly formed credentials. It forces clients to provide redundant information and breaks interoperability with systems that correctly follow the standard by providing only one of the required identifiers.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:48:32.871Z",
    "updatedAt": "2025-07-03T05:40:23.263Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-659/high-credentialsubject-incorrectly-requires-both-id-and-identifier"
  },
  {
    "id": "8af6ac3d-a9b8-46a1-b418-745fc7364e0b",
    "identifier": "BUG-658",
    "title": "HIGH: `proof` Property is Incorrectly Marked as Required in Request Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification mandates that the `proof` property must be present in the request body for the verification endpoint.\n\n**Summary:** \nThe local specification mandates that the `proof` property must be present in the request body for the verification endpoint.\n\n**Steps to Reproduce:**\n\n1. Examine the `required` list at the root of the `requestBody` schema for `POST /ims/ob/v3p0/issue-badge/verify`.\n2. Observe that `proof` is listed as a required property.\n3. Compare this with the `AchievementCredential` data model in the upstream specification, Section B.1.2.\n\n**Expected:** \nThe upstream specification's data model for `AchievementCredential` (Section B.1.2) defines the `proof` property with a multiplicity of `[0..*]`, indicating it is optional. The documentation states: \"If present, one or more embedded cryptographic proofs...\". The proof for a credential can also be provided externally, for example when using the JSON Web Token (VC-JWT) format. By requiring the `proof` property, the local implementation incorrectly rejects valid credentials that use an external proof mechanism.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/verify\nLocal Spec: ims/ob/v3p0/issue/badge/verify.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a high-severity bug as it breaks compatibility with one of the two primary proof formats (VC-JWT) allowed by the ecosystem. The implementation will fail to verify any credential that is passed as a JWS string because it will be looking for an embedded `proof` block that does not exist in that format.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:47:15.357Z",
    "updatedAt": "2025-07-03T05:50:38.167Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-658/high-proof-property-is-incorrectly-marked-as-required-in-request-body"
  },
  {
    "id": "4d7848be-f16e-4765-b396-76070b3efb41",
    "identifier": "BUG-657",
    "title": "CRITICAL: Verification Endpoint is Unauthenticated",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification for the custom `/issue-badge/verify` endpoint defines it as being publicly accessible with no authentication, as denoted by `security: []`.\n\n**Summary:** \nThe local specification for the custom `/issue-badge/verify` endpoint defines it as being publicly accessible with no authentication, as denoted by `security: []`.\n\n**Steps to Reproduce:**\n\n1. Review the `security` definition for the `POST /ims/ob/v3p0/issue-badge/verify` operation in the local spec.\n2. Observe that it is an empty array: `security: []`. This indicates no authentication is required.\n3. Compare this with the security architecture described in the upstream specification, Section 7: \"Open Badges API Security\".\n\n**Expected:** \nWhile the endpoint itself is non-standard, the architectural principles of the upstream specification should still apply. Section 7 of the upstream spec states, \"All of the Secure REST Endpoints are protected by OAuth 2.0 access tokens\". An endpoint that processes potentially sensitive credential data should be considered a \"Secure REST Endpoint\" and must be protected by OAuth 2.0 to prevent abuse, such as denial-of-service attacks by repeatedly submitting credentials for verification. An open verification endpoint is a significant security risk.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/verify\nLocal Spec: ims/ob/v3p0/issue/badge/verify.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Exposing a computationally intensive endpoint like credential verification to the public without authentication or rate-limiting is a major security vulnerability. It allows malicious actors to exhaust server resources. This deviates from the security posture of every other data-handling endpoint defined in the official specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:45:49.666Z",
    "updatedAt": "2025-07-03T05:41:20.436Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-657/critical-verification-endpoint-is-unauthenticated"
  },
  {
    "id": "5d6c0bf0-e430-4c7d-a92d-7034061f8ffa",
    "identifier": "BUG-656",
    "title": "CRITICAL: Non-Standard API Endpoint Implemented",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification defines a `POST /ims/ob/v3p0/issue-badge/verify` endpoint for verifying an Open Badge Credential. This endpoint is not documented or defined anywhere within the official Open Badges v3.0 specification provided.\n\n**Summary:** \nThe local specification defines a `POST /ims/ob/v3p0/issue-badge/verify` endpoint for verifying an Open Badge Credential. This endpoint is not documented or defined anywhere within the official Open Badges v3.0 specification provided.\n\n**Steps to Reproduce:**\n\n1. Review the local OpenAPI specification for the route `POST /ims/ob/v3p0/issue-badge/verify`.\n2. Cross-reference this endpoint against the upstream Open Badges v3.0 specification, specifically Section 6, \"Open Badges API\".\n3. Observe that the `/issue-badge/verify` endpoint is not defined in the standard.\n\n```bash\n# This endpoint does not exist in the upstream spec, so any call is non-standard.\n# The following curl command demonstrates the locally specified interaction.\ncurl -X POST \\\n  'https://api.alpha-1edtech.com/ims/ob/v3p0/issue-badge/verify' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"@context\": [\"https://www.w3.org/ns/credentials/v2\", \"https://purl.imsglobal.org/spec/ob/v3p0/context-3.0.3.json\"],\n        \"id\": \"http://example.edu/credentials/3732\",\n        \"type\": [\"VerifiableCredential\", \"OpenBadgeCredential\"],\n        \"issuer\": \"https://example.edu/issuers/565049\",\n        \"validFrom\": \"2010-01-01T00:00:00Z\",\n        \"credentialSubject\": { \"id\": \"did:example:123\" },\n        \"proof\": { \"type\": \"DataIntegrityProof\" }\n      }'\n```\n\n**Expected:** \nThe implementation should only contain endpoints that are formally defined in the upstream specification. The official specification, in Section 6.2 \"Secure REST Endpoints\", defines the following endpoints: `getCredentials`, `upsertCredential`, `getProfile`, and `putProfile`. No verification endpoint is specified. Any such endpoint should be removed to maintain compliance with the standard or be clearly documented as a proprietary extension.\n\n**Environment:** API Route: /ims/ob/v3p0/issue-badge/verify\nLocal Spec: ims/ob/v3p0/issue/badge/verify.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a critical bug because it introduces a proprietary endpoint that is not part of the interoperable Open Badges standard. Any client built against the official specification will not be aware of this endpoint, defeating the purpose of standardization. All other bugs related to this endpoint's request/response schema are symptomatic of this foundational issue.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:43:14.457Z",
    "updatedAt": "2025-07-03T05:40:03.905Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-656/critical-non-standard-api-endpoint-implemented"
  },
  {
    "id": "ea2e75e1-7aa3-4aa6-be3e-1a4798a83c6c",
    "identifier": "BUG-655",
    "title": "MEDIUM: Multiple optional fields from the AchievementCredential model are missing in the response schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification for the `200 OK` response schema omits several optional fields that are part of the standard `AchievementCredential` data model defined in the upstream spec. The missing fields are `evidence`, `termsOfUse`, `credentialStatus`, and `refreshService`.\n\n**Summary:** \nThe local specification for the `200 OK` response schema omits several optional fields that are part of the standard `AchievementCredential` data model defined in the upstream spec. The missing fields are `evidence`, `termsOfUse`, `credentialStatus`, and `refreshService`.\n\n**Steps to Reproduce:**\n\n1. Examine the `200` response schema in the local spec.\n2. Compare its top-level properties against the `AchievementCredential` data model in the upstream spec, Appendix B.1.2.\n3. Observe that the following optional but standard fields are missing from the local spec: `evidence`, `termsOfUse`, `credentialStatus`, `refreshService`.\n\n**Expected:** \nWhile these fields are optional, a complete and compliant API specification should include them to accurately reflect the full data model that the endpoint is capable of producing. The upstream specification (B.1.2) clearly defines these properties as part of the credential. By omitting them, the local spec provides an incomplete and misleading contract to clients.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/\nLocal Spec: ims/ob/v3p0/issue/badge/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This bug indicates that the local implementation either does not support these features (a functionality gap) or fails to document them (a documentation bug). Both scenarios are problematic. For instance, the `credentialStatus` field is crucial for revocation checking, and `evidence` is a key feature of Open Badges. Omitting them from the spec means clients cannot rely on their presence, limiting the utility of the issued badges.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:41:30.743Z",
    "updatedAt": "2025-07-03T05:39:46.308Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-655/medium-multiple-optional-fields-from-the-achievementcredential-model"
  },
  {
    "id": "33d8eb37-102c-4355-845a-d18a4ec0b371",
    "identifier": "BUG-654",
    "title": "HIGH: Response schema includes 'issuanceDate', a field from an older spec version",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The 200 OK response body in the local spec includes the field `issuanceDate`.\n\n**Summary:** \nThe 200 OK response body in the local spec includes the field `issuanceDate`.\n\n**Steps to Reproduce:**\n\n1. Examine the `200` response schema in the local spec.\n2. Note the presence of the `issuanceDate` field.\n3. Review the `AchievementCredential` data model in the upstream spec, Appendix B.1.2.\n4. Observe that the v3.0 data model uses `validFrom` for the issuance/validity start time.\n5. Notes in the upstream spec (e.g., under sections 8.2.6.1 and 9.1) explicitly state that `issuanceDate` belongs to the v1.1 data model.\n\n**Expected:** \nThe response should strictly conform to the OpenBadges v3.0 data model, which uses the `validFrom` field to indicate the timestamp when the credential becomes valid. The field `issuanceDate` is from the older v1.1 model. Including it alongside `validFrom` (which is also present) creates ambiguity and indicates a data model implementation that incorrectly mixes versions.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/\nLocal Spec: ims/ob/v3p0/issue/badge/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This versioning mismatch is a significant data integrity issue. Clients built strictly against the v3.0 specification will not expect the `issuanceDate` field and may misinterpret the validity period of the credential. The upstream spec is clear that `validFrom` is the correct field for the v2.0/v3.0 data model. The local implementation is polluting its v3.0 responses with legacy fields.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:40:27.158Z",
    "updatedAt": "2025-07-03T05:40:33.978Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-654/high-response-schema-includes-issuancedate-a-field-from-an-older-spec"
  },
  {
    "id": "ec6bb6c4-a430-4516-ad6e-f27857963943",
    "identifier": "BUG-653",
    "title": "HIGH: Missing '201 Created' Success Response for New Credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec only documents a `200 OK` response for the badge creation/upsert operation, regardless of whether a new credential was created or an existing one was replaced.\n\n**Summary:** \nThe local spec only documents a `200 OK` response for the badge creation/upsert operation, regardless of whether a new credential was created or an existing one was replaced.\n\n**Steps to Reproduce:**\n\n1. Examine the `responses` section for the `POST /ims/ob/v3p0/issue-badge/` operation in the local spec.\n2. Note that the only defined success code is `200`.\n3. Compare this with Section 6.2.3.2 \"Responses\" for the `upsertCredential` operation in the upstream specification.\n4. The upstream documentation specifies two success codes: `200 OK` for a replacement and `201 Created` for a new creation.\n\n**Expected:** \nThe API should adhere to standard RESTful practices and the explicit requirements of the upstream specification. The `upsertCredential` operation must return `201 Created` when a new credential is created and `200 OK` when an existing one is replaced. This distinction is vital for client applications to understand the outcome of their request. The local spec's failure to document the `201` code indicates a likely behavioral bug.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/\nLocal Spec: ims/ob/v3p0/issue/badge/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Omitting the `201 Created` response violates both the explicit upstream specification and standard REST API design conventions for resource creation. This prevents clients from reliably determining if their operation resulted in a creation or an update, which can impact client-side logic and caching.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:39:25.875Z",
    "updatedAt": "2025-07-03T05:44:32.292Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-653/high-missing-201-created-success-response-for-new-credentials"
  },
  {
    "id": "33f67eb2-1e55-4337-abfb-ceacbc906b93",
    "identifier": "BUG-652",
    "title": "HIGH: Incorrect OAuth2 Scope Definition and Application",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec defines a non-standard scope `ob.createput` instead of the specified `credential.upsert`. Furthermore, it fails to apply any scope to the operation itself, defining `security: - OAuth2: []`.\n\n**Summary:** \nThe local spec defines a non-standard scope `ob.createput` instead of the specified `credential.upsert`. Furthermore, it fails to apply any scope to the operation itself, defining `security: - OAuth2: []`.\n\n**Steps to Reproduce:**\n\n1. Review the security scheme in the local spec under `components.securitySchemes.OAuth2.flows.clientCredentials.scopes`.\n2. Note the presence of the scope `https://purl.imsglobal.org/spec/ob/v3p0/scope/ob.createput`.\n3. Review the `security` requirement for the `POST` operation, which is an empty array `[]`.\n4. Compare this with the upstream specification, Section 6.2.1 \"Scopes\".\n5. The upstream spec defines the required scope for `upsertCredential` as `https://purl.imsglobal.org/spec/ob/v3p0/scope/credential.upsert`.\n\n**Expected:** \nThe API should define and require the exact scope specified in the upstream documentation. Section 6.2.1 states that `upsertCredential` requires the scope `https://purl.imsglobal.org/spec/ob/v3p0/scope/credential.upsert`. This scope should be both defined in the `securitySchemes` and applied to the operation in the `paths` definition.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/\nLocal Spec: ims/ob/v3p0/issue/badge/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a high-severity bug that breaks authorization and interoperability. A client developed against the official spec would request the `credential.upsert` scope and be denied, while a client aware of the proprietary `ob.createput` scope would succeed. Applying an empty scope array `[]` to the operation is also incorrect and implies no specific scope is needed, which contradicts the specification's granular permission model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:38:28.196Z",
    "updatedAt": "2025-07-03T05:39:19.020Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-652/high-incorrect-oauth2-scope-definition-and-application"
  },
  {
    "id": "c8da8445-1efe-4a01-85da-5b8863710554",
    "identifier": "BUG-651",
    "title": "CRITICAL: Missing all required 4xx/5xx Error Responses",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local OpenAPI specification completely omits definitions for any error responses (e.g., 400, 401, 403, 404, 500). It only documents the happy-path `200 OK` response.\n\n**Summary:** \nThe local OpenAPI specification completely omits definitions for any error responses (e.g., 400, 401, 403, 404, 500). It only documents the happy-path `200 OK` response.\n\n**Steps to Reproduce:**\n\n1. Examine the `responses` section for the `POST /ims/ob/v3p0/issue-badge/` operation in the local spec.\n2. Observe that only a `200` success response is defined.\n3. Compare this to Section 6.2.3.2 \"Responses\" for the `upsertCredential` operation in the upstream specification.\n4. Note the comprehensive list of required error responses: `400`, `401`, `403`, `404`, `405`, `500`, and `DEFAULT`, all returning an `Imsx_StatusInfo` object.\n\n**Expected:** \nThe API must define all possible responses as specified in the upstream documentation. Section 6.2.3.2 explicitly lists the required error status codes and mandates that they return a payload of type `Imsx_StatusInfo` (defined in B.3.1). A compliant API must be able to inform clients of failures like bad requests, authorization failures, or server errors in a standardized way.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/\nLocal Spec: ims/ob/v3p0/issue/badge/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** The absence of error definitions is a critical flaw in an API specification. It leaves client developers guessing about how to handle failure cases, leading to brittle integrations. The upstream specification provides a rich, standard error handling model (`Imsx_StatusInfo`) which has been entirely ignored in the local implementation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:36:51.823Z",
    "updatedAt": "2025-07-03T05:39:10.634Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-651/critical-missing-all-required-4xx5xx-error-responses"
  },
  {
    "id": "e185aac4-43ba-49dd-b9d2-4347ad9942a8",
    "identifier": "BUG-650",
    "title": "CRITICAL: Incorrect API Path for Issuing/Upserting a Credential",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local implementation exposes the badge issuing functionality at the path `/ims/ob/v3p0/issue-badge/`.\n\n**Summary:** \nThe local implementation exposes the badge issuing functionality at the path `/ims/ob/v3p0/issue-badge/`.\n\n**Steps to Reproduce:**\n\n1. Observe the path defined in the local spec: `/ims/ob/v3p0/issue-badge/`.\n2. Review the upstream specification, Section 6.2 \"Secure REST Endpoints\".\n3. Note that the endpoint for getting credentials is `GET /ims/ob/v3p0/credentials`.\n4. The `upsertCredential` operation, described in Section 6.2.3, logically acts on the `/credentials` resource collection.\n5. The local implementation uses a completely different path (`/issue-badge/`) for the same logical operation.\n\n**Expected:** \nThe upstream specification defines RESTful interactions with a `/credentials` resource. For example, `getCredentials` is at `GET /ims/ob/v3p0/credentials`. The `upsertCredential` operation should therefore be a `POST` or `PUT` to `/ims/ob/v3p0/credentials`. The local path `/issue-badge/` is non-standard and violates the specified resource-oriented architecture.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/\nLocal Spec: ims/ob/v3p0/issue/badge/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Using a non-standard path breaks RESTful principles and any client built against the official specification. The endpoint name should reflect the resource it operates on, which is the `credentials` collection. The local path is an arbitrary, action-based name rather than a resource-based one. This also includes a trailing slash, which is inconsistent with other endpoints described in the specification (e.g., `/profile`, `/discovery`).",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:35:29.122Z",
    "updatedAt": "2025-07-03T05:39:28.722Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-650/critical-incorrect-api-path-for-issuingupserting-a-credential"
  },
  {
    "id": "e1d84b6d-098f-4578-9531-a338f566d79f",
    "identifier": "BUG-649",
    "title": "CRITICAL: Request body for issuing a badge does not conform to the specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local API implementation expects a simplified, proprietary JSON object in the request body to issue a badge. It has fields like `userId` and `achievementId`.\n\n**Summary:** \nThe local API implementation expects a simplified, proprietary JSON object in the request body to issue a badge. It has fields like `userId` and `achievementId`.\n\n**Steps to Reproduce:**\n\n1. Examine the `requestBody` schema for the `POST /ims/ob/v3p0/issue-badge/` operation in the local spec.\n2. Observe that it expects a simple JSON object with fields like `userId` and `achievementId`.\n3. Compare this with Section 6.2.3.1 \"upsertCredential - Request\" in the upstream specification.\n4. The upstream spec requires the request body to be a full `AchievementCredential` object or a `CompactJws` string.\n\ncurl -X POST '[https://api.alpha-1edtech.com/ims/ob/v3p0/issue-badge/](https://api.alpha-1edtech.com/ims/ob/v3p0/issue-badge/)' \n-H 'Content-Type: application/json' \n-H 'Authorization: Bearer $TOKEN' \n-d '{\n  \"userId\": \"user-123\",\n  \"achievementId\": \"ach-456\"\n}'\n\n**Expected:** \nAccording to Section 6.2.3.1 of the upstream spec, the `upsertCredential` operation (which is the equivalent of the local \"issue badge\" operation) MUST accept a full `AchievementCredential` object (defined in Appendix B.1.2) or a `CompactJws` string as the request body. The current implementation uses a non-standard DTO, which is a major deviation and breaks interoperability.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/\nLocal Spec: ims/ob/v3p0/issue/badge/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a critical flaw. The API is not implementing the specified data contract for creating a credential. Instead of accepting a standard `AchievementCredential`, it uses a custom internal data structure. This prevents any standard-compliant client from using this endpoint to issue badges. The endpoint essentially creates the badge object on the server side based on minimal data, rather than accepting a complete, pre-formed credential for upserting, as the specification requires.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:34:18.282Z",
    "updatedAt": "2025-07-03T05:39:54.209Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-649/critical-request-body-for-issuing-a-badge-does-not-conform-to-the"
  },
  {
    "id": "3609a37f-513c-48c7-ba5e-b9eef71546fe",
    "identifier": "BUG-648",
    "title": "CRITICAL: Incorrect OAuth2 Flow Used for API Security",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification's security scheme (`components.securitySchemes.OAuth2`) is incorrectly configured to use the `clientCredentials` OAuth2 flow. This is a machine-to-machine flow.\n\n**Summary:** \nThe local specification's security scheme (`components.securitySchemes.OAuth2`) is incorrectly configured to use the `clientCredentials` OAuth2 flow. This is a machine-to-machine flow.\n\n**Steps to Reproduce:**\n\n1. Review the security scheme defined in the local OpenAPI spec under `components.securitySchemes`.\n2. Observe that the `OAuth2` scheme is configured with the `clientCredentials` flow.\n3. Cross-reference this with Section 7 of the upstream `openbadge.html` specification.\n4. Note that the upstream specification explicitly mandates the `Authorization Code Grant` flow for APIs where individual users control resource access.\n\n**Expected:** \nThe upstream specification, in Section 7.1 \"Using OAuth 2.0 Authorization Code Grant\", clearly states that APIs where users control their own resources must use this user-centric flow. The note in Section 6 reinforces this, stating system-to-system bulk transfers (which use client credentials) are out of scope. The implementation must use the `authorizationCode` grant flow to allow users to grant permission to clients to act on their behalf.\n\n**Environment:** API Route: /ims/ob/v3p0/issue/badge/\nLocal Spec: ims/ob/v3p0/issue/badge/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a critical security and functionality bug. Using the `clientCredentials` flow fundamentally misunderstands the user-consent model required by the Open Badges API. It bypasses the resource owner (the user) and implies a trusted first-party or system-level interaction, which is explicitly out of scope according to the upstream specification. This incorrect flow prevents third-party client applications from integrating with the API as intended by the spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:32:33.809Z",
    "updatedAt": "2025-07-03T05:39:18.527Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-648/critical-incorrect-oauth2-flow-used-for-api-security"
  },
  {
    "id": "bda0026c-6dfa-4677-9916-f1e90a50681a",
    "identifier": "BUG-647",
    "title": "HIGH: Missing 'since' Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local API specification for getting achievements does not include the `since` query parameter, which is used for filtering credentials issued after a specific timestamp.\n\n**Summary:** \nThe local API specification for getting achievements does not include the `since` query parameter, which is used for filtering credentials issued after a specific timestamp.\n\n**Steps to Reproduce:**\n\n1. Review the defined query parameters for the `GET` endpoint in the local spec.\n2. Review the defined query parameters for the `getCredentials` endpoint in the upstream specification (Section 6.2.2.1 Request).\n3. Note that the `since` parameter is defined upstream but is missing locally.\n\n**Expected:** \nThe API should support the `since` query parameter as defined in the upstream specification. This allows clients to perform incremental synchronization of credentials.\n\nUpstream Spec (Section 6.2.2.1):\n`GET /ims/ob/v3p0/credentials?limit={limit}&offset={offset}&since={since}`\nThe parameter is defined as: `since (query) | DateTime | Only include OpenBadgeCredentials issued after this timestamp. | Optional`\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/students/{studentSourcedId}\nLocal Spec: ims/ob/v3p0/achievements/students/{studentSourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Omitting the `since` parameter removes a key feature of the API intended for efficient data synchronization. Clients expecting this feature will be forced to fetch all data repeatedly, which is inefficient and costly for both the client and the server. This is a significant functional deviation from the official spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:23:49.168Z",
    "updatedAt": "2025-07-03T05:38:36.383Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-647/high-missing-since-query-parameter"
  },
  {
    "id": "ffddd173-ddec-459e-b34f-1349b8eafba3",
    "identifier": "BUG-646",
    "title": "HIGH: Ambiguous/Incorrect Usage of Date Fields in Verifiable Credential",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec includes `validFrom` and `issuanceDate` together, as well as `validUntil` and a custom `awardedDate`. This is incorrect. The VC v1.1 data model uses `issuanceDate` and `expirationDate`, while the VC v2.0 model (which this spec is based on) uses `validFrom` and `validUntil`. Including fields from both versions is ambiguous and non-compliant. `awardedDate` is a custom field not present in the upstream spec.\n\n**Summary:** \nThe local spec includes `validFrom` and `issuanceDate` together, as well as `validUntil` and a custom `awardedDate`. This is incorrect. The VC v1.1 data model uses `issuanceDate` and `expirationDate`, while the VC v2.0 model (which this spec is based on) uses `validFrom` and `validUntil`. Including fields from both versions is ambiguous and non-compliant. `awardedDate` is a custom field not present in the upstream spec.\n\n**Steps to Reproduce:**\n\n1. Examine the `data` object schema within the `issuedBadges` array in the local spec.\n2. Note the presence of `validFrom`, `issuanceDate`, `validUntil`, and `awardedDate`.\n3. Compare these to the `AchievementCredential` model (B.1.2) in the upstream spec, which is based on Verifiable Credentials v2.0.\n\n**Expected:** \nThe implementation should strictly adhere to the VC v2.0 data model as defined in the upstream spec. It should use `validFrom` for the issuance/validity start date and `validUntil` for the expiration date. The fields `issuanceDate` and `awardedDate` should be removed as they are not part of the standard `AchievementCredential` model for this version.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/students/{studentSourcedId}\nLocal Spec: ims/ob/v3p0/achievements/students/{studentSourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Mixing data models from different versions of a standard leads to confusion and parsing errors for client applications. A compliant client would not know how to interpret a credential containing both `validFrom` and `issuanceDate`. This ambiguity undermines the verifiability and interoperability of the credential.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:22:50.059Z",
    "updatedAt": "2025-07-03T05:39:40.277Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-646/high-ambiguousincorrect-usage-of-date-fields-in-verifiable-credential"
  },
  {
    "id": "806d30c1-445d-4225-806c-4bbc6e1fa69c",
    "identifier": "BUG-645",
    "title": "[NOT A BUG] Undocumented `search` query parameter",
    "description": "This is a custom parameter we've added that is not documented.\n\nWe *should* document it, but this is not a bug.",
    "state": {
      "name": "Canceled",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:22:48.491Z",
    "updatedAt": "2025-07-03T14:36:15.552Z",
    "assignee": null,
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-645/not-a-bug-undocumented-search-query-parameter"
  },
  {
    "id": "02a131ba-8674-44af-ad03-f71eed673a35",
    "identifier": "BUG-644",
    "title": "HIGH: Unspecified and Non-Standard Query Parameters",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification includes several query parameters (`fields`, `sort`, `orderBy`, `filter`, `search`) that are not defined in the official upstream specification for the `getCredentials` endpoint.\n\n**Summary:** \nThe local specification includes several query parameters (`fields`, `sort`, `orderBy`, `filter`, `search`) that are not defined in the official upstream specification for the `getCredentials` endpoint.\n\n**Steps to Reproduce:**\n\n1. Examine the `parameters` section of the `GET` operation in the local spec.\n2. Note the presence of `fields`, `sort`, `orderBy`, `filter`, and `search`.\n3. Compare these with the parameters defined for the `getCredentials` operation in the upstream specification (Section 6.2.2.1).\n\n**Expected:** \nOnly the query parameters defined in the upstream specification should be implemented. For the `getCredentials` endpoint, these are `limit`, `offset`, and `since`. The other parameters should be removed to ensure compliance and avoid non-standard behavior that other clients would not know how to use.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/students/{studentSourcedId}\nLocal Spec: ims/ob/v3p0/achievements/students/{studentSourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Adding non-standard parameters for filtering, sorting, and field selection creates a proprietary version of the API. This severely impacts interoperability, as clients built to the official spec will not support this custom functionality. This deviation fragments the ecosystem.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:21:59.382Z",
    "updatedAt": "2025-07-03T05:43:31.393Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-644/high-unspecified-and-non-standard-query-parameters"
  },
  {
    "id": "cb9076e7-d551-4a03-9d14-f5ae4135e0c5",
    "identifier": "BUG-643",
    "title": "HIGH: Incorrectly Required Fields in Verifiable Credential Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification incorrectly marks several fields as required within the Verifiable Credential data structure. Specifically, `narrative`, `image`, `creator`, and `proof` are all optional in the upstream specification but are defined as required fields locally.\n\n**Summary:** \nThe local specification incorrectly marks several fields as required within the Verifiable Credential data structure. Specifically, `narrative`, `image`, `creator`, and `proof` are all optional in the upstream specification but are defined as required fields locally.\n\n**Steps to Reproduce:**\n\n1. Examine the local spec's schema for the object under `achievementsWithIssuedBadges.items.issuedBadges.items.data`.\n2. Observe that `credentialSubject.achievement.criteria.narrative`, `credentialSubject.achievement.image`, `credentialSubject.achievement.creator`, and `proof` are marked as required.\n3. Cross-reference these with the upstream data models: `VerifiableCredential` (B.1.19), `Achievement` (B.1.1), and `Criteria` (B.1.6).\n\n**Expected:** \nThese fields should be marked as optional to comply with the upstream specification.\n\n* `proof`: Defined as optional (`[0..*]`) in the `VerifiableCredential` model (B.1.19).\n* `creator`: Defined as optional (`[0..1]`) in the `Achievement` model (B.1.1).\n* `image`: Defined as optional (`[0..1]`) in the `Achievement` model (B.1.1).\n* `narrative`: Defined as optional (`[0..1]`) in the `Criteria` model (B.1.6).\n  The local spec must be updated to reflect the optional nature of these fields.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/students/{studentSourcedId}\nLocal Spec: ims/ob/v3p0/achievements/students/{studentSourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Marking optional fields as required can cause compliant clients or data sources to be rejected by this API. For example, a valid Open Badge that does not have an image or creator specified would be considered invalid by this implementation, breaking interoperability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:20:57.500Z",
    "updatedAt": "2025-07-03T05:40:16.850Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-643/high-incorrectly-required-fields-in-verifiable-credential-schema"
  },
  {
    "id": "fed6bdde-7d66-4dc8-961e-9485218afdba",
    "identifier": "BUG-642",
    "title": "HIGH: Incorrect Pagination Mechanism",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec includes pagination metadata directly in the JSON response body. It also fails to define the required `Link` and `X-Total-Count` headers in the response definition.\n\n**Summary:** \nThe local spec includes pagination metadata directly in the JSON response body. It also fails to define the required `Link` and `X-Total-Count` headers in the response definition.\n\n**Steps to Reproduce:**\n\n1. Review the local spec's `200 OK` response schema. Note the presence of pagination fields (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) in the response body.\n2. Review section \"6.4 Paging\" of the upstream HTML specification.\n3. Observe that the upstream spec mandates pagination via HTTP headers, not the response body.\n\n**Expected:** \nThe upstream specification (Section 6.4 Paging) explicitly requires pagination to be handled via HTTP headers. A compliant API MUST include:\n\n1. An `X-Total-Count` header with the total number of results.\n2. A `Link` header containing URLs for `next`, `last`, `first`, and `prev` pages.\n\nThe response body itself should not contain this pagination metadata.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/students/{studentSourcedId}\nLocal Spec: ims/ob/v3p0/achievements/students/{studentSourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Implementing pagination in the body instead of headers breaks any standard client expecting to use the `Link` header for traversing result sets. This is a significant deviation from standard REST practices and a direct violation of the upstream specification's requirements for this API.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:19:56.637Z",
    "updatedAt": "2025-07-03T05:37:37.472Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-642/high-incorrect-pagination-mechanism"
  },
  {
    "id": "22e55969-a5b1-4e78-8f18-83129b0fe8bc",
    "identifier": "BUG-641",
    "title": "CRITICAL: Incorrect Data Type for 'criteria' Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec defines the `criteria` field as a simple `string`.\n\n**Summary:** \nThe local spec defines the `criteria` field as a simple `string`.\n\n**Steps to Reproduce:**\n\n1. Examine the schema for the `200 OK` response in the local spec.\n2. Navigate to the `criteria` field within the `achievementsWithIssuedBadges` array items. Note its type is `string`.\n3. Compare this to the `Achievement` model (Section B.1.1) and `Criteria` model (Section B.1.6) in the upstream spec.\n\n**Expected:** \nThe upstream specification defines the `criteria` field as a complex object of type `Criteria`. The `Criteria` object (Section B.1.6) has its own properties, including an optional `id` (URI) and an optional `narrative` (Markdown).\n\nFrom the upstream spec, `Achievement` class (B.1.1):\n\n* `criteria` property has type `Criteria`\n\nFrom the upstream spec, `Criteria` class (B.1.6):\n\n```json\n{\n  \"id\": \"URI\",\n  \"narrative\": \"Markdown\"\n}\n```\n\nThe local implementation's use of a simple `string` is a direct and critical violation of the specified data model.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/students/{studentSourcedId}\nLocal Spec: ims/ob/v3p0/achievements/students/{studentSourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This bug prevents clients from correctly parsing or utilizing the criteria for an achievement. A client expecting a `Criteria` object with a `narrative` field will fail when it receives a simple string. This breaks interoperability and data integrity according to the official model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:18:49.932Z",
    "updatedAt": "2025-07-03T05:37:28.213Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-641/critical-incorrect-data-type-for-criteria-field"
  },
  {
    "id": "3eedfc22-467d-42ef-a81d-64d3c61cf4a6",
    "identifier": "BUG-640",
    "title": "CRITICAL: Incorrect 200 OK Response Body Structure",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification defines a `200 OK` response body with a custom wrapper object containing keys like `achievementsWithIssuedBadges`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`. The core data is nested within the `achievementsWithIssuedBadges` array.\n\n**Summary:** \nThe local specification defines a `200 OK` response body with a custom wrapper object containing keys like `achievementsWithIssuedBadges`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`. The core data is nested within the `achievementsWithIssuedBadges` array.\n\n**Steps to Reproduce:**\n\n1. Trigger a successful `200 OK` response from the endpoint.\n2. Observe the JSON response body structure.\n3. Compare the structure to the `GetOpenBadgeCredentialsResponse` defined in section B.2.1 of the upstream specification.\n\n`curl -X GET \"https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/students/someStudentId\"`\n\n**Expected:** \nAccording to the upstream specification (Section B.2.1 GetOpenBadgeCredentialsResponse), the response body should be a simple object containing either a `credential` array (for embedded proofs) or a `compactJwsString` array (for JWT proofs). There should be no pagination-related fields in the body.\n\nThe upstream spec defines the response as:\n\n```json\n{\n  \"credential\": [ AchievementCredential ],\n  \"compactJwsString\": [ CompactJws ]\n}\n```\n\nThe local spec is completely non-compliant.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/students/{studentSourcedId}\nLocal Spec: ims/ob/v3p0/achievements/students/{studentSourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This structural deviation makes the local API completely incompatible with any client built against the official specification. Clients would fail to parse the response. The custom nesting and inclusion of pagination data in the body directly contradict the upstream model, which specifies that pagination should be handled via HTTP headers.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:17:57.332Z",
    "updatedAt": "2025-07-03T05:39:02.832Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-640/critical-incorrect-200-ok-response-body-structure"
  },
  {
    "id": "23d4a01f-0f7d-4b47-ab30-9f12877ee0cd",
    "identifier": "BUG-639",
    "title": "CRITICAL: Endpoint Path Mismatch - Local spec defines a non-existent route",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec defines the endpoint `GET /ims/ob/v3p0/achievements/students/{studentSourcedId}`. This path does not exist in the official upstream specification. It appears to be a completely custom or fabricated endpoint.\n\n**Summary:** \nThe local spec defines the endpoint `GET /ims/ob/v3p0/achievements/students/{studentSourcedId}`. This path does not exist in the official upstream specification. It appears to be a completely custom or fabricated endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the local OpenAPI spec for the route `/ims/ob/v3p0/achievements/students/{studentSourcedId}`.\n2. Review the upstream HTML specification, specifically section \"6.2 Secure REST Endpoints\".\n3. Observe that the local path does not exist in the upstream specification. The closest related endpoint is `GET /ims/ob/v3p0/credentials`.\n4. Make a `curl` request to the documented upstream path, which differs from the local implementation's path.\n   `curl -X GET \"https://api.alpha-1edtech.com/ims/ob/v3p0/credentials\"`\n\n**Expected:** \nThe local implementation should conform to an endpoint actually defined in the upstream specification. The most likely intended endpoint is `getCredentials`, which the upstream specification defines with the path `GET /ims/ob/v3p0/credentials`.\n\nFrom the upstream spec (Section 6.2.2.1 Request):\n`GET /ims/ob/v3p0/credentials?limit={limit}&offset={offset}&since={since}`\n\nThe local implementation should use this path and its associated parameters, not the custom `/achievements/students/{studentSourcedId}` path.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/students/{studentSourcedId}\nLocal Spec: ims/ob/v3p0/achievements/students/{studentSourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is the most severe bug as it indicates a fundamental misunderstanding or deviation from the official specification. The entire local implementation of this route is based on a non-existent path, which means it cannot interoperate with any other compliant system. All other bugs related to parameters and response bodies stem from this primary error. The local implementation uses a path parameter `{studentSourcedId}` to fetch achievements for a specific student, whereas the upstream `getCredentials` endpoint is for fetching credentials for the authenticated user, without any path parameters. This is a complete divergence in functionality.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:16:24.713Z",
    "updatedAt": "2025-07-03T05:37:03.563Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-639/critical-endpoint-path-mismatch-local-spec-defines-a-non-existent"
  },
  {
    "id": "4de9e604-bf75-489e-8620-474d57cd9c98",
    "identifier": "BUG-638",
    "title": "LOW: Inconsistent Trailing Slash in API Path",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification for the route consistently uses a trailing slash: `/ims/ob/v3p0/achievements/`.\n\n**Summary:** \nThe local specification for the route consistently uses a trailing slash: `/ims/ob/v3p0/achievements/`.\n\n**Steps to Reproduce:**\n\n1. Observe the API path in the local spec: `/ims/ob/v3p0/achievements/`.\n2. Note the trailing slash (`/`) at the end of the path.\n3. Observe the API paths in the upstream specification documentation, for example in Section 6.2.2.1: `GET /ims/ob/v3p0/credentials?limit={limit}...`.\n4. Note the absence of a trailing slash in the upstream specification's examples.\n\n**Expected:** \nThe upstream specification documentation consistently shows paths without a trailing slash (e.g., `/ims/ob/v3p0/credentials`, `/ims/ob/v3p0/profile`). While some web frameworks treat paths with and without a trailing slash as equivalent, others do not. For maximum compatibility and to adhere to the spec's examples, the trailing slash should be removed.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a minor inconsistency but can lead to routing issues, unexpected `301 Moved Permanently` redirects, or `404 Not Found` errors depending on the server configuration. Adhering to the exact path structure shown in the upstream spec is the best practice.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:12:58.060Z",
    "updatedAt": "2025-07-03T05:36:53.205Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-638/low-inconsistent-trailing-slash-in-api-path"
  },
  {
    "id": "b5ca5cfc-8cf3-4a62-901b-307fa64a5304",
    "identifier": "BUG-637",
    "title": "MEDIUM: Incorrect OperationId for API methods",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec uses `operationId: getAllAchievements` for the GET method and `operationId: createAchievement` for the POST method.\n\n**Summary:** \nThe local spec uses `operationId: getAllAchievements` for the GET method and `operationId: createAchievement` for the POST method.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Check the `operationId` for the GET method in the local spec. It is `getAllAchievements`.\n2. Check the `operationId` for the POST method in the local spec. It is `createAchievement`.\n3. Compare these to the operation names in the upstream specification's API section (Sections 6.2.2 and 6.2.3).\n\n**Expected:** \nThe upstream specification names these operations `getCredentials` (for GET) and `upsertCredential` (for POST). While `operationId` is often used for code generation and doesn't directly affect the on-the-wire protocol, using names that deviate from the specification is a significant inconsistency that can cause confusion and break tooling that relies on these standard names.\n\nQuote from Upstream Spec (Section 6.2.2):\n\"getCredentials\"\n\nQuote from Upstream Spec (Section 6.2.3):\n\"upsertCredential\"\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This deviation suggests a disconnect between the local implementation and the official specification's terminology. Aligning the `operationId` values with the upstream spec improves clarity, consistency, and compatibility with standard-aware tools.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:08:51.220Z",
    "updatedAt": "2025-07-03T05:36:46.630Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-637/medium-incorrect-operationid-for-api-methods"
  },
  {
    "id": "b2382c16-c660-4d89-b737-b6b262000250",
    "identifier": "BUG-636",
    "title": "HIGH: Incorrect `achievementType` enumeration",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The `enum` for `achievementType` in the local specification is missing the value `QualityAssuranceCredential`. It includes `ProfessionalDoctorate` and `MasterCertificate` but skips the one in between.\n\n**Summary:** \nThe `enum` for `achievementType` in the local specification is missing the value `QualityAssuranceCredential`. It includes `ProfessionalDoctorate` and `MasterCertificate` but skips the one in between.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `enum` values for the `achievementType` field in the local spec.\n2. Compare these values with the `AchievementType Enumeration` in the upstream spec (Section B.1.29).\n3. Observe that the local spec is missing the `QualityAssuranceCredential` value.\n\n**Expected:** \nThe upstream specification, in Section B.1.29 `AchievementType Enumeration`, explicitly lists `QualityAssuranceCredential` as a valid term. The local implementation's enum must include this value to be fully compliant and to support all standard achievement types.\n\nQuote from Upstream Spec (Section B.1.29):\n\"QualityAssuranceCredential: Credential assuring that an organization, program, or awarded credential meets prescribed requirements...\"\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Missing an enum value means the API cannot produce or accept credentials of that type, breaking interoperability for any system that uses the `QualityAssuranceCredential` type. The enum list must be corrected to match the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:07:53.512Z",
    "updatedAt": "2025-07-03T05:36:41.184Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-636/high-incorrect-achievementtype-enumeration"
  },
  {
    "id": "25285b1d-21bd-4ab0-8f9e-eb77a40d4a7f",
    "identifier": "BUG-635",
    "title": "HIGH: Non-Standard 'metadata' Field in GET /credentials Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification includes a `metadata` field in the response object for an achievement. This field is defined as a nullable object that can contain arbitrary additional properties.\n\n**Summary:** \nThe local specification includes a `metadata` field in the response object for an achievement. This field is defined as a nullable object that can contain arbitrary additional properties.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the schema for the items in the `achievements` array of the GET response in the local spec.\n2. Observe the presence of a `metadata` field.\n3. Cross-reference this with the data models in the upstream specification (Appendix B).\n4. Note that no `metadata` field is defined for the `AchievementCredential` or its sub-objects.\n\n**Expected:** \nThe upstream Open Badges specification does not define a generic `metadata` property. The standard's mechanism for extensibility is through the use of JSON-LD contexts, which allow for the addition of properties from other vocabularies in a structured and standardized way. Adding an arbitrary `metadata` object is a non-compliant way to handle extensions and hinders interoperability.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** While this field might be intended for internal use, exposing it on a public API that is meant to adhere to a standard is a significant deviation. It encourages non-standard data exchange and can confuse compliant clients. The correct approach for custom data is to define a JSON-LD extension context.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:06:52.922Z",
    "updatedAt": "2025-07-03T05:36:34.244Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-635/high-non-standard-metadata-field-in-get-credentials-response"
  },
  {
    "id": "47e436e7-f59c-4298-ac11-b1652913d4d5",
    "identifier": "BUG-634",
    "title": "CRITICAL: Incorrect Usage and Placement of 'status' Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec places a `status` field on the main achievement object with enum values `active` and `tobedeleted`. It also applies a default of `active` in the POST request.\n\n**Summary:** \nThe local spec places a `status` field on the main achievement object with enum values `active` and `tobedeleted`. It also applies a default of `active` in the POST request.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `status` field in the local spec for both the GET response and POST request body.\n2. Note its location directly on the `achievement` object and its enum values (`active`, `tobedeleted`).\n3. Compare this to the upstream spec, finding the `status` property in the `Result` class (B.1.16) and its allowed values in `ResultStatusType` (B.1.33).\n\n**Expected:** \nAccording to the upstream specification, `status` is not a property of the `Achievement` class. It is a property of the `Result` class (Section B.1.16), which is nested within the `credentialSubject`. Furthermore, the allowed enum values for this status are defined in `ResultStatusType` (Section B.1.33) and include \"Completed\", \"Enrolled\", \"Failed\", etc. The local implementation has misplaced the field, used incorrect enum values, and added a non-standard default.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This bug indicates a fundamental misunderstanding of the data model. The status of an achievement (e.g., 'Completed') is part of the result asserted for a specific learner, not an inherent property of the achievement definition itself. This incorrect placement and vocabulary make the local implementation incompatible with the standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:05:08.447Z",
    "updatedAt": "2025-07-03T05:36:23.012Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-634/critical-incorrect-usage-and-placement-of-status-field"
  },
  {
    "id": "0deea572-0070-4e16-8525-bf2adb03cc85",
    "identifier": "BUG-633",
    "title": "CRITICAL: Incorrect Success Response Body for POST /credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** Upon successfully creating an achievement, the local API specification indicates it will return a `201 Created` response with a body containing a `sourcedIdPairs` object. This object has `suppliedSourcedId` and `allocatedSourcedId` properties.\n\n**Summary:** \nUpon successfully creating an achievement, the local API specification indicates it will return a `201 Created` response with a body containing a `sourcedIdPairs` object. This object has `suppliedSourcedId` and `allocatedSourcedId` properties.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `201 Created` response schema for the `POST` operation in the local spec.\n2. Compare it to the success response schema for the `upsertCredential` operation in the upstream spec (Section 6.2.3.2).\n3. Observe that the local spec returns a custom `sourcedIdPairs` object, while the upstream spec requires returning the created `AchievementCredential`.\n\n**Expected:** \nThe upstream Open Badges specification (Section 6.2.3.2 Responses) clearly states that a successful `201 Created` response MUST return the full `AchievementCredential` object that was just created. There is no mention of a `sourcedIdPairs` object. This custom response object appears to be from a different specification (like OneRoster) and is non-compliant with the OpenBadge spec.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Returning a non-standard response body breaks the contract with the client. A client following the specification would expect the full credential object back to confirm the creation details, but would instead receive an unknown object, leading to parsing errors and a broken workflow.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:04:12.341Z",
    "updatedAt": "2025-07-03T05:43:19.815Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-633/critical-incorrect-success-response-body-for-post-credentials"
  },
  {
    "id": "e6ee4038-713d-445a-8bfa-7d6cfe97d95d",
    "identifier": "BUG-632",
    "title": "CRITICAL: Incorrect Request Body for POST /credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec's `POST` operation expects a request body with a root key `achievement`, which contains a simplified, non-compliant object representing the achievement.\n\n**Summary:** \nThe local spec's `POST` operation expects a request body with a root key `achievement`, which contains a simplified, non-compliant object representing the achievement.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `requestBody` schema for the `POST` operation in the local spec.\n2. Compare it to the `requestBody` for the `upsertCredential` operation in the upstream spec (Section 6.2.3.1).\n3. Observe that the local spec expects a custom, non-standard object, whereas the upstream spec expects a full `AchievementCredential` object or a JWS string.\n\nCurl command for local spec:\n`curl -X POST 'https://.../achievements/' -H 'Content-Type: application/json' --data '{\"achievement\": {\"name\": \"Test\", ...}}'`\n\nCurl command for upstream spec:\n`curl -X POST 'https://.../credentials' -H 'Content-Type: application/json' --data '{\"@context\": [...], \"type\": [\"VerifiableCredential\", ...], ...}'`\n\n**Expected:** \nThe upstream specification (Section 6.2.3.1 Request) requires the request body for `upsertCredential` to be the full `AchievementCredential` object (which is a Verifiable Credential) with a content type of `application/json` or `application/vc+ld+json`. Alternatively, it can be a JWS string with content type `text/plain`. The local implementation's custom `{ \"achievement\": { ... } }` wrapper is not specified and is non-compliant. The server should be expecting the full VC data model directly as the request body.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This deviation makes it impossible for a compliant client to create or update credentials. The server would reject a correctly formatted `AchievementCredential` because it's not wrapped in the non-standard `achievement` object the local implementation expects. This fundamentally breaks the `POST` operation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:02:30.683Z",
    "updatedAt": "2025-07-03T05:44:34.799Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-632/critical-incorrect-request-body-for-post-credentials"
  },
  {
    "id": "ee602c4d-501e-4833-8b83-148eddb504f3",
    "identifier": "BUG-631",
    "title": "CRITICAL: Response for GET /credentials is not a valid Verifiable Credential object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The items returned in the `achievements` array are simple JSON objects with a flat structure, containing fields like `sourcedId`, `status`, `name`, etc. They are not compliant with the Verifiable Credential data model.\n\n**Summary:** \nThe items returned in the `achievements` array are simple JSON objects with a flat structure, containing fields like `sourcedId`, `status`, `name`, etc. They are not compliant with the Verifiable Credential data model.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a GET request to the `/ims/ob/v3p0/achievements/` endpoint.\n2. Inspect the JSON structure of the items within the returned `achievements` array.\n3. Compare this structure to the official `AchievementCredential` data model in the upstream specification (Section B.1.2).\n4. Observe that the local response objects are missing the entire Verifiable Credential structure.\n\nCurl command:\n`curl -X GET 'https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/' -H 'Authorization: Bearer $TOKEN'`\n\n**Expected:** \nThe upstream specification requires that the API returns `AchievementCredential` objects, which are a type of Verifiable Credential (VC). A valid `AchievementCredential` MUST have a specific structure including top-level properties like `@context`, `id`, `type`, `issuer`, `validFrom`, and `credentialSubject`. The actual achievement data should be nested within the `credentialSubject.achievement` property. The local implementation completely omits this required VC structure, making the returned objects unverifiable and non-compliant.\n\nQuote from Upstream Spec (Section B.1.2):\n\"AchievementCredentials are representations of an awarded achievement... Maps to a Verifiable Credential as defined in the \\[\\[VC-DATA-MODEL-2.0\\]\\].\"\nA valid VC requires properties like `issuer`, `validFrom`, and `credentialSubject`.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is the most severe bug. The core purpose of the OpenBadge v3 specification is to align with the W3C Verifiable Credentials data model. By returning a simple, flat JSON object instead of a structured `AchievementCredential`, the API fails to provide a verifiable, tamper-evident credential. This defeats the primary goal of the specification and breaks interoperability with any VC-compatible wallet or verifier.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T16:02:30.460Z",
    "updatedAt": "2025-07-03T05:37:03.132Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-631/critical-response-for-get-credentials-is-not-a-valid-verifiable"
  },
  {
    "id": "de01bb7a-d260-4216-bc60-c27936b8c241",
    "identifier": "BUG-630",
    "title": "CRITICAL: Parameter Mismatch on GET /credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification's GET operation includes the following non-standard query parameters: `fields`, `sort`, `orderBy`, `filter`, and `search`. It is also missing the standard `since` parameter.\n\n**Summary:** \nThe local specification's GET operation includes the following non-standard query parameters: `fields`, `sort`, `orderBy`, `filter`, and `search`. It is also missing the standard `since` parameter.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the query parameters for the GET operation in the local spec.\n2. Compare them against the defined parameters for the `getCredentials` operation in the upstream spec (Section 6.2.2.1).\n3. Observe that the local spec is missing the standard `since` parameter and includes several non-standard parameters.\n\nCurl command for local spec (showing a non-standard parameter):\n`curl -X GET 'https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/?filter=status%3D%27active%27' -H 'Authorization: Bearer $TOKEN'`\n\nCurl command for upstream spec (showing the standard parameter):\n`curl -X GET 'https://api.alpha-1edtech.com/ims/ob/v3p0/credentials?since=2024-01-01T00:00:00Z' -H 'Authorization: Bearer $TOKEN'`\n\n**Expected:** \nThe upstream specification (Section 6.2.2.1 Request) defines only three optional query parameters for the `getCredentials` endpoint: `limit`, `offset`, and `since`. Any other parameters are non-compliant. The `since` parameter, described as \"Only include OpenBadgeCredentials issued after this timestamp\", MUST be supported. The other parameters (`fields`, `sort`, etc.) are not part of the base specification and should be removed.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** Adding non-standard filtering, sorting, and field selection parameters while omitting a standard parameter represents a major deviation. This breaks the contract with clients and can lead to unpredictable behavior and data filtering issues. This must be corrected to align with the official specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:57:28.742Z",
    "updatedAt": "2025-07-03T05:43:30.589Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-630/critical-parameter-mismatch-on-get-credentials"
  },
  {
    "id": "43749eee-aa00-46b7-a247-35713d4cea2c",
    "identifier": "BUG-629",
    "title": "CRITICAL: Incorrect API Endpoint Path for Achievements/Credentials",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification defines the resource path for getting and creating achievements as `/ims/ob/v3p0/achievements/`.\n\n**Summary:** \nThe local specification defines the resource path for getting and creating achievements as `/ims/ob/v3p0/achievements/`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the path defined in the local OpenAPI spec for getting and creating achievements.\n2. Compare this path to the endpoint paths defined in the upstream Open Badges API specification.\n3. Observe that the local path is `/ims/ob/v3p0/achievements/` while the official spec requires `/ims/ob/v3p0/credentials`.\n\nCurl command for local spec:\n`curl -X GET 'https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/' -H 'Authorization: Bearer $TOKEN'`\n\nCurl command for upstream spec:\n`curl -X GET 'https://api.alpha-1edtech.com/ims/ob/v3p0/credentials' -H 'Authorization: Bearer $TOKEN'`\n\n**Expected:** \nAccording to the upstream Open Badges specification, the correct resource path for these operations should be `/ims/ob/v3p0/credentials`. The official documentation defines the `getCredentials` and `upsertCredential` operations on this path.\n\nQuote from Upstream Spec (Section 6.2.2.1 Request):\n\"GET /ims/ob/v3p0/credentials?limit={limit}&offset={offset}&since={since}\"\n\nQuote from Upstream Spec (Section 6.2.3.1 Request):\n\"POST /ims/ob/v3p0/credentials\"\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/\nLocal Spec: ims/ob/v3p0/achievements/.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a fundamental and critical deviation from the specification. The base path for the resource is incorrect, which will break any client implementation that correctly follows the upstream documentation. The local implementation uses the term \"achievements\" while the official spec uses \"credentials\" for this resource path. This must be corrected for compliance.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:56:29.320Z",
    "updatedAt": "2025-07-03T05:37:01.495Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-629/critical-incorrect-api-endpoint-path-for-achievementscredentials"
  },
  {
    "id": "c390bee8-3f3b-4006-b3df-7c9fd7d23ed8",
    "identifier": "BUG-628",
    "title": "Undocumented `minLength` Constraint in PUT Request Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local spec enforces a `minLength: 1` constraint on the `name` and `description` fields in the PUT request body. This means empty strings are not allowed for these fields.\n\n**Summary:** \nThe local spec enforces a `minLength: 1` constraint on the `name` and `description` fields in the PUT request body. This means empty strings are not allowed for these fields.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the request body schema for the `PUT /ims/ob/v3p0/achievements/{sourcedId}` endpoint in the local spec.\n2. The `name` and `description` fields have a `minLength: 1` constraint.\n3. This constraint is not mentioned in the upstream specification's data model for the `Achievement` object.\n\nCurl command to test:\n\n```bash\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/some-id\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"achievement\": {\n    \"name\": \"\",\n    \"description\": \"This should be a valid update.\"\n  }\n}'\n```\n\n**Expected:** \nThe upstream `Achievement` data model (Section B.1.1) defines `name` and `description` as required fields of type `String`, but it does not specify any `minLength` constraint. While disallowing empty strings might be a sensible validation rule, it is an undocumented deviation from the official specification. A compliant client might attempt to send an empty string, which should be permissible according to the upstream spec but would be rejected by this implementation.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/{sourcedId}\nLocal Spec: ims/ob/v3p0/achievements/{sourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a minor deviation but still represents a discrepancy between the implementation and the specification. Such undocumented constraints can cause interoperability issues with clients that strictly follow the published standard. The server is enforcing a stricter validation rule than what the specification requires.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:52:58.386Z",
    "updatedAt": "2025-07-03T05:35:35.472Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-628/undocumented-minlength-constraint-in-put-request-body"
  },
  {
    "id": "5c7eb682-168d-4735-aa67-26b8c8d7a27f",
    "identifier": "BUG-627",
    "title": "Inconsistent `required` status for 'tag' field in GET response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local specification's response schema for the `GET /achievements/{sourcedId}` endpoint incorrectly marks the `tag` field as required.\n\n**Summary:** \nThe local specification's response schema for the `GET /achievements/{sourcedId}` endpoint incorrectly marks the `tag` field as required.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schema for the `GET /ims/ob/v3p0/achievements/{sourcedId}` response in the local OpenAPI spec.\n2. Note that the `tag` field inside the `achievement` object is listed in the `required` array for that object.\n3. Compare this to the upstream specification for the `Achievement` data model.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/some-id\" -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification (Section B.1.1 Achievement), the `tag` property has a multiplicity of `[0..*]`, which means it is optional. An Achievement object is valid without a `tag` field. By making it required in the response, the local implementation is non-compliant and may break clients that adhere strictly to the upstream spec.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/{sourcedId}\nLocal Spec: ims/ob/v3p0/achievements/{sourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** While the local spec also provides a default value of `[]` for the `tag` field, which mitigates crashes, forcing an optional field to be required is a schema violation. A server should be able to return a valid Achievement object that does not contain a `tag` property at all. The local spec forces the inclusion of the key, even if the value is an empty array.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:51:57.814Z",
    "updatedAt": "2025-07-03T05:37:45.847Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-627/inconsistent-required-status-for-tag-field-in-get-response"
  },
  {
    "id": "8e61f897-7b82-4caf-a64c-545c9c2bf37f",
    "identifier": "BUG-626",
    "title": "Incorrect Lifecycle Management via DELETE Method",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The local implementation of the DELETE method performs a soft delete by updating a `status` field on the `Achievement` object itself. This `status` field is not part of the official specification.\n\n**Summary:** \nThe local implementation of the DELETE method performs a soft delete by updating a `status` field on the `Achievement` object itself. This `status` field is not part of the official specification.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a DELETE request to the `/ims/ob/v3p0/achievements/{sourcedId}` endpoint.\n2. According to the local spec's description, this performs a \"soft delete\" by changing the `status` of the Achievement to `tobedeleted`.\n3. This behavior is inconsistent with the upstream specification's model for revocation.\n\nCurl command:\n\n```bash\ncurl -X DELETE \"https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/some-id\" -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification handles the invalidation of an earned achievement through the `credentialStatus` property on a `VerifiableCredential` (Section 9.1, Step 4), which points to a revocation list. An `Achievement` is a definition and does not have its own lifecycle status like 'active' or 'tobedeleted'. Modifying the definition to mark it as 'tobedeleted' is conceptually incorrect and could wrongfully invalidate all other credentials that reference the same Achievement definition. The correct approach is to revoke the specific `AchievementCredential`, not alter the underlying `Achievement`.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/{sourcedId}\nLocal Spec: ims/ob/v3p0/achievements/{sourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This bug represents a fundamental misunderstanding of the OpenBadge data model, confusing the lifecycle of an achievement *definition* (`Achievement`) with an achievement *assertion* (`AchievementCredential`). The current implementation could lead to widespread, unintended invalidation of credentials if multiple users or systems share the same achievement definitions. The logic should be corrected to target the credential instance for revocation, not the definition.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:50:42.358Z",
    "updatedAt": "2025-07-03T05:36:21.840Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-626/incorrect-lifecycle-management-via-delete-method"
  },
  {
    "id": "1f2815d0-5e59-4626-87a9-34351ec2ab65",
    "identifier": "BUG-625",
    "title": "Incorrect Data Model in PUT /achievements/{sourcedId} Request Body - Field Type Mismatch",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The request body for the `PUT /achievements/{sourcedId}` endpoint expects the `criteria` and `image` fields within the `achievement` object to be of type `string`.\n\n**Summary:** \nThe request body for the `PUT /achievements/{sourcedId}` endpoint expects the `criteria` and `image` fields within the `achievement` object to be of type `string`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a JSON payload for a PUT request to the `/ims/ob/v3p0/achievements/{sourcedId}` endpoint according to the local spec.\n2. The payload's `achievement` object includes `criteria` and `image` as simple `string` values.\n3. This payload structure is non-compliant with the upstream `Achievement` model.\n\nCurl command:\n\n```bash\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/some-id\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"achievement\": {\n    \"name\": \"Updated Name\",\n    \"description\": \"Updated Description\",\n    \"criteria\": \"This is a simple string, which is incorrect.\",\n    \"image\": \"https://example.com/image.png\"\n  }\n}'\n```\n\n**Expected:** \nThe request body should conform to the upstream `Achievement` data model (Section B.1.1). Therefore, if these fields are to be updated, they should be structured as complex objects:\n\n* `criteria` should be a `Criteria` object (e.g., `{\"narrative\": \"Updated narrative\"}`).\n* `image` should be an `Image` object (e.g., `{\"id\": \"https://example.com/image.png\", \"type\": \"Image\"}`).\n\nUsing primitive strings for these fields is a schema violation.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/{sourcedId}\nLocal Spec: ims/ob/v3p0/achievements/{sourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This issue mirrors the schema violations in the GET response. The request body for modifying a resource must be consistent with the resource's defined data model. The current implementation would fail validation against a client or server that correctly implements the upstream specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:46:31.325Z",
    "updatedAt": "2025-07-03T05:37:27.636Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-625/incorrect-data-model-in-put-achievementssourcedid-request-body-field"
  },
  {
    "id": "d46f1966-c5f1-4dfb-8654-0915d4ef37df",
    "identifier": "BUG-624",
    "title": "Incorrect Data Model in GET /achievements/{sourcedId} Response - Field Type Mismatch for `criteria` and `image`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** In the `GET` response, the `achievement` object defines the `criteria` and `image` fields as simple `string` types.\n\n**Summary:** \nIn the `GET` response, the `achievement` object defines the `criteria` and `image` fields as simple `string` types.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/ob/v3p0/achievements/{sourcedId}` endpoint.\n2. Observe the JSON response body.\n3. The `criteria` field is a simple `string`.\n4. The `image` field is a simple `string`.\n5. Both of these are incorrect according to the upstream specification.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/some-id\" -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification (Section B.1.1 Achievement), these fields should be complex objects:\n\n* `criteria` MUST be of type `Criteria` (an object with an optional `id` and an optional `narrative`, defined in B.1.6).\n* `image` MUST be of type `Image` (an object with `id`, `type`, and an optional `caption`, defined in B.1.13).\n\nThe local implementation oversimplifies these structured objects into primitive strings, losing important metadata and breaking schema compliance.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/{sourcedId}\nLocal Spec: ims/ob/v3p0/achievements/{sourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a critical schema violation. By reducing these fields to simple strings, the implementation loses the ability to convey structured information like a narrative for criteria or a caption for an image. Any compliant client parsing this response would encounter a type error.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:45:20.673Z",
    "updatedAt": "2025-07-03T05:37:26.784Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-624/incorrect-data-model-in-get-achievementssourcedid-response-field-type"
  },
  {
    "id": "d8b4cf43-342e-4109-a495-7a67d8b159de",
    "identifier": "BUG-623",
    "title": "Incorrect Data Model in GET /achievements/{sourcedId} Response - Extra Non-Specification Fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The `achievement` object returned by the endpoint includes three fields that are not part of the official specification: `status`, `dateLastModified`, and `metadata`.\n\n**Summary:** \nThe `achievement` object returned by the endpoint includes three fields that are not part of the official specification: `status`, `dateLastModified`, and `metadata`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/ob/v3p0/achievements/{sourcedId}` endpoint.\n2. Observe the JSON response body.\n3. The returned `achievement` object contains `status`, `dateLastModified`, and `metadata` fields, which are not defined in the upstream `Achievement` data model.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/some-id\" -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `achievement` object should only contain fields defined in the upstream specification's `Achievement` data model (Section B.1.1). This model does not include `status`, `dateLastModified`, or `metadata`. Status-related information for a credential should be handled by the `credentialStatus` property of a Verifiable Credential, not as a field on the Achievement definition itself.\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/{sourcedId}\nLocal Spec: ims/ob/v3p0/achievements/{sourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** The presence of these extra fields indicates a misunderstanding of the OpenBadge data model. The `Achievement` object is a definition, not a record with its own lifecycle status. Adding a `status` field is particularly dangerous, as it conflates the definition of an achievement with an instance of its awarding. This could lead to incorrect lifecycle management, as seen in the DELETE operation's implementation. This is a critical deviation from the specified data model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:44:09.517Z",
    "updatedAt": "2025-07-03T05:36:20.895Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-623/incorrect-data-model-in-get-achievementssourcedid-response-extra-non"
  },
  {
    "id": "b08283d6-b9ef-43b2-a103-368039ce3e6b",
    "identifier": "BUG-622",
    "title": "Incorrect Data Model in GET /achievements/{sourcedId} Response - Missing Required Fields 'id' and 'type'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The `achievement` object returned by the `GET /ims/ob/v3p0/achievements/{sourcedId}` endpoint is missing the `id` and `type` fields, which are mandatory according to the upstream specification's `Achievement` data model (Section B.1.1). Instead of `id`, the implementation uses a `sourcedId` field.\n\n**Summary:** \nThe `achievement` object returned by the `GET /ims/ob/v3p0/achievements/{sourcedId}` endpoint is missing the `id` and `type` fields, which are mandatory according to the upstream specification's `Achievement` data model (Section B.1.1). Instead of `id`, the implementation uses a `sourcedId` field.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/ob/v3p0/achievements/{sourcedId}` endpoint.\n2. Observe the JSON response body.\n3. Note that the `achievement` object in the response is missing the required `id` and `type` fields as defined by the upstream specification. It incorrectly uses `sourcedId` as the primary identifier.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/ob/v3p0/achievements/some-id\" -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification (Section B.1.1 Achievement), the returned `achievement` object MUST contain an `id` field (URI) and a `type` field (IRI array). The `type` field MUST include 'Achievement'.\n\nThe upstream specification states:\n\n* `id`: Unique URI for the Achievement. Multiplicity: \\[1\\] (Required)\n* `type`: The type MUST include the IRI 'Achievement'. Multiplicity: \\[1..\\*\\] (Required)\n\n**Environment:** API Route: /ims/ob/v3p0/achievements/{sourcedId}\nLocal Spec: ims/ob/v3p0/achievements/{sourcedId}.filtered.yaml\nUpstream Spec: openbadge.html\n**Additional Notes:** This is a critical data model compliance issue. The `id` field is the canonical, unique URI for the Achievement definition itself. Using `sourcedId` in its place breaks conformity with the spec and could cause issues with any client expecting the standard data model. The missing `type` field breaks JSON-LD compatibility and type checking. These are not minor naming differences; they represent a fundamental schema violation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T15:42:31.720Z",
    "updatedAt": "2025-07-03T05:36:22.608Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-622/incorrect-data-model-in-get-achievementssourcedid-response-missing"
  },
  {
    "id": "291e9668-ca6d-44af-8dcc-61ee2e212251",
    "identifier": "BUG-621",
    "title": "Gradebook PUT endpoints should create entities.",
    "description": "This is an error on our part.\n\nThe specs for Gradebook define that the PUT endpoints for assessmentLineItems, assessmentResults, categories, lineItems and scoreScales should ***create** entities as well and not only update them.*\n\nAction items:\n\n* Allow the above PUT endpoints to create entities \n* Keep existing POST endpoints\n\nReference the Oneroster Gradebook docs or openAPI specs for more details on which specific endpoints, but they should be the only 5 endpoints specified in the original specs.\n\n[https://www.imsglobal.org/sites/default/files/spec/oneroster/v1p2/gradebook-restbinding/OneRosterv1p2GradebookService_RESTBindv1p0.html](https://www.imsglobal.org/sites/default/files/spec/oneroster/v1p2/gradebook-restbinding/OneRosterv1p2GradebookService_RESTBindv1p0.html)\n\nPS: Make sure to update the endpoint to return a LIST of objects instead of a single object, as per [BUG-243](https://linear.app/ae-studio/issue/BUG-243/critical-201-created-response-body-returns-a-single-object-instead-of)",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 2,
    "createdAt": "2025-07-02T14:38:18.681Z",
    "updatedAt": "2025-07-03T19:20:51.401Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-621/gradebook-put-endpoints-should-create-entities"
  },
  {
    "id": "8d5af236-9e29-41c3-bd0c-9c2f809e676a",
    "identifier": "BUG-620",
    "title": "Verify PUT endpoints are properly returning 201 as per specs.",
    "description": "PUT operations should return 201\nVerify that this is the case, fix if necessary.",
    "state": {
      "name": "In Progress",
      "type": "started"
    },
    "priority": 4,
    "createdAt": "2025-07-02T14:16:08.505Z",
    "updatedAt": "2025-07-03T19:29:18.329Z",
    "assignee": {
      "name": "St\u00e9fano Damiano",
      "email": "stefano@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-620/verify-put-endpoints-are-properly-returning-201-as-per-specs"
  },
  {
    "id": "d69c3e80-0456-4d49-8661-379cfe2a3231",
    "identifier": "BUG-619",
    "title": "[NOT A BUG] \"Extension\" Endpoints",
    "description": "We have created ***several*** custom endpoints that extend the OneRoster specifications.\n\nThese are not considered bugs.",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T14:00:00.473Z",
    "updatedAt": "2025-07-03T18:45:54.917Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": []
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-619/not-a-bug-extension-endpoints"
  },
  {
    "id": "872b7d42-c471-4a4a-8e4d-2ad25f26e82c",
    "identifier": "BUG-618",
    "title": "[NOT A BUG] DELETE operation idempotency",
    "description": "Further calls to DELETE a soft-deleted entity ***should*** return 204 - No Content.\n\nThis is correct and not a bug.",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-02T13:34:55.047Z",
    "updatedAt": "2025-07-03T11:50:44.521Z",
    "assignee": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-618/not-a-bug-delete-operation-idempotency"
  },
  {
    "id": "97e00321-1d29-4a17-959f-34d3e2d9b59a",
    "identifier": "BUG-616",
    "title": "Review pagination response.",
    "description": "[https://www.imsglobal.org/sites/default/files/spec/oneroster/v1p2/rostering-restbinding/OneRosterv1p2RosteringService_RESTBindv1p0.html](https://www.imsglobal.org/sites/default/files/spec/oneroster/v1p2/rostering-restbinding/OneRosterv1p2RosteringService_RESTBindv1p0.html)\n\nWe must change our pagination logic to:\n\n* Return total count in HTTP header \"x-total-count\"\n\nWe will *not* support next, previous, first, last links at this time.",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 4,
    "createdAt": "2025-07-02T13:22:38.268Z",
    "updatedAt": "2025-07-03T19:28:40.401Z",
    "assignee": {
      "name": "St\u00e9fano Damiano",
      "email": "stefano@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-616/review-pagination-response"
  },
  {
    "id": "21fe173c-e3c6-438e-9913-05c4d5dff00f",
    "identifier": "BUG-617",
    "title": "CRITICAL: Incorrect Response Body Structure for GET /classes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returns a JSON object with a custom pagination wrapper containing the fields: `classes`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Summary:** \nThe API returns a JSON object with a custom pagination wrapper containing the fields: `classes`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the `/classes` endpoint.\n2. Observe the structure of the JSON response body.\n\nFunctional curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?limit=1' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe response body should be a JSON object with a single root property, `classes`, which contains the array of class objects. Pagination information, specifically the total count of records, should be returned in the `X-Total-Count` HTTP header.\n\nThe upstream JSON specification for the `GET /classes` `200` response defines the schema as `\"$ref\": \"#/definitions/ClassSetDType\"`. The `ClassSetDType` definition has only one property: `classes`. The spec also defines a `headers` object for the `200` response, containing `X-Total-Count`. The local implementation's response body is entirely non-compliant.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Returning a non-standard response body breaks client compatibility and violates a fundamental contract of the API specification. Clients built against the official OneRoster spec will fail to parse this response. This is a critical data contract violation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-07-02T13:22:38.268Z",
    "updatedAt": "2025-07-03T05:33:49.345Z",
    "assignee": null,
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-617/critical-incorrect-response-body-structure-for-get-classes"
  },
  {
    "id": "713899b4-d859-49dd-b40e-b94cf53c041e",
    "identifier": "BUG-615",
    "title": "Check DELETE endpoints for HTTP spec compliance",
    "description": "OneRoster has no specifications around DELETE endpoints for most endpoints.\nStill, we should verify that we are complying with HTTP specs by returning 204 with no body.\n\nThis should be verified both in the code and in our openAPI specs.",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 0,
    "createdAt": "2025-07-02T13:13:35.532Z",
    "updatedAt": "2025-07-03T05:33:24.528Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": {
      "name": "Guilherme Devincenzi",
      "email": "guilherme.devincenzi@ae.studio"
    },
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-615/check-delete-endpoints-for-http-spec-compliance"
  },
  {
    "id": "97d2cd27-2eb8-4a67-9991-23bae8988b58",
    "identifier": "BUG-614",
    "title": "OpenAPI spec for QTI POST /assessment-items is incorrect",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API rejects valid requests that follow the documented \"AssessmentItem\" schema, returning a 500 error. A successful creation requires an undocumented payload structure containing a top-level \"interaction\" object. The OpenAPI specification for the request body is incorrect and contradicts the examples (which are correct).\n\n**Summary:** \nThe API rejects valid requests that follow the documented \"AssessmentItem\" schema, returning a 500 error. A successful creation requires an undocumented payload structure containing a top-level \"interaction\" object. The OpenAPI specification for the request body is incorrect and contradicts the examples (which are correct).\n\n**Steps to Reproduce:**\n\n1. Send a POST request to /api/assessment-items using a body that follows the documented \"AssessmentItem\" schema (i.e., WITHOUT the 'interaction' field).\n   Result: The API returns a 500 Internal Server Error.\n   Generated bash\n\n# FAILS WITH 500\n\ncurl -X POST \"[https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\" -H \"Authorization: Bearer <TOKEN>\" -H \"Content-Type: application/json\" -d '{\n  \"identifier\": \"test-fail\", \"title\": \"Test\", \"type\": \"choice\", \"responseDeclarations\": \\[\\]\n}'\n\nSend another POST request, but this time include the undocumented interaction object in the body.\nResult: The API returns a 201 Created status, confirming this is the expected (but undocumented) structure.\nGenerated bash\n\n# SUCCEEDS WITH 201\n\ncurl -X POST \"[https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\" -H \"Authorization: Bearer <TOKEN>\" -H \"Content-Type: application/json\" -d '{\n  \"identifier\": \"test-pass\", \"title\": \"Test\", \"type\": \"choice\", \"interaction\": {\"type\":\"choice\"}\n}'\n\n**Expected:** \nThe API server must accept a request body that conforms to its documented \"AssessmentItem\" schema in the OpenAPI specification. The implementation and documentation must be aligned.\n\n**Environment:** API: QTI API Endpoint: POST [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) Environment: Staging\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T04:11:04.637Z",
    "updatedAt": "2025-07-03T05:44:40.162Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-614/openapi-spec-for-qti-post-assessment-items-is-incorrect"
  },
  {
    "id": "8c39da7f-267f-482a-a8ba-8aaf3664eb6e",
    "identifier": "BUG-613",
    "title": "Minor Formatting Error in `AssessmentItem.isTimeDependent` Description",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The description for `AssessmentItem.isTimeDependent` is `\"\\tA boolean value indicating whether or not interacting with the item is time dependent.\"`. It contains a leading whitespace character.\n\n**Summary:** \nThe description for `AssessmentItem.isTimeDependent` is `\"\\tA boolean value indicating whether or not interacting with the item is time dependent.\"`. It contains a leading whitespace character.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `AssessmentItem` schema in the local spec.\n2. Find the `isTimeDependent` property.\n3. Observe its `description` string.\n4. Note the presence of a leading tab character (`\\t`).\n\n**Expected:** \nAPI documentation should be clean and well-formatted. Extraneous whitespace, especially non-standard characters like tabs, should be removed to ensure consistent rendering in documentation UIs. The description should be: `\"A boolean value indicating whether or not interacting with the item is time dependent.\"`.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a minor, low-impact bug related to documentation quality and hygiene. While it does not affect API functionality, it reflects a lack of attention to detail and can lead to inconsistent documentation rendering.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:31:54.725Z",
    "updatedAt": "2025-07-03T05:32:59.420Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-613/minor-formatting-error-in-assessmentitemistimedependent-description"
  },
  {
    "id": "b28c3553-b913-45c5-8d9e-14946ce350a2",
    "identifier": "BUG-612",
    "title": "Invalid Schema: `SystemIdentifier` is missing its 'type' property definition",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local `SystemIdentifier` schema lists `type` in its `required` array, but fails to define `type` within its `properties` object.\n\n**Summary:** \nThe local `SystemIdentifier` schema lists `type` in its `required` array, but fails to define `type` within its `properties` object.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `SystemIdentifier` schema in the `components` section of the local spec.\n2. Look at the `properties` block. Note that it does not contain an entry for `type`.\n3. Look at the `required` block for the same schema. Note that `type` is listed as a required property.\n4. This is a contradiction and makes the schema invalid.\n5. Compare with the upstream spec (C.2), which clearly defines `type` as a required property.\n\n**Expected:** \nIf a property is required, it MUST be defined in the `properties` block. According to the upstream specification (Section C.2), the `SystemIdentifier` schema MUST have a `type` property with a constant string value of `SystemIdentifier`. The property definition should be added to the local schema.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is an invalid OpenAPI schema definition. Any tool attempting to parse or validate against this specification will likely throw an error. The schema must be corrected by adding the `type` property to the `properties` block, like so:\n\n```yaml\nproperties:\n  type:\n    type: string\n    const: SystemIdentifier\n  ...\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:30:49.600Z",
    "updatedAt": "2025-07-03T05:32:52.871Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-612/invalid-schema-systemidentifier-is-missing-its-type-property"
  },
  {
    "id": "eec23755-afb5-4487-ac44-54fe91557f7e",
    "identifier": "BUG-611",
    "title": "Missing standard Caliper entities: LtiLink, Query, and RatingScaleQuestion",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local OpenAPI specification is missing the schemas for several standard Caliper entities, specifically `LtiLink`, `Query`, and `RatingScaleQuestion`.\n\n**Summary:** \nThe local OpenAPI specification is missing the schemas for several standard Caliper entities, specifically `LtiLink`, `Query`, and `RatingScaleQuestion`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Scan the `components.schemas` section of the local spec.\n2. Try to find definitions for `LtiLink`, `Query`, and `RatingScaleQuestion`.\n3. Note that they are absent.\n4. Review Appendix B of the upstream specification.\n5. Note the presence and definitions for `B.30 LtiLink`, `B.47 Query`, and `B.52 RatingScaleQuestion`.\n\n**Expected:** \nA compliant implementation should be aware of and able to process all standard entities defined in the specification. By omitting these schemas, the local implementation is incomplete and cannot correctly validate or model events that use these entities (e.g., `ToolLaunchEvent` using `LtiLink`, `SearchEvent` using `Query`, or `FeedbackEvent` using `RatingScaleQuestion`). These schemas must be added to the components section.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This omission makes the implementation non-conformant with the Tool Launch, Search, and Feedback profiles, respectively. Any client sending events involving these entities would have their data rejected or misinterpreted.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:29:17.261Z",
    "updatedAt": "2025-07-03T05:32:44.305Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-611/missing-standard-caliper-entities-ltilink-query-and"
  },
  {
    "id": "f06bdbcf-6a8c-4bfe-9927-a89b4d15e520",
    "identifier": "BUG-610",
    "title": "Typo in `AllDigitalResources` discriminator mapping for `MultiSelectQuestion`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The discriminator mapping in `AllDigitalResources` uses the key `MultiselectQuestion` (lowercase 's') to map to the `MultiSelectQuestion` schema.\n\n**Summary:** \nThe discriminator mapping in `AllDigitalResources` uses the key `MultiselectQuestion` (lowercase 's') to map to the `MultiSelectQuestion` schema.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `AllDigitalResources` schema in the `components` section of the local spec.\n2. Look at the `discriminator.mapping` list.\n3. Note the key `MultiselectQuestion`.\n4. Now examine the `MultiSelectQuestion` schema.\n5. Note that its `type` property has a `const` value of `MultiSelectQuestion` (with a capital 'S').\n\n**Expected:** \nThe key in a discriminator map must exactly match the value of the `propertyName` (in this case, `type`) in the corresponding schema. The `MultiSelectQuestion` schema defines its type as `\"MultiSelectQuestion\"`. Therefore, the discriminator mapping key must also be `\"MultiSelectQuestion\"` to ensure correct polymorphism and validation.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This typo will cause validation tools and code generators to fail when trying to resolve the `oneOf` for `AllDigitalResources`. Any incoming event with a `MultiSelectQuestion` object would likely fail validation because the discriminator cannot find the correct schema to apply. The key in the mapping should be changed to `MultiSelectQuestion`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:28:16.282Z",
    "updatedAt": "2025-07-03T05:32:37.216Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-610/typo-in-alldigitalresources-discriminator-mapping-for"
  },
  {
    "id": "387bed1d-7cc3-45a4-8366-8ea5d3a18619",
    "identifier": "BUG-609",
    "title": "`Event.profile` property is incorrectly marked as required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local `Event` schema requires the `profile` property to be present in all `Event` objects.\n\n**Summary:** \nThe local `Event` schema requires the `profile` property to be present in all `Event` objects.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `Event` schema in the `components` section of the local spec.\n2. Observe that `profile` is listed in the `required` array.\n3. Review Section 2.1 of the upstream spec, which describes the properties of an `Event`.\n4. Note that `profile` is listed as `Optional`.\n\n**Expected:** \nAccording to the upstream specification (Section 2.1, \"Event Properties\"), the `profile` property has a disposition of `Optional`. The spec explicitly states: \"Although each Event's profile property is considered optional (in order to ensure backwards compatibility) Sensors SHOULD specify for each Event created...\". The local implementation has elevated a `SHOULD` to a `MUST`, which is a deviation from the specification. An event without a profile is still a valid Caliper event, but it would be rejected by this local implementation.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** While enforcing the presence of `profile` can be considered a good practice, it is a stricter requirement than the official specification mandates. This breaks backwards compatibility as stated in the spec and makes the local implementation non-conformant. The `profile` property should be removed from the `required` array of the `Event` schema.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:26:59.865Z",
    "updatedAt": "2025-07-03T05:32:30.746Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-609/eventprofile-property-is-incorrectly-marked-as-required"
  },
  {
    "id": "59cf0075-9f19-492f-ae87-4774192eddc8",
    "identifier": "BUG-608",
    "title": "`AssessmentEvent` action enum is missing the 'Reset' action",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The enum for the `action` property on the `AssessmentEvent` schema is `[Started, Paused, Resumed, Restarted, Submitted]`.\n\n**Summary:** \nThe enum for the `action` property on the `AssessmentEvent` schema is `[Started, Paused, Resumed, Restarted, Submitted]`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `AssessmentEvent` schema in the `components` section of the local spec.\n2. Find the `action` property and observe its `enum` values.\n3. Compare this list to the list of supported actions for `AssessmentEvent` in the upstream specification (Section A.2).\n4. Note that 'Reset' is missing from the local spec's enum.\n\n**Expected:** \nThe upstream specification in Section A.2 (\"AssessmentEvent Properties\") states: \"The value range is limited to the Started, Paused, Resumed, Restarted, Reset, and Submitted actions only.\" The local implementation must include `Reset` in its list of supported actions for this event to be fully compliant.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** The omission of the `Reset` action means the local implementation cannot correctly model or validate a standard Caliper event where a user resets an assessment. This limits the expressiveness of the API and makes it non-compliant with the Assessment Profile.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:25:38.185Z",
    "updatedAt": "2025-07-03T05:32:19.366Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-608/assessmentevent-action-enum-is-missing-the-reset-action"
  },
  {
    "id": "de051d33-93f3-408f-b793-799ee54e0ae2",
    "identifier": "BUG-607",
    "title": "Security scopes reference outdated Caliper v1.1 specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The OAuth2 security scopes are defined using the namespace for Caliper version 1.1 (v1p1). For example: `https://purl.imsglobal.org/spec/caliper/v1p1/scope/admin`.\n\n**Summary:** \nThe OAuth2 security scopes are defined using the namespace for Caliper version 1.1 (v1p1). For example: `https://purl.imsglobal.org/spec/caliper/v1p1/scope/admin`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `securitySchemes` component in the local spec.\n2. Look at the `OAuth2` clientCredentials flow.\n3. Observe that the defined `scopes` all start with `https://purl.imsglobal.org/spec/caliper/v1p1/...`.\n4. Note that the API documentation and `dataVersion` field specify implementation of Caliper v1.2.\n\n**Expected:** \nSince the API implements Caliper v1.2, all associated identifiers, including security scopes, should consistently reference version 1.2 (`v1p2`). While the upstream spec does not define a normative set of scopes, using URIs that point to an older version of the standard is incorrect, misleading, and can cause confusion for clients trying to request appropriate permissions. The scopes should align with the implemented spec version, e.g., `https://purl.imsglobal.org/spec/caliper/v1p2/scope/admin`.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This version mismatch in the security definition indicates a copy-paste error or a partial, incomplete upgrade from a v1.1 implementation. It creates ambiguity for API clients and integrators. Correctly versioned resource identifiers are crucial for clarity and long-term maintenance of the API.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:24:33.588Z",
    "updatedAt": "2025-07-03T05:32:13.257Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-607/security-scopes-reference-outdated-caliper-v11-specification"
  },
  {
    "id": "43777fec-8d26-421d-857e-28267ce3a192",
    "identifier": "BUG-606",
    "title": "Incorrect Data Type for `LtiSession.duration` Property",
    "description": "**Reporter:** Incorrect Data Type for `LtiSession.duration` Property (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local spec defines `LtiSession.duration` as an integer, representing seconds.\n\n**Summary:** \nThe local spec defines `LtiSession.duration` as an integer, representing seconds.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `LtiSession` schema in the `components` section of the local spec.\n2. Note that the `duration` property is defined as `type: integer`.\n3. Examine the `Session` schema (B.60) in the upstream specification, from which `LtiSession` inherits.\n4. Note that the `duration` property is specified as type `Duration`, which must conform to the ISO 8601 duration format (a string).\n\nCurl command (a valid payload according to upstream that would be rejected by local validation):\n\n```bash\n# This LtiSession payload contains a valid ISO 8601 duration string, which would be rejected\n# by the local spec's validation expecting an integer.\ncurl -X POST \"https://caliper.alpha-1edtech.com/caliper/events\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"sensor\": \"...\",\n  \"sendTime\": \"...\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n      \"id\": \"https://example.edu/lti-sessions/b533eb02823f31024765305dd3af7b5e\",\n      \"type\": \"LtiSession\",\n      \"duration\": \"PT3600S\"\n    }\n  ]\n}'\n```\n\n**Expected:** \nThe upstream specification for `Session` (B.60), the supertype of `LtiSession`, defines `duration` as type `Duration`. The description states: \"If a duration is specified the value MUST conform to the ISO 8601 duration format.\" This is a string format, such as `PT3600S` or `PT1H`, not an integer.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a critical data type mismatch. Any conformant Caliper client will send the duration as an ISO 8601 string, which would cause validation errors or data corruption in this local implementation. This directly violates the data format specified in the standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:23:03.885Z",
    "updatedAt": "2025-07-03T05:32:06.801Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-606/incorrect-data-type-for-ltisessionduration-property"
  },
  {
    "id": "446fc3ae-b002-4958-b7d6-c7f39e0d1939",
    "identifier": "BUG-605",
    "title": "Incorrect Schema: `Person` entity forces non-standard required `extensions.email`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local `Person` schema makes the `extensions` property required and mandates a nested `email` property within it. It also forbids other properties with `additionalProperties: false`.\n\n**Summary:** \nThe local `Person` schema makes the `extensions` property required and mandates a nested `email` property within it. It also forbids other properties with `additionalProperties: false`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `Person` schema in the `components` section of the local spec.\n2. Note that `extensions` is a required property, and it contains a nested required property `email`.\n3. Compare this to the upstream specification for `Person` (B.46) and its supertype `Agent` (B.1).\n4. Observe that the upstream `Agent` has an optional `extensions` property, and user identifiers like email should be handled via the `otherIdentifiers` array using a `SystemIdentifier` of type `EmailAddress`.\n\nCurl command (a valid payload according to upstream that would be rejected by the local spec):\n\n```bash\n# This payload is valid under the upstream spec but would fail validation against the local spec\n# because `extensions.email` is missing.\ncurl -X POST \"https://caliper.alpha-1edtech.com/caliper/events\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"sensor\": \"...\",\n  \"sendTime\": \"...\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n      \"id\": \"https://example.edu/users/554433\",\n      \"type\": \"Person\",\n      \"otherIdentifiers\": [\n        {\n          \"type\": \"SystemIdentifier\",\n          \"identifierType\": \"EmailAddress\",\n          \"identifier\": \"jane.doe@example.com\"\n        }\n      ]\n    }\n  ]\n}'\n```\n\n**Expected:** \nAccording to the upstream specification (B.46 and I.2), an email address should be provided as a `SystemIdentifier` within the optional `otherIdentifiers` array. The `extensions` property on an `Agent` (and thus `Person`) is optional and is meant for custom, non-standard attributes. The local spec's implementation is a major deviation that breaks compatibility. A valid upstream `Person` object would be considered invalid by this local implementation.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This bug forces clients to use a non-standard, proprietary structure for representing a person's email address. It violates the standard mechanism (`otherIdentifiers`) and incorrectly makes an optional field (`extensions`) required. This will cause interoperability failures with any system conforming to the official Caliper specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:22:01.464Z",
    "updatedAt": "2025-07-03T05:31:54.442Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-605/incorrect-schema-person-entity-forces-non-standard-required"
  },
  {
    "id": "3624a1b8-46bb-4b9b-95d5-e7730aad81c0",
    "identifier": "BUG-604",
    "title": "Incorrect Response Schema for GET /caliper/events",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The `GET /caliper/events` endpoint returns a custom JSON object: `{ \"status\": \"success\", \"message\": \"...\", \"errors\": {} }`. The actual event data is not defined in the successful response schema.\n\n**Summary:** \nThe `GET /caliper/events` endpoint returns a custom JSON object: `{ \"status\": \"success\", \"message\": \"...\", \"errors\": {} }`. The actual event data is not defined in the successful response schema.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Execute a GET request to the `/caliper/events` endpoint.\n2. Observe the response body structure defined in the local spec.\n3. Note that it is a custom wrapper object with `status`, `message`, and `errors` fields.\n4. Compare this to the Caliper specification's data model, which is based on `Event` and `Entity` objects.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://caliper.alpha-1edtech.com/caliper/events\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nWhile the `GET` endpoint itself is non-standard, if it were to exist, it should return data conforming to the Caliper information model. A conventional RESTful implementation would return a collection of Caliper `Event` objects, likely within a pagination structure. The response should not be wrapped in a proprietary `{status, message}` envelope, as this is not defined anywhere in the Caliper specification and hinders interoperability.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** The use of a custom response wrapper completely breaks compatibility with any standard Caliper client. The purpose of the specification is to define a common information model for data exchange. By using a custom wrapper, the implementation disregards this core principle for its query API. The response should consist of standard Caliper `Event` objects as defined in Section 2.1 and Appendix A of the upstream spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:20:27.949Z",
    "updatedAt": "2025-07-03T05:31:46.007Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-604/incorrect-response-schema-for-get-caliperevents"
  },
  {
    "id": "ef4ec626-16ea-4bdd-b445-000d4a584b32",
    "identifier": "BUG-603",
    "title": "Non-Standard Endpoint: GET /caliper/events is not defined in the Caliper specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local implementation provides a `GET /caliper/events` endpoint to query and list stored Caliper events.\n\n**Summary:** \nThe local implementation provides a `GET /caliper/events` endpoint to query and list stored Caliper events.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the upstream Caliper v1.2 specification, sections 5 and 6, which describe the Sensor API and Endpoint behavior.\n2. Observe that the specification only defines a POST method for sending event data and a GET method for retrieving endpoint configuration.\n3. Compare this to the local spec, which defines a GET method for the `/caliper/events` path to list/query events.\n\nCurl command (demonstrating the non-standard endpoint):\n\n```bash\ncurl -X GET \"https://caliper.alpha-1edtech.com/caliper/events\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream Caliper v1.2 specification does not define a standard method or endpoint for querying stored events. The only defined HTTP methods for an event endpoint are POST for submitting events (Section 5.4) and GET for retrieving configuration (Section 6.2). A `GET` request to an event endpoint should return configuration details, not a list of events.\n\n**Environment:** API Route: /caliper/events\nLocal Spec: caliper/events.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a critical deviation from the specification. The entire `GET /caliper/events` operation is a custom, non-standard extension. While a query capability is useful, it is not part of the Caliper standard, which breaks the promise of interoperability. Any client built against the official Caliper spec would not know how to interact with this endpoint. The endpoint should either be removed or clearly marked as a non-standard extension API, separate from the core Caliper compliance.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:19:01.657Z",
    "updatedAt": "2025-07-03T05:31:45.387Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-603/non-standard-endpoint-get-caliperevents-is-not-defined-in-the-caliper"
  },
  {
    "id": "88c62816-ce28-4325-99a5-c549751dbc27",
    "identifier": "BUG-602",
    "title": "responseProcessing.templateType Lacks Enum Validation, Accepts Invalid Values",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The POST /api/assessment-items endpoint fails to validate the responseProcessing.templateType field against its OpenAPI enum. It incorrectly accepts any invalid string, numeric, or boolean value and returns a 201 Created status. This allows the creation of corrupt assessment items with invalid template types, which can cause downstream processing errors.\n\n**Summary:** \nThe POST /api/assessment-items endpoint fails to validate the responseProcessing.templateType field against its OpenAPI enum. It incorrectly accepts any invalid string, numeric, or boolean value and returns a 201 Created status. This allows the creation of corrupt assessment items with invalid template types, which can cause downstream processing errors.\n\n**Steps to Reproduce:**\n\n1. Obtain a valid OAuth token.\n2. Send a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with an invalid value for responseProcessing.templateType.\n   Example Request:\n   curl -X POST [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\n   -H \"Authorization: Bearer YOUR_TOKEN\"\n   -H \"Content-Type: application/json\"\n   -d '{\n   \"identifier\": \"test-templatetype-bug\",\n   \"type\": \"choice\",\n   \"interaction\": { \"type\": \"choice\" },\n   \"responseProcessing\": {\n   \"templateType\": \"completely-invalid-template-type\"\n   }\n   }'\n\n**Expected:** \nThe API should validate the templateType field against the enum defined in the OpenAPI specification ('match_correct', 'map_response'). If an invalid value is provided, the API should reject the request and return a 400 Bad Request with a clear validation error.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nEnvironment: Staging\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:18:31.063Z",
    "updatedAt": "2025-07-03T05:31:26.057Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-602/responseprocessingtemplatetype-lacks-enum-validation-accepts-invalid"
  },
  {
    "id": "8bf93bd7-bc2f-4d36-b575-b1fde1a5f38d",
    "identifier": "BUG-601",
    "title": "LOW: Regex for Event.id Lacks Strict UUID Format Validation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The regular expression `^urn:uuid:(.*)$` used to validate the `Event.id` field is too permissive. It only checks that the string starts with `urn:uuid:` but does not enforce the actual structure of a UUID (e.g., `8-4-4-4-12` hexadecimal characters).\n\n**Summary:** \nThe regular expression `^urn:uuid:(.*)$` used to validate the `Event.id` field is too permissive. It only checks that the string starts with `urn:uuid:` but does not enforce the actual structure of a UUID (e.g., `8-4-4-4-12` hexadecimal characters).\n\n**Steps to Reproduce:**\n\n1. Review the `Event` schema in the local spec.\n2. Note the `pattern` for the `id` field is `^urn:uuid:(.*)$`.\n3. Attempt to validate an event with an ID that matches the prefix but is not a valid UUID.\n\nExample invalid ID that would pass validation:\n`\"id\": \"urn:uuid:this-is-not-a-uuid\"`\n\n**Expected:** \nThe pattern should strictly validate the UUID format as defined in RFC4122, which is referenced by the upstream specification. A correct regex would be more specific.\n\nUpstream spec Section 2.1 \"Event\" states for the `id` property: \"The emitting application MUST provision the Event with a UUID... The UUID MUST be expressed as a URN using the form \"urn:uuid:<UUID>\" per \\[RFC4122\\]\".\n\nA stricter pattern should be used, such as: `^urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$`\n\n**Environment:** API Route: /caliper/event\nLocal Spec: caliper/event.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a low-severity validation weakness. While it allows malformed data to be accepted, the impact is likely minimal if downstream systems are robust. However, for data integrity and strict conformance, the validation should be as precise as possible. Allowing non-standard IDs could lead to issues with data lookup or uniqueness constraints in the persistence layer.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:14:33.543Z",
    "updatedAt": "2025-07-03T05:31:18.519Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-601/low-regex-for-eventid-lacks-strict-uuid-format-validation"
  },
  {
    "id": "5d27273f-3962-4f98-b34b-ab89e01495ac",
    "identifier": "BUG-600",
    "title": "MEDIUM: `400 Bad Request` Error Response Uses Custom Format Instead of Recommended RFC 7807",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local specification defines a custom error object for a `400 Bad Request` response, containing `{ \"status\": \"error\", \"message\": \"...\", \"errors\": {} }`.\n\n**Summary:** \nThe local specification defines a custom error object for a `400 Bad Request` response, containing `{ \"status\": \"error\", \"message\": \"...\", \"errors\": {} }`.\n\n**Steps to Reproduce:**\n\n1. Send a POST request with a malformed JSON body to the `/caliper/event` endpoint.\n2. Observe the structure of the `400 Bad Request` error response.\n\n```shell\ncurl -v -X POST 'https://caliper.alpha-1edtech.com/caliper/event' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\"sensor\": \"missing_fields\"'\n```\n\n**Expected:** \nWhile the endpoint can return custom error bodies, the upstream specification recommends a standard format for detailed problem reporting. According to Section 6.1 \"HTTP Responses\": \"The Endpoint MAY also communicate more detailed information about problem states, using the standard method for reporting problem details described in \\[RFC7807\\].\"\n\nAn RFC 7807 problem details object has a standard structure with fields like `type`, `title`, `status`, `detail`, and `instance`. Adopting this standard would make the API's error handling more predictable and interoperable with generic HTTP clients and libraries.\n\n**Environment:** API Route: /caliper/event\nLocal Spec: caliper/event.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** Using a standard error reporting format like RFC 7807 is a modern best practice for REST APIs. The Caliper specification explicitly points to it as the preferred method for communicating detailed errors. The current custom format is a deviation from this recommendation and makes the API less standard and harder to debug for developers unfamiliar with this specific implementation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:13:24.376Z",
    "updatedAt": "2025-07-03T05:31:06.273Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-600/medium-400-bad-request-error-response-uses-custom-format-instead-of"
  },
  {
    "id": "dc65a021-1287-42e5-973a-8f5a6e63fed7",
    "identifier": "BUG-599",
    "title": "MEDIUM: `200 OK` Success Response Contains a Body Contrary to Best Practice",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local specification defines that a `200 OK` response will contain a JSON body with a `status` and `message` field, for example: `{\"status\": \"success\", \"message\": \"The events were processed successfully\"}`.\n\n**Summary:** \nThe local specification defines that a `200 OK` response will contain a JSON body with a `status` and `message` field, for example: `{\"status\": \"success\", \"message\": \"The events were processed successfully\"}`.\n\n**Steps to Reproduce:**\n\n1. Send a valid POST request to the `/caliper/event` endpoint.\n2. Observe the response body for a `200 OK` success case.\n\n```shell\n# This command is expected to succeed\ncurl -v -X POST 'https://caliper.alpha-1edtech.com/caliper/event' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{...valid envelope...}'\n```\n\n**Expected:** \nThe endpoint should return a `200 OK` response with an empty body. The upstream Caliper v1.2 specification provides a clear best practice for this.\n\nAccording to Section 6.1 \"HTTP Responses\": \"By best practice, the Endpoint SHOULD send back successful responses with an empty body.\"\n\nWhile this is a \"SHOULD\" and not a \"MUST\", deviating from a documented best practice without a clear reason is an inconsistency. Following the best practice reduces response size and simplifies client-side handling.\n\n**Environment:** API Route: /caliper/event\nLocal Spec: caliper/event.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** Adherence to best practices outlined in a specification is crucial for promoting consistency and interoperability across different implementations. While a non-empty body on success is not a breaking change, it adds unnecessary overhead and complexity for clients who might be built to expect the recommended behavior. The implementation should be modified to conform to the best practice.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:12:07.475Z",
    "updatedAt": "2025-07-03T05:30:49.549Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-599/medium-200-ok-success-response-contains-a-body-contrary-to-best"
  },
  {
    "id": "36d30f6f-c154-43be-ab9f-a424b44e02c2",
    "identifier": "BUG-598",
    "title": "MEDIUM: API Specification Omits Required and Recommended HTTP Error Responses",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local API specification is incomplete as it only documents `200 OK` and `400 Bad Request` responses. It omits several other important error responses that an endpoint is expected to handle and that a client needs to be aware of.\n\n**Summary:** \nThe local API specification is incomplete as it only documents `200 OK` and `400 Bad Request` responses. It omits several other important error responses that an endpoint is expected to handle and that a client needs to be aware of.\n\n**Steps to Reproduce:**\n\n1. Review the `paths./caliper/event.post.responses` section of the local spec.\n2. Note that it only contains definitions for `200` and `400` status codes.\n3. Compare this with Section 6.1 \"HTTP Responses\" of the upstream specification.\n\n**Expected:** \nThe API specification should be comprehensive and document all relevant response codes as described in the upstream specification. Section 6.1 of the upstream spec details several specific error cases:\n\n* `401 Unauthorized`: For authentication or authorization failures.\n* `415 Unsupported Media Type`: If the `Content-Type` is not `application/json`.\n* `422 Unprocessable Entity`: If the `dataVersion` in the envelope is not supported by the endpoint.\n\nThese response codes should be added to the `responses` section of the path definition to provide a complete contract for API clients and ensure proper error handling.\n\n**Environment:** API Route: /caliper/event\nLocal Spec: caliper/event.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** Missing response definitions in an OpenAPI specification is a significant documentation bug. It forces client developers to guess how the API will behave during failures, leading to brittle integrations and poor user experience when errors occur. A complete and accurate API contract is essential for robust development.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:10:55.503Z",
    "updatedAt": "2025-07-03T05:30:37.750Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-598/medium-api-specification-omits-required-and-recommended-http-error"
  },
  {
    "id": "3cc03537-ff3b-4e91-8541-e38e7c37e2d9",
    "identifier": "BUG-597",
    "title": "MEDIUM: `Event.@context` Field Incorrectly Disallows Array Values",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local spec defines the `@context` property within the `Event` and `Entity` schemas as `type: string`. This is too restrictive and would cause validation to fail for a payload that uses an array for the context, which is a standard and necessary feature of JSON-LD for using extensions.\n\n**Summary:** \nThe local spec defines the `@context` property within the `Event` and `Entity` schemas as `type: string`. This is too restrictive and would cause validation to fail for a payload that uses an array for the context, which is a standard and necessary feature of JSON-LD for using extensions.\n\n**Steps to Reproduce:**\n\n1. Construct a valid Caliper Event object.\n2. For the `@context` field, provide an array of strings instead of a single string, which is a valid JSON-LD construct for including extension contexts.\n3. Attempt to validate this object against the local spec.\n\nExample payload snippet:\n\n```json\n{\n  \"@context\": [\n    \"https://some-extension.com/context/v1\",\n    \"http://purl.imsglobal.org/ctx/caliper/v1p2\"\n  ],\n  \"id\": \"urn:uuid:c51570e4-f8ed-4c18-bb3a-dfe51b2cc594\",\n  \"type\": \"Event\",\n  ...\n}\n```\n\n**Expected:** \nThe API must accept a payload where `@context` is an array. The upstream specification in Section 4.1 \"JSON-LD Context\" is explicit:\n\n\"The top-level @context property type MUST be defined as a string or an array.\"\n\nThe local schema should be updated to allow for both types, for example by using `anyOf` or by not specifying a `type` if the tooling supports mixed types. A correct OpenAPI 3.0+ representation would be to not specify type and allow validation to infer it, or use `oneOf` with a string and an array of strings.\n\n**Environment:** API Route: /caliper/event\nLocal Spec: caliper/event.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This bug prevents clients from using JSON-LD context extensions, which is a key feature of the underlying technology chosen by Caliper. While not a security risk, it severely limits the extensibility of the implementation and makes it non-conformant with a \"MUST\" requirement of the specification's serialization rules.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:09:27.282Z",
    "updatedAt": "2025-07-03T05:30:26.319Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-597/medium-eventcontext-field-incorrectly-disallows-array-values"
  },
  {
    "id": "19c8cf6e-aeac-4583-9bfd-f0cbdc144e1b",
    "identifier": "BUG-596",
    "title": "HIGH: `Entity.otherIdentifiers` is Untyped and `SystemIdentifier` Schema is Missing",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local spec's `Entity` schema defines the `otherIdentifiers` property with a generic `anyOf` string or object type. It completely omits the required `SystemIdentifier` schema, which defines the structure of these objects. This makes it impossible to validate the correctness of any provided identifiers beyond checking if they are objects.\n\n**Summary:** \nThe local spec's `Entity` schema defines the `otherIdentifiers` property with a generic `anyOf` string or object type. It completely omits the required `SystemIdentifier` schema, which defines the structure of these objects. This makes it impossible to validate the correctness of any provided identifiers beyond checking if they are objects.\n\n**Steps to Reproduce:**\n\n1. Review the `Entity` schema in the local specification.\n2. Observe that the `otherIdentifiers` property is defined as a generic `array` with `items` of `type: [string, object]`.\n3. Compare this to the upstream specification for `Entity` (Section 2.2) and `SystemIdentifier` (Section C.2).\n\nExample of a valid `otherIdentifiers` item that cannot be validated by the local spec:\n\n```json\n\"otherIdentifiers\": [\n  {\n    \"type\": \"SystemIdentifier\",\n    \"identifier\": \"example.edu:71ee7e42-f6d2-414a-80db-b69ac2defd4\",\n    \"identifierType\": \"LisSourcedId\"\n  }\n]\n```\n\n**Expected:** \nThe local specification should contain a schema definition for `SystemIdentifier` that matches the upstream specification in Section C.2. The `SystemIdentifier` schema should include the required properties `type`, `identifierType`, and `identifier`, and the optional `source` and `extensions` properties.\n\nSubsequently, the `Entity.otherIdentifiers` property should be defined as an array of items that reference this new `SystemIdentifier` schema, for example: `items: { \"$ref\": \"#/components/schemas/SystemIdentifier\" }`.\n\n**Environment:** API Route: /caliper/event\nLocal Spec: caliper/event.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a significant omission. The `otherIdentifiers` property is crucial for interoperability, allowing systems to correlate entities using various identification schemes (e.g., LIS, LTI, SIS). Without proper schema definition and validation, the service could accept and store malformed or incomplete identifier data, corrupting the data store and breaking downstream integrations that rely on this information.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:08:22.589Z",
    "updatedAt": "2025-07-03T05:30:18.483Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-596/high-entityotheridentifiers-is-untyped-and-systemidentifier-schema-is"
  },
  {
    "id": "9f0e7bcc-f981-4c4a-9c43-2af99c0bc513",
    "identifier": "BUG-595",
    "title": "HIGH: `Envelope` Schema Incorrectly Allows Additional Properties",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local spec for the `Envelope` schema does not include `additionalProperties: false`. This means that validators or gateways built from this spec will permit arbitrary, non-standard fields at the top level of the request envelope.\n\n**Summary:** \nThe local spec for the `Envelope` schema does not include `additionalProperties: false`. This means that validators or gateways built from this spec will permit arbitrary, non-standard fields at the top level of the request envelope.\n\n**Steps to Reproduce:**\n\n1. Construct a valid Caliper request body following the Envelope schema.\n2. Add a non-standard, additional property to the root of the Envelope object.\n3. Send this payload to the `/caliper/event` endpoint.\n\n```shell\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.com/sensor/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [],\n  \"extra_field\": \"some_value\"\n}'\n```\n\n**Expected:** \nThe API should reject the request as malformed. The upstream Caliper v1.2 specification is explicit about the structure of the Envelope.\n\nAccording to the upstream spec, Section 5.2 \"Envelope\", under the \"Properties\" table: \"No custom properties are permitted.\"\n\nThe local `Envelope` schema must be updated to include `additionalProperties: false` to enforce this constraint and align with the official specification.\n\n**Environment:** API Route: /caliper/event\nLocal Spec: caliper/event.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This deviation from the specification can lead to a number of issues. It can cause unexpected behavior if the server-side code is not prepared to handle these extra fields, potentially leading to unhandled exceptions. It also signals a lack of strictness in validation that could mask other, more severe payload-related bugs. Enforcing the exact structure of the transport envelope is crucial for interoperability and robustness.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:07:02.164Z",
    "updatedAt": "2025-07-03T05:30:07.420Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-595/high-envelope-schema-incorrectly-allows-additional-properties"
  },
  {
    "id": "09f9b1cb-cbf5-4927-b464-1fb3dba94486",
    "identifier": "BUG-594",
    "title": "CRITICAL: Event.profile is Incorrectly Marked as a Required Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local spec marks the `profile` field within the `Event` schema as required. An API gateway or validator built from this spec would reject any Caliper Event that omits the `profile` field, likely returning a 400 Bad Request error.\n\n**Summary:** \nThe local spec marks the `profile` field within the `Event` schema as required. An API gateway or validator built from this spec would reject any Caliper Event that omits the `profile` field, likely returning a 400 Bad Request error.\n\n**Steps to Reproduce:**\n\n1. Construct a valid Caliper request body following the Envelope schema.\n2. Inside the `data` array, create a valid Caliper Event object but OMIT the `profile` field.\n3. Send this payload to the `/caliper/event` endpoint.\n\n```shell\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.com/sensor/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n      \"id\": \"urn:uuid:c51570e4-f8ed-4c18-bb3a-dfe51b2cc594\",\n      \"type\": \"ToolUseEvent\",\n      \"actor\": \"https://example.edu/users/554433\",\n      \"action\": \"Used\",\n      \"object\": \"https://example.com/app/1\",\n      \"eventTime\": \"2023-10-27T09:59:00.000Z\"\n    }\n  ]\n}'\n```\n\n**Expected:** \nThe API should accept the event. The upstream Caliper v1.2 specification explicitly defines the `profile` property as `Optional`.\n\nAccording to the upstream spec, Section 2.1 \"Event\", under the \"Properties\" table:\n\n* **Property:** `profile`\n* **Disposition:** `Optional`\n\nThe text further clarifies: \"Although each Event's profile property is considered optional (in order to ensure backwards compatibility) Sensors SHOULD specify for each Event created the relevant profile string value in order to inform consumers which profile governs the construction and interpretation of the Event.\"\n\nMarking the field as required contradicts its optional nature and breaks the backwards compatibility the official spec aims to preserve.\n\n**Environment:** API Route: /caliper/event\nLocal Spec: caliper/event.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a critical bug because it causes the local implementation to be stricter than the official specification, leading to the rejection of valid data from conformant clients. The upstream specification explicitly states the property is optional to maintain backwards compatibility, a goal which this local implementation fails to meet. This will cause interoperability issues with any client that correctly implements the optionality of the `profile` field.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:05:40.687Z",
    "updatedAt": "2025-07-03T05:32:30.222Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-594/critical-eventprofile-is-incorrectly-marked-as-a-required-field"
  },
  {
    "id": "1abff834-55fc-4c25-a835-0eaf67990dc3",
    "identifier": "BUG-593",
    "title": "`400 Bad Request` Response Uses Custom Error Format Instead of Recommended RFC 7807",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local specification defines a custom error object for the `400 Bad Request` response with `status`, `message`, and `errors` properties.\n\n**Summary:** \nThe local specification defines a custom error object for the `400 Bad Request` response with `status`, `message`, and `errors` properties.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a malformed payload to the `/caliper/event/validate` endpoint (e.g., an empty `data` array).\n2. Receive a `400 Bad Request` response.\n3. Observe that the response body is a custom JSON object (`{status, message, errors}`) rather than the standard RFC 7807 Problem Details format.\n\nCurl command:\n\n```bash\ncurl -i -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.edu/sensors/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": []\n}'\n```\n\n**Expected:** \nThe upstream specification suggests using the standard method for reporting problem details for HTTP APIs.\n\nFrom the upstream spec, Section 6.1 `HTTP Responses`:\n\"The Endpoint MAY also communicate more detailed information about problem states, using the standard method for reporting problem details described in \\[RFC7807\\].\"\n\n**Environment:** API Route: /caliper/event/validate\nLocal Spec: caliper/event/validate.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a deviation from a recommended best practice. While the spec uses the word `MAY`, it points to a well-defined standard for error handling. Using a custom error format requires custom client-side logic, whereas adhering to RFC 7807 allows clients to use standardized libraries for error parsing, improving interoperability and maintainability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:03:50.818Z",
    "updatedAt": "2025-07-03T05:32:06.215Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-593/400-bad-request-response-uses-custom-error-format-instead-of"
  },
  {
    "id": "207c4972-236d-412a-b6b7-03cd8072e3d1",
    "identifier": "BUG-592",
    "title": "`200 OK` Response Contains a JSON Body Instead of Being Empty",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local specification defines a JSON body for a `200 OK` success response, containing `status`, `message`, and `errors` properties.\n\n**Summary:** \nThe local specification defines a JSON body for a `200 OK` success response, containing `status`, `message`, and `errors` properties.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a valid payload to the `/caliper/event/validate` endpoint.\n2. Receive a `200 OK` response.\n3. Observe that the response contains a JSON body with `status` and `message` keys.\n\nCurl command:\n\n```bash\ncurl -i -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.edu/sensors/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"id\": \"urn:uuid:c51570e4-f8ed-4c18-bb3a-dfe51b2cc594\",\n      \"type\": \"Event\",\n      \"profile\": \"GeneralProfile\",\n      \"actor\": \"https://example.edu/users/554433\",\n      \"action\": \"Viewed\",\n      \"object\": \"https://example.edu/some/resource\",\n      \"eventTime\": \"2023-08-15T14:12:00.000Z\"\n    }\n  ]\n}'\n\n**Expected:** \nThe response body for a successful request should be empty. The upstream specification explicitly recommends this as a best practice.\n\nFrom the upstream spec, Section 6.1 `HTTP Responses`:\n\"By best practice, the Endpoint SHOULD send back successful responses with an empty body.\"\n\n**Environment:** API Route: /caliper/event/validate\nLocal Spec: caliper/event/validate.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** While not a critical failure, this deviation ignores a `SHOULD` recommendation from the specification. Returning a body on a simple validation/ingestion endpoint adds unnecessary network overhead and processing for the client. Conforming to the spec's best practice would make the implementation more efficient and standard.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:02:51.162Z",
    "updatedAt": "2025-07-03T05:30:49.102Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-592/200-ok-response-contains-a-json-body-instead-of-being-empty"
  },
  {
    "id": "96c69faf-23a3-4565-89ec-98d4eb5d140c",
    "identifier": "BUG-591",
    "title": "`AllProfiles` Enum Contains Non-Standard `TimebackProfile` Value",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The `AllProfiles` enum schema, used to validate the `Event.profile` field, includes a value `TimebackProfile`. The `info` section of the local spec confirms this is a custom extension for the \"Timeback platform\".\n\n**Summary:** \nThe `AllProfiles` enum schema, used to validate the `Event.profile` field, includes a value `TimebackProfile`. The `info` section of the local spec confirms this is a custom extension for the \"Timeback platform\".\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the `AllProfiles` enum schema in the local specification.\n2. Compare the list of values against the official list of profiles in the upstream specification.\n3. Note the presence of `TimebackProfile` in the local spec, which is absent from the upstream spec.\n\nCurl command (demonstrates use of the non-standard profile):\n\n```bash\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.edu/sensors/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"id\": \"urn:uuid:c51570e4-f8ed-4c18-bb3a-dfe51b2cc594\",\n      \"type\": \"Event\",\n      \"actor\": \"https://example.edu/users/554433\",\n      \"action\": \"Viewed\",\n      \"object\": \"https://example.edu/some/resource\",\n      \"eventTime\": \"2023-08-15T14:12:00.000Z\",\n      \"profile\": \"TimebackProfile\"\n    }\n  ]\n}'\n```\n\n**Expected:** \nThe `AllProfiles` enum should strictly contain the 15 profiles defined in the upstream Caliper v1.2 specification. Any custom extensions, while potentially valid for the business, represent a deviation from the provided upstream specification document. A system adhering strictly to the `caliper.upstream.txt` file would not recognize or know how to interpret the `TimebackProfile`.\n\nThe official profiles are listed in Section 3 and Appendix E of the upstream spec and do not include `TimebackProfile`.\n\n**Environment:** API Route: /caliper/event/validate\nLocal Spec: caliper/event/validate.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a deviation from the provided \"source of truth\" specification. While the spec allows for extensions, they should be clearly documented as such and ideally defined in a separate extension specification file rather than being mixed into the base profile list. This creates a discrepancy between the local implementation and the official standard, which can lead to interoperability issues with third parties who only know the official spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T03:01:52.958Z",
    "updatedAt": "2025-07-03T05:29:25.694Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-591/allprofiles-enum-contains-non-standard-timebackprofile-value"
  },
  {
    "id": "2a70d950-2a80-48f5-890f-6a01e1c1db60",
    "identifier": "BUG-590",
    "title": "Identifier Properties Incorrectly Use `uri` Format Instead of `iri`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local specification uses `format: uri` for several identifier fields, including `Entity.id`, `Envelope.sensor`, and `Event.@context`.\n\n**Summary:** \nThe local specification uses `format: uri` for several identifier fields, including `Entity.id`, `Envelope.sensor`, and `Event.@context`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. This is a schema definition issue that prevents valid data from being sent.\n2. Attempt to POST a Caliper `Envelope` where the `Entity.id` contains international characters (e.g., an IRI like `https://example.org/ressource/vid\u00e9o`).\n3. The request will fail validation because `format: uri` does not permit non-ASCII characters, whereas the spec-required `format: iri` does.\n\nCurl command (conceptual, will fail client-side or server-side validation):\n\n```bash\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.edu/capteur/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n      \"id\": \"https://example.org/entit\u00e9/123\",\n      \"type\": \"Entity\"\n    }\n  ]\n}'\n```\n\n**Expected:** \nThe upstream specification consistently refers to identifiers as IRIs (Internationalized Resource Identifiers), which allow for a wider range of characters than URIs. OpenAPI 3.1 supports the `iri` format string, which should be used instead of `uri`.\n\nEvidence from upstream spec:\n\n* Section 1.2 `Terminology`: \"IRI: The Internationalized Resource Identifier (IRI) extends the Uniform Resource Identifier (URI) scheme...\"\n* Section 2.2 `Entity.id`: \"A valid IRI MUST be specified.\"\n* Section 5.2 `Envelope.sensor`: \"The identifier SHOULD be in the form of an IRI.\"\n\n**Environment:** API Route: /caliper/event/validate\nLocal Spec: caliper/event/validate.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This deviation unnecessarily restricts implementers to the US-ASCII character set for identifiers, directly contradicting the upstream specification's use of IRIs. This prevents valid, internationally-scoped identifiers from being used and is a significant functional limitation. This affects `Envelope.sensor`, `Event.@context`, and `Entity.id` in the local spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T02:59:36.111Z",
    "updatedAt": "2025-07-03T05:29:16.712Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-590/identifier-properties-incorrectly-use-uri-format-instead-of-iri"
  },
  {
    "id": "6c630eef-7c00-4dae-a6a6-94bac08e07b4",
    "identifier": "BUG-589",
    "title": "`Entity.otherIdentifiers` Items Lack Specific `SystemIdentifier` Type Constraint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local specification defines the `items` within the `Entity.otherIdentifiers` array as `type: [- string, - object]`. This allows any valid JSON object to be passed, without enforcing that it must be a `SystemIdentifier` entity.\n\n**Summary:** \nThe local specification defines the `items` within the `Entity.otherIdentifiers` array as `type: [- string, - object]`. This allows any valid JSON object to be passed, without enforcing that it must be a `SystemIdentifier` entity.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a valid Caliper `Envelope` containing a valid `Entity` object (or an `Event` containing one).\n2. In the `Entity`'s `otherIdentifiers` array, include an arbitrary JSON object that does not conform to the `SystemIdentifier` schema.\n3. POST the `Envelope` to the `/caliper/event/validate` endpoint.\n4. Observe that the request is accepted, as the local schema for `otherIdentifiers` is too permissive.\n\nCurl command:\n\n```bash\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.edu/sensors/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n      \"id\": \"https://example.edu/users/554433\",\n      \"type\": \"Person\",\n      \"otherIdentifiers\": [\n        { \"some_random_key\": \"some_random_value\" }\n      ]\n    }\n  ]\n}'\n```\n\n**Expected:** \nThe items in the `otherIdentifiers` array must be `SystemIdentifier` entities. The schema should enforce this by referencing a `SystemIdentifier` schema.\n\nFrom the upstream spec, Section 2.2, `Entity` Properties table for `otherIdentifiers`:\n\"An ordered collection of SystemIdentifier entities that represent other identifiers for this Entity... Each array item MUST be expressed either as an object or as a string corresponding to the item's IRI.\"\n\n**Environment:** API Route: /caliper/event/validate\nLocal Spec: caliper/event/validate.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a critical schema validation failure. The local implementation does not enforce the data contract defined by the upstream specification, allowing clients to send malformed data that could cause processing errors downstream. The local schema for `Entity.otherIdentifiers.items` should be defined with a `$ref` to a `SystemIdentifier` schema.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T02:57:21.440Z",
    "updatedAt": "2025-07-03T16:30:05.051Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-589/entityotheridentifiers-items-lack-specific-systemidentifier-type"
  },
  {
    "id": "19c5aadb-b728-40d5-9623-a8b748a21005",
    "identifier": "BUG-588",
    "title": "`Event.profile` Property is Incorrectly Marked as Required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** \"Human-readable steps:\n\n1. Construct a valid Caliper `Envelope` containing a valid `Event` object.\n2. In the `Event` object, omit the `profile` property.\n3. POST the `Envelope` to the `/caliper/event/validate` endpoint.\n4. Observe the server's response.\n\nCurl command:\n\n```bash\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"\"sensor\"\": \"\"https://example.edu/sensors/1\"\",\n  \"\"sendTime\"\": \"\"2023-10-27T10:00:00.000Z\"\",\n  \"\"dataVersion\"\": \"\"http://purl.imsglobal.org/ctx/caliper/v1p2\"\",\n  \"\"data\"\": [\n    {\n      \"\"@context\"\": \"\"http://purl.imsglobal.org/ctx/caliper/v1p2\"\",\n      \"\"id\"\": \"\"urn:uuid:c51570e4-f8ed-4c18-bb3a-dfe51b2cc594\"\",\n      \"\"type\"\": \"\"Event\"\",\n      \"\"actor\"\": \"\"https://example.edu/users/554433\"\",\n      \"\"action\"\": \"\"Viewed\"\",\n      \"\"object\"\": \"\"https://example.edu/terms/201801/courses/7/sections/1/assignments/1\"\",\n      \"\"eventTime\"\": \"\"2023-08-15T14:12:00.000Z\"\"\n    }\n  ]\n}'\n```\"\n\n**Summary:** \n\"Human-readable steps:\n1. Construct a valid Caliper `Envelope` containing a valid `Event` object.\n2. In the `Event` object, omit the `profile` property.\n3. POST the `Envelope` to the `/caliper/event/validate` endpoint.\n4. Observe the server's response.\n\nCurl command:\n```bash\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"\"sensor\"\": \"\"https://example.edu/sensors/1\"\",\n  \"\"sendTime\"\": \"\"2023-10-27T10:00:00.000Z\"\",\n  \"\"dataVersion\"\": \"\"http://purl.imsglobal.org/ctx/caliper/v1p2\"\",\n  \"\"data\"\": [\n    {\n      \"\"@context\"\": \"\"http://purl.imsglobal.org/ctx/caliper/v1p2\"\",\n      \"\"id\"\": \"\"urn:uuid:c51570e4-f8ed-4c18-bb3a-dfe51b2cc594\"\",\n      \"\"type\"\": \"\"Event\"\",\n      \"\"actor\"\": \"\"https://example.edu/users/554433\"\",\n      \"\"action\"\": \"\"Viewed\"\",\n      \"\"object\"\": \"\"https://example.edu/terms/201801/courses/7/sections/1/assignments/1\"\",\n      \"\"eventTime\"\": \"\"2023-08-15T14:12:00.000Z\"\"\n    }\n  ]\n}'\n```\"\n\n**Steps to Reproduce:**\nThe local specification marks the `profile` property within the `Event` schema as required. This means any submitted event that does not include a `profile` will be rejected as invalid.\n\n**Expected:** \n\"The `profile` property should be optional. The upstream Caliper specification explicitly states that `profile` is an optional property to maintain backwards compatibility. It is a `SHOULD`, not a `MUST`.\n\nFrom the upstream spec, Section 2.1, `Event` Properties table:\n- Property: `profile`\n- Disposition: `Optional`\n\nThe description further clarifies: \"\"Although each Event's profile property is considered optional (in order to ensure backwards compatibility) Sensors SHOULD specify for each Event created the relevant profile string value in order to inform consumers which profile governs the construction and interpretation of the Event.\"\"\"\n\n**Environment:** \"API Route: /caliper/event/validate\nLocal Spec: caliper/event/validate.filtered.yaml\nUpstream Spec: caliper.upstream.txt\"\n**Additional Notes:** This is a critical deviation from the upstream specification. By making an optional field required, the local implementation rejects valid Caliper events that conform to the official specification. This breaks compatibility with other systems that correctly treat the `profile` field as optional. The local spec (`components.schemas.Event.required`) lists `profile`, while the upstream spec (Section 2.1) clearly marks it as `Optional`.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T02:55:08.294Z",
    "updatedAt": "2025-07-03T05:32:29.393Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-588/eventprofile-property-is-incorrectly-marked-as-required"
  },
  {
    "id": "d27e905d-fd57-478b-aef1-4bf49585278e",
    "identifier": "BUG-587",
    "title": "`Event.id` Validation Pattern Does Not Enforce Valid UUID Format",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The local specification for `Event.id` uses the regex pattern `^urn:uuid:(.*)$`. This pattern only checks for the `urn:uuid:` prefix and allows any sequence of characters to follow, incorrectly validating malformed IDs.\n\n**Summary:** \nThe local specification for `Event.id` uses the regex pattern `^urn:uuid:(.*)$`. This pattern only checks for the `urn:uuid:` prefix and allows any sequence of characters to follow, incorrectly validating malformed IDs.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a valid Caliper `Envelope`.\n2. Inside the `data` array, create an `Event` object where the `id` field uses the correct `urn:uuid:` prefix but is followed by a non-UUID string.\n3. POST the `Envelope` to the `/caliper/event/validate` endpoint.\n4. Observe that the request is likely accepted as valid by the schema validator, even though the `id` is malformed.\n\nCurl command:\n\n```bash\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.edu/sensors/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n      \"id\": \"urn:uuid:this-is-not-a-valid-uuid\",\n      \"type\": \"Event\",\n      \"profile\": \"GeneralProfile\",\n      \"actor\": \"https://example.edu/users/554433\",\n      \"action\": \"Viewed\",\n      \"object\": \"https://example.edu/some/resource\",\n      \"eventTime\": \"2023-08-15T14:12:00.000Z\"\n    }\n  ]\n}'\n```\n\n**Expected:** \nThe `id` for an `Event` must be a valid version 4 UUID formatted as a URN. The validation pattern should be much stricter to enforce the `8-4-4-4-12` hexadecimal format of a UUID.\n\nFrom the upstream spec, Section 2.1, `Event` Properties table for `id`:\n\"The emitting application MUST provision the Event with a UUID. A version 4 UUID SHOULD be generated. The UUID MUST be expressed as a URN using the form \"urn:uuid:<UUID>\" per \\[RFC4122\\].\"\n\n**Environment:** API Route: /caliper/event/validate\nLocal Spec: caliper/event/validate.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** The current pattern is critically flawed as it fails to enforce the core requirement of the `id` field being a unique identifier based on the UUID standard. This can lead to data integrity issues, collisions, and non-compliance with consumers that expect correctly formatted UUIDs. The pattern should be updated to something like `^urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$` for a v4 UUID.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T02:53:54.631Z",
    "updatedAt": "2025-07-03T05:31:18.087Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-587/eventid-validation-pattern-does-not-enforce-valid-uuid-format"
  },
  {
    "id": "2a88fff6-95d6-4fef-876c-b5ded6885eac",
    "identifier": "BUG-586",
    "title": "`Event.profile` Property is Incorrectly Marked as Required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification marks the `profile` property within the `Event` schema as required. This means any submitted event that does not include a `profile` will be rejected as invalid.\n\n**Summary:** \nThe local specification marks the `profile` property within the `Event` schema as required. This means any submitted event that does not include a `profile` will be rejected as invalid.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a valid Caliper `Envelope` containing a valid `Event` object.\n2. In the `Event` object, omit the `profile` property.\n3. POST the `Envelope` to the `/caliper/event/validate` endpoint.\n4. Observe the server's response.\n\nCurl command:\n\n```bash\ncurl -X POST 'https://caliper.alpha-1edtech.com/caliper/event/validate' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-d '{\n  \"sensor\": \"https://example.edu/sensors/1\",\n  \"sendTime\": \"2023-10-27T10:00:00.000Z\",\n  \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n  \"data\": [\n    {\n      \"@context\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n      \"id\": \"urn:uuid:c51570e4-f8ed-4c18-bb3a-dfe51b2cc594\",\n      \"type\": \"Event\",\n      \"actor\": \"https://example.edu/users/554433\",\n      \"action\": \"Viewed\",\n      \"object\": \"https://example.edu/terms/201801/courses/7/sections/1/assignments/1\",\n      \"eventTime\": \"2023-08-15T14:12:00.000Z\"\n    }\n  ]\n}'\n```\n\n**Expected:** \nThe `profile` property should be optional. The upstream Caliper specification explicitly states that `profile` is an optional property to maintain backwards compatibility. It is a `SHOULD`, not a `MUST`.\n\nFrom the upstream spec, Section 2.1, `Event` Properties table:\n\n* Property: `profile`\n* Disposition: `Optional`\n\nThe description further clarifies: \"Although each Event's profile property is considered optional (in order to ensure backwards compatibility) Sensors SHOULD specify for each Event created the relevant profile string value in order to inform consumers which profile governs the construction and interpretation of the Event.\"\n\n**Environment:** API Route: /caliper/event/validate\nLocal Spec: caliper/event/validate.filtered.yaml\nUpstream Spec: caliper.upstream.txt\n**Additional Notes:** This is a critical deviation from the upstream specification. By making an optional field required, the local implementation rejects valid Caliper events that conform to the official specification. This breaks compatibility with other systems that correctly treat the `profile` field as optional. The local spec (`components.schemas.Event.required`) lists `profile`, while the upstream spec (Section 2.1) clearly marks it as `Optional`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T02:52:08.733Z",
    "updatedAt": "2025-07-03T05:32:28.494Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-586/eventprofile-property-is-incorrectly-marked-as-required"
  },
  {
    "id": "bf08cd89-935b-4d72-b0f4-dd9654feca67",
    "identifier": "BUG-585",
    "title": "Invalid Inline-Choice Structure Results in 500 Internal Server Error",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The POST /api/assessment-items endpoint crashes with a 500 Internal Server Error when provided with an invalid \"inline-choice\" interaction structure. Instead of validating the input and returning a 400 Bad Request, the server attempts to process the invalid structure, leading to different crashes and stack traces depending on the type of malformation.\n\n**Summary:** \nThe POST /api/assessment-items endpoint crashes with a 500 Internal Server Error when provided with an invalid \"inline-choice\" interaction structure. Instead of validating the input and returning a 400 Bad Request, the server attempts to process the invalid structure, leading to different crashes and stack traces depending on the type of malformation.\n\n**Steps to Reproduce:**\n\n1. Obtain a valid bearer token for the staging environment.\n2. Send a POST request to /api/assessment-items with Content-Type: application/json.\n3. In the JSON payload, set type to \"inline-choice\" with questionStructure containing:\n   * \"prompt\": \"Select the answer\"\n   * \"inlineChoices\": \"should-be-array-not-string\"\n4. Execute the request.\n5. Observe that the API returns 500 with error \"interaction.questionStructure.inlineChoices.forEach is not a function\" instead of 400 validation error.\n\n**Expected:** \nThe API should validate the interaction.questionStructure for \"inline-choice\" types upon receiving a request. If the structure is invalid (e.g., missing 'prompt' or 'inlineChoices', or if 'inlineChoices' is not an array), the API should immediately reject the request with a 400 Bad Request status and a structured JSON error body detailing the validation failures. It should not return a 500 error or expose stack traces.\n\n**Environment:** Staging Environment: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:51:24.673Z",
    "updatedAt": "2025-07-03T05:28:38.346Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-585/invalid-inline-choice-structure-results-in-500-internal-server-error"
  },
  {
    "id": "b732831e-0bc0-4ff0-b2d0-db4141fe8e02",
    "identifier": "BUG-584",
    "title": "Improper 500 Error for Empty String in modalFeedback.identifier",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API returns a 500 Internal Server Error when modalFeedback.identifier is submitted as an empty string. The backend Mongoose validation correctly identifies the input as invalid, but the error is not handled gracefully, causing the server to crash and expose a stack trace instead of returning a 400 Bad Request.\n\n**Summary:** \nThe API returns a 500 Internal Server Error when modalFeedback.identifier is submitted as an empty string. The backend Mongoose validation correctly identifies the input as invalid, but the error is not handled gracefully, causing the server to crash and expose a stack trace instead of returning a 400 Bad Request.\n\n**Steps to Reproduce:**\nSend a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with a JSON payload where a modalFeedback object has its identifier field set to an empty string.\nExample Payload:\n{\n  \"format\": \"json\",\n  \"identifier\": \"bug-31-empty-identifier\",\n  \"type\": \"choice\",\n  \"interaction\": { \"type\": \"choice\" },\n  \"modalFeedback\": \\[{\n    \"outcomeIdentifier\": \"SCORE\",\n    \"identifier\": \"\",\n    \"showHide\": \"show\",\n    \"content\": \"Good job!\",\n    \"title\": \"Feedback\"\n  }\\]\n}\n\n**Expected:** \nThe API should catch the validation error and respond with a 400 Bad Request status code, along with a structured JSON error message indicating that the identifier field is required and cannot be empty.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nHTTP Method: POST\n\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:40:24.702Z",
    "updatedAt": "2025-07-03T05:28:28.230Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-584/improper-500-error-for-empty-string-in-modalfeedbackidentifier"
  },
  {
    "id": "e31e10a4-996b-4555-8b9a-e1484d455d51",
    "identifier": "BUG-583",
    "title": "Required modalFeedback.title Field Accepts null Without Validation",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API accepts a null value for the modalFeedback.title field, which is a required string according to the OpenAPI specification. Instead of returning a validation error, the API returns a 201 Created status and creates an incomplete assessment item where the title attribute is null.\n\n**Summary:** \nThe API accepts a null value for the modalFeedback.title field, which is a required string according to the OpenAPI specification. Instead of returning a validation error, the API returns a 201 Created status and creates an incomplete assessment item where the title attribute is null.\n\n**Steps to Reproduce:**\nSend a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with a JSON payload where the modalFeedback.title field is set to null.\nExample Payload:\n{\n  \"format\": \"json\",\n  \"identifier\": \"bug-30-null-title-v2\",\n  \"type\": \"choice\",\n  \"interaction\": { \"type\": \"choice\", \"responseIdentifier\": \"RESPONSE\", \"questionStructure\": { \"prompt\": \"Test\" } },\n  \"modalFeedback\": \\[{\n    \"outcomeIdentifier\": \"SCORE\",\n    \"identifier\": \"feedback1\",\n    \"showHide\": \"show\",\n    \"content\": \"Good job!\",\n    \"title\": null\n  }\\]\n}\n\n**Expected:** \nThe API should validate all required fields before processing. It should reject the request with a 400 Bad Request and return a structured JSON error indicating that the title field cannot be null.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nHTTP Method: POST\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:38:07.493Z",
    "updatedAt": "2025-07-03T05:28:14.705Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-583/required-modalfeedbacktitle-field-accepts-null-without-validation"
  },
  {
    "id": "2b93a3af-aa59-424c-bd75-31252b99dcfa",
    "identifier": "BUG-582",
    "title": "Improper 500 Error for Empty String in modalFeedback.content",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Sending a POST request to /api/assessment-items with an empty string (\"\") for modalFeedback.content results in a 500 Internal Server Error. The back-end Mongoose validation correctly identifies the empty string as invalid, but the application fails to handle the validation error gracefully and crashes instead of returning a 400 Bad Request.\n\n**Summary:** \nSending a POST request to /api/assessment-items with an empty string (\"\") for modalFeedback.content results in a 500 Internal Server Error. The back-end Mongoose validation correctly identifies the empty string as invalid, but the application fails to handle the validation error gracefully and crashes instead of returning a 400 Bad Request.\n\n**Steps to Reproduce:**\nSend a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with a JSON payload where the modalFeedback.content field is an empty string.\nExample Payload:\n{\n  \"format\": \"json\",\n  \"identifier\": \"bug-29-empty-string-content\",\n  \"type\": \"choice\",\n  \"interaction\": { \"type\": \"choice\", \"responseIdentifier\": \"RESPONSE\", \"questionStructure\": { \"prompt\": \"Test question\" } },\n  \"modalFeedback\": \\[{\n    \"outcomeIdentifier\": \"SCORE\",\n    \"identifier\": \"feedback1\",\n    \"showHide\": \"show\",\n    \"content\": \"\",\n    \"title\": \"Empty Content Test\"\n  }\\]\n}\n\n**Expected:** \nThe API should catch the validation error and return a 400 Bad Request with a structured JSON error body, indicating that the content field cannot be empty. It should not produce a 500 error or expose a stack trace.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nHTTP Method: POST\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:33:32.450Z",
    "updatedAt": "2025-07-03T05:28:27.827Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-582/improper-500-error-for-empty-string-in-modalfeedbackcontent"
  },
  {
    "id": "37e444a7-179c-4483-998f-c791416b01bd",
    "identifier": "BUG-581",
    "title": "Null Content in feedbackBlock Causes 500 Error During XML Generation",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API crashes with a 500 Internal Server Error when a POST request to /api/assessment-items is sent with null as the value for feedbackBlock.content. The API fails to validate the input and crashes during the XML generation process.\n\n**Summary:** \nThe API crashes with a 500 Internal Server Error when a POST request to /api/assessment-items is sent with null as the value for feedbackBlock.content. The API fails to validate the input and crashes during the XML generation process.\n\n**Steps to Reproduce:**\nSend a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with a JSON payload where a feedbackBlock object has its content field set to null.\nExample Payload:\n{\n  \"format\": \"json\",\n  \"identifier\": \"bug-28-feedbackblock-null\",\n  \"type\": \"choice\",\n  \"interaction\": { \"type\": \"choice\", \"responseIdentifier\": \"RESPONSE\", \"questionStructure\": { \"prompt\": \"Test question\", \"choices\": \\[{\"identifier\": \"A\", \"content\": \"Option A\"}\\] } },\n  \"feedbackBlock\": \\[{\n    \"outcomeIdentifier\": \"SCORE\",\n    \"identifier\": \"block1\",\n    \"showHide\": \"show\",\n    \"content\": null,\n    \"class\": \\[\"feedback\"\\]\n  }\\]\n}\n\n**Expected:** \nThe API should validate that the content field is a non-null string before processing the request. It should reject the invalid payload with a 400 Bad Request and a clear JSON error message.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nHTTP Method: POST\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:31:09.959Z",
    "updatedAt": "2025-07-03T05:28:07.167Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-581/null-content-in-feedbackblock-causes-500-error-during-xml-generation"
  },
  {
    "id": "ce71ecd5-88eb-43f9-9086-d61e3bbffe7b",
    "identifier": "BUG-580",
    "title": "Improper 500 Error on feedbackInline Null Content Validation Failure",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API correctly identifies that feedbackInline.content cannot be null, but instead of returning a 400 Bad Request for this validation error, it crashes with a 500 Internal Server Error and exposes internal Mongoose stack trace details.\n\n**Summary:** \nThe API correctly identifies that feedbackInline.content cannot be null, but instead of returning a 400 Bad Request for this validation error, it crashes with a 500 Internal Server Error and exposes internal Mongoose stack trace details.\n\n**Steps to Reproduce:**\nSend a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with a JSON payload where a feedbackInline object has its content field set to null.\nExample Payload:\n{\n  \"format\": \"json\",\n  \"identifier\": \"bug-27-feedbackinline-null\",\n  \"type\": \"choice\",\n  \"interaction\": { \"type\": \"choice\", \"responseIdentifier\": \"RESPONSE\", \"questionStructure\": { \"prompt\": \"Test question\", \"choices\": \\[{\"identifier\": \"A\", \"content\": \"Option A\"}\\] } },\n  \"modalFeedback\": \\[{\n    \"outcomeIdentifier\": \"FEEDBACK\",\n    \"identifier\": \"modal1\",\n    \"showHide\": \"show\",\n    \"content\": \"Modal feedback\",\n    \"title\": \"Title\",\n    \"feedbackInline\": \\[{\n      \"identifier\": \"inline1\",\n      \"outcomeIdentifier\": \"FEEDBACK\",\n      \"showHide\": \"show\",\n      \"content\": null\n    }\\]\n  }\\]\n}\n\n**Expected:** \nThe API's error handling should catch the Mongoose validation error and map it to a proper client-side error response. It should return a 400 Bad Request with a structured JSON body detailing the validation failure.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nHTTP Method: POST\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:28:31.692Z",
    "updatedAt": "2025-07-03T05:28:05.376Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-580/improper-500-error-on-feedbackinline-null-content-validation-failure"
  },
  {
    "id": "380a71c6-adb9-4eb1-b654-0f367fa59477",
    "identifier": "BUG-579",
    "title": "Null Content in modalFeedback Leads to 500 Error During XML Generation",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Sending a POST request to /api/assessment-items with null for the modalFeedback.content field causes the API to crash with a 500 Internal Server Error. The error occurs during the final XML generation step instead of being caught by initial input validation.\n\n**Summary:** \nSending a POST request to /api/assessment-items with null for the modalFeedback.content field causes the API to crash with a 500 Internal Server Error. The error occurs during the final XML generation step instead of being caught by initial input validation.\n\n**Steps to Reproduce:**\nSend a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with a JSON body where a modalFeedback object has its content field set to null.\nExample Payload:\n{\n  \"format\": \"json\",\n  \"identifier\": \"bug-26-null-feedback\",\n  \"type\": \"choice\",\n  \"interaction\": { \"type\": \"choice\", \"responseIdentifier\": \"RESPONSE\", \"questionStructure\": { \"prompt\": \"Test question\", \"choices\": \\[{\"identifier\": \"A\", \"content\": \"Option A\"}\\] } },\n  \"responseDeclarations\": \\[{ \"identifier\": \"RESPONSE\", \"cardinality\": \"single\", \"baseType\": \"identifier\", \"correctResponse\": {\"value\": \\[\"A\"\\]} }\\],\n  \"outcomeDeclarations\": \\[{ \"identifier\": \"FEEDBACK\", \"cardinality\": \"single\", \"baseType\": \"identifier\" }\\],\n  \"responseProcessing\": { \"templateType\": \"match_correct\", \"responseDeclarationIdentifier\": \"RESPONSE\", \"outcomeIdentifier\": \"FEEDBACK\" },\n  \"modalFeedback\": \\[{\n    \"outcomeIdentifier\": \"FEEDBACK\",\n    \"identifier\": \"feedback1\",\n    \"showHide\": \"show\",\n    \"content\": null,\n    \"title\": \"Feedback Title\"\n  }\\]\n}\n\n**Expected:** \nThe API should perform input validation before processing the request. It should reject the payload with a 400 Bad Request error because the content field is a required string and cannot be null. The API should not attempt to generate XML with invalid data.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nHTTP Method: POST\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:25:44.830Z",
    "updatedAt": "2025-07-03T05:28:06.209Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-579/null-content-in-modalfeedback-leads-to-500-error-during-xml-generation"
  },
  {
    "id": "5e0631e2-0254-452b-a96a-3eda3455a257",
    "identifier": "BUG-578",
    "title": "QTI /assessment-items accepts non-existent responseIdentifier, violating spec",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The POST /api/assessment-items endpoint successfully creates an assessment item (201 Created) even when the 'interaction.responseIdentifier' and 'responseProcessing.responseDeclarationIdentifier' fields reference an identifier that does not exist in the 'responseDeclarations' array. This creates invalid QTI XML.\n\n**Summary:** \nThe POST /api/assessment-items endpoint successfully creates an assessment item (201 Created) even when the 'interaction.responseIdentifier' and 'responseProcessing.responseDeclarationIdentifier' fields reference an identifier that does not exist in the 'responseDeclarations' array. This creates invalid QTI XML.\n\n**Steps to Reproduce:**\nSend a POST request to /api/assessment-items with a payload where `interaction.responseIdentifier` is a value (e.g., \"NONEXISTENT\") that is not defined in the `responseDeclarations` array.\n\nExample Payload:\n{\n  \"identifier\": \"bug-18-nonexistent-respid\",\n  \"type\": \"choice\",\n  \"interaction\": {\n    \"type\": \"choice\",\n    \"responseIdentifier\": \"NONEXISTENT\"\n  },\n  \"responseDeclarations\": \\[\n    {\n      \"identifier\": \"RESPONSE1\",\n      \"cardinality\": \"single\",\n      \"baseType\": \"identifier\"\n    }\n  \\]\n}\n\n**Expected:** \nThe API should reject the request with a 400 Bad Request or 422 Unprocessable Entity error. It must validate that the 'responseIdentifier' and 'responseDeclarationIdentifier' values match an existing identifier in the 'responseDeclarations' array, as required by the OpenAPI specification.\n\n**Environment:** Staging Environment ([qti-staging.alpha-1edtech.com](http://qti-staging.alpha-1edtech.com))\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:23:05.507Z",
    "updatedAt": "2025-07-03T05:27:29.358Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-578/qti-assessment-items-accepts-non-existent-responseidentifier-violating"
  },
  {
    "id": "4cd1f4d4-d30d-4473-93d7-40757efb8772",
    "identifier": "BUG-577",
    "title": "Invalid 'baseType' enum in POST /api/assessment-items causes 500 Internal Server Error",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Sending a POST request to create an assessment item with an invalid enum value for responseDeclarations.baseType (e.g., \"invalid-type\") causes a 500 Internal Server Error. The API crashes and exposes a Mongoose validation stack trace in the response.\n\n**Summary:** \nSending a POST request to create an assessment item with an invalid enum value for responseDeclarations.baseType (e.g., \"invalid-type\") causes a 500 Internal Server Error. The API crashes and exposes a Mongoose validation stack trace in the response.\n\n**Steps to Reproduce:**\n\n1. Send a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with a valid authentication token.\n2. Use a JSON body for a 'choice' interaction, but set \"baseType\" to an invalid string like \"invalid-type\".\n3. The server responds with a 500 Internal Server Error and a Mongoose stack trace.\n\n**Expected:** \nThe API should validate the 'baseType' enum against its allowed values. On failure, it should return an HTTP 400 Bad Request with a structured JSON error body, indicating the field that failed validation. The API should not crash or expose internal stack traces.\n\n**Environment:** Staging: [https://qti-staging.alpha-1edtech.com](https://qti-staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:17:01.579Z",
    "updatedAt": "2025-07-03T05:33:11.003Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-577/invalid-basetype-enum-in-post-apiassessment-items-causes-500-internal"
  },
  {
    "id": "41f2650c-07e7-4828-83c9-c7840f8e41e3",
    "identifier": "BUG-576",
    "title": "Missing `interaction` field in POST /api/assessment-items causes 500 Internal Server Error",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when creating an assessment item if the `interaction` field is missing or null in the request body. The server code attempts to access `interaction.type` without first checking if `interaction` exists, leading to a 'Cannot read properties of undefined/null' TypeError and exposing a stack trace.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when creating an assessment item if the `interaction` field is missing or null in the request body. The server code attempts to access `interaction.type` without first checking if `interaction` exists, leading to a 'Cannot read properties of undefined/null' TypeError and exposing a stack trace.\n\n**Steps to Reproduce:**\n\n1. Send a POST request to the `/api/assessment-items` endpoint with a valid payload but completely omit the `interaction` field.\n\ncurl -X POST [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) \n-H \"Authorization: Bearer $TOKEN\" \n-H \"Content-Type: application/json\" \n-d '{\n    \"identifier\": \"test-bug-16\",\n    \"type\": \"choice\",\n    \"title\": \"Missing Interaction Test\",\n    \"responseProcessing\": {}\n  }'\n\n2. The server will respond with a 500 Internal Server Error.\n3. The same crash occurs if the field is present but set to null: \"interaction\": null\n\n**Expected:** \nThe API should validate the request. If the `interaction` field is considered mandatory for creating a functional item, the API should return a 400 or 422 validation error with a clear JSON message (e.g., 'interaction field is required'). It should not crash with a 500 error and expose internal implementation details.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nEnvironment: Staging\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:13:32.322Z",
    "updatedAt": "2025-07-03T05:33:10.227Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-576/missing-interaction-field-in-post-apiassessment-items-causes-500"
  },
  {
    "id": "83784d8a-8787-4438-8921-19db2cdba04d",
    "identifier": "BUG-575",
    "title": "Incorrect Response Format for 500, 415, and 400 Errors",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Multiple tests resulted in error responses (500, 415, 400) that did not conform to the JSON format defined in the OpenAPI specification. Instead of returning a structured JSON error object, the API returned an HTML page with a detailed stack trace. This violates the API contract and constitutes an information disclosure vulnerability.\n\nLog Excerpt (one example of many):\n2025/07/01 19:56:53 INFO VERBOSE: Complete response details test=Null byte in org.sourcedId status=500 statusText=Internal Server Error headers={\n  \"access-control-allow-origin\": \"\\*\",\n  \"content-length\": \"867\",\n  \"content-security-policy\": \"default-src 'none'\",\n  \"content-type\": \"text/html; charset=utf-8\",\n  \"date\": \"Wed, 02 Jul 2025 00:56:54 GMT\",\n  \"server\": \"railway-edge\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-powered-by\": \"Express\",\n  \"x-railway-edge\": \"railway/us-east4\",\n  \"x-railway-request-id\": \"LPqeDPUeQgKoMSJPvLKlrw\"\n} bodyRaw=<!DOCTYPE html>...<pre>error: invalid byte sequence for encoding \"UTF8\": 0x00...\n\n**Summary:** \nMultiple tests resulted in error responses (500, 415, 400) that did not conform to the JSON format defined in the OpenAPI specification. Instead of returning a structured JSON error object, the API returned an HTML page with a detailed stack trace. This violates the API contract and constitutes an information disclosure vulnerability.\n\nLog Excerpt (one example of many):\n2025/07/01 19:56:53 INFO VERBOSE: Complete response details test=Null byte in org.sourcedId status=500 statusText=Internal Server Error headers={\n  \"access-control-allow-origin\": \"\\*\",\n  \"content-length\": \"867\",\n  \"content-security-policy\": \"default-src 'none'\",\n  \"content-type\": \"text/html; charset=utf-8\",\n  \"date\": \"Wed, 02 Jul 2025 00:56:54 GMT\",\n  \"server\": \"railway-edge\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-powered-by\": \"Express\",\n  \"x-railway-edge\": \"railway/us-east4\",\n  \"x-railway-request-id\": \"LPqeDPUeQgKoMSJPvLKlrw\"\n} bodyRaw=<!DOCTYPE html>...<pre>error: invalid byte sequence for encoding \"UTF8\": 0x00...\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Trigger a server error by sending a request that the application cannot handle gracefully. For example, a POST to `/ims/oneroster/rostering/v1p2/courses/` with a null byte in the `sourcedId` field.\n2. Observe the response.\n3. The server returns a `500 Internal Server Error` with an `Content-Type: text/html` header and a body containing a full stack trace.\n4. The OpenAPI spec requires a JSON response for 500 errors, matching the `InternalServerErrorResponse` schema.\n\nCurl command (EXACT command from test logs):\n\n```bash\n# To reproduce, replace [REDACTED] with a valid Bearer token.\ncurl -i -X POST \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/\" \\\n-H \"Authorization: Bearer [REDACTED]\" \\\n-H \"Content-Type: application/json\" \\\n--data-binary '{\"course\": {\"sourcedId\": \"course\\u0000123\", \"status\": \"active\", \"title\": \"Test Course\", \"org\": {\"sourcedId\": \"org123\"}}}'\n```\n\n**Expected:** \nThe API should always return JSON-formatted error responses for all documented status codes (400, 401, 403, 404, 415, 422, 429, 500) as defined in the `components/schemas` section of the OpenAPI specification. Stack traces should never be exposed to the client.\n\nOpenAPI Specification Snippet for `500` response:\n\n```yaml\n'500':\n  description: Internal Server Error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/InternalServerErrorResponse'\n```\n\n**Environment:** Test Name: Null byte in org.sourcedId (and others)\nTest Logs: 2025/07/01 19:56:53 (and others)\nAPI Endpoint: POST /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: paths./ims/oneroster/rostering/v1p2/courses/.post.responses.500\n**Additional Notes:** This is a widespread issue affecting multiple error types. The exposure of stack traces provides attackers with valuable information about the application's internal structure, frameworks, and database, which can aid in further attacks. The API's error handling middleware needs to be reviewed to ensure all exceptions are caught and formatted according to the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:12:39.347Z",
    "updatedAt": "2025-07-03T05:27:04.511Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-575/incorrect-response-format-for-500-415-and-400-errors"
  },
  {
    "id": "10b00221-0959-4dd6-968c-9142b63a719b",
    "identifier": "BUG-574",
    "title": "Inconsistent and Misleading Error Response for Invalid POST Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The test \"Null byte in title\" sent a POST request with a null byte in the `title` field. The API responded with a 404 Not Found error and the message `{\"imsx_codeMajor\":\"failure\",\"imsx_severity\":\"error\",\"imsx_description\":\"orgs with sourcedId org123 not found\",...}`. This is misleading because the issue is not with the `org.sourcedId` but with the malformed `title`. The server is incorrectly identifying the source of the error.\n\nLog Excerpt:\n2025/07/01 19:56:53 INFO running test test=Null byte in title\n2025/07/01 19:56:53 INFO request details method=POST url=[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/)\n2025/07/01 19:56:53 INFO VERBOSE: Complete request details ... body={ \"course\": { \"status\": \"active\", \"title\": \"title\\\\u0000\", \"org\": { \"sourcedId\": \"org123\" }, \"sourcedId\": \"course123\" } }\n2025/07/01 19:56:53 INFO response received status=404 statusText=Not Found testPassed=true\n2025/07/01 19:56:53 INFO VERBOSE: Complete response details ... status=404 statusText=Not Found ... bodyRaw={\"imsx_codeMajor\":\"failure\",\"imsx_severity\":\"error\",\"imsx_description\":\"orgs with sourcedId org123 not found\",\"imsx_CodeMinor\":{\"imsx_codeMinorField\":\\[{\"imsx_codeMinorFieldName\":\"TargetEndSystem\",\"imsx_codeMinorFieldValue\":\"unknownobject\"}\\]}}\n\n**Summary:** \nThe test \"Null byte in title\" sent a POST request with a null byte in the `title` field. The API responded with a 404 Not Found error and the message `{\"imsx_codeMajor\":\"failure\",\"imsx_severity\":\"error\",\"imsx_description\":\"orgs with sourcedId org123 not found\",...}`. This is misleading because the issue is not with the `org.sourcedId` but with the malformed `title`. The server is incorrectly identifying the source of the error.\n\nLog Excerpt:\n2025/07/01 19:56:53 INFO running test test=Null byte in title\n2025/07/01 19:56:53 INFO request details method=POST url=[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/)\n2025/07/01 19:56:53 INFO VERBOSE: Complete request details ... body={ \"course\": { \"status\": \"active\", \"title\": \"title\\\\u0000\", \"org\": { \"sourcedId\": \"org123\" }, \"sourcedId\": \"course123\" } }\n2025/07/01 19:56:53 INFO response received status=404 statusText=Not Found testPassed=true\n2025/07/01 19:56:53 INFO VERBOSE: Complete response details ... status=404 statusText=Not Found ... bodyRaw={\"imsx_codeMajor\":\"failure\",\"imsx_severity\":\"error\",\"imsx_description\":\"orgs with sourcedId org123 not found\",\"imsx_CodeMinor\":{\"imsx_codeMinorField\":\\[{\"imsx_codeMinorFieldName\":\"TargetEndSystem\",\"imsx_codeMinorFieldValue\":\"unknownobject\"}\\]}}\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a POST request to the `/ims/oneroster/rostering/v1p2/courses/` endpoint.\n2. Provide a valid `org.sourcedId` but include an invalid value (e.g., a null byte `\\u0000`) in another field, such as `title` or `courseCode`.\n3. The API responds with a 404 Not Found error, claiming the organization specified by `org.sourcedId` was not found.\n4. This is incorrect. The organization exists, and the error is due to the invalid data in another field. The API should return a 400 or 422 error indicating which field is invalid.\n\nCurl command (EXACT command from test logs):\n\n```bash\n# To reproduce, replace [REDACTED] with a valid Bearer token.\ncurl -X POST \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/\" \\\n-H \"Authorization: Bearer [REDACTED]\" \\\n-H \"Content-Type: application/json\" \\\n--data-binary '{\n  \"course\": {\n    \"status\": \"active\",\n    \"title\": \"title\\u0000\",\n    \"org\": {\n      \"sourcedId\": \"org123\"\n    },\n    \"sourcedId\": \"course123\"\n  }\n}'\n```\n\n**Expected:** \nThe API should validate all fields in the request body. Upon encountering an invalid value (like a string with a null byte), it should return a 422 Unprocessable Entity response with a clear error message pointing to the invalid field, as defined by the `UnprocessableEntityResponse` schema in the spec.\n\nOpenAPI Specification Snippet for `422` response:\n\n```yaml\n'422':\n  description: Unprocessable Entity / Validation Error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/UnprocessableEntityResponse'\n```\n\n**Environment:** Test Name: Null byte in title\nTest Logs: 2025/07/01 19:56:53\nAPI Endpoint: POST /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: paths./ims/oneroster/rostering/v1p2/courses/.post\n**Additional Notes:** The API's error handling logic appears to have a flaw where it misattributes the cause of the validation failure. This misleading error message makes debugging difficult for legitimate clients and could obscure the true nature of security vulnerabilities. While the request is rejected (which is good), the incorrect status code and message are deviations from the spec and best practices.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:10:43.016Z",
    "updatedAt": "2025-07-03T16:41:35.695Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-574/inconsistent-and-misleading-error-response-for-invalid-post-body"
  },
  {
    "id": "2a639db1-4233-4479-b0b4-98be4c87be7b",
    "identifier": "BUG-573",
    "title": "Improper Error Handling: 500 Server Error and Stack Trace Leak on Invalid Enum Value in Filter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The test \"Lax validation: Unicode in 'filter'\" sent a GET request with a filter value that did not match the `status` enum (`active`, `tobedeleted`). Instead of returning a client-side error (4xx), the server returned a 500 Internal Server Error. The response body contained an HTML page with a database error message: `error: invalid input value for enum status_type: \"\ud83d\ude80active\ud83d\udd25\"`, indicating the invalid data was passed directly to the database layer without prior validation.\n\nLog Excerpt:\n2025/07/01 19:57:13 INFO running test test=Lax validation: Unicode in 'filter'\n2025/07/01 19:57:13 INFO request details method=GET url=[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?filter=status%3D'\ud83d\ude80active\ud83d\udd25'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?filter=status%3D%27%F0%9F%9A%80active%F0%9F%94%A5%27)\n2025/07/01 19:57:13 INFO response received status=500 statusText=Internal Server Error testPassed=false\n2025/07/01 19:57:13 ERROR server crashed with 5xx error test=Lax validation: Unicode in 'filter' status=500\n2025/07/01 19:57:13 INFO VERBOSE: Complete response details ... status=500 ... bodyRaw=<!DOCTYPE html>...<pre>error: invalid input value for enum status_type: \"\ud83d\ude80active\ud83d\udd25\"<br> \u00a0 \u00a0at /app/node_modules/pg-pool/index.js:45:11...\n\n**Summary:** \nThe test \"Lax validation: Unicode in 'filter'\" sent a GET request with a filter value that did not match the `status` enum (`active`, `tobedeleted`). Instead of returning a client-side error (4xx), the server returned a 500 Internal Server Error. The response body contained an HTML page with a database error message: `error: invalid input value for enum status_type: \"\ud83d\ude80active\ud83d\udd25\"`, indicating the invalid data was passed directly to the database layer without prior validation.\n\nLog Excerpt:\n2025/07/01 19:57:13 INFO running test test=Lax validation: Unicode in 'filter'\n2025/07/01 19:57:13 INFO request details method=GET url=[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?filter=status%3D'\ud83d\ude80active\ud83d\udd25'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?filter=status%3D%27%F0%9F%9A%80active%F0%9F%94%A5%27)\n2025/07/01 19:57:13 INFO response received status=500 statusText=Internal Server Error testPassed=false\n2025/07/01 19:57:13 ERROR server crashed with 5xx error test=Lax validation: Unicode in 'filter' status=500\n2025/07/01 19:57:13 INFO VERBOSE: Complete response details ... status=500 ... bodyRaw=<!DOCTYPE html>...<pre>error: invalid input value for enum status_type: \"\ud83d\ude80active\ud83d\udd25\"<br> \u00a0 \u00a0at /app/node_modules/pg-pool/index.js:45:11...\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a GET request to the `/ims/oneroster/rostering/v1p2/courses/` endpoint.\n2. Provide a `filter` query parameter with an invalid value for the `status` field, which is defined as an enum. For example, `filter=status='\ud83d\ude80active\ud83d\udd25'`.\n3. The API responds with a 500 Internal Server Error, revealing a database-level error message and a partial stack trace.\n4. The API should validate the enum value and return a 400 or 422 error with a standard JSON error response.\n\nCurl command (EXACT command from test logs):\n\n```bash\n# To reproduce, replace [REDACTED] with a valid Bearer token.\ncurl -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?filter=status%3D%27%F0%9F%9A%80active%F0%9F%94%A5%27\" \\\n-H \"Authorization: Bearer [REDACTED]\" \\\n-H \"Content-Type\": \"application/json\"\n```\n\n**Expected:** \nThe API should validate the value for the `status` field against the allowed enum values before attempting a database query. Upon receiving an invalid value, it should return a 400 Bad Request or 422 Unprocessable Entity with a JSON error message, as defined in the OpenAPI specification.\n\nOpenAPI Specification Snippet for `status` enum in the `courses` schema:\n\n```yaml\nstatus:\n  type: string\n  enum:\n    - active\n    - tobedeleted\n```\n\n**Environment:** Test Name: Lax validation: Unicode in 'filter'\nTest Logs: 2025/07/01 19:57:13\nAPI Endpoint: GET /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: paths./ims/oneroster/rostering/v1p2/courses/.get.responses.200.content.application/json.schema.properties.courses.items.properties.status\n**Additional Notes:** This vulnerability highlights a lack of input validation at the application layer. By allowing unvalidated data to reach the database, the application not only violates its own API contract but also exposes itself to potential SQL injection or other database-level attacks. The stack trace leakage provides valuable information to attackers about the internal architecture.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:09:04.934Z",
    "updatedAt": "2025-07-03T05:26:44.778Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-573/improper-error-handling-500-server-error-and-stack-trace-leak-on"
  },
  {
    "id": "127cffc0-b717-4b7b-af83-91255b7faffb",
    "identifier": "BUG-572",
    "title": "Invalid cardinality Enum Causes 500 Internal Server Error with Stack Trace Leak",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Sending a POST request to /api/assessment-items with an invalid enum value (e.g., \"invalid-cardinality\") for the responseDeclarations.cardinality field causes the server to crash with a 500 Internal Server Error. The JSON response exposes a Mongoose validation error and a full stack trace.\n\n**Summary:** \nSending a POST request to /api/assessment-items with an invalid enum value (e.g., \"invalid-cardinality\") for the responseDeclarations.cardinality field causes the server to crash with a 500 Internal Server Error. The JSON response exposes a Mongoose validation error and a full stack trace.\n\n**Steps to Reproduce:**\n\n1. Use a valid Bearer token to authenticate against the staging environment.\n2. Send a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items) with the following JSON body:\\`\\`\\`json\n   {\n   \"format\": \"json\",\n   \"identifier\": \"bug-15-invalid-cardinality\",\n   \"type\": \"choice\",\n   \"interaction\": {\n   \"type\": \"choice\",\n   \"responseIdentifier\": \"RESPONSE\",\n   \"questionStructure\": {\n   \"prompt\": \"Test question\",\n   \"choices\": \\[{\"identifier\": \"A\", \"content\": \"Option A\"}\\]\n   }\n   },\n   \"responseDeclarations\": \\[\n   {\n   \"identifier\": \"RESPONSE\",\n   \"cardinality\": \"invalid-cardinality\",\n   \"baseType\": \"identifier\",\n   \"correctResponse\": {\"value\": \\[\"A\"\\]}\n   }\n   \\]\n   }\n3. Observe the 500 Internal Server Error response containing a stack trace.\n\n**Expected:** \nThe API should validate the `cardinality` field against the enum defined in the OpenAPI specification (`single`, `multiple`, `ordered`, `record`). If the value is invalid, the API should return a 400 Bad Request with a structured JSON error body, indicating that the provided enum value is invalid. It should not return a 500 error or expose internal implementation details.\n\n**Environment:** API Endpoint: `https://qti-staging.alpha-1edtech.com/api/assessment-items`\nEnvironment: Staging\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T01:08:27.589Z",
    "updatedAt": "2025-07-03T05:27:19.154Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-572/invalid-cardinality-enum-causes-500-internal-server-error-with-stack"
  },
  {
    "id": "12be9547-cb09-4929-ad57-6ee19740aa14",
    "identifier": "BUG-571",
    "title": "Invalid `format` field is accepted without validation, leading to 500 crash on data mismatch",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API accepts any value for the `format` field on POST /api/assessment-items (e.g., 'invalid', empty string, numbers) without validation. When a mismatch occurs (e.g., format=\"xml\" with JSON data), the server crashes with a 500 error instead of returning a 4xx validation error. The `format` field is also used in examples but is not defined in the OpenAPI schema.\n\n**Summary:** \nThe API accepts any value for the `format` field on POST /api/assessment-items (e.g., 'invalid', empty string, numbers) without validation. When a mismatch occurs (e.g., format=\"xml\" with JSON data), the server crashes with a 500 error instead of returning a 4xx validation error. The `format` field is also used in examples but is not defined in the OpenAPI schema.\n\n**Steps to Reproduce:**\n\n1. Send a POST request to /api/assessment-items with a valid JSON body but set `format: \"xml\"`.\n2. Observe the 500 Internal Server Error.\n3. (For secondary validation) Send another POST request with `format: \"invalid-string\"`.\n4. Observe the 201 Created response, showing a complete lack of input validation.\n\n**Expected:**\n\n1. The `format` field should be validated against an enum of \\[\"json\", \"xml\"\\]. Invalid values should receive a 400 or 422 error.\n2. If the `format` and the data type do not match (e.g., `format: \"xml\"` with JSON data), the API should return a 4xx validation error, not a 500 crash.\n3. The `format` field should be properly defined in the OpenAPI schema for the AssessmentItem model.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nHTTP Method: POST\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:59:35.934Z",
    "updatedAt": "2025-07-03T05:26:26.967Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-571/invalid-format-field-is-accepted-without-validation-leading-to-500"
  },
  {
    "id": "ceefebc5-f981-401d-ba7b-59cec06a249a",
    "identifier": "BUG-570",
    "title": "Type Validation Failure for Array Fields Results in 500 Error",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Sending a non-array value (e.g., a string or object) for fields that must be arrays (`responseDeclarations`, `outcomeDeclarations`, `feedbackBlock`) on the POST /api/assessment-items endpoint causes the API to crash with a 500 Internal Server Error and expose an internal stack trace.\n\n**Summary:** \nSending a non-array value (e.g., a string or object) for fields that must be arrays (`responseDeclarations`, `outcomeDeclarations`, `feedbackBlock`) on the POST /api/assessment-items endpoint causes the API to crash with a 500 Internal Server Error and expose an internal stack trace.\n\n**Steps to Reproduce:**\n\n1. Send a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items).\n2. In the JSON payload, provide a non-array value for an array-only field.\n3. Example Payload:\n   {\n   \"identifier\": \"bug-11-repro\",\n   \"type\": \"choice\",\n   \"interaction\": { \"type\": \"choice\" },\n   \"responseDeclarations\": \"this-should-be-an-array\"\n   }\n4. Observe the 500 Internal Server Error response containing a stack trace.\n\n**Expected:** \nThe API should perform input validation before processing the data. It should reject the request with a 400 Bad Request error and a clear JSON response detailing which fields have the wrong type (e.g., \"Expected array, received string\").\n\n**Environment:** Staging Environment: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:54:52.925Z",
    "updatedAt": "2025-07-03T05:28:37.648Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-570/type-validation-failure-for-array-fields-results-in-500-error"
  },
  {
    "id": "be174cb0-1157-49de-926e-794ae19c9b9c",
    "identifier": "BUG-569",
    "title": "500 Error on QTI Item Creation with Missing Required Fields in Nested Match Choices",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Submitting a 'match' type assessment item with missing required 'identifier' or 'content' fields in the nested sourceChoices/targetChoices arrays causes a 500 Internal Server Error with a stack trace, instead of a 400 validation error.\n\n**Summary:** \nSubmitting a 'match' type assessment item with missing required 'identifier' or 'content' fields in the nested sourceChoices/targetChoices arrays causes a 500 Internal Server Error with a stack trace, instead of a 400 validation error.\n\n**Steps to Reproduce:**\n\n1. Send a POST request to the /assessment-items endpoint.\n2. Use the provided JSON payload for a 'match' type interaction where 'identifier' and 'content' are missing from nested choice objects.\n3. Observe the server responds with a 500 Internal Server Error instead of a 400 Bad Request.\n\nPayload:\n{\n  \"identifier\": \"verify-bug-8-match\",\n  \"type\": \"match\",\n  \"interaction\": {\n    \"type\": \"match\",\n    \"questionStructure\": {\n      \"sourceChoices\": \\[{\"content\": \"Source 1\"}\\],\n      \"targetChoices\": \\[{\"identifier\": \"T1\"}\\]\n    }\n  }\n}\n\n**Expected:** \nThe API should validate the nested objects before attempting XML generation. It should detect the missing required fields and return a 400 Bad Request with a clear JSON error message specifying the validation failures.\n\n**Environment:** Staging Environment ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\nQTI API endpoint: /assessment-items\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:51:41.638Z",
    "updatedAt": "2025-07-03T05:26:09.688Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-569/500-error-on-qti-item-creation-with-missing-required-fields-in-nested"
  },
  {
    "id": "42a2cd91-381f-4db8-a713-5c7e86c1cc29",
    "identifier": "BUG-568",
    "title": "Invalid Enum Values in POST /api/assessment-items cause 500 Internal Server Error",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Sending a POST request to create an assessment item with an invalid value for an enum field (e.g., cardinality: 'super-single') causes the server to crash and return a 500 Internal Server Error with a full Mongoose stack trace.\n\n**Summary:** \nSending a POST request to create an assessment item with an invalid value for an enum field (e.g., cardinality: 'super-single') causes the server to crash and return a 500 Internal Server Error with a full Mongoose stack trace.\n\n**Steps to Reproduce:**\n\n1. Send a POST request to the staging endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\n2. In the JSON body, use an invalid value for an enum field, such as \"cardinality\": \"super-single\" or \"baseType\": \"magic-number\".\n3. Use the provided JSON test case for a reliable reproduction.\n4. Observe the 500 error response with the full stack trace.\n\n**Expected:** \nThe API should validate the enum values in the request body before processing. If an invalid value is found, it should immediately return an HTTP 400 Bad Request with a clear JSON error message detailing which field is invalid and what the allowed values are.\n\n**Environment:** Staging Environment: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:48:33.804Z",
    "updatedAt": "2025-07-03T05:27:18.157Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-568/invalid-enum-values-in-post-apiassessment-items-cause-500-internal"
  },
  {
    "id": "2672b522-1f1a-4665-8949-91335a921ae5",
    "identifier": "BUG-567",
    "title": "QTI API: Missing Validation for Duplicate Identifiers in Assessment Items",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The POST /api/assessment-items endpoint accepts payloads with duplicate identifiers for choices and response declarations. This creates an invalid and ambiguous assessment item that cannot be reliably scored, violating the QTI standard and the API's own documentation which requires identifiers to be \"distinct\".\n\n**Summary:** \nThe POST /api/assessment-items endpoint accepts payloads with duplicate identifiers for choices and response declarations. This creates an invalid and ambiguous assessment item that cannot be reliably scored, violating the QTI standard and the API's own documentation which requires identifiers to be \"distinct\".\n\n**Steps to Reproduce:**\n\n1. Send a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items).\n2. Use a JSON payload containing duplicate identifiers, such as two choices with `identifier: \"A\"` or two response declarations with `identifier: \"RESPONSE\"`.\n3. Example payload:\n   {\n   \"identifier\": \"bug-4-duplicate-ids-demo\",\n   \"type\": \"choice\",\n   \"interaction\": {\n    \"type\": \"choice\",\n    \"choices\": \\[\n      { \"identifier\": \"A\", \"content\": \"7\" },\n      { \"identifier\": \"A\", \"content\": \"8\" }\n    \\]\n   },\n   \"responseDeclarations\": \\[\n    { \"identifier\": \"RESPONSE\", \"cardinality\": \"single\" },\n    { \"identifier\": \"RESPONSE\", \"cardinality\": \"multiple\" }\n   \\]\n   }\n4. Observe that the API incorrectly returns a 201 Created status instead of a 400 Bad Request validation error.\n\n**Expected:** \nThe API should reject the request with a 400 Bad Request status code. The response body should be a JSON error object detailing that duplicate identifiers were found for specific types (e.g., \"choice\", \"responseDeclaration\").\n\n**Environment:** Endpoint: POST [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\nEnvironment: Staging\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:44:56.612Z",
    "updatedAt": "2025-07-03T05:25:53.738Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-567/qti-api-missing-validation-for-duplicate-identifiers-in-assessment"
  },
  {
    "id": "c1829db9-6dcb-4292-bd7e-4fb24863b4ff",
    "identifier": "BUG-566",
    "title": "XML Generation Failure: 500 Crash on Invalid Characters in POST /assessment-items",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API crashes with a 500 Internal Server Error when creating an assessment item with XML-invalid control characters (e.g., null byte \\\\u0000) in text fields. The API fails to validate the input before attempting to generate XML, leading to a server crash and stack trace exposure.\n\n**Summary:** \nThe API crashes with a 500 Internal Server Error when creating an assessment item with XML-invalid control characters (e.g., null byte \\\\u0000) in text fields. The API fails to validate the input before attempting to generate XML, leading to a server crash and stack trace exposure.\n\n**Steps to Reproduce:**\n\n1. Send a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items).\n2. In the JSON body, include an XML-invalid control character (e.g., \"\\\\u0000\") in any string field like 'title'.\n3. The server responds with a 500 error and stack trace instead of a 400 validation error.\n\n**Expected:** \nThe API should validate all string inputs for XML-invalid characters and return a 400 Bad Request with a clear JSON error message if any are found. It should not attempt to process the invalid input or crash.\n\n**Environment:** API Endpoint: [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items), Environment: Staging\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:41:32.110Z",
    "updatedAt": "2025-07-03T05:27:37.414Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-566/xml-generation-failure-500-crash-on-invalid-characters-in-post"
  },
  {
    "id": "a2928258-bf1f-4a03-bb60-ea4eeb48cbc6",
    "identifier": "BUG-565",
    "title": "API Accepts Hexadecimal String for Integer 'offset' Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The test 'Hexadecimal string for offset' sent a GET request with `offset=0xFF`. The server should have rejected this as it is a string, not an integer. Instead, it successfully parsed the hexadecimal value, treated it as an integer, and returned a 200 OK response with the results starting at offset 255.\nLog Excerpt:\n\"2025/07/01 19:24:50 INFO running test test=Hexadecimal string for offset\n2025/07/01 19:24:50 INFO request details method=GET url=[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?offset=0xFF](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?offset=0xFF)\n2025/07/01 19:24:50 INFO response received status=200 statusText=OK testPassed=false\n2025/07/01 19:24:50 WARN request succeeded but expected failure for type confusion test=Hexadecimal string for offset\"\n\n**Summary:** \nThe test 'Hexadecimal string for offset' sent a GET request with `offset=0xFF`. The server should have rejected this as it is a string, not an integer. Instead, it successfully parsed the hexadecimal value, treated it as an integer, and returned a 200 OK response with the results starting at offset 255.\nLog Excerpt:\n\"2025/07/01 19:24:50 INFO running test test=Hexadecimal string for offset\n2025/07/01 19:24:50 INFO request details method=GET url=[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?offset=0xFF](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?offset=0xFF)\n2025/07/01 19:24:50 INFO response received status=200 statusText=OK testPassed=false\n2025/07/01 19:24:50 WARN request succeeded but expected failure for type confusion test=Hexadecimal string for offset\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Target the GET /ims/oneroster/rostering/v1p2/courses/ endpoint.\n2. The 'offset' query parameter is defined as `type: integer`.\n3. Send a GET request where 'offset' is a hexadecimal string, e.g., `0xFF`.\n4. The API incorrectly returns a 200 OK response, having coerced the hex string \"0xFF\" into the integer 255.\n5. This request should have been rejected with a 422 Unprocessable Entity error.\n\nCurl command (EXACT command from test logs):\n\n```bash\ncurl -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?offset=0xFF\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\"\n```\n\n**Expected:** \nThe API must strictly enforce the `integer` type for the `offset` parameter. It should not attempt to parse different number representations from strings. The request should be rejected with an HTTP 422 Unprocessable Entity status and a descriptive JSON error.\nRelevant OpenAPI Spec:\n\n```yaml\n- in: query\n  name: offset\n  description: The number of items to skip in the paginated response\n  schema:\n    type: integer\n    minimum: 0\n```\n\n**Environment:** Test Name: Hexadecimal string for offset\nTest Logs: 2025/07/01 19:24:50\nAPI Endpoint: /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: paths./ims/oneroster/rostering/v1p2/courses/.get.parameters\\[2\\]\n**Additional Notes:** This is another instance of a type confusion vulnerability caused by weak typing. Allowing multiple string representations for numbers (decimal, hex, scientific notation) can create security holes if different components in the request pipeline (e.g., a WAF and the application code) parse them differently. This could be exploited to bypass security filters.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:40:46.912Z",
    "updatedAt": "2025-07-03T05:25:36.698Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-565/api-accepts-hexadecimal-string-for-integer-offset-parameter"
  },
  {
    "id": "a11a3025-dfea-4b34-b692-e5320f0a066c",
    "identifier": "BUG-564",
    "title": "API Lacks Length Validation on 'search' Query Parameter, Allowing Extremely Long Inputs",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The test 'Extremely long string for search (10000 chars)' sent a GET request with a 10,000 character string as the value for the `search` parameter. The server accepted and processed this request, returning a 200 OK status. The test expected a failure, as such long inputs should typically be rejected to prevent resource exhaustion.\nLog Excerpt:\n\"2025/07/01 19:24:51 INFO running test test=Extremely long string for search (10000 chars)\n2025/07/01 19:24:51 INFO request details method=GET url=...\n2025/07/01 19:24:51 INFO response received status=200 statusText=OK testPassed=false\n2025/07/01 19:24:51 WARN request succeeded but expected failure for type confusion test=Extremely long string for search (10000 chars)\"\n\n**Summary:** \nThe test 'Extremely long string for search (10000 chars)' sent a GET request with a 10,000 character string as the value for the `search` parameter. The server accepted and processed this request, returning a 200 OK status. The test expected a failure, as such long inputs should typically be rejected to prevent resource exhaustion.\nLog Excerpt:\n\"2025/07/01 19:24:51 INFO running test test=Extremely long string for search (10000 chars)\n2025/07/01 19:24:51 INFO request details method=GET url=...\n2025/07/01 19:24:51 INFO response received status=200 statusText=OK testPassed=false\n2025/07/01 19:24:51 WARN request succeeded but expected failure for type confusion test=Extremely long string for search (10000 chars)\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Target the GET /ims/oneroster/rostering/v1p2/courses/ endpoint.\n2. The 'search' query parameter is defined as `type: string` but lacks a `maxLength` constraint.\n3. Send a GET request with an extremely long string (e.g., 10,000+ characters) for the 'search' parameter.\n4. The API processes the request and returns a 200 OK, indicating a lack of input length validation.\n\nCurl command (EXACT command from test logs):\n\n```bash\ncurl -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?search=A...[10000 chars]...A\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\"\n```\n\n**Expected:** \nWhile the OpenAPI spec does not explicitly define a `maxLength` for the `search` parameter, a robust API should implement reasonable length limits on all string inputs to protect against denial-of-service (DoS) attacks. The API should have rejected the request with a 413 Payload Too Large or 422 Unprocessable Entity error.\nRelevant OpenAPI Spec:\n\n```yaml\n- in: query\n  name: search\n  description: The search query to apply to the response\n  schema:\n    type: string\n```\n\n**Environment:** Test Name: Extremely long string for search (10000 chars)\nTest Logs: 2025/07/01 19:24:51\nAPI Endpoint: /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: paths./ims/oneroster/rostering/v1p2/courses/.get.parameters\\[6\\]\n**Additional Notes:** Accepting arbitrarily long strings can expose the server to resource exhaustion attacks. Processing a very long search string could consume excessive CPU and memory, especially if complex search logic or regular expressions are used on the backend. It is a security best practice to enforce a reasonable `maxLength` on all user-provided string inputs.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:39:23.736Z",
    "updatedAt": "2025-07-03T05:25:22.630Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-564/api-lacks-length-validation-on-search-query-parameter-allowing"
  },
  {
    "id": "f9d8ba08-d8c5-4d0e-9b31-2559fd539169",
    "identifier": "BUG-563",
    "title": "API Ignores Invalid Field Names in 'fields' Parameter Instead of Rejecting the Request",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The tests 'Unicode characters in fields' and 'Mixed valid and invalid field names with special characters' sent GET requests with invalid values in the `fields` parameter. Instead of validating the requested field names against the schema and returning a 422 error, the server completely ignored the parameter and returned 200 OK with the full object for all results. This violates the functional contract of the parameter.\nLog Excerpt:\n\"2025/07/01 19:24:51 INFO running test test=Unicode characters in fields\n2025/07/01 19:24:51 INFO request details method=GET url=.../courses/?fields=name%2Ctitle%2C%F0%9F%91%BE%2C%F0%9F%94%A5%2C%E0%A4%A8%E0%A4%AE%E0%A4%B8%E0%A5%8D%E0%A4%A4%E0%A5%87\n2025/07/01 19:24:51 INFO response received status=200 statusText=OK testPassed=false\n2025/07/01 19:24:51 WARN request succeeded but expected failure for type confusion test=Unicode characters in fields\"\n\n**Summary:** \nThe tests 'Unicode characters in fields' and 'Mixed valid and invalid field names with special characters' sent GET requests with invalid values in the `fields` parameter. Instead of validating the requested field names against the schema and returning a 422 error, the server completely ignored the parameter and returned 200 OK with the full object for all results. This violates the functional contract of the parameter.\nLog Excerpt:\n\"2025/07/01 19:24:51 INFO running test test=Unicode characters in fields\n2025/07/01 19:24:51 INFO request details method=GET url=.../courses/?fields=name%2Ctitle%2C%F0%9F%91%BE%2C%F0%9F%94%A5%2C%E0%A4%A8%E0%A4%AE%E0%A4%B8%E0%A5%8D%E0%A4%A4%E0%A5%87\n2025/07/01 19:24:51 INFO response received status=200 statusText=OK testPassed=false\n2025/07/01 19:24:51 WARN request succeeded but expected failure for type confusion test=Unicode characters in fields\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Target the GET /ims/oneroster/rostering/v1p2/courses/ endpoint.\n2. The 'fields' query parameter expects a comma-separated list of valid field names from the `Course` object schema.\n3. Send a GET request where the 'fields' parameter contains invalid or malicious values, such as unicode characters or injection payloads.\n4. The API incorrectly returns a 200 OK response with the full, unfiltered course objects. It should reject the request due to the invalid field names.\n\nCurl command (EXACT command from test logs):\n\n```bash\n# Unicode Test\ncurl -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?fields=name%2Ctitle%2C%F0%9F%91%BE%2C%F0%9F%94%A5%2C%E0%A4%A8%E0%A4%AE%E0%A4%B8%E0%A5%8D%E0%A4%A4%E0%A5%87\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\"\n```\n\n**Expected:** \nThe API should validate each value in the comma-separated `fields` string against the properties defined in the `Course` schema. If any of the requested fields are not valid, the API should return an HTTP 422 Unprocessable Entity or 400 Bad Request error with a descriptive message.\nRelevant OpenAPI Spec:\n\n```yaml\n- in: query\n  name: fields\n  description: Comma-separated list of fields to include in the response\n  schema:\n    type: string\n    description: Comma-separated list of fields to include in the response\n    example: sourcedId,name\n```\n\n**Environment:** Test Name: Unicode characters in fields, Mixed valid and invalid field names with special characters\nTest Logs: 2025/07/01 19:24:51, 2025/07/01 19:25:03\nAPI Endpoint: /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: paths./ims/oneroster/rostering/v1p2/courses/.get.parameters\\[0\\]\n**Additional Notes:** Failing to validate the `fields` parameter and silently returning the full object can lead to excessive data exposure and increased response sizes, impacting performance. An attacker could use this to probe for valid field names without receiving any errors. The implementation should be improved to reject requests with invalid field names.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:38:05.000Z",
    "updatedAt": "2025-07-03T19:26:04.605Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-563/api-ignores-invalid-field-names-in-fields-parameter-instead-of"
  },
  {
    "id": "04cbc715-ed95-4c51-b325-8f7d39773475",
    "identifier": "BUG-562",
    "title": "API Accepts Padded and Scientific-Notation Strings for Integer Query Parameters",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Multiple tests revealed that integer query parameters (`limit`, `offset`) accept non-integer string formats and coerce them into numbers. For example, the test 'Scientific notation for limit' sent `limit=1e2` and received a 200 OK response. The test 'Whitespace padding in numeric parameters' sent `limit=++10++` and also received a 200 OK. This behavior violates the strict `integer` type defined in the spec.\nLog Excerpts:\n\"2025/07/01 19:24:50 INFO running test test=Scientific notation for limit\n2025/07/01 19:24:50 INFO response received status=200 statusText=OK testPassed=false\"\n\"2025/07/01 19:25:06 INFO running test test=Whitespace padding in numeric parameters\n2025/07/01 19:25:06 INFO response received status=200 statusText=OK testPassed=false\"\n\n**Summary:** \nMultiple tests revealed that integer query parameters (`limit`, `offset`) accept non-integer string formats and coerce them into numbers. For example, the test 'Scientific notation for limit' sent `limit=1e2` and received a 200 OK response. The test 'Whitespace padding in numeric parameters' sent `limit=++10++` and also received a 200 OK. This behavior violates the strict `integer` type defined in the spec.\nLog Excerpts:\n\"2025/07/01 19:24:50 INFO running test test=Scientific notation for limit\n2025/07/01 19:24:50 INFO response received status=200 statusText=OK testPassed=false\"\n\"2025/07/01 19:25:06 INFO running test test=Whitespace padding in numeric parameters\n2025/07/01 19:25:06 INFO response received status=200 statusText=OK testPassed=false\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Target the GET /ims/oneroster/rostering/v1p2/courses/ endpoint.\n2. The 'limit' and 'offset' query parameters are defined as `type: integer`.\n3. Send a GET request where 'limit' is a string in scientific notation (e.g., `1e2`) or a string with whitespace padding (e.g., ` 10 `).\n4. The API incorrectly returns a 200 OK response, successfully coercing the strings to integers.\n5. This should be rejected with a 422 Unprocessable Entity error for providing the wrong data type.\n\nCurl command (EXACT command from test logs):\n\n```bash\n# Scientific Notation Test\ncurl -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?limit=1e2\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\"\n\n# Whitespace Padding Test\ncurl -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?limit=++10++&offset=%09%0A20%0D%0A\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\"\n```\n\n**Expected:** \nThe API must strictly validate that the value provided for an integer parameter is a valid integer, not a string that can be coerced into one. Any value that does not conform to the integer type should be rejected with an HTTP 422 status and a JSON error body.\nRelevant OpenAPI Spec:\n\n```yaml\n- in: query\n  name: limit\n  schema:\n    type: integer\n    minimum: 1\n    maximum: 3000\n- in: query\n  name: offset\n  schema:\n    type: integer\n    minimum: 0\n```\n\n**Environment:** Test Name: Scientific notation for limit, Whitespace padding in numeric parameters\nTest Logs: 2025/07/01 19:24:50, 2025/07/01 19:25:06\nAPI Endpoint: /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: paths./ims/oneroster/rostering/v1p2/courses/.get.parameters\n**Additional Notes:** This permissive type coercion is a significant security risk. It allows attackers to probe for parsing inconsistencies between the validation layer and backend services. For example, an attacker could bypass string-based security filters by providing a number in a different format. This issue was also observed with hex strings (`offset=0xFF`), indicating a systemic weak typing problem in the application's parameter handling.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:36:45.235Z",
    "updatedAt": "2025-07-03T05:25:35.440Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-562/api-accepts-padded-and-scientific-notation-strings-for-integer-query"
  },
  {
    "id": "7d7957cf-3fe7-42b9-ac38-90076bb03430",
    "identifier": "BUG-561",
    "title": "API Leaks Stack Trace on Request with Invalid Content-Type Charset",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The test 'Invalid charset in Content-Type' sent a POST request with an invalid charset specified in the Content-Type header. The server correctly identified the issue and returned a 415 status code, but the response body was `text/html` with a full stack trace instead of a well-formed JSON error object as defined in the spec for all other client errors.\nLog Excerpt:\n\"2025/07/01 19:25:07 INFO running test test=Invalid charset in Content-Type\n2025/07/01 19:25:07 INFO response received status=415 statusText=Unsupported Media Type testPassed=true\n2025/07/01 19:25:07 INFO VERBOSE: Complete response details ... status=415 ... headers={..., \"content-type\": \"text/html; charset=utf-8\", ...} bodyRaw=<!DOCTYPE html>...<pre>UnsupportedMediaTypeError: unsupported charset \"INVALID-8\"<br> \u00a0 \u00a0at jsonParser (/app/node_modules/body-parser/lib/types/json.js:130:12)...</pre>...</html>\"\n\n**Summary:** \nThe test 'Invalid charset in Content-Type' sent a POST request with an invalid charset specified in the Content-Type header. The server correctly identified the issue and returned a 415 status code, but the response body was `text/html` with a full stack trace instead of a well-formed JSON error object as defined in the spec for all other client errors.\nLog Excerpt:\n\"2025/07/01 19:25:07 INFO running test test=Invalid charset in Content-Type\n2025/07/01 19:25:07 INFO response received status=415 statusText=Unsupported Media Type testPassed=true\n2025/07/01 19:25:07 INFO VERBOSE: Complete response details ... status=415 ... headers={..., \"content-type\": \"text/html; charset=utf-8\", ...} bodyRaw=<!DOCTYPE html>...<pre>UnsupportedMediaTypeError: unsupported charset \"INVALID-8\"<br> \u00a0 \u00a0at jsonParser (/app/node_modules/body-parser/lib/types/json.js:130:12)...</pre>...</html>\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Target the POST /ims/oneroster/rostering/v1p2/courses/ endpoint.\n2. Send a valid JSON body.\n3. Set the `Content-Type` header to `application/json; charset=invalid-8`.\n4. The API returns a 415 Unsupported Media Type error.\n5. The response body is `text/html` and contains a full stack trace, revealing internal application details.\n\nCurl command (EXACT command from test logs):\n\n```bash\n# The body in the test log is not relevant as the error happens before parsing, but a valid body must be sent.\ncurl -X POST \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json; charset=invalid-8\" \\\n-d '{\n  \"course\": {\n    \"sourcedId\": \"course123\",\n    \"status\": \"active\",\n    \"title\": \"Test Course\",\n    \"org\": {\n      \"sourcedId\": \"org123\"\n    }\n  }\n}'\n```\n\n**Expected:** \nThe API should handle this client error gracefully. While a 415 status is appropriate, the response body MUST conform to the `application/json` error schema defined in the OpenAPI specification (e.g., `BadRequestResponse` or a similar structure). It must not return HTML or a stack trace.\nRelevant OpenAPI Spec (for error responses):\n\n```yaml\n'400':\n  description: Bad Request\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/BadRequestResponse'\n'422':\n  description: Unprocessable Entity / Validation Error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/UnprocessableEntityResponse'\n```\n\n**Environment:** Test Name: Invalid charset in Content-Type\nTest Logs: 2025/07/01 19:25:07\nAPI Endpoint: /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: components.schemas.BadRequestResponse\n**Additional Notes:** This vulnerability demonstrates improper exception handling at the middleware layer (body-parser), before the application's core validation logic is reached. Leaking stack traces provides attackers with valuable information about the application's framework (Express), middleware, and internal file structure, which can be used to craft more targeted attacks. This should be fixed by implementing a global error handler that catches all exceptions and formats them into the standard JSON error response.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:33:35.353Z",
    "updatedAt": "2025-07-03T05:24:46.507Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-561/api-leaks-stack-trace-on-request-with-invalid-content-type-charset"
  },
  {
    "id": "883ebfca-e0c2-4e7b-910a-0e7c885fcfbb",
    "identifier": "BUG-560",
    "title": "QTI API Fails to Validate responseDeclarationIdentifier Reference",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The API allows the creation of an assessment item where 'responseProcessing' references a responseDeclaration that does not exist, resulting in structurally invalid QTI that cannot be processed correctly.\n\n**Summary:** \nThe API allows the creation of an assessment item where 'responseProcessing' references a responseDeclaration that does not exist, resulting in structurally invalid QTI that cannot be processed correctly.\n\n**Steps to Reproduce:**\n\n1. Send a POST request to [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items).\n2. Use a JSON payload where the 'responseProcessing.responseDeclarationIdentifier' value (e.g., \"RESPONSE\") does not have a corresponding object in the 'responseDeclarations' array.\n3. Example payload: { \"identifier\": \"bug-1\", \"type\": \"choice\", \"interaction\": { \"type\": \"choice\", \"responseIdentifier\": \"RESPONSE\" }, \"responseDeclarations\": \\[\\], \"responseProcessing\": { \"templateType\": \"match_correct\", \"responseDeclarationIdentifier\": \"RESPONSE\" } }\n\n**Expected:** \nThe API should reject the request with a 400 Bad Request and a clear validation error, stating that the referenced identifier was not found in responseDeclarations, as required by its own OpenAPI documentation.\n\n**Environment:** [https://qti-staging.alpha-1edtech.com/api/assessment-items](https://qti-staging.alpha-1edtech.com/api/assessment-items)\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:31:20.164Z",
    "updatedAt": "2025-07-03T05:27:28.588Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-560/qti-api-fails-to-validate-responsedeclarationidentifier-reference"
  },
  {
    "id": "3bc3e93a-7302-49fa-bcb1-a31bab20966a",
    "identifier": "BUG-559",
    "title": "CRITICAL: 500 Internal Server Error and Stack Trace Leak on Null Byte Injection in POST Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The test 'Control characters in string fields' sent a POST request with null bytes and other control characters in string fields of the JSON body. Instead of rejecting the request with a 422 Unprocessable Entity error, the server crashed and returned a 500 Internal Server Error. The response body was `text/html` and contained a detailed stack trace.\nLog Excerpt:\n\"2025/07/01 19:24:58 INFO running test test=Control characters in string fields\n2025/07/01 19:24:58 INFO response received status=500 statusText=Internal Server Error testPassed=true\n2025/07/01 19:24:58 INFO VERBOSE: Complete response details test=Control characters in string fields status=500 statusText=Internal Server Error headers={..., \"content-type\": \"text/html; charset=utf-8\", ...} bodyRaw=<!DOCTYPE html>...<pre>error: invalid byte sequence for encoding \"UTF8\": 0x00<br> \u00a0 \u00a0at /app/node_modules/pg-pool/index.js:45:11...</pre>...</html>\"\n\n**Summary:** \nThe test 'Control characters in string fields' sent a POST request with null bytes and other control characters in string fields of the JSON body. Instead of rejecting the request with a 422 Unprocessable Entity error, the server crashed and returned a 500 Internal Server Error. The response body was `text/html` and contained a detailed stack trace.\nLog Excerpt:\n\"2025/07/01 19:24:58 INFO running test test=Control characters in string fields\n2025/07/01 19:24:58 INFO response received status=500 statusText=Internal Server Error testPassed=true\n2025/07/01 19:24:58 INFO VERBOSE: Complete response details test=Control characters in string fields status=500 statusText=Internal Server Error headers={..., \"content-type\": \"text/html; charset=utf-8\", ...} bodyRaw=<!DOCTYPE html>...<pre>error: invalid byte sequence for encoding \"UTF8\": 0x00<br> \u00a0 \u00a0at /app/node_modules/pg-pool/index.js:45:11...</pre>...</html>\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Target the POST /ims/oneroster/rostering/v1p2/courses/ endpoint.\n2. The `sourcedId` field in the request body is defined as `type: string`.\n3. Send a request where string fields such as `sourcedId` contain null byte characters (e.g., `\\u0000`).\n4. The API returns a 500 Internal Server Error instead of a 4xx client error.\n5. The response body is `text/html` and contains a full stack trace, leaking internal application structure and technologies used.\n\nCurl command (EXACT command from test logs):\n\n```bash\ncurl -X POST \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"course\": {\n    \"sourcedId\": \"course\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\",\n    \"status\": \"active\",\n    \"title\": \"Test\\u0007\\b\\t\\n\\u000b\\f\\r\",\n    \"courseCode\": \"\\u001b[31mRed\\u001b[0m\",\n    \"org\": {\n      \"sourcedId\": \"org123\"\n    }\n  }\n}'\n\n**Expected:** \nThe API should properly sanitize or reject input containing null bytes. According to the OpenAPI specification, if the data is invalid, the server should return a 422 Unprocessable Entity response with a JSON body matching the `UnprocessableEntityResponse` schema. It should never crash or leak stack traces.\nRelevant OpenAPI Spec (for error response):\n```yaml\n'422':\n  description: Unprocessable Entity / Validation Error\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/UnprocessableEntityResponse'\n```\n\n**Environment:** Test Name: Control characters in string fields\nTest Logs: 2025/07/01 19:24:58\nAPI Endpoint: /ims/oneroster/rostering/v1p2/courses/\nOpenAPI Spec Path: paths./ims/oneroster/rostering/v1p2/courses/.post.responses.422\n**Additional Notes:** This is a severe vulnerability. The unhandled exception on null byte injection indicates a lack of input sanitization at a fundamental level. The stack trace leak exposes internal file paths (`/app/node_modules/pg-pool/index.js`), libraries (`drizzle-orm`, `node-postgres`), and application logic (`CoursesService.postCourse`), which significantly aids attackers in mapping the application's internals for further exploitation. This vulnerability could be used to cause a denial-of-service condition and gather intelligence for more sophisticated attacks. The issue was reproduced with a second test, 'Multiple null bytes in different string fields', confirming it's a systemic problem.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-02T00:31:19.245Z",
    "updatedAt": "2025-07-03T05:27:04.075Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-559/critical-500-internal-server-error-and-stack-trace-leak-on-null-byte"
  },
  {
    "id": "cc8fe94a-5e5f-424b-aaad-1be0ce0b84e1",
    "identifier": "BUG-558",
    "title": "CLR Incorrect Version Path Handling",
    "description": "**Reporter:** Christopher Vidic (christopher.vidic@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The CLR API responds with 401 to non-existent version paths (v1p0) instead of returning 404, indicating the endpoint exists but is unauthorized rather than not found\n\n**Summary:** \nThe CLR API responds with 401 to non-existent version paths (v1p0) instead of returning 404, indicating the endpoint exists but is unauthorized rather than not found\n\n**Steps to Reproduce:**\n\n1. Execute: curl -X GET [https://api.alpha-1edtech.com/ims/clr/v1p0/credentials](https://api.alpha-1edtech.com/ims/clr/v1p0/credentials) -H \"Accept: application/json\" -v\n2. Observe response status code\n3. Note that v1p0 is not a valid CLR version\n\nOutput:\n\nHTTP/2 401\ncontent-type: application/json; charset=utf-8\ncontent-length: 244\n\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"No authorization token was found\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[{\n      \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n      \"imsx_codeMinorFieldValue\": \"unauthorisedrequest\"\n    }\\]\n  }\n}\n\n**Expected:** \nHTTP/1.1 404 Not Found\nContent-Type: application/json\n\n{\n  \"errors\": \\[{\n    \"code\": \"404\",\n    \"message\": \"Version v1p0 not supported\",\n    \"target\": \"version\"\n  }\\]\n}\n\n**Environment:** Environment: Production\nAPI Base: [https://api.alpha-1edtech.com](https://api.alpha-1edtech.com)\nStatus: VERIFIED\nImpact: Confuses developers about supported versions\nSpec Ref: CLR v2.0 only\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T21:32:15.885Z",
    "updatedAt": "2025-07-02T01:45:42.598Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-558/clr-incorrect-version-path-handling"
  },
  {
    "id": "8975c9b9-dbbf-4b11-87fb-0b8dcac8a0ce",
    "identifier": "BUG-557",
    "title": "500 Error on GET /schools/{id}/classes/{id}/teachers with non-UUID IDs",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when non-UUID strings are provided for schoolSourcedId and classSourcedId.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when non-UUID strings are provided for schoolSourcedId and classSourcedId.\n\n**Steps to Reproduce:**\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/123/classes/456/teachers](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/123/classes/456/teachers)' -H 'Authorization: Bearer YOUR_TOKEN'\n\n**Expected:** \nThe API should return a 400 Bad Request or 404 Not Found for invalid IDs. It should not crash.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T19:15:26.023Z",
    "updatedAt": "2025-07-03T20:05:39.850Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-557/500-error-on-get-schoolsidclassesidteachers-with-non-uuid-ids"
  },
  {
    "id": "4eb3d62e-4bd9-45dc-8067-6e999c327db7",
    "identifier": "BUG-556",
    "title": "500 Error on GET /users/{id}/demographics with VALID ID",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when requesting demographics for a valid, existing user ID. A perfectly valid request renders the endpoint completely unusable.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when requesting demographics for a valid, existing user ID. A perfectly valid request renders the endpoint completely unusable.\n\n**Steps to Reproduce:**\n\n# Step 1: Obtain any valid user ID from the users endpoint.\n\n# For example: f6650c2e-f903-4907-b469-14f85c6c5a1d\n\n# Step 2: Make a GET request to the demographics sub-resource for that valid user.\n\n# The server will crash.\n\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/users/f6650c2e-f903-4907-b469-14f85c6c5a1d/demographics](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/users/f6650c2e-f903-4907-b469-14f85c6c5a1d/demographics)' -H 'Authorization: Bearer YOUR_TOKEN'\n\n**Expected:** \nThe API should handle the request gracefully. It should return a 200 OK with the user's demographics object, or a 404 Not Found if no demographics exist for that user. It should never crash with a 500 error on a valid request.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T19:02:57.453Z",
    "updatedAt": "2025-07-03T20:05:39.850Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-556/500-error-on-get-usersiddemographics-with-valid-id"
  },
  {
    "id": "9e127fad-0b42-4a38-ac99-0bbe00d07d96",
    "identifier": "BUG-555",
    "title": "500 Error on GET /schools/{id}/classes/{id}/teachers with non-UUID IDs",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when non-UUID strings are provided for schoolSourcedId and classSourcedId.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when non-UUID strings are provided for schoolSourcedId and classSourcedId.\n\n**Steps to Reproduce:**\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/123/classes/456/teachers](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/123/classes/456/teachers)' -H 'Authorization: Bearer YOUR_TOKEN'\n\n**Expected:** \nThe API should return a 400 Bad Request or 404 Not Found for invalid IDs. It should not crash.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:49:24.808Z",
    "updatedAt": "2025-07-03T20:04:35.542Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-555/500-error-on-get-schoolsidclassesidteachers-with-non-uuid-ids"
  },
  {
    "id": "cdbecd32-76ae-4132-98ae-792fb7126a6d",
    "identifier": "BUG-554",
    "title": "500 Error on GET /CFPackages/{id}/groups with non-UUID ID",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Steps to Reproduce:**\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFPackages/123/groups](https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFPackages/123/groups)' -H 'Authorization: Bearer YOUR_TOKEN'\n\n**Expected:** \nThe API should return a 400 Bad Request for an invalid ID format or a 404 Not Found if the ID is valid but not found. It should not crash.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:47:36.646Z",
    "updatedAt": "2025-07-03T20:04:44.930Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-554/500-error-on-get-cfpackagesidgroups-with-non-uuid-id"
  },
  {
    "id": "a948c0cd-05ba-446c-b4a4-44fc0e1a5029",
    "identifier": "BUG-553",
    "title": "500 Error on GET /CFPackages with non-UUID ID",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Steps to Reproduce:**\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFPackages/123](https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFPackages/123)' -H 'Authorization: Bearer YOUR_TOKEN'\n\n**Expected:** \nThe API should return a 400 Bad Request for an invalid ID format or a 404 Not Found if the ID is valid but not found. It should not crash.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:45:38.707Z",
    "updatedAt": "2025-07-03T20:04:49.674Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-553/500-error-on-get-cfpackages-with-non-uuid-id"
  },
  {
    "id": "8eac9f4b-630d-4110-8cb7-364ef0ec7e66",
    "identifier": "BUG-552",
    "title": "500 Error on GET /CFItems with non-UUID ID",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Steps to Reproduce:**\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFItems/123](https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFItems/123)' -H 'Authorization: Bearer YOUR_TOKEN'\n\n**Expected:** \nThe API should return a 400 Bad Request for an invalid ID format or a 404 Not Found if the ID is valid but not found. It should not crash.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:43:40.735Z",
    "updatedAt": "2025-07-03T20:04:53.410Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-552/500-error-on-get-cfitems-with-non-uuid-id"
  },
  {
    "id": "9f343c6a-008b-4208-b012-cd936105f75c",
    "identifier": "BUG-551",
    "title": "500 Error on GET /CFDocuments with non-UUID ID",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Steps to Reproduce:**\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFDocuments/123](https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFDocuments/123)' -H 'Authorization: Bearer YOUR_TOKEN'\n\n**Expected:** \nThe API should return a 400 Bad Request for an invalid ID format or a 404 Not Found if the ID is valid but not found. It should not crash.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:40:12.076Z",
    "updatedAt": "2025-07-03T20:04:58.859Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-551/500-error-on-get-cfdocuments-with-non-uuid-id"
  },
  {
    "id": "d7cf5db6-794c-474d-b247-f0c5c43c6f04",
    "identifier": "BUG-550",
    "title": "500 Error on GET /CFAssociations with non-UUID ID",
    "description": "**Reporter:** Matthew Stanbrell (matthew.stanbrell@superbuilder.school)\n**API/Component:** CASE API\n**Bug Type:** The API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Summary:** \nThe API server crashes with a 500 Internal Server Error when a non-UUID string is provided as the {sourcedId} parameter.\n\n**Steps to Reproduce:**\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFAssociations/123](https://api.staging.alpha-1edtech.com/ims/case/v1p1/CFAssociations/123)' -H 'Authorization: Bearer YOUR_TOKEN'\n\n**Expected:** \nThe API should return a 400 Bad Request for an invalid ID format or a 404 Not Found if the ID is valid but not found. It should not crash.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-07-01T18:37:06.036Z",
    "updatedAt": "2025-07-03T20:05:39.593Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-550/500-error-on-get-cfassociations-with-non-uuid-id"
  },
  {
    "id": "7dc101b4-08c8-46e4-a486-d29007daf06a",
    "identifier": "BUG-549",
    "title": "QTI API: /assessment-items POST creates item with unexpected responseProcessing template",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Creating a QTI assessment item via the /assessment-items POST endpoint with a 'match_correct' responseProcessing template resulted in a successful 201 HTTP response. However, the created item's responseProcessing template was unexpectedly set to '[https://purl.imsglobal.org/spec/qti/v3p0/rptemplates/undefined.xml](https://purl.imsglobal.org/spec/qti/v3p0/rptemplates/undefined.xml)' instead of the specified 'match_correct'. This inconsistency may lead to incorrect assessment scoring and unreliable results\n\n**Summary:** \nCreating a QTI assessment item via the /assessment-items POST endpoint with a 'match_correct' responseProcessing template resulted in a successful 201 HTTP response. However, the created item's responseProcessing template was unexpectedly set to '[https://purl.imsglobal.org/spec/qti/v3p0/rptemplates/undefined.xml](https://purl.imsglobal.org/spec/qti/v3p0/rptemplates/undefined.xml)' instead of the specified 'match_correct'. This inconsistency may lead to incorrect assessment scoring and unreliable results\n\n**Steps to Reproduce:**\n\"1. Set up an authenticated connection to the QTI API using a valid X-API-Key.\",\n      \"2. Send a POST request to the /assessment-items endpoint with the following JSON payload:\",\n      \"`json\",       \"{\",       \"  \\\"identifier\\\": \\\"test-1751340640644\\\",\",       \"  \\\"title\\\": \\\"Test Item\\\",\",       \"  \\\"type\\\": \\\"choice\\\",\",       \"  \\\"responseProcessing\\\": {\",       \"    \\\"template\\\": \\\"match_correct\\\"\",       \"  },\",       \"  \\\"interaction\\\": {\",       \"    \\\"type\\\": \\\"choice\\\",\",       \"    \\\"responseIdentifier\\\": \\\"RESPONSE\\\"\",       \"  }\",       \"}\",       \"`\",\n      \"3. Observe the HTTP response status code (expecting 201 Created).\",\n      \"4. Examine the response body for the created assessment item. Verify the 'responseProcessing.template' field value.\",\n\n**Expected:** \nmatch openapi spec\n\n**Environment:**   - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\\\\n- **API Component**: QTI API\\\\n- **Endpoint**: `/assessment-items`\\\\n- **HTTP Method**: POST\\\\n- **Authentication**: X-API-Key\\\\n- **Content-Type**: application/json\\\\n- **Test Framework**: Bun + TypeScript test suite\\\\n- **Test Script**: exploit500Errors.ts\\\\n- **Client OS**: macOS\\\\n- **Node Runtime**: v22.6.0\",\n\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:32:54.974Z",
    "updatedAt": "2025-07-03T05:44:49.427Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-549/qti-api-assessment-items-post-creates-item-with-unexpected"
  },
  {
    "id": "0053e1ef-0022-4a66-8e5a-84d1a8a96145",
    "identifier": "BUG-548",
    "title": "QTI API /assessment-items: Missing Validation for Minimal Choice Interaction",
    "description": "**Reporter:** ameer alnseirat  (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** Creating a QTI assessment item with a 'choice' interaction type and no response options returns a 201 Created status instead of a validation error.  The API incorrectly creates an assessment item with an empty response declaration, leading to incomplete and unusable test content. This affects content creation and data integrity\n\n**Summary:** \nCreating a QTI assessment item with a 'choice' interaction type and no response options returns a 201 Created status instead of a validation error.  The API incorrectly creates an assessment item with an empty response declaration, leading to incomplete and unusable test content. This affects content creation and data integrity\n\n**Steps to Reproduce:**\n\"1. Set up authentication with a valid X-API-Key.\",\n      \"2. Send a POST request to the `/assessment-items` endpoint.\",\n      \"3. Include the following JSON payload in the request body:\",\n      \"`json\\n{ \\n  \\\"identifier\\\": \\\"test-1751340640643\\\",\\n  \\\"title\\\": \\\"Test Item\\\",\\n  \\\"type\\\": \\\"choice\\\",\\n  \\\"interaction\\\": {\\n    \\\"type\\\": \\\"choice\\\"\\n  }\\n}\\n`\",\n      \"4. Observe the HTTP response status code. It will be 201 Created instead of the expected 4xx error code.\",\n      \"5. Examine the response body. It will contain a newly created assessment item object with an empty `responseDeclarations` array, indicating the missing validation.\",\n      \"6. Attempt to use the created assessment item in a test; it will likely fail due to lack of response options.\"\n\n**Expected:** \nClear validation error\n\n**Environment:**  - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\\\\n- **API Component**: QTI API\\\\n- **Endpoint**: `/assessment-items`\\\\n- **HTTP Method**: POST\\\\n- **Authentication**: X-API-Key\\\\n- **Content-Type**: application/json\\\\n- **Test Framework**: Bun + TypeScript test suite\\\\n- **Test Script**: exploit500Errors.ts\\\\n- **Client OS**: macOS\\\\n- **Node Runtime**: v22.6.0\n\n**Additional Notes:** needs to match openapi spec",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:30:00.197Z",
    "updatedAt": "2025-07-02T01:26:51.504Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-548/qti-api-assessment-items-missing-validation-for-minimal-choice"
  },
  {
    "id": "ddfc7b65-1585-4a2f-b086-92bad88b9bcf",
    "identifier": "BUG-547",
    "title": "Low: Path '/ims/oneroster/rostering/v1p2/users/' contains a trailing slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the endpoint path with a trailing slash.\n\n**Summary:** \nThe local specification defines the endpoint path with a trailing slash.\n\n**Steps to Reproduce:**\n\n1. Review the path defined in the local spec: `/ims/oneroster/rostering/v1p2/users/`.\n2. Note the trailing slash at the end.\n3. Review the upstream JSON spec. The `basePath` is `/ims/oneroster/rostering/v1p2` and the relevant path key is `/users`.\n4. The combined upstream path is `/ims/oneroster/rostering/v1p2/users`, with no trailing slash.\n\n**Expected:** \nThe endpoint path should not have a trailing slash, to be consistent with the upstream specification. While many web frameworks handle this automatically, it is a deviation from the official path definition.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/users/\nLocal Spec: ims/oneroster/rostering/v1p2/users/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a minor inconsistency but can cause issues with client libraries or tools that perform strict URL matching. Adhering to the exact path structure defined in the specification is best practice.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:28:39.396Z",
    "updatedAt": "2025-07-02T01:26:44.774Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-547/low-path-imsonerosterrosteringv1p2users-contains-a-trailing-slash"
  },
  {
    "id": "23af7959-2790-479f-a2d3-a3678cfa8fed",
    "identifier": "BUG-546",
    "title": "QTI API /assessment-items Endpoint: Missing Required Fields in Response",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The /assessment-items endpoint's checkRequiredFields operation failed schema validation due to missing required fields in the response.  Specifically,  `qti-response-declaration.baseType`, `qti-outcome-declaration[0].baseType`, and `qti-outcome-declaration[1].baseType` were absent. This prevents proper assessment item processing and can lead to incorrect assessment results or application crashes\n\n**Summary:** \nThe /assessment-items endpoint's checkRequiredFields operation failed schema validation due to missing required fields in the response.  Specifically,  `qti-response-declaration.baseType`, `qti-outcome-declaration[0].baseType`, and `qti-outcome-declaration[1].baseType` were absent. This prevents proper assessment item processing and can lead to incorrect assessment results or application crashes\n\n**Steps to Reproduce:**\n\"1. Send a GET request to the `/assessment-items` endpoint with an empty JSON payload: `{}`\",\n      \"2.  Observe the API response. The response will contain an error indicating missing required fields.\",\n      \"3. Verify the error details match the following structure and missing fields: \",\n      \"`json\\n{\\n  \\\"itemIdentifier\\\": \\\"incept-1fde9428-f561-4758-8176-1ee3353ee42c\\\",\\n  \\\"missingFields\\\": [\\n    \\\"qti-response-declaration.baseType\\\",\\n    \\\"qti-outcome-declaration[0].baseType\\\",\\n    \\\"qti-outcome-declaration[1].baseType\\\"\\n  ],\\n  \\\"actualStructure\\\": { ... } \\n}\\n`\",\n      \"4.  The `actualStructure` will show the partially-formed QTI assessment item lacking the specified `baseType` attributes. Note that the `actualStructure` may vary based on the generated item, but the three `baseType` attributes will consistently be missing.\",\n      \"5. This bug impacts the ability to correctly process and validate QTI assessment items. Consequently, it could cause system instability or display inaccurate assessment results, disrupting the grading and feedback mechanisms within the application.\"\n\n**Expected:** \nAll required fields per OpenAPI should be present\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\\\\n- **API Component**: QTI API\\\\n- **Endpoint**: `/assessment-items`\\\\n- **HTTP Method**: POST\\\\n- **Authentication**: X-API-Key\\\\n- **Content-Type**: application/json\\\\n- **Test Framework**: Bun + TypeScript test suite\\\\n- **Test Script**: schemaDiscovery.ts\\\\n- **Client OS**: macOS\\\\n- **Node Runtime**: v22.6.0\"\n**Additional Notes:** doesn't match openapi spec",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:28:39.286Z",
    "updatedAt": "2025-07-03T05:44:45.119Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-546/qti-api-assessment-items-endpoint-missing-required-fields-in-response"
  },
  {
    "id": "64599656-265f-437a-8d49-3f3f98e3406a",
    "identifier": "BUG-545",
    "title": "The QTI API endpoint `/assessment-items`, when called with an empty request body (`{}`), returns a response that fails schema validation. The response contains multiple `invalid_type` errors indicating that expected arrays are received as objects and required string fields (`baseType`) are missing within `qti-outcome-declaration` objects. This prevents downstream systems from correctly processing the assessment item data, impacting the functionality of applications relying on this API for assessment data.",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The QTI API endpoint `/assessment-items`, when called with an empty request body (`{}`),  returns a response that fails schema validation.  The response contains multiple `invalid_type` errors indicating that expected arrays are received as objects and required string fields (`baseType`) are missing within `qti-outcome-declaration` objects. This prevents downstream systems from correctly processing the assessment item data, impacting the functionality of applications relying on this API for assessment data.\n\n**Summary:** \nThe QTI API endpoint `/assessment-items`, when called with an empty request body (`{}`),  returns a response that fails schema validation.  The response contains multiple `invalid_type` errors indicating that expected arrays are received as objects and required string fields (`baseType`) are missing within `qti-outcome-declaration` objects. This prevents downstream systems from correctly processing the assessment item data, impacting the functionality of applications relying on this API for assessment data.\n\n**Steps to Reproduce:**\n\"1. Send a POST request to the `/assessment-items` endpoint.\",\n      \"2. Ensure the request body is an empty JSON object: `{}`.\",\n      \"3. Observe the API response.  The response will contain a schema validation error.\",\n      \"4. Examine the error details. Multiple errors with the code `invalid_type` will be present.  Examples include:\",\n      \"   - `\\\"message\\\": \\\"Expected array, received object\\\"` indicating that `qti-response-declaration` is an object instead of an array.\",\n      \"   - `\\\"message\\\": \\\"Required\\\"` indicating that the `baseType` attribute within `qti-outcome-declaration` objects is missing.\",\n      \"5. The specific paths within the response where errors are encountered are indicated by the `path` field in the error details and will be similar to: `[\\\"items\\\", 0, \\\"content\\\", \\\"qti-assessment-item\\\", \\\"qti-response-declaration\\\"]` or `[\\\"items\\\", 0, \\\"content\\\", \\\"qti-assessment-item\\\", \\\"qti-outcome-declaration\\\", 0, \\\"_attributes\\\", \\\"baseType\\\"]`.\"\n\n**Expected:** \nAPI response should match the documented OpenAPI schema\n\n**Environment:**   - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\\\\n- **API Component**: QTI API\\\\n- **Endpoint**: `/assessment-items`\\\\n- **HTTP Method**: POST\\\\n- **Authentication**: X-API-Key\\\\n- **Content-Type**: application/json\\\\n- **Test Framework**: Bun + TypeScript test suite\\\\n- **Test Script**: schemaDiscovery.ts\\\\n- **Client OS**: macOS\\\\n- **Node Runtime**: v22.6.0\n\n**Additional Notes:** validation errors with openapi schema",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:26:38.722Z",
    "updatedAt": "2025-07-02T01:26:38.952Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-545/the-qti-api-endpoint-assessment-items-when-called-with-an-empty"
  },
  {
    "id": "e31850ac-f0a4-4b4c-b7cd-4d32cab401e1",
    "identifier": "BUG-544",
    "title": "CRITICAL: Incorrect response structure for collection endpoints",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns collection results wrapped in a JSON object that includes pagination metadata in the body (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`).\n\n**Summary:** \nThe local implementation returns collection results wrapped in a JSON object that includes pagination metadata in the body (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`).\n\n**Steps to Reproduce:**\n\n1. Make a `GET` request to the `/ims/oneroster/rostering/v1p2/users/` endpoint.\n2. Inspect the JSON response body.\n3. Observe that the body is a wrapper object containing a `users` array along with pagination fields like `totalCount`, `offset`, and `limit`.\n4. Inspect the response headers. Note the absence of the `X-Total-Count` header.\n\n```bash\n# Request\ncurl -v -X GET https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/users/ \\\n-H \"Authorization: Bearer $TOKEN\"\n\n# Expected Response Header for total count:\n# < X-Total-Count: 1234\n\n# Actual Response Body structure:\n# { \"users\": [...], \"totalCount\": 1234, \"pageCount\": ..., \"pageNumber\": ..., \"offset\": ..., \"limit\": ... }\n```\n\n**Expected:** \nThe official OneRoster specification dictates that collection endpoints (`GET /users`) should return a response body containing only the array of objects (e.g., `{\"users\": [...]}`). The total number of records MUST be returned in the `X-Total-Count` HTTP header.\n\nEvidence from `oneroster.rostering.upstream.json` for `GET /users`:\nThe `200` response schema is `#/definitions/UserSetDType`, which is `{\"properties\": {\"users\": ...}}`.\nThe `200` response also defines a header:\n\n```json\n\"headers\": {\n    \"X-Total-Count\": {\n        \"description\": \"The total number of resources that are available to be returned\",\n        \"type\": \"integer\"\n    }\n}\n```\n\nThe local implementation's use of a response wrapper with body-based pagination metadata is a severe deviation from the standard.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/users/\nLocal Spec: ims/oneroster/rostering/v1p2/users/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This structural deviation breaks the contract for how clients handle pagination and process collection responses. A standard client would look for the `X-Total-Count` header and expect the root of the JSON payload to contain the `users` array, leading to parsing failures.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:26:11.577Z",
    "updatedAt": "2025-07-02T13:46:34.687Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-544/critical-incorrect-response-structure-for-collection-endpoints"
  },
  {
    "id": "de674760-3607-408d-9c6c-3c70bc58cd03",
    "identifier": "BUG-543",
    "title": "QTI API: searchAssessmentTests returns invalid data structure",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `/assessment-tests` endpoint's `searchAssessmentTests` operation failed data validation despite returning a 200 OK status code.  The response contained unexpected data structures in the `items` array, specifically within the `content.qti-assessment-test.qti-test-part` and `content.qti-assessment-test.qti-outcome-declaration` fields. This prevents proper processing of the assessment test data by downstream systems, potentially affecting the delivery and grading of assessments.\n\n**Summary:** \nThe `/assessment-tests` endpoint's `searchAssessmentTests` operation failed data validation despite returning a 200 OK status code.  The response contained unexpected data structures in the `items` array, specifically within the `content.qti-assessment-test.qti-test-part` and `content.qti-assessment-test.qti-outcome-declaration` fields. This prevents proper processing of the assessment test data by downstream systems, potentially affecting the delivery and grading of assessments.\n\n**Steps to Reproduce:**\n\"1. Send a GET request to the `/assessment-tests` endpoint.\",\n      \"2. Include the following JSON payload in the request body:\",\n      \"`json\\n{\\n  \\\"limit\\\": \\\"2\\\"\\n}\\n`\",\n      \"3. Observe the API response.  Although the status code is 200 OK, the response will fail JSON schema validation.\",\n      \"4. Examine the response body.  The `items` array will contain objects with malformed `qti-test-part` and `qti-outcome-declaration` fields. These fields are expected to be arrays but are returned as objects or undefined causing errors such as: \"Expected array, received object\" and \"Required\".\",\n      \"5. The following error will be logged: `ResponseValidationError` with a root cause of `ZodError` containing multiple `invalid_type` errors detailed in the bug report's error details section.\"\n\n**Expected:** \nAPI call should succeed without validation errors\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\\\\n- **API Component**: QTI API\\\\n- **Endpoint**: `/assessment-tests`\\\\n- **HTTP Method**: POST\\\\n- **Authentication**: X-API-Key\\\\n- **Content-Type**: application/json\\\\n- **Test Framework**: Bun + TypeScript test suite\\\\n- **Test Script**: testAssessmentTestsList.ts\\\\n- **Client OS**: macOS\\\\n- **Node Runtime**: v22.6.0\n**Additional Notes:** validation errors with qti openapi spec",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:24:55.299Z",
    "updatedAt": "2025-07-02T01:26:01.028Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-543/qti-api-searchassessmenttests-returns-invalid-data-structure"
  },
  {
    "id": "a5cb4b60-cbe8-4914-87e5-a6a0d102e17b",
    "identifier": "BUG-542",
    "title": "QTI API `/assessment-items` search returns invalid baseType",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `/assessment-items` endpoint's `searchAssessmentItems` operation failed validation despite a 200 OK status code.  The response contained assessment items with `baseType` fields set to `undefined` within `responseDeclarations` and `outcomeDeclarations`, causing a `ResponseValidationError` with multiple `invalid_type` errors. This prevents proper processing of the returned assessment items and impacts the functionality of any application consuming this API.\n\n**Summary:** \nThe `/assessment-items` endpoint's `searchAssessmentItems` operation failed validation despite a 200 OK status code.  The response contained assessment items with `baseType` fields set to `undefined` within `responseDeclarations` and `outcomeDeclarations`, causing a `ResponseValidationError` with multiple `invalid_type` errors. This prevents proper processing of the returned assessment items and impacts the functionality of any application consuming this API.\n\n**Steps to Reproduce:**\n\"1. Send a GET request to the `/assessment-items` endpoint.\",\n      \"2. Include the following JSON payload in the request body: `{\\\"limit\\\": \\\"2\\\"}`\",\n      \"3. Observe the API response.  While the status code is 200 OK, the response body will fail validation due to the presence of `undefined` values for the `baseType` property in the `responseDeclarations` and `outcomeDeclarations` objects within the returned assessment items.\",\n      \"4. Examine the response body for the `invalid_type` errors within the `ResponseValidationError` and `ZodError` objects.  The error paths will indicate the location of the invalid `baseType` values (e.g., `path\\\": [\\\"items\\\", 0, \\\"content\\\", \\\"qti-assessment-item\\\", \\\"qti-response-declaration\\\", 0, \\\"_attributes\\\", \\\"baseType\\\"]`).\",\n      \"5. Verify the `baseType` property is undefined for at least two assessment items.\"\n\n**Expected:** \nAPI call should succeed without errors\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\n\n* **API Component**: QTI API\n* **Endpoint**: `/assessment-items`\n* **HTTP Method**: POST\n* **Authentication**: X-API-Key\n* **Content-Type**: application/json\n* **Test Framework**: Bun + TypeScript test suite\n* **Test Script**: testAssessmentItemsList.ts\n* **Client OS**: macOS\n* **Node Runtime**: v22.6.0\n  **Additional Notes:** testing with qti sdk generated with speakeasy from timeback qti openapi spec",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:22:42.845Z",
    "updatedAt": "2025-07-02T01:21:53.940Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-542/qti-api-assessment-items-search-returns-invalid-basetype"
  },
  {
    "id": "c54075da-29cc-455b-a3ce-347f3dd26d4b",
    "identifier": "BUG-541",
    "title": "Critical: Incorrect Response Body Structure for GET /users/{userSourcedId}/classes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that a successful (200 OK) response is wrapped in a custom object containing pagination metadata alongside the data array. The structure is:\n`{ \"classes\": [...], \"totalCount\": ..., \"pageCount\": ..., \"pageNumber\": ..., \"offset\": ..., \"limit\": ... }`\n\n**Summary:** \nThe local specification indicates that a successful (200 OK) response is wrapped in a custom object containing pagination metadata alongside the data array. The structure is:\n`{ \"classes\": [...], \"totalCount\": ..., \"pageCount\": ..., \"pageNumber\": ..., \"offset\": ..., \"limit\": ... }`\n\n**Steps to Reproduce:**\n\n1. Make a successful GET request to the endpoint.\n2. Observe the structure of the JSON response body.\n\n```bash\n# Note: Replace {userSourcedId} with a valid ID\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/users/{userSourcedId}/classes\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification, the response body for a collection of classes should conform to the `ClassSetDType` definition. This is a simple object containing only one key, `classes`, which holds the array of class objects. The expected structure is:\n`{ \"classes\": [...] }`\n\nEvidence from upstream JSON spec (`oneroster.rostering.upstream.json`):\nThe `200` response for `GET /users/{userSourcedId}/classes` specifies `\"$ref\": \"#/definitions/ClassSetDType\"`.\nThe `ClassSetDType` is defined as:\n\n```json\n\"ClassSetDType\": {\n  \"description\": \"This is the container for a collection of classes instances...\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"classes\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/ClassDType\"\n      }\n    }\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/users/{userSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/users/{userSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation from the OneRoster specification. The entire response body structure is non-compliant, which will break any client implementation that correctly follows the official specification. The local implementation has introduced a custom pagination wrapper in the response body, which is incorrect.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:22:42.544Z",
    "updatedAt": "2025-07-03T05:37:15.526Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-541/critical-incorrect-response-body-structure-for-get"
  },
  {
    "id": "bf8d7bcf-7491-4851-90f3-5b4580917271",
    "identifier": "BUG-540",
    "title": "QTI API: /stimuli POST request fails with empty payload",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The QTI API's `/stimuli` endpoint failed to create a test stimulus when a blank JSON payload was submitted during the `createTestStimulus` operation within the `testStimulusCrud` test.  The API returned an error, but no error code or message was provided in the response. This prevents the creation of new stimuli and impacts test creation functionality\n\n**Summary:** \nThe QTI API's `/stimuli` endpoint failed to create a test stimulus when a blank JSON payload was submitted during the `createTestStimulus` operation within the `testStimulusCrud` test.  The API returned an error, but no error code or message was provided in the response. This prevents the creation of new stimuli and impacts test creation functionality\n\n**Steps to Reproduce:**\n\"1. Access the QTI API endpoint: `/stimuli` using a POST request.\",\n      \"2. Send an empty JSON payload in the request body: `{}`\",\n      \"3. Observe the API response.  The request should fail.\",\n      \"4. Inspect the API response for error codes and messages (currently none are present).\",\n      \"5. Note that no stimulus is created in the system.\"\n\n**Expected:** \nAPI call should succeed without errors\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\n\n* **API Component**: QTI API\n* **Endpoint**: `/stimuli`\n* **HTTP Method**: POST\n* **Authentication**: X-API-Key\n* **Content-Type**: application/json\n* **Test Framework**: Bun + TypeScript test suite\n* **Test Script**: testStimulusCrud.ts\n* **Client OS**: macOS\n* **Node Runtime**: v22.6.0\n  **Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:21:02.737Z",
    "updatedAt": "2025-07-02T01:25:30.307Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-540/qti-api-stimuli-post-request-fails-with-empty-payload"
  },
  {
    "id": "ffd578be-f1d8-494b-9e1e-c43628ea024e",
    "identifier": "BUG-539",
    "title": "Invalid Schema for `org` Object in PUT Request Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The request body for `PUT /users/{sourcedId}` defines the `user.roles.org` object as containing only a single required field: `sourcedId`.\n\n**Summary:** \nThe request body for `PUT /users/{sourcedId}` defines the `user.roles.org` object as containing only a single required field: `sourcedId`.\n\n**Steps to Reproduce:**\n\n1. Attempt to send a PUT request to update a user's role.\n\n   ```bash\n   # This request is based on the upstream spec and will fail validation against the local spec's definition\n   curl -X PUT https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/users/some-id \\\n   -H \"Authorization: Bearer $TOKEN\" \\\n   -H \"Content-Type: application/json\" \\\n   -d '{ \"user\": { \"roles\": [ { \"roleType\": \"primary\", \"role\": \"student\", \"org\": { \"href\": \"https://...\", \"sourcedId\": \"org-id\", \"type\": \"org\" } } ] } }'\n   ```\n   2. The local spec expects only `sourcedId` inside the `org` object, not `href` and `type`.\n\n**Expected:** \nThe `user.roles.org` field in the standard `UserDType` points to `OrgGUIDRefDType`. The `OrgGUIDRefDType` is an object that requires three fields: `href`, `sourcedId`, and `type`. While a write operation might accept a simplified reference, this schema is inconsistent with the object model it's based on. A more compliant approach for a write operation would be to only require `sourcedId`, but the local implementation fails to reflect that this is a simplified version of the full `OrgGUIDRefDType` object and is also inconsistent with its own GET response which returns all three fields. The most correct interpretation is that the request body is simply invalid as it does not conform to the `OrgGUIDRefDType` which is required for the `org` property of a `RoleDType`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/users/{sourcedId}\n      Local Spec: ims/oneroster/rostering/v1p2/users/{sourcedId}.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The request body schema for this nested object is incomplete and invalid against the data model defined in the standard. It omits fields (`href`, `type`) that are required by the `OrgGUIDRefDType`. This makes it impossible for a client to construct a valid request based on the standard models.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:20:28.847Z",
    "updatedAt": "2025-07-02T01:25:18.705Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-539/invalid-schema-for-org-object-in-put-request-body"
  },
  {
    "id": "fc5edd8f-0f22-4cc4-bd6e-0fd13857b5b0",
    "identifier": "BUG-538",
    "title": "QTI API: searchAssessmentTests returns invalid data",
    "description": "**Reporter:** Ameer Alnseirat  (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `/assessment-tests` endpoint, when called with `searchAssessmentTests` operation and a `limit` of 2,  returned a 200 OK status code but with an invalid JSON response.  The response caused a `ResponseValidationError` due to unexpected data types in the `qti-test-part` and `qti-outcome-declaration` fields of the returned assessment tests. This prevents correct processing of assessment test data by consumers of the API.  Specifically, `ZodError` reported `invalid_type` errors:  unexpected object where an array was expected in `qti-test-part` and undefined where an array was expected in `qti-outcome-declaration`.\n\n**Summary:** \nThe `/assessment-tests` endpoint, when called with `searchAssessmentTests` operation and a `limit` of 2,  returned a 200 OK status code but with an invalid JSON response.  The response caused a `ResponseValidationError` due to unexpected data types in the `qti-test-part` and `qti-outcome-declaration` fields of the returned assessment tests. This prevents correct processing of assessment test data by consumers of the API.  Specifically, `ZodError` reported `invalid_type` errors:  unexpected object where an array was expected in `qti-test-part` and undefined where an array was expected in `qti-outcome-declaration`.\n\n**Steps to Reproduce:**\n\"1. Send a GET request to the `/assessment-tests` endpoint.\",\n      \"2. Include the query parameter `limit=2`.\",\n      \"3. Ensure the request includes appropriate authentication headers (if required by the API).\",\n      \"4. Observe the response status code (it should be 200 OK).\",\n      \"5. Validate the JSON response structure. It will fail validation with a `ResponseValidationError` and a nested `ZodError`.\",\n      \"6. Examine the `ZodError` details for the specific `invalid_type` issues, which will pinpoint unexpected object type in paths like:  `items[0].content.qti-assessment-test.qti-test-part` and `items[0].content.qti-assessment-test.qti-outcome-declaration` (and similarly for `items[1]`). The messages will indicate 'Expected array, received object' and 'Required'.\"\n\n**Expected:** \nAPI call should succeed without errors\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\n\n* **API Component**: QTI API\n* **Endpoint**: `/assessment-tests`\n* **HTTP Method**: POST\n* **Authentication**: X-API-Key\n* **Content-Type**: application/json\n* **Test Framework**: Bun + TypeScript test suite\n* **Test Script**: testAssessmentTestsList.ts\n* **Client OS**: macOS\n* **Node Runtime**: v22.6.0\",\n  **Additional Notes:** testing thorugh QTI sdk created from timeback qti openapi spec",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:19:25.958Z",
    "updatedAt": "2025-07-02T01:25:08.985Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-538/qti-api-searchassessmenttests-returns-invalid-data"
  },
  {
    "id": "1a98ccc3-57d1-4642-bae0-a00207886d80",
    "identifier": "BUG-537",
    "title": "QTI API /assessment-items searchAssessmentItems: Response Validation Error",
    "description": "**Reporter:** ameer alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The `/assessment-items` endpoint's `searchAssessmentItems` operation failed response validation despite a 200 OK status code.  The API returned a JSON response containing assessment items, but the response schema validation failed due to missing or invalid `baseType` attributes within  `responseDeclarations` and `outcomeDeclarations` of multiple returned items, as well as a missing `qti-assessment-stimulus-ref` in one of the returned items.  This prevents correct processing of the returned assessment items and impacts the functionality of any application relying on this API for retrieving assessment content\n\n**Summary:** \nThe `/assessment-items` endpoint's `searchAssessmentItems` operation failed response validation despite a 200 OK status code.  The API returned a JSON response containing assessment items, but the response schema validation failed due to missing or invalid `baseType` attributes within  `responseDeclarations` and `outcomeDeclarations` of multiple returned items, as well as a missing `qti-assessment-stimulus-ref` in one of the returned items.  This prevents correct processing of the returned assessment items and impacts the functionality of any application relying on this API for retrieving assessment content\n\n**Steps to Reproduce:**\n\"1. Send a GET request to the `/assessment-items` endpoint.\",\n\n\"2. Include the following JSON payload in the request body:\",\n      \"`json\\n{\\n  \\\"limit\\\": \\\"2\\\"\\n}\\n`\",\n\n\"3. Observe the API response.  The status code will be 200 OK, but the response will include the following error structure in the response body (or a similar structure reflecting the missing/invalid 'baseType' and/or missing 'qti-assessment-stimulus-ref'):\",\n      \"`json\\n{\\n  \\\"statusCode\\\": 200,\\n  \\\"body\\\": { ... },\\n  \\\"headers\\\": { ... },\\n  \\\"contentType\\\": \\\"application/json; charset=utf-8\\\",\\n  \\\"rawResponse\\\": {},\\n  \\\"name\\\": \\\"ResponseValidationError\\\",\\n  \\\"cause\\\": {\\n    \\\"issues\\\": [\\n      {\\n        \\\"code\\\": \\\"invalid_type\\\",\\n        \\\"expected\\\": \\\"string\\\",\\n        \\\"received\\\": \\\"undefined\\\",\\n        \\\"path\\\": [...],\\n        \\\"message\\\": \\\"Required\\\"\\n      },\\n      ...\\n    ],\\n    \\\"name\\\": \\\"ZodError\\\"\\n  },\\n  \\\"rawValue\\\": { ... }\\n}\\n`\",\n\n\"4. Examine the `cause.issues` array within the error response.  It will list multiple `invalid_type` errors indicating that expected `baseType` attributes are missing or invalid within the response data's nested structure for several returned assessment items. Additionally it will detail a missing `qti-assessment-stimulus-ref` object.\"\n\n**Expected:** \nAPI call should succeed without errors\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\n\n* **API Component**: QTI API\n* **Endpoint**: `/assessment-items`\n* **HTTP Method**: POST\n* **Authentication**: X-API-Key\n* **Content-Type**: application/json\n* **Test Framework**: Bun + TypeScript test suite\n* **Test Script**: testAssessmentItemsList.ts\n* **Client OS**: macOS\n* **Node Runtime**: v22.6.0\n  **Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:17:30.857Z",
    "updatedAt": "2025-07-02T01:25:00.291Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-537/qti-api-assessment-items-searchassessmentitems-response-validation"
  },
  {
    "id": "119b25ea-7b10-490a-9ada-f2b715cdb199",
    "identifier": "BUG-536",
    "title": "QTI API /assessment-items searchAssessmentItems: Schema Validation Errors",
    "description": "**Reporter:** Ameer Alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** QTI API\n**Bug Type:** The QTI API endpoint `/assessment-items` with `searchAssessmentItems` operation returned a 200 OK status code, but the response body failed schema validation.  Multiple `invalid_enum_value` and `invalid_type` errors were reported by the validation layer, impacting the ability to correctly process assessment items.  This directly affects any client application consuming the API that relies on the documented schema, leading to data processing errors and potential application malfunctions\n\n**Summary:** \nThe QTI API endpoint `/assessment-items` with `searchAssessmentItems` operation returned a 200 OK status code, but the response body failed schema validation.  Multiple `invalid_enum_value` and `invalid_type` errors were reported by the validation layer, impacting the ability to correctly process assessment items.  This directly affects any client application consuming the API that relies on the documented schema, leading to data processing errors and potential application malfunctions\n\n**Steps to Reproduce:**\n\"1. Send a GET request to the `/assessment-items` endpoint.\",\n      \"2. Use the `searchAssessmentItems` operation.\",\n      \"3. Ensure the request body is an empty JSON object: `{}`.\",\n      \"4. Observe the HTTP response status code.  It will be 200 OK.\",\n      \"5. Validate the response body against the documented OpenAPI schema. This validation will fail, yielding errors like these:\",\n      \"  - `invalid_enum_value`: 'gap-match' is not a valid value for the 'type' field.  Valid values include 'choice', 'text-entry', etc.\",\n      \"  - `invalid_type`: Expected 'object' for 'responseProcessing', received 'undefined'.\",\n      \"  -  Numerous other `invalid_type` errors indicating missing or incorrectly typed fields within the 'items' array elements, specifically within the 'content' property and its nested QTI elements.\",\n      \"6. Examine the detailed error response for the complete list of validation errors. The `cause.issues` array within the error response contains full details of each schema violation.\"\n\n**Expected:** \nAPI response should match the documented OpenAPI schema\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\n\n* **API Component**: QTI API\n* **Endpoint**: `/assessment-items`\n* **HTTP Method**: POST\n* **Authentication**: X-API-Key\n* **Content-Type**: application/json\n* **Test Framework**: Bun + TypeScript test suite\n* **Test Script**: testAssessmentItemsList.ts\n* **Client OS**: macOS\n* **Node Runtime**: v22.6.0\n  **Additional Notes:** blocks normal workflow",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:15:26.159Z",
    "updatedAt": "2025-07-02T01:26:26.710Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-536/qti-api-assessment-items-searchassessmentitems-schema-validation"
  },
  {
    "id": "f0163d3a-2663-4786-b90f-60bf2352a8e1",
    "identifier": "BUG-535",
    "title": "Multiple Schema Deviations in the 'Term' Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The term object returned by the local implementation has multiple schema violations when compared to the official `AcademicSessionDType`:\n\n1. The `children` field is missing.\n2. The `startDate` field is defined as a simple `string` without the required `format: date`.\n3. The `endDate` field is defined as a simple `string` without the required `format: date`.\n4. The `schoolYear` field has an incorrect data type of `number` instead of `string`.\n5. An extraneous, non-compliant `org` field is present in the object.\n\n**Summary:** \nThe term object returned by the local implementation has multiple schema violations when compared to the official `AcademicSessionDType`:\n\n1. The `children` field is missing.\n2. The `startDate` field is defined as a simple `string` without the required `format: date`.\n3. The `endDate` field is defined as a simple `string` without the required `format: date`.\n4. The `schoolYear` field has an incorrect data type of `number` instead of `string`.\n5. An extraneous, non-compliant `org` field is present in the object.\n\n**Steps to Reproduce:**\n\n1. Execute a request to the `GET /ims/oneroster/rostering/v1p2/terms/` endpoint.\n2. Inspect the schema of an individual term object within the `terms` array of the response.\n3. Compare the fields and their data types against the `AcademicSessionDType` defined in the upstream specifications.\n\n**Expected:** \nThe response object for a term must strictly conform to the `AcademicSessionDType` definition.\n\n1. A `children` field, which is an array of `AcadSessionGUIDRefDType`, must be present (it can be an empty array). Upstream spec: `multiplicity: [0..unbounded]`.\n2. `startDate` must be a `string` with `format: date`. Upstream spec: `\"format\": \"date\"`.\n3. `endDate` must be a `string` with `format: date`. Upstream spec: `\"format\": \"date\"`.\n4. `schoolYear` must be a `string` representing the year in 'YYYY' format. Upstream spec: `\"type\": \"string\"`, description: `\"This is in the [ISO 8601] format of 'YYYY'.\"`\n5. The `org` field should not be present in the `AcademicSessionDType`. This field belongs to other objects like `Course`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/terms/\nLocal Spec: ims/oneroster/rostering/v1p2/terms/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** These schema deviations render the implementation non-compliant. Missing fields, incorrect data types, and extraneous fields will cause parsing errors and data corruption for any client adhering to the official OneRoster specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:12:30.604Z",
    "updatedAt": "2025-07-02T01:20:47.828Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-535/multiple-schema-deviations-in-the-term-response-object"
  },
  {
    "id": "5feeff97-3e68-4925-8070-1280c6b80894",
    "identifier": "BUG-534",
    "title": "Path Mismatch due to Extraneous Trailing Slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the path for getting all terms with a trailing slash: `/ims/oneroster/rostering/v1p2/terms/`.\n\n**Summary:** \nThe local specification defines the path for getting all terms with a trailing slash: `/ims/oneroster/rostering/v1p2/terms/`.\n\n**Steps to Reproduce:**\n\n1. Observe the path definition in the local OpenAPI specification for the terms endpoint.\n2. Compare this with the path constructed from the `basePath` and the endpoint path in the upstream specification.\n\n`curl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/terms/\" -H \"Authorization: Bearer $TOKEN\"`\n\n**Expected:** \nThe upstream specification (`oneroster.rostering.upstream.json`) defines a `basePath` of `/ims/oneroster/rostering/v1p2` and a path for this endpoint as `/terms`. When combined, the canonical path should be `/ims/oneroster/rostering/v1p2/terms`, without a trailing slash. While many web frameworks treat these paths as equivalent, it is a deviation from the official specification's path structure.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/terms/\nLocal Spec: ims/oneroster/rostering/v1p2/terms/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a minor deviation in path definition style. The upstream JSON spec defines `paths` with the key `/terms`. The local spec defines the full path `/ims/oneroster/rostering/v1p2/terms/`. The inconsistency is the trailing slash, which can have implications for routing, caching, and client-side integrations if not handled consistently.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:10:06.461Z",
    "updatedAt": "2025-07-02T01:24:33.647Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-534/path-mismatch-due-to-extraneous-trailing-slash"
  },
  {
    "id": "4e0e8079-f181-4847-92b9-6e3f914c4d2e",
    "identifier": "BUG-533",
    "title": "Non-standard 'tenantId' and 'clientAppId' Fields in POST Request Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `academicSession` object in the POST request body includes two required, non-standard fields: `tenantId` and `clientAppId`.\n\n**Summary:** \nThe `academicSession` object in the POST request body includes two required, non-standard fields: `tenantId` and `clientAppId`.\n\n**Steps to Reproduce:**\n\n1. Examine the requestBody schema for the non-standard `POST /.../gradingPeriods` operation in the local spec.\n2. Note the presence of `tenantId` and `clientAppId` fields at the root of the `academicSession` object.\n\n**Expected:** \nThese fields are not part of the official OneRoster `AcademicSession` data model. The standard way to include proprietary extensions is to place them inside the `metadata` object. Exposing them at the top level pollutes the standard data model and represents a custom, non-compliant extension.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods\nLocal Spec: ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While the POST operation is itself non-standard, this bug highlights a broader issue of incorrectly extending standard data models. The `metadata` field is explicitly provided for this purpose. Ignoring it and adding top-level proprietary fields is poor practice and breaks compliance.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:07:56.469Z",
    "updatedAt": "2025-07-02T01:24:24.532Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-533/non-standard-tenantid-and-clientappid-fields-in-post-request-body"
  },
  {
    "id": "b7ae98c4-f16a-4cd2-923b-6090a6ef287a",
    "identifier": "BUG-532",
    "title": "Inconsistent Data Type for 'schoolYear' Between GET Response and POST Request",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `schoolYear` field with two different, conflicting data types:\n\n* In the `GET` 200 response, `schoolYear` is a `number`.\n* In the `POST` request body, `schoolYear` is a `string`.\n\n**Summary:** \nThe local specification defines the `schoolYear` field with two different, conflicting data types:\n\n* In the `GET` 200 response, `schoolYear` is a `number`.\n* In the `POST` request body, `schoolYear` is a `string`.\n\n**Steps to Reproduce:**\n\n1. Compare the `AcademicSession` schema used in the `GET` response with the schema used in the `POST` request body within the local specification.\n2. Note the data type defined for the `schoolYear` field in both schemas.\n\n**Expected:** \nThe data type for a field should be consistent across all uses in the API. According to the upstream specification, the correct type is `string`. The local specification should use `type: string` for `schoolYear` in both the GET response and POST request schemas.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods\nLocal Spec: ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a severe internal inconsistency in the local API specification. It suggests that data created via the POST endpoint may not be correctly represented or could even cause errors when read back via the GET endpoint. This points to a potential copy-paste or schema definition error that could have significant runtime consequences.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:05:19.626Z",
    "updatedAt": "2025-07-02T01:20:18.047Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-532/inconsistent-data-type-for-schoolyear-between-get-response-and-post"
  },
  {
    "id": "035a31f0-48d0-4e30-ac72-58e2147405a4",
    "identifier": "BUG-531",
    "title": "Incorrect Property Name for Data Array in GET Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification returns the array of results under the key `gradingPeriods`.\n\n**Summary:** \nThe local specification returns the array of results under the key `gradingPeriods`.\n\n**Steps to Reproduce:**\n\n1. Execute a GET request to the endpoint.\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods' -H 'Authorization: Bearer $TOKEN'\n```\n\n2. Observe the name of the top-level key that contains the array of results.\n\n**Expected:** \nThe upstream JSON specification defines the response schema as `AcademicSessionSetDType`. This data type has a single property named `academicSessions` which contains the array of results. The HTML documentation (Section 5.1) confirms this structure. The local implementation should use `academicSessions` as the key, not `gradingPeriods`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods\nLocal Spec: ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical incompatibility. A compliant client will look for the `academicSessions` key and fail to find the data, even if the rest of the response structure were correct (which it is not, as noted in a separate bug report).",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:03:41.114Z",
    "updatedAt": "2025-07-01T18:03:41.114Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-531/incorrect-property-name-for-data-array-in-get-response"
  },
  {
    "id": "8ba65c2b-cedc-4564-8e77-8c241866c1c0",
    "identifier": "BUG-530",
    "title": "Incorrect Response Body Structure for GET /terms/{termSourcedId}/gradingPeriods",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that the API returns a complex pagination object with the following top-level keys: `gradingPeriods`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`. The total count of records is included in the response body.\n\n**Summary:** \nThe local specification indicates that the API returns a complex pagination object with the following top-level keys: `gradingPeriods`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`. The total count of records is included in the response body.\n\n**Steps to Reproduce:**\n\n1. Execute a GET request to the endpoint.\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods' -H 'Authorization: Bearer $TOKEN'\n```\n\n2. Observe the structure of the JSON response.\n\n**Expected:** \nAccording to the upstream JSON specification, the 200 OK response for this endpoint should return a schema of type `AcademicSessionSetDType`. This object has only one root property: `academicSessions`. Furthermore, the total count of available records should be returned in the `X-Total-Count` HTTP header, not in the response body. This is a fundamental structural violation of the specification.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods\nLocal Spec: ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This deviation makes the API completely incompatible with any client built against the official OneRoster 1.2 specification. The client would expect a simple object with an `academicSessions` key and would fail to parse the custom pagination wrapper object. The local API's pagination documentation in the `info` block describes a custom implementation that does not adhere to the standard's method of using the `X-Total-Count` header.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:02:07.302Z",
    "updatedAt": "2025-07-02T01:23:45.130Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-530/incorrect-response-body-structure-for-get"
  },
  {
    "id": "84235d83-a12c-44b8-b4e0-8917e8ea876d",
    "identifier": "BUG-529",
    "title": "Extraneous POST Operation on /terms/{termSourcedId}/gradingPeriods",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation provides a `POST /ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods` endpoint, allowing for the creation of grading periods for a term.\n\n**Summary:** \nThe local implementation provides a `POST /ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods` endpoint, allowing for the creation of grading periods for a term.\n\n**Steps to Reproduce:**\n\n1. Review the upstream OneRoster 1.2 specifications (JSON and HTML).\n2. Note that the route `/terms/{termSourcedId}/gradingPeriods` only defines a GET method.\n3. Review the local specification.\n4. Observe that the local specification incorrectly defines an additional POST method for this route.\n5. A `curl` command demonstrating a call to this non-standard endpoint would be:\n\n```bash\ncurl -X POST \\\n  'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"academicSession\": {\n        \"sourcedId\": \"some-guid\",\n        \"status\": \"active\",\n        \"title\": \"New Grading Period\",\n        \"startDate\": \"2024-01-01\",\n        \"endDate\": \"2024-03-31\",\n        \"type\": \"gradingPeriod\",\n        \"schoolYear\": \"2024\",\n        \"org\": { \"sourcedId\": \"org-guid\" },\n        \"tenantId\": \"tenant-guid\",\n        \"clientAppId\": \"app-guid\"\n    }\n}'\n```\n\n**Expected:** \nThe official OneRoster 1.2 specification does not define a POST method for this route. Both the upstream JSON and HTML specifications only list a GET operation (`getGradingPeriodsForTerm`). Any write operations on academic sessions are not defined in the standard, implying they are handled through other means or not part of the standard rostering service. The API should not expose this non-standard, custom endpoint.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods\nLocal Spec: ims/oneroster/rostering/v1p2/terms/{termSourcedId}/gradingPeriods.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation from the OneRoster 1.2 standard. Exposing non-standard write operations can lead to data integrity issues, unpredictable behavior for standard-compliant clients, and potential security vulnerabilities. This endpoint (`createGradingPeriodForTerm`) is entirely custom and not part of the specification this API claims to implement. The upstream HTML documentation in Table 4.12, \"The set of operations for the 'TermsManagement' interface,\" clearly lists only GET operations.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T18:00:55.056Z",
    "updatedAt": "2025-07-02T01:20:26.004Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-529/extraneous-post-operation-on-termstermsourcedidgradingperiods"
  },
  {
    "id": "bd860be8-1c2e-4153-8a80-f90c73647e33",
    "identifier": "BUG-528",
    "title": "Type for Demographics Racial/Ethnicity Fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The racial and ethnicity indicator fields in the `Demographics` schema are defined as nullable strings.\n\n**Summary:** \nThe racial and ethnicity indicator fields in the `Demographics` schema are defined as nullable strings.\n\n**Steps to Reproduce:**\n\n1. Examine fields like `americanIndianOrAlaskaNative`, `asian`, `blackOrAfricanAmerican`, etc., within the `Demographics` component schema in the local specification.\n      2. Their type is defined as a nullable string: `type: - string - 'null'`.\n      3. Compare this to the `DemographicsDType` definition in the upstream JSON spec and the `Demographics` class in the upstream HTML documentation (sections 6.1.12.3 onwards).\n\n**Expected:** \nThese fields must be strings with an enumerated value of either `\"true\"` or `\"false\"`, as defined by the `TrueFalseEnum` vocabulary in the upstream specification. The upstream JSON spec defines them as: `type: \"string\", enum: [\"true\", \"false\"]`. The HTML doc (e.g., section 6.1.12.3) confirms the data type is `TrueFalseEnum`. They should not be nullable; if the data is not present, the optional field should be omitted from the response.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/teachers/\n      Local Spec: ims/oneroster/rostering/v1p2/teachers/.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data type violation. A client expecting a string of `\"true\"` or `\"false\"` will fail when receiving `null` or any other arbitrary string. This breaks the data contract for these fields.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:56:32.508Z",
    "updatedAt": "2025-07-01T17:56:32.508Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-528/type-for-demographics-racialethnicity-fields"
  },
  {
    "id": "443c6b58-8277-4b96-9e9c-f7eabb29e8a1",
    "identifier": "BUG-527",
    "title": "[CRITICAL] Response Schema Missing 'minItems: 1' Constraint on 'terms' Array",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `terms` field as an array of objects but does not enforce a minimum number of items. This implies an empty array `[]` would be a valid value.\n\n**Summary:** \nThe local specification defines the `terms` field as an array of objects but does not enforce a minimum number of items. This implies an empty array `[]` would be a valid value.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `terms` array within the `Class` response object in the local spec.\n2. Note the absence of a `minItems` constraint.\n3. Compare with the upstream `ClassDType` definition.\n\ncURL command to trigger the response:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/teachers/{teacherSourcedId}/classes' -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification for `ClassDType` explicitly requires the `terms` array to contain at least one item. The property definition includes `\"minItems\": 1`. An empty array is not a valid state for this field.\n\nFrom upstream spec `definitions.ClassDType.properties.terms`:\n\n```json\n\"terms\": {\n    \"description\": \"The links to the set of terms or semesters (academicSession) i.e. the set of 'sourcedIds' for the terms within the associated school year.\",\n    \"type\": \"array\",\n    \"minItems\": 1,\n    \"items\": {\n        \"$ref\": \"#/definitions/AcadSessionGUIDRefDType\"\n    }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/teachers/{teacherSourcedId}/classes\n      Local Spec: ims/oneroster/rostering/v1p2/teachers/{teacherSourcedId}/classes.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The absence of the `minItems: 1` constraint violates a key data integrity rule of the OneRoster model. A class must be associated with at least one academic term. This could lead to invalid data being served by the API and breaking clients that rely on this constraint.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:54:21.484Z",
    "updatedAt": "2025-07-02T01:23:12.330Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-527/critical-response-schema-missing-minitems-1-constraint-on-terms-array"
  },
  {
    "id": "a940b8f7-c6ec-4c1c-ad9f-b464c7c0f530",
    "identifier": "BUG-526",
    "title": "Incorrect Enum Values for 'user.agents.type'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `type` field for items in the `user.agents` array with a large, incorrect enum that includes values for many different OneRoster object types.\n\n```yaml\n# In agents.items.properties\ntype:\n  type: string\n  enum:\n    - academicSession\n    - assessmentLineItem\n    # ... and many others\n    - user\n    # ...\n```\n\n**Summary:** \nThe local specification defines the `type` field for items in the `user.agents` array with a large, incorrect enum that includes values for many different OneRoster object types.\n\n```yaml\n# In agents.items.properties\ntype:\n  type: string\n  enum:\n    - academicSession\n    - assessmentLineItem\n    # ... and many others\n    - user\n    # ...\n```\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `agents` array items in the `GET /students/{sourcedId}` response.\n2. Observe the `enum` for the `type` field inside each agent object. It contains many values like 'academicSession', 'class', 'course', etc.\n3. Compare this to the upstream specification.\n\n**Expected:** \nThe `type` field inside an agent object must always be `\"user\"`. Agents are other users (e.g., parents, guardians). The upstream JSON spec defines `agents` as an array of `UserGUIDRefDType`. The `UserGUIDRefDType` has a `type` field with a single allowed enum value.\n\nUpstream JSON spec (`oneroster.rostering.upstream.json`) for `UserGUIDRefDType`:\n\n```json\n\"type\": {\n    \"description\": \"The type of object being referenced i.e. a 'user'.\",\n    \"type\": \"string\",\n    \"enum\": [\"user\"]\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/students/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/students/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This appears to be a copy-paste error in the local spec, reusing an enum from another part of the API. It completely misrepresents the data model for agents, which are exclusively other users. This is a critical schema violation that could lead to severe data corruption and client-side errors.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:43:16.196Z",
    "updatedAt": "2025-07-01T17:43:16.196Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-526/incorrect-enum-values-for-useragentstype"
  },
  {
    "id": "751397be-f21c-4108-8603-2d78fbe033e0",
    "identifier": "BUG-525",
    "title": "'user.agents' Array is Incorrectly Required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification incorrectly marks the `user.agents` array as a required field of the `user` object.\n\n```yaml\n# In user object\nrequired:\n  - sourcedId\n  - status\n  - enabledUser\n  - givenName\n  - familyName\n  - roles\n  - agents\n```\n\n**Summary:** \nThe local specification incorrectly marks the `user.agents` array as a required field of the `user` object.\n\n```yaml\n# In user object\nrequired:\n  - sourcedId\n  - status\n  - enabledUser\n  - givenName\n  - familyName\n  - roles\n  - agents\n```\n\n**Steps to Reproduce:**\n\n1. Review the `user` object schema in the local specification for the `GET /students/{sourcedId}` response.\n2. Note that `agents` is listed in the `required` array for the `user` object.\n3. Compare this with the upstream specification where the `agents` field is optional.\n\n**Expected:** \nThe `user.agents` field should be optional. Most users, especially teachers and administrators, will not have agents. The upstream JSON specification for `UserDType` does not include `agents` in its `required` array, and defines it with `minItems: 0`, making it optional. The HTML documentation (Table 6.1.30.19) confirms the multiplicity is `[0.. unbounded]`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/students/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/students/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Making this field required is a major violation of the data model. It forces the server to return an `agents` array for every user, even when it's not applicable, likely resulting in empty arrays being sent for the vast majority of users. This is inefficient and non-compliant.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:41:31.426Z",
    "updatedAt": "2025-07-01T17:41:31.426Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-525/useragents-array-is-incorrectly-required"
  },
  {
    "id": "aed4a128-c66a-4c2a-9caf-2a8586a64b3c",
    "identifier": "BUG-524",
    "title": "'user.roles' Date Fields are Incorrectly Required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification incorrectly marks the `beginDate` and `endDate` fields as required within each object of the `user.roles` array.\n\n```yaml\n#...\nitems:\n  type: object\n  properties:\n    #...\n    beginDate:\n      type:\n        - string\n        - 'null'\n    endDate:\n      type:\n        - string\n        - 'null'\n  required:\n    - roleType\n    - role\n    - org\n    - beginDate\n    - endDate\n```\n\n**Summary:** \nThe local specification incorrectly marks the `beginDate` and `endDate` fields as required within each object of the `user.roles` array.\n\n```yaml\n#...\nitems:\n  type: object\n  properties:\n    #...\n    beginDate:\n      type:\n        - string\n        - 'null'\n    endDate:\n      type:\n        - string\n        - 'null'\n  required:\n    - roleType\n    - role\n    - org\n    - beginDate\n    - endDate\n```\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `roles` array items in the `GET /students/{sourcedId}` response.\n2. Observe that `beginDate` and `endDate` are listed in the `required` array for each role object.\n3. Compare this with the upstream specification, which defines these fields as optional.\n\n**Expected:** \nThe `beginDate` and `endDate` fields should be optional. The upstream JSON specification for `RoleDType` does not include `beginDate` or `endDate` in its `required` array. The upstream HTML documentation (Tables 6.1.22.5 and 6.1.22.6) confirms their optionality with a multiplicity of `[0..1]`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/students/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/students/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical bug because it forces the system to provide date constraints for roles where none may exist, such as for a 'parent' or 'guardian' role which are typically not time-bound. This violates the upstream schema and can lead to the transmission of inaccurate or nonsensical data.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:40:33.450Z",
    "updatedAt": "2025-07-02T01:22:34.567Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-524/userroles-date-fields-are-incorrectly-required"
  },
  {
    "id": "6eb5d5f0-588c-40bd-be0e-66157d2e9f29",
    "identifier": "BUG-523",
    "title": "Incomplete Enum for 'user.roles.role' Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `user.roles.role` field provides a limited enum of roles: `administrator`, `aide`, `guardian`, `parent`, `proctor`, `relative`, `student`, `teacher`.\n\n**Summary:** \nThe local specification for the `user.roles.role` field provides a limited enum of roles: `administrator`, `aide`, `guardian`, `parent`, `proctor`, `relative`, `student`, `teacher`.\n\n**Steps to Reproduce:**\n\n1. Review the `user.roles.role` enum values in the local specification for `GET /students/{sourcedId}`.\n2. Observe the limited set of available roles.\n3. Compare this to the much larger set of roles defined in the official upstream documentation.\n\n**Expected:** \nThe `user.roles.role` field should support the full set of enumerated values from the upstream specification. The upstream HTML documentation (Table 6.3.11, `RoleEnum`) lists several additional roles that are missing from the local spec, including:\n\n* `counselor`\n* `districtAdministrator`\n* `principal`\n* `siteAdministrator`\n* `systemAdministrator`\n\nFurthermore, the upstream spec defines this as an extensible enum (`RoleEnumExt`), meaning proprietary roles prefixed with `ext:` should also be possible. The local spec's strict enum prevents this.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/students/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/students/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This deviation prevents the system from representing users with valid, standard roles like 'principal' or 'counselor'. This is a critical data model inconsistency that limits the functionality and compliance of the API.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:39:24.326Z",
    "updatedAt": "2025-07-01T17:39:24.326Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-523/incomplete-enum-for-userrolesrole-field"
  },
  {
    "id": "cbb07019-3e26-4b40-9c5c-0c1cbf626d44",
    "identifier": "BUG-522",
    "title": "Incorrect Cardinality for 'user.roles' Array",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `user.roles` field as a required array with a `default` value of `[]`. This implies that an empty array is a valid state for this field.\n\n```yaml\nroles:\n  type: array\n  #...\n  default: []\n```\n\n**Summary:** \nThe local specification defines the `user.roles` field as a required array with a `default` value of `[]`. This implies that an empty array is a valid state for this field.\n\n```yaml\nroles:\n  type: array\n  #...\n  default: []\n```\n\n**Steps to Reproduce:**\n\n1. Review the `user` object schema in the local specification for the `GET /students/{sourcedId}` response.\n2. Note that the `roles` array is required but has a `default: []`, implying it can be an empty array.\n3. Compare this with the upstream specification which mandates at least one role.\n\n**Expected:** \nThe `user.roles` array must not be empty; it must contain at least one role object. The upstream JSON specification for `UserDType.roles` explicitly sets `minItems: 1`.\n\nUpstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"roles\": {\n    \"description\": \"The set of roles for each of the orgs to which the user is affilliated. This is expressed as a set of role/org tuples.\",\n    \"type\": \"array\",\n    \"minItems\": 1,\n    \"items\": {\n        \"$ref\": \"#/definitions/RoleDType\"\n    }\n}\n```\n\nThe `UserDType` also lists `roles` in its `required` array.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/students/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/students/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a violation of a schema constraint. A user MUST have at least one role according to the OneRoster specification. Allowing an empty `roles` array could lead to data integrity issues and problems in client applications that expect at least one primary role to be defined.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:38:26.304Z",
    "updatedAt": "2025-07-02T01:22:12.890Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-522/incorrect-cardinality-for-userroles-array"
  },
  {
    "id": "50f7a3f8-889b-48b3-ae53-41d352da5d34",
    "identifier": "BUG-521",
    "title": "HIGH: Incorrectly Restricted `imsx_codeMinorFieldValue` in Error Responses",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that for any `400 Bad Request`, the API will return a minor error code of `invaliddata`. It does not support returning other specified minor codes like `invalid_filter_field` or `invalid_selection_field`.\n\n**Summary:** \nThe local specification indicates that for any `400 Bad Request`, the API will return a minor error code of `invaliddata`. It does not support returning other specified minor codes like `invalid_filter_field` or `invalid_selection_field`.\n\n**Steps to Reproduce:**\n\n1. Review the upstream specification for possible `codeMinor` values for a `400 Bad Request` response. `Table B1.4` in the HTML doc and the `description` for the `400` response code show that `invalid_filter_field` and `invalid_selection_field` are possible values.\n      2. Review the local spec's schema for a `400` response (`BadRequestResponse`).\n      3. Observe that the `imsx_codeMinorFieldValue` is restricted to a constant value of `invaliddata`.\n      4. Send a request with an invalid filter parameter, for example: `?filter=invalidfield%3D'test'`\n\n**Expected:** \nThe API should be able to return the full range of minor error codes as defined by the OneRoster specification to give the client specific feedback. For a `400` error caused by a bad filter, the upstream spec requires a minor code of `invalid_filter_field` or `invalid_selection_field`. The local implementation is incapable of providing this specific, required feedback.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/\n      Local Spec: ims/oneroster/rostering/v1p2/schools/.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This issue prevents the API from correctly communicating the specific nature of an error to the client, hindering automated error handling and debugging. A client might not be able to distinguish between a malformed request body and an invalid filter parameter, which is a key feature of the detailed error reporting in the spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:36:56.894Z",
    "updatedAt": "2025-07-03T18:49:39.022Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-521/high-incorrectly-restricted-imsx-codeminorfieldvalue-in-error"
  },
  {
    "id": "cbe43d89-af6a-4ffc-a44d-3c7259e7d5dd",
    "identifier": "BUG-520",
    "title": "Redundant sourcedId in PUT /schools/{sourcedId} request body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The schema for the `PUT` request body includes the `sourcedId` of the resource, which is already specified in the path parameter.\n\n**Summary:** \nThe schema for the `PUT` request body includes the `sourcedId` of the resource, which is already specified in the path parameter.\n\n**Steps to Reproduce:**\nThis is an architectural bug in the non-compliant PUT method.\n\n1. Review the requestBody for the `PUT /schools/{sourcedId}` operation in the local spec.\n2. Note the presence of a `sourcedId` field within the `org` object in the body.\n3. This is redundant with the `sourcedId` provided in the URL path.\n\nA potentially problematic request:\n`curl -X PUT 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/ID_FROM_PATH' \\ -H 'Authorization: Bearer $TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"org\": { \"sourcedId\": \"ID_FROM_BODY\", \"name\": \"New School Name\", \"type\": \"school\" } }'`\n\n**Expected:** \nFor updating a specific resource identified in the URL, the resource's ID should not be repeated in the request body. This prevents ambiguity and potential security vulnerabilities where the path ID and body ID could be different. The `sourcedId` field should be removed from the `PUT` request body schema.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a common API design flaw. It forces the server to decide which ID to trust if they differ, creating an inconsistent and potentially exploitable state. For example, a user authorized to edit `ID_FROM_PATH` might be able to edit `ID_FROM_BODY` if the server incorrectly prioritizes the body's ID.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:34:23.734Z",
    "updatedAt": "2025-07-02T01:21:41.483Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-520/redundant-sourcedid-in-put-schoolssourcedid-request-body"
  },
  {
    "id": "ab7da839-395a-4a81-b144-6d31a7196461",
    "identifier": "BUG-519",
    "title": "Inconsistent `parent` object schema in PUT /schools/{sourcedId} request body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The schema for the `parent` object in the `PUT` request body is a simplified, custom object containing only `sourcedId`. This is different from the `parent` object schema used in the `GET` response, which is a standard `GUIDRef` object.\n\n**Summary:** \nThe schema for the `parent` object in the `PUT` request body is a simplified, custom object containing only `sourcedId`. This is different from the `parent` object schema used in the `GET` response, which is a standard `GUIDRef` object.\n\n**Steps to Reproduce:**\nThis is a specification compliance bug within a non-compliant method.\n\n1. Review the request body for `PUT /schools/{sourcedId}` in the local spec.\n2. Observe the schema for the `parent` property: it is an object that can be null, with a single required property `sourcedId`.\n3. Review the schema for the `parent` property in the `Org` response object (local spec) or the `OrgGUIDRefDType` (upstream spec).\n4. Note that the standard reference object requires `href`, `sourcedId`, and `type`.\n\n**Expected:** \nFor API consistency, the representation of an object should be the same for reading and writing. The `parent` object in the request body should conform to the standard `GUIDRef` model, which includes `href`, `sourcedId`, and `type`. The upstream `OrgGUIDRefDType` defines these three fields as required.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This inconsistency in data modeling for the same conceptual object (`parent` link) makes the API harder to use and maintain. Clients would need to build two different object models for the same entity, one for sending and one for receiving.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:32:49.883Z",
    "updatedAt": "2025-07-02T01:21:34.827Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-519/inconsistent-parent-object-schema-in-put-schoolssourcedid-request-body"
  },
  {
    "id": "2393ca45-bfae-4f0d-b632-da27cd547912",
    "identifier": "BUG-518",
    "title": "`children` field is incorrectly required in Org response schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification's `Org` schema incorrectly marks the `children` field as required in the response.\n\n**Summary:** \nThe local API specification's `Org` schema incorrectly marks the `children` field as required in the response.\n\n**Steps to Reproduce:**\nThis is a specification compliance bug.\n\n1. Review the `Org` schema in the `components` section of the local YAML spec.\n2. Check the `required` array, which includes `'children'`.\n3. Review the `OrgDType` definition in the upstream JSON spec.\n4. Note that `children` is not in the `required` array.\n5. Review the `children` attribute definition in the upstream HTML spec (Section 6.1.18.5), which shows a multiplicity of `[0.. unbounded]`, confirming it is optional.\n\n**Expected:** \n    <what_should_happen>\nThe `children` field in the `Org` object should be optional. It should not be in the `required` array of the schema. An organization with no children (e.g., a school at the bottom of a hierarchy) would not have this field, and this should be valid. The upstream spec defines it as optional (`minItems: 0` and not in `required` list).\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Marking `children` as required is a deviation that could cause validation failures for compliant API responses. A server correctly omitting the `children` array for a leaf-node organization would produce a response that is invalid according to this local spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:31:47.790Z",
    "updatedAt": "2025-07-02T01:21:25.183Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-518/children-field-is-incorrectly-required-in-org-response-schema"
  },
  {
    "id": "066ee834-1306-40cf-b059-7f1d220b7b46",
    "identifier": "BUG-517",
    "title": "DELETE endpoint defines a response body for 204 No Content status",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the custom `DELETE` operation defines a response body schema for the `204` status code.\n\n**Summary:** \nThe local specification for the custom `DELETE` operation defines a response body schema for the `204` status code.\n\n**Steps to Reproduce:**\nThis is a specification compliance bug.\n\n1. Review the `DELETE` method definition in the local spec for `/ims/oneroster/rostering/v1p2/schools/{sourcedId}`.\n2. Observe the `204` response definition.\n3. Note that it includes a `content` section with a defined `schema`.\n\nA problematic request would be:\n`curl -v -X DELETE 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some_school_id' -H 'Authorization: Bearer $TOKEN'`\n\nThe server might incorrectly return a body with the 204 response.\n\n**Expected:** \nAccording to RFC 7231 Section 6.3.5, a `204 No Content` response \"MUST NOT\" include a message body. The local OpenAPI specification should not have a `content` section for the `204` response.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a direct violation of the HTTP standard. While the `DELETE` method itself is a non-compliant extension, its definition is also fundamentally incorrect. Clients and intermediaries may hang or fail if they receive a body with a 204 response.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:30:34.044Z",
    "updatedAt": "2025-07-03T05:33:22.368Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-517/delete-endpoint-defines-a-response-body-for-204-no-content-status"
  },
  {
    "id": "e7408daf-2ee2-47f9-a7b1-603f553f5390",
    "identifier": "BUG-516",
    "title": "Non-compliant PUT and DELETE methods on /schools/{sourcedId} endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification for `/ims/oneroster/rostering/v1p2/schools/{sourcedId}` defines `PUT` and `DELETE` operations, allowing modification and deletion of school resources.\n\n**Summary:** \nThe local API specification for `/ims/oneroster/rostering/v1p2/schools/{sourcedId}` defines `PUT` and `DELETE` operations, allowing modification and deletion of school resources.\n\n**Steps to Reproduce:**\nThis is a specification compliance bug. No curl command can demonstrate it, but a review of the specifications shows the issue.\n\n1. Review the local YAML spec for the path `/ims/oneroster/rostering/v1p2/schools/{sourcedId}`.\n2. Observe the presence of `put` and `delete` HTTP methods.\n3. Review the upstream JSON specification for the path `/schools/{sourcedId}`.\n4. Observe that only the `get` method is defined.\n5. Review the upstream HTML specification, section 4 \"The Behavior Model\".\n6. Observe that all defined operations are for reading data (e.g., `getSchool`, `getAllSchools`), and there are no operations for updating or deleting data.\n\n**Expected:** \nThe official OneRoster v1.2 Rostering Service specification is strictly read-only. The `/schools/{sourcedId}` endpoint should only support the `GET` method. No `PUT` or `DELETE` methods should be exposed.\n\nThe upstream JSON spec confirms this by only defining a `get` method for the path. Furthermore, the security definitions in the upstream spec only define `readonly` scopes, such as `https://purl.imsglobal.org/spec/or/v1p2/scope/roster.readonly`, indicating the read-only nature of the entire service. The HTML documentation also exclusively describes read operations.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation from the OneRoster standard. Implementing write operations on a specified read-only API breaks compliance and can lead to unpredictable behavior and data corruption when interacting with standard-compliant clients. These custom extensions MUST be documented as such and should not be presented as part of the standard OneRoster implementation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:28:57.259Z",
    "updatedAt": "2025-07-02T01:21:02.321Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-516/non-compliant-put-and-delete-methods-on-schoolssourcedid-endpoint"
  },
  {
    "id": "c821e702-f239-43d3-b387-b715398346d2",
    "identifier": "BUG-515",
    "title": "Multiple Schema Violations in Term Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The term objects returned by the API contain several schema violations:\n\n* `schoolYear` is implemented as a `number` instead of a `string`.\n* The `children` field, which is part of the official `AcademicSessionDType`, is completely missing.\n* An extra, non-standard `org` field is included in the object and marked as required.\n* The `dateLastModified` field is not marked as required.\n* The `parent.type` enum allows many incorrect values instead of just `academicSession`.\n\n**Summary:** \nThe term objects returned by the API contain several schema violations:\n\n* `schoolYear` is implemented as a `number` instead of a `string`.\n* The `children` field, which is part of the official `AcademicSessionDType`, is completely missing.\n* An extra, non-standard `org` field is included in the object and marked as required.\n* The `dateLastModified` field is not marked as required.\n* The `parent.type` enum allows many incorrect values instead of just `academicSession`.\n\n**Steps to Reproduce:**\n\n1. Execute a request to `GET /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/terms`.\n2. Observe the structure of the individual objects within the `terms` array in the response.\n3. Compare the fields of these objects against the `AcademicSessionDType` definition in `oneroster.rostering.upstream.json`.\n4. Note the following discrepancies:\n   * The `schoolYear` field is a number, not a string.\n   * The `children` field is missing.\n   * The `dateLastModified` field is missing from the required list.\n   * An extra `org` field is present.\n   * The `parent.type` enum is incorrect.\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/terms' -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe term objects in the response array must strictly conform to the `AcademicSessionDType` definition in the upstream specification.\n\n* `schoolYear` MUST be a `string` in 'YYYY' format.\n* `children` MUST be present if applicable, as an array of `AcadSessionGUIDRefDType`. It is defined as `multiplicity: [0..unbounded]`.\n* `org` MUST NOT be present in the `AcademicSessionDType`.\n* `dateLastModified` MUST be present and marked as required.\n* `parent.type` MUST be an enum with the single value `academicSession`.\n\nEvidence from `oneroster.rostering.upstream.json` definitions for `AcademicSessionDType`:\n\n* `schoolYear`: `\"type\": \"string\", \"description\": \"...This is in the [ISO 8601] format of 'YYYY'.\"`\n* `children`: `\"type\": \"array\", \"minItems\": 0, \"items\": { \"$ref\": \"#/definitions/AcadSessionGUIDRefDType\" }`\n* `required`: `[ \"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"startDate\", \"endDate\", \"type\", \"schoolYear\" ]`\n* `parent`: `{ \"$ref\": \"#/definitions/AcadSessionGUIDRefDType\" }` where `AcadSessionGUIDRefDType` has a `type` enum of `[\"academicSession\"]`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/terms\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/terms.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** These are multiple critical schema violations within a single data object. Each one can cause client-side parsing errors or data corruption. The incorrect data type for `schoolYear`, the missing standard `children` field, and the addition of a non-standard `org` field demonstrate a fundamental misunderstanding or disregard for the official `AcademicSessionDType` data model. The incorrect enum for `parent.type` is especially problematic as it allows invalid data to be returned for object references.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:27:25.453Z",
    "updatedAt": "2025-07-02T01:20:54.737Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-515/multiple-schema-violations-in-term-response-object"
  },
  {
    "id": "891370cc-69bc-4463-b77b-eb0d12e24373",
    "identifier": "BUG-514",
    "title": "Critical Schema Divergence in 200 OK Response Body Structure",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns a JSON object where the array of results is under the key `terms`. The response is also wrapped in a custom pagination object.\n\n**Summary:** \nThe local implementation returns a JSON object where the array of results is under the key `terms`. The response is also wrapped in a custom pagination object.\n\n**Steps to Reproduce:**\n\n1. Review the local OpenAPI specification for the endpoint `GET /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/terms`.\n2. Observe that the 200 OK response schema defines a root object with a `terms` property, which is an array of term objects.\n3. Cross-reference this with the upstream `oneroster.rostering.upstream.json` specification for the same endpoint.\n4. Note that the upstream specification's 200 OK response schema references `AcademicSessionSetDType`.\n5. Observe that `AcademicSessionSetDType` defines a root object with a single property named `academicSessions`, not `terms`.\n\nA client built to the official specification would make the following request and expect to parse a response with a root key of `academicSessions`:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/terms' -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe API response should strictly follow the upstream specification. The root of the JSON response object for a successful request should contain a single key, `academicSessions`, which holds the array of term/academic session objects.\n\nEvidence from `oneroster.rostering.upstream.json`:\nThe `200` response for the path `/schools/{schoolSourcedId}/terms` specifies:\n\n```json\n\"schema\": {\n  \"$ref\": \"#/definitions/AcademicSessionSetDType\"\n}\n```\n\nAnd `AcademicSessionSetDType` is defined as:\n\n```json\n\"AcademicSessionSetDType\": {\n  \"properties\": {\n    \"academicSessions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/AcademicSessionDType\"\n      }\n    }\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/terms\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/terms.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical, breaking deviation from the official OneRoster specification. Any client coded against the standard specification will fail to parse the response from our implementation because it will be looking for the `academicSessions` key, but will instead find a `terms` key and other non-standard pagination keys. This completely breaks compatibility. This issue is compounded by the incorrect pagination implementation, which should be handled via headers, not a response body wrapper.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:26:10.452Z",
    "updatedAt": "2025-07-02T01:20:38.082Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-514/critical-schema-divergence-in-200-ok-response-body-structure"
  },
  {
    "id": "38d2397b-f29d-4927-84bd-2648fe0e850e",
    "identifier": "BUG-513",
    "title": "CRITICAL: Mismatch in 'required' properties for Enrollment object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec's `enrollment` object defines its required properties as: `[sourcedId, status, role, primary, beginDate, endDate, user, class]`.\n\n**Summary:** \nThe local spec's `enrollment` object defines its required properties as: `[sourcedId, status, role, primary, beginDate, endDate, user, class]`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the endpoint.\n2. Validate the returned enrollment objects against the official `EnrollmentDType` schema.\n3. Notice that fields like `dateLastModified` and `school` (which are required by the spec) may be missing.\n4. Notice that fields like `primary`, `beginDate`, and `endDate` (which are optional in the spec) are always present in the response.\n\ncURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/enrollments' -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification's `EnrollmentDType` defines a different set of required properties: `[sourcedId, status, dateLastModified, user, class, school, role]`.\n\nThe discrepancies are:\n\n* **Incorrectly Required:** The local spec requires `primary`, `beginDate`, and `endDate`. The upstream spec defines these as optional.\n* **Missing Required:** The local spec fails to require `dateLastModified` and `school`. The upstream spec defines these as mandatory.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical failure in schema compliance. By not requiring mandatory fields (`dateLastModified`, `school`), the API can return incomplete and invalid data. By requiring optional fields (`primary`, `beginDate`, `endDate`), the API is creating a stricter contract than the specification allows, potentially forcing data providers to generate unnecessary data. This mismatch will cause validation failures for any compliant client.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:19:23.022Z",
    "updatedAt": "2025-07-02T01:20:25.757Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-513/critical-mismatch-in-required-properties-for-enrollment-object"
  },
  {
    "id": "2c8e6f89-886d-401f-b22b-d45a2edd8f3c",
    "identifier": "BUG-512",
    "title": "CRITICAL: Incorrect schema for 'beginDate' and 'endDate' fields in Enrollment object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines `beginDate` and `endDate` as `required` fields that are nullable (`type: [string, 'null']`). They are also missing the `format: date` property.\n\n**Summary:** \nThe local specification defines `beginDate` and `endDate` as `required` fields that are nullable (`type: [string, 'null']`). They are also missing the `format: date` property.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the endpoint.\n2. Inspect the `beginDate` and `endDate` fields within an `enrollments` object.\n3. Observe that these fields are always present, even if their value is `null`.\n4. The format is a simple date string, but the spec does not formally declare `format: date`.\n\ncURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/enrollments' -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream OneRoster specification defines `beginDate` and `endDate` as optional, not required. They are not present in the `required` array of the `EnrollmentDType`. They should have a `type` of `string` and a `format` of `date`.\n\nFrom the upstream JSON spec (`definitions.EnrollmentDType`):\n\n```json\n\"beginDate\": {\n  \"description\": \"The start date for the enrollment (inclusive)...\",\n  \"type\": \"string\",\n  \"format\": \"date\"\n},\n\"endDate\": {\n  \"description\": \"The end date for the enrollment (exclusive)...\",\n  \"type\": \"string\",\n  \"format\": \"date\"\n}\n```\n\nThey are not listed in the `required` array, making them optional. The ability to be `null` is different from being optional. An optional field can be omitted entirely from the JSON object.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This bug has two parts:\n\n1. **Required vs. Optional:** The local implementation incorrectly makes these fields required, changing the contract of the API.\n2. **Nullable vs. Optional:** The local spec uses nullability to handle absence of data, whereas the upstream spec uses optionality (omitting the key). This can break clients with strict schema validation.\n3. **Missing Format:** The absence of `format: date` means validators won't check if the string conforms to the `YYYY-MM-DD` format required by the spec.\n   This combination of issues represents a critical deviation from the data model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:18:00.172Z",
    "updatedAt": "2025-07-02T01:20:14.819Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-512/critical-incorrect-schema-for-begindate-and-enddate-fields-in"
  },
  {
    "id": "cbb2c41e-1d46-4140-a5ed-c701455919a1",
    "identifier": "BUG-511",
    "title": "CRITICAL: Incorrect data type for 'primary' field in Enrollment object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `primary` field in the enrollment object as a `boolean` type.\n\n**Summary:** \nThe local specification defines the `primary` field in the enrollment object as a `boolean` type.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the endpoint.\n2. Inspect the `primary` field within one of the `enrollments` objects in the response.\n3. The value will be a JSON boolean (`true` or `false`), not a string.\n\ncURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/enrollments' -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream OneRoster specification defines the `primary` field as a `string` with an enumerated vocabulary of `'true'` or `'false'`.\n\nFrom the upstream JSON spec (`definitions.EnrollmentDType`):\n\n```json\n\"primary\": {\n  \"description\": \"Applicable only to teachers...\",\n  \"type\": \"string\",\n  \"enum\": [\n    \"true\",\n    \"false\"\n  ]\n}\n```\n\nThis is further confirmed in the HTML documentation (Table 6.1.14.5), which references the `TrueFalseEnum` vocabulary, explicitly defining the values as strings.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This data type mismatch is a critical bug. A client expecting a string (`\"true\"`) will fail to parse a boolean (`true`). This is a direct violation of the data model that will cause deserialization errors and break client applications that are strictly compliant with the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:16:08.822Z",
    "updatedAt": "2025-07-01T17:16:08.822Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-511/critical-incorrect-data-type-for-primary-field-in-enrollment-object"
  },
  {
    "id": "93596309-77e2-4069-b1ed-ee464784a9a5",
    "identifier": "BUG-510",
    "title": "CRITICAL: Required 'school' field is missing from Enrollment object in response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `enrollment` object in the response array does not include the `school` field.\n\n**Summary:** \nThe local specification for the `enrollment` object in the response array does not include the `school` field.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments` endpoint.\n2. Examine the schema of the objects within the `enrollments` array in the response.\n3. Observe that the `school` field is missing from each enrollment object.\n\ncURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/enrollments' -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream OneRoster specification's `EnrollmentDType` data model clearly defines a `school` field as a required component of the enrollment object.\n\nFrom the upstream JSON spec (`definitions.EnrollmentDType`):\n\n```json\n\"properties\": {\n  ...\n  \"school\": {\n    \"$ref\": \"#/definitions/OrgGUIDRefDType\"\n  },\n  ...\n},\n\"required\": [\n  \"sourcedId\",\n  \"status\",\n  \"dateLastModified\",\n  \"user\",\n  \"class\",\n  \"school\",\n  \"role\"\n]\n```\n\nThe `school` field, which links to the organization (school) providing the class, is mandatory and must be present in each enrollment object.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/enrollments.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The absence of the required `school` field is a critical data model violation. This field is essential for understanding the context of an enrollment, as it links the enrollment to the specific school where it occurs. A client built to the specification would fail to parse the response correctly or would miss crucial data, assuming the response is malformed.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T17:15:01.021Z",
    "updatedAt": "2025-07-02T01:20:20.511Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-510/critical-required-school-field-is-missing-from-enrollment-object-in"
  },
  {
    "id": "d466239e-3710-4926-b03f-1a71c8f6468b",
    "identifier": "BUG-509",
    "title": "API Accepts Invalid Non-UUID Values for Identifier Parameters",
    "description": "**Reporter:** Christopher Vidic (christopher.vidic@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The API fails to validate that identifier parameters conform to UUID format, accepting arbitrary strings including potential path traversal attempts. This creates security vulnerabilities and data integrity issues.\n\n**Summary:** \nThe API fails to validate that identifier parameters conform to UUID format, accepting arbitrary strings including potential path traversal attempts. This creates security vulnerabilities and data integrity issues.\n\n**Steps to Reproduce:**\n\n# Step 1: Valid UUID format (should work)\n\ncurl -v \"[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/550e8400-e29b-41d4-a716-446655440000](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/550e8400-e29b-41d4-a716-446655440000)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n# Result: 200 OK or 404 Not Found\n\n# Step 2: Invalid format - arbitrary string (should fail)\n\ncurl -v \"[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/not-a-uuid-at-all](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/not-a-uuid-at-all)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n# Result: 404 Not Found (Should be 400 Bad Request)\n\n# Step 3: Security test - path traversal attempt (should fail)\n\ncurl -v \"[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/../../etc/passwd](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/../../etc/passwd)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n# Result: 404 Not Found (Should be 400 Bad Request)\n\n# Step 4: SQL injection attempt (should fail)\n\ncurl -v \"[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/1'+OR+'1'='1](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/1'+OR+'1'='1)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n# Result: 500 Internal Server Error (Should be 400 Bad Request)\n\n**Expected:** \nUUID format validation with proper error response:\n\n```\n// Valid UUID regex pattern\n^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\n\n// For invalid format:\nHTTP/1.1 400 Bad Request\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Invalid identifier format. Must be a valid UUID.\",\n  \"imsx_codeMinor\": \"invaliduuid\"\n}\n```\n\n**Environment:** API Route: All endpoints with {sourcedId} parameters\nUUID Spec: RFC 4122 (UUID format)\nSecurity Risk: CWE-20 (Improper Input Validation)\nOWASP: Input Validation Cheat Sheet\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:58:52.505Z",
    "updatedAt": "2025-07-03T05:28:51.166Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-509/api-accepts-invalid-non-uuid-values-for-identifier-parameters"
  },
  {
    "id": "083b35fb-46b6-4146-b43a-c89ddfae097b",
    "identifier": "BUG-508",
    "title": "Incorrect Schema for GUID Reference Objects (`academicSession`, `org`)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines GUID reference objects like `academicSession` (renamed from `schoolYear`) and `org` as simple objects with only a `sourcedId`: `{ \"sourcedId\": \"string\" }`.\n\n**Summary:** \nThe local specification defines GUID reference objects like `academicSession` (renamed from `schoolYear`) and `org` as simple objects with only a `sourcedId`: `{ \"sourcedId\": \"string\" }`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schema for the `academicSession` and `org` fields within the `Course` object in the local spec.\n2. Observe that they are defined as simple objects containing only a `sourcedId`.\n3. Compare this to the upstream `AcadSessionGUIDRefDType` and `OrgGUIDRefDType` definitions.\n\nCurl command:\ncurl -X GET \"[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/courses](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/courses)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n**Expected:** \nThe upstream specification defines these as complex objects with three required fields: `href`, `sourcedId`, and `type`. For example, `OrgGUIDRefDType` requires:\n`\"properties\": { \"href\": { \"type\": \"string\", \"format\": \"uri\" }, \"sourcedId\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\", \"enum\": [\"org\"] } }`, with all three being required. The local implementation is missing the `href` and `type` fields, which are mandatory for GUID reference objects in OneRoster.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/courses\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/courses.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data modeling error. The `href` and `type` fields provide essential context for the reference, allowing clients to understand what kind of object is being referenced and how to retrieve it. Omitting them breaks this discoverability and violates the structure of `GUIDRef` types defined throughout the OneRoster specification. The renaming of `schoolYear` to `academicSession` is also a deviation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:36:37.650Z",
    "updatedAt": "2025-07-01T16:36:37.650Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-508/incorrect-schema-for-guid-reference-objects-academicsession-org"
  },
  {
    "id": "50e07c7b-902e-4919-bf2f-5b9b142582cf",
    "identifier": "BUG-507",
    "title": "Incorrect Required Status for Fields in `Course` Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec incorrectly defines the `required` fields for a course. It omits `sourcedId` and `courseCode` from the required list, and incorrectly adds `org` to the required list.\n\n**Summary:** \nThe local spec incorrectly defines the `required` fields for a course. It omits `sourcedId` and `courseCode` from the required list, and incorrectly adds `org` to the required list.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `required` list for the `course` item schema in the local spec.\n2. Note that it lists `status`, `title`, and `org`.\n3. Compare this to the upstream `CourseDType` definition which requires `sourcedId`, `status`, `dateLastModified`, `title`, and `courseCode`.\n\nCurl command:\n\n# A compliant server must return sourcedId and courseCode for every course.\n\n# The local spec implies they could be omitted.\n\ncurl -X GET \"[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/courses](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/courses)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n**Expected:** \nThe `required` array for the `Course` object should be `[ \"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"courseCode\" ]` as defined in the upstream JSON specification under `definitions.CourseDType`. The `org` field is defined as optional in the upstream spec and should not be required.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/courses\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/courses.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This mismatch in required fields can lead to significant client-side errors. A client may receive a response without a `sourcedId`, which is the primary key for the object. Conversely, the local implementation may reject valid data that omits the optional `org` field, or a client may fail validation if it expects `org` to always be present.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:34:59.474Z",
    "updatedAt": "2025-07-01T16:34:59.474Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-507/incorrect-required-status-for-fields-in-course-object"
  },
  {
    "id": "d5513273-495f-4467-b3cb-4b5b874b389f",
    "identifier": "BUG-506",
    "title": "Missing Required Fields in `Course` Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's schema for the `courses` array items omits the `dateLastModified` and `resources` fields.\n\n**Summary:** \nThe local specification's schema for the `courses` array items omits the `dateLastModified` and `resources` fields.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the `/ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/courses` endpoint.\n2. Inspect the fields of an individual `course` object in the response array.\n3. Observe that the `dateLastModified` and `resources` fields are missing.\n\nCurl command:\ncurl -X GET \"[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/courses](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/courses)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n**Expected:** \nThe upstream `CourseDType` definition requires the `dateLastModified` field. The upstream HTML documentation (Table 6.1.4.3) states: \"All objects MUST be annotated with the dateTime upon which they were last modified.\" The `resources` field is optional but is completely missing from the local schema definition, meaning it's not supported at all. A compliant API must include all required fields and support all optional fields from the specification.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/courses\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/courses.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The absence of `dateLastModified` is a critical violation of the base object requirements in OneRoster. This field is essential for clients that need to sync data and query for changes since a certain time. The complete omission of the `resources` field removes functionality defined in the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:33:02.194Z",
    "updatedAt": "2025-07-01T16:33:02.194Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-506/missing-required-fields-in-course-response-object"
  },
  {
    "id": "4f4b0336-1204-4e42-8258-41765dc68dbf",
    "identifier": "BUG-505",
    "title": "Missing `minItems` Constraint on `terms` Array in `Class` Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `terms` array, which is part of the `Class` response object, does not enforce a minimum number of items.\n\n**Summary:** \nThe local specification for the `terms` array, which is part of the `Class` response object, does not enforce a minimum number of items.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `terms` property within the `Class` object in the local spec's 200 OK response.\n2. Observe that it is defined as a simple array with no `minItems` constraint.\n3. Review the `ClassDType` definition in the upstream JSON spec.\n4. Observe that the `terms` property has a `\"minItems\": 1` constraint.\n\n**Expected:** \nThe `terms` array must contain at least one item, as per the upstream specification. The local spec should be updated to include `minItems: 1` for the `terms` property to align with the official standard.\n\nUpstream `ClassDType.terms` definition:\n\n```json\n\"terms\": {\n  \"description\": \"The links to the set of terms or semesters (academicSession) ...\",\n  \"type\": \"array\",\n  \"minItems\": 1,\n  \"items\": {\n    \"$ref\": \"#/definitions/AcadSessionGUIDRefDType\"\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting the `minItems: 1` constraint is a significant deviation. It changes the data contract from \"a class must have at least one term\" to \"a class can have zero terms\". This could lead to data integrity issues and cause client applications to fail if they are built with the expectation that the `terms` array will never be empty.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:26:25.651Z",
    "updatedAt": "2025-07-01T16:26:25.651Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-505/missing-minitems-constraint-on-terms-array-in-class-response-object"
  },
  {
    "id": "dd7ee022-9f03-48f2-bdb2-fb81c09a67d0",
    "identifier": "BUG-504",
    "title": "Incorrect `required` Fields in `Class` Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `Class` object in the response incorrectly defines which fields are required. It omits the required field `dateLastModified` and incorrectly marks the optional fields `classCode`, `classType`, and `location` as required.\n\n**Summary:** \nThe local specification for the `Class` object in the response incorrectly defines which fields are required. It omits the required field `dateLastModified` and incorrectly marks the optional fields `classCode`, `classType`, and `location` as required.\n\n**Steps to Reproduce:**\n\n1. Review the 200 OK response schema in the local spec, specifically the `required` array for the `items` of the `classes` property.\n2. Note that `dateLastModified` is missing from the `required` list.\n3. Note that `classCode`, `classType`, and `location` are present in the `required` list.\n4. Review the `ClassDType` definition in the upstream JSON spec (`/definitions/ClassDType`).\n5. Observe that its `required` array is `[\"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"course\", \"school\", \"terms\"]`.\n\n**Expected:** \nThe `required` list for the `Class` response object should exactly match the `ClassDType` definition in the upstream specification. `dateLastModified` must be marked as required. `classCode`, `classType`, and `location` must be marked as optional (i.e., removed from the `required` list).\n\nUpstream `ClassDType` `required` fields: `sourcedId`, `status`, `dateLastModified`, `title`, `course`, `school`, `terms`.\nLocal `Class` `required` fields: `sourcedId`, `status`, `title`, `classCode`, `classType`, `location`, `course`, `school`, `terms`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This discrepancy in the data contract can cause client-side validation failures and application errors. A client conforming to the official spec might fail to parse a response that is missing `dateLastModified`, or it might incorrectly expect fields like `classCode` and `location` to always be present.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:24:41.584Z",
    "updatedAt": "2025-07-01T16:24:41.584Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-504/incorrect-required-fields-in-class-response-object"
  },
  {
    "id": "546ec2e2-ae6b-446b-88c6-545da3c761a3",
    "identifier": "BUG-503",
    "title": "Non-compliant Nesting of `demographics` Object within User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's User object schema incorrectly includes a `demographics` field, which can contain a nested Demographics object.\n\n**Summary:** \nThe local specification's User object schema incorrectly includes a `demographics` field, which can contain a nested Demographics object.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the endpoint.\n2. Observe that the returned User objects contain a nested `demographics` object.\n3. Review the upstream specification for the `UserDType` object.\n4. Note that `demographics` is not a property of a User. It is a separate, top-level resource accessible via its own endpoint (e.g., `/demographics/{sourcedId}`).\n\n**Expected:** \nThe `demographics` object should not be a nested property of the User object. According to the OneRoster specification, demographics data is a protected resource that must be fetched from its own dedicated endpoint, `/demographics/{sourcedId}`. The upstream JSON `UserDType` definition and the HTML Data Model for User (Section 6.1.30) do not contain a `demographics` field. Including it directly in the User object violates the specified data model and security model of the OneRoster standard.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/teachers\n      Local Spec: local_spec_for_route\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical architectural deviation. The OneRoster specification explicitly separates demographics data for security and privacy reasons, requiring a different OAuth scope (`roster-demographics.readonly`) for access. By nesting this data inside the User object, the local implementation bypasses this security model, potentially exposing sensitive data to clients who should not have access to it.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:20:50.382Z",
    "updatedAt": "2025-07-01T16:20:50.382Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-503/non-compliant-nesting-of-demographics-object-within-user-object"
  },
  {
    "id": "e11f063f-d2e7-4277-8825-de109c45d5fc",
    "identifier": "BUG-502",
    "title": "Missing `userProfiles`, `identifier`, and `resources` Fields in User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The User object schema in the local specification is missing three fields that are part of the official `UserDType` definition: `userProfiles`, `identifier`, and `resources`.\n\n**Summary:** \nThe User object schema in the local specification is missing three fields that are part of the official `UserDType` definition: `userProfiles`, `identifier`, and `resources`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the endpoint.\n2. Inspect the fields available in the returned User objects.\n3. Note the absence of `userProfiles`, `identifier`, and `resources`.\n4. These fields are defined in the official OneRoster spec as valid, optional fields for a User.\n\nCURL command to reproduce:\n\n# This command fetches teachers. The response will be missing the specified fields.\n\ncurl -X GET \"[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/teachers](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/teachers)\" -H \"Authorization: Bearer $TOKEN\"\n\n**Expected:** \nThe User object schema should include all fields defined in the upstream `UserDType` to be fully compliant. Even though these fields are optional, they must be declared in the schema so that clients are aware of them and the server can potentially return them. Their absence means the local implementation is incomplete and does not fully support the User data model. Both the upstream JSON and HTML (Section 6.1.30) specifications clearly define these fields as part of the `User` class.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/teachers\n      Local Spec: local_spec_for_route\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** By omitting these fields from the schema, the local implementation is non-conformant and prevents clients from accessing potentially important data related to user profiles, legacy identifiers, and associated learning resources. This limits the utility of the endpoint and breaks the expectation of a complete data model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:18:51.533Z",
    "updatedAt": "2025-07-01T16:18:51.533Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-502/missing-userprofiles-identifier-and-resources-fields-in-user-object"
  },
  {
    "id": "bde981ae-0b9c-4e83-9228-ae0c8050c2aa",
    "identifier": "BUG-501",
    "title": "Incorrect `required` Status for Multiple Fields in User and Role Objects",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification has incorrect `required` definitions for several fields:\n\n1. `dateLastModified` is optional in a User, but should be required.\n2. `agents` is required in a User, but should be optional.\n3. `beginDate` and `endDate` are required in a Role, but should be optional.\n\n**Summary:** \nThe local specification has incorrect `required` definitions for several fields:\n\n1. `dateLastModified` is optional in a User, but should be required.\n2. `agents` is required in a User, but should be optional.\n3. `beginDate` and `endDate` are required in a Role, but should be optional.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request that returns a User object.\n2. Check for the presence of the `dateLastModified` field. According to the local spec, it's optional and may be absent.\n3. Check for the presence of the `agents` field. According to the local spec, it's required.\n4. In a `roles` array item, check for the presence of `beginDate` and `endDate`. According to the local spec, they are required.\n5. Compare this with the upstream specification, which has the opposite requirements for these fields.\n\n**Expected:** \nThe `required` status of fields should match the upstream specification exactly.\n\n1. `UserDType` in the upstream spec lists `dateLastModified` as a required field.\n2. `UserDType` in the upstream spec defines `agents` as optional (`\"minItems\": 0`). The HTML doc confirms this (`Multiplicity: [0.. unbounded]`).\n3. `RoleDType` in the upstream spec defines `beginDate` and `endDate` as optional. The HTML doc (`6.1.22.5` and `6.1.22.6`) confirms this (`Multiplicity: [0..1]`).\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/teachers\n      Local Spec: local_spec_for_route\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** These discrepancies violate the API contract. A client may fail validation if a required field (`dateLastModified`) is missing, or may send invalid data by omitting fields it thinks are optional (`agents`, `beginDate`, `endDate` in certain contexts). This directly impacts interoperability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:17:14.569Z",
    "updatedAt": "2025-07-01T16:17:14.569Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-501/incorrect-required-status-for-multiple-fields-in-user-and-role-objects"
  },
  {
    "id": "2c22a42b-fe2d-4109-a2cf-3febe3fc855e",
    "identifier": "BUG-500",
    "title": "Incorrect Data Type for 'enabledUser' Field in User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `enabledUser` field in the response's `users` array is defined as `type: boolean` in the local specification.\n\n**Summary:** \nThe `enabledUser` field in the response's `users` array is defined as `type: boolean` in the local specification.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint.\n2. Observe the data type of the `enabledUser` field in the returned user objects.\n3. According to the local spec, it will be a JSON boolean (`true` or `false`).\n4. According to the upstream spec, it should be a JSON string (`\"true\"` or `\"false\"`).\n\nCURL command to reproduce:\n\n# This command would return a user object where enabledUser is a boolean.\n\ncurl -X GET \"[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/teachers](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/teachers)\" -H \"Authorization: Bearer $TOKEN\"\n\n**Expected:** \nThe `enabledUser` field should be a string with an enum of `\"true\"` or `\"false\"`. The upstream JSON specification for `UserDType` defines it as: `\"type\": \"string\", \"enum\": [\"true\", \"false\"]`. The upstream HTML documentation (Section 6.1.30.4) confirms this by specifying its data type as `TrueFalseEnum`. A client expecting a string will fail to parse a boolean, and vice versa.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/teachers\n      Local Spec: local_spec_for_route\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data type mismatch that will cause deserialization errors in strictly-typed client applications built against the official specification. It violates the data contract defined by OneRoster.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:15:37.962Z",
    "updatedAt": "2025-07-01T16:15:37.962Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-500/incorrect-data-type-for-enableduser-field-in-user-object"
  },
  {
    "id": "cb6c8156-e37b-4a16-a4dd-2f03a769f21f",
    "identifier": "BUG-499",
    "title": "CRITICAL: Demographics schema has incorrect type for ethnicity fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The ethnicity fields in the local Demographics schema are defined as nullable free-form strings.\n\n**Summary:** \nThe ethnicity fields in the local Demographics schema are defined as nullable free-form strings.\n\n**Steps to Reproduce:**\n\n1. Review the `Demographics` component schema in the local spec.\n      2. Fields like `americanIndianOrAlaskaNative`, `asian`, `blackOrAfricanAmerican`, etc., are defined as `type: ['string', 'null']`.\n      3. Review the `DemographicsDType` schema in the upstream JSON spec.\n      4. These same fields are defined as `type: string` with an `enum` of `['true', 'false']`.\n\n**Expected:** \nThese fields should be defined as strings that are restricted to the values `\"true\"` or `\"false\"`, representing a boolean state.\n\n```\n  The upstream JSON spec for `DemographicsDType` defines `americanIndianOrAlaskaNative` as:\n  ```json\n  \"americanIndianOrAlaskaNative\": {\n    \"description\": \"Identification of whether or not the user is an American Indian or Alaska Native ethnicity.\",\n    \"type\": \"string\",\n    \"enum\": [\"true\", \"false\"]\n  }\n  ```\n  This pattern repeats for all the ethnicity/race fields.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a severe data type violation. The local implementation allows any string for these fields, which will lead to data integrity issues and break any client expecting a boolean-like string. The added nullability is also a deviation, as the upstream fields are not defined as nullable.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:10:42.988Z",
    "updatedAt": "2025-07-01T16:10:42.988Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-499/critical-demographics-schema-has-incorrect-type-for-ethnicity-fields"
  },
  {
    "id": "30f890ff-973d-4549-b398-83d980c51eb5",
    "identifier": "BUG-498",
    "title": "HIGH: 'beginDate' and 'endDate' are incorrectly marked as required in the User's 'roles' object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification incorrectly makes the `beginDate` and `endDate` fields mandatory within each object of the `roles` array.\n\n**Summary:** \nThe local specification incorrectly makes the `beginDate` and `endDate` fields mandatory within each object of the `roles` array.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `roles` array within the User object in the local spec's 200 response.\n      2. The `required` list for each role object includes `beginDate` and `endDate`.\n      3. Review the `RoleDType` schema in the upstream spec.\n      4. The `required` list for `RoleDType` is `['roleType', 'role', 'org']`. `beginDate` and `endDate` are defined as optional.\n\n**Expected:** \nThe `beginDate` and `endDate` fields should be optional within the `roles` object, as they are not always applicable or available. The `required` list should only contain `roleType`, `role`, and `org`.\n\n```\n  The upstream JSON spec for `RoleDType` shows `beginDate` and `endDate` as properties, but they are not in the `required` array:\n  ```json\n  \"RoleDType\": {\n    ...\n    \"required\": [\"roleType\", \"role\", \"org\"],\n    ...\n  }\n  ```\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This incorrect requirement will cause validation failures for compliant data sources that omit these optional dates. This makes our implementation overly strict and non-compliant with the OneRoster standard, preventing valid data from being processed.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:06:43.045Z",
    "updatedAt": "2025-07-02T01:13:59.992Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-498/high-begindate-and-enddate-are-incorrectly-marked-as-required-in-the"
  },
  {
    "id": "0ff0ebca-d014-4843-847a-cc01f45671f9",
    "identifier": "BUG-497",
    "title": "CRITICAL: `agents` array in User object contains an invalid 'type' enum",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local schema for items in the `agents` array allows the `type` property to be one of many different object types.\n\n**Summary:** \nThe local schema for items in the `agents` array allows the `type` property to be one of many different object types.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `agents` array within the User object in the 200 response.\n      2. The items in the array have a `type` property with a very broad enum, including values like `academicSession`, `class`, `course`, `org`, etc.\n      3. Review the upstream `UserDType`, which defines `agents` as an array of `UserGUIDRefDType`.\n      4. The `UserGUIDRefDType` has a `type` property which is a string with a single-value enum of `user`.\n\n**Expected:** \nThe `agents` array should only contain references to other Users. Therefore, the `type` property for each item in the array must be the string `\"user\"`.\n\n```\n  The upstream JSON spec at `definitions.UserGUIDRefDType.properties.type` states:\n  ```json\n  \"type\": {\n    \"description\": \"The type of object being referenced i.e. a 'user'.\",\n    \"type\": \"string\",\n    \"enum\": [\"user\"]\n  }\n  ```\n  The HTML spec Section 6.1.30 clarifies: \"The 'agents' attribute allows for relationships between humans to be expressed... a user of role 'parent' MUST have agents that are of type 'student'\". Students are a type of user, confirming the relationship is between users.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a severe data model violation. The `agents` field is specifically for linking users to other users (e.g., a student to their parents/guardians). Allowing other object types in this array completely breaks the semantics of the field and will cause data corruption or parsing errors for compliant clients.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:05:14.230Z",
    "updatedAt": "2025-07-01T16:05:14.230Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-497/critical-agents-array-in-user-object-contains-an-invalid-type-enum"
  },
  {
    "id": "90d0d713-dc79-4c60-95a6-9f5c8f4168a5",
    "identifier": "BUG-496",
    "title": "MEDIUM: User response object is missing the 'resources' field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `User` object omits the `resources` field, which is an array of resource identifiers.\n\n**Summary:** \nThe local specification for the `User` object omits the `resources` field, which is an array of resource identifiers.\n\n**Steps to Reproduce:**\n\n1. Make a successful API call to the endpoint to retrieve a list of students.\n      2\\. Examine the fields available for each user object in the `users` array of the response.\n      3. The `resources` field, defined in the upstream `UserDType`, is not present in the local specification's user schema.\n\n**Expected:** \nThe `User` object schema should include the `resources` field as defined in the upstream specification.\n\n```\n  The upstream JSON spec at `definitions.UserDType.properties` includes:\n  ```json\n  \"resources\": {\n    \"description\": \"The identifiers (GUIDs) for the set of resources that are to be made available to the user...\",\n    \"type\": \"array\",\n    \"minItems\": 0,\n    \"items\": {\n      \"$ref\": \"#/definitions/ResourceGUIDRefDType\"\n    }\n  }\n  ```\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting the `resources` field prevents clients from discovering which resources are available to a specific user directly from the user object, which is a feature of the v1.2 specification. This is a compliance issue and a loss of specified functionality.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:03:55.871Z",
    "updatedAt": "2025-07-01T16:03:55.871Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-496/medium-user-response-object-is-missing-the-resources-field"
  },
  {
    "id": "11657f58-a290-4519-aded-d33d103c00a7",
    "identifier": "BUG-495",
    "title": "MEDIUM: User response object is missing the 'identifier' field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `User` object omits the `identifier` field.\n\n**Summary:** \nThe local specification for the `User` object omits the `identifier` field.\n\n**Steps to Reproduce:**\n\n1. Make a successful API call to the endpoint to retrieve a list of students.\n      2\\. Examine the fields available for each user object in the `users` array of the response.\n      3. The `identifier` field, which is defined in the upstream `UserDType` for backwards compatibility, is not present in the local specification's user schema.\n\n**Expected:** \nThe `User` object schema should include the `identifier` field to maintain backwards compatibility as specified by the standard.\n\n```\n  The upstream JSON spec at `definitions.UserDType.properties` includes:\n  ```json\n  \"identifier\": {\n    \"description\": \"An identifier for the user. NOTE - This characteristic is kept for backwards compatibility with OneRoster 1.1/1.0. The 'userIds' characteristic SHOULD be used instead.\",\n    \"type\": \"string\"\n  }\n  ```\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While noted as a legacy field, its inclusion is part of the v1.2 specification for compatibility. Omitting it makes our implementation non-compliant and could break older clients or integrations that still rely on this field.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:03:03.903Z",
    "updatedAt": "2025-07-02T01:13:29.963Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-495/medium-user-response-object-is-missing-the-identifier-field"
  },
  {
    "id": "5f367cfd-a842-4f62-bf4f-2d30bbc2a12d",
    "identifier": "BUG-494",
    "title": "HIGH: Incorrect 'required' properties for the User object in the response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `required` list for the User object is incorrect. It improperly marks `agents` as required, when it is optional in the upstream spec. It also omits the `dateLastModified` field, which is required by the upstream spec.\n\n**Summary:** \nThe `required` list for the User object is incorrect. It improperly marks `agents` as required, when it is optional in the upstream spec. It also omits the `dateLastModified` field, which is required by the upstream spec.\n\n**Steps to Reproduce:**\n\n1. Review the `required` array for the user object schema in the local specification's 200 response.\n      2. The local spec lists: `sourcedId`, `status`, `enabledUser`, `givenName`, `familyName`, `roles`, `agents`.\n      3. Review the `required` array for the `UserDType` in the upstream specification.\n      4. The upstream spec lists: `sourcedId`, `status`, `dateLastModified`, `enabledUser`, `givenName`, `familyName`, `roles`.\n\n**Expected:** \nThe `required` array in the User schema should exactly match the upstream specification. It should be: `['sourcedId', 'status', 'dateLastModified', 'enabledUser', 'givenName', 'familyName', 'roles']`. The `agents` field should not be in this list.\n\n```\n  The upstream `UserDType` inherits from `Base`, which requires `sourcedId`, `status`, and `dateLastModified`. `UserDType` itself adds `enabledUser`, `givenName`, `familyName`, and `roles` to the required list. The `agents` property on `UserDType` is defined as optional (`minItems: 0`).\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** An incorrect `required` list is a significant contract violation. Clients performing validation based on our spec will fail on valid upstream data that is missing the `agents` field. Conversely, clients may incorrectly assume `dateLastModified` is optional, leading to potential null pointer exceptions or missing data issues.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T16:02:14.246Z",
    "updatedAt": "2025-07-02T01:13:19.348Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-494/high-incorrect-required-properties-for-the-user-object-in-the-response"
  },
  {
    "id": "219506a6-e58b-4ae1-af70-9c9f9fd9fb5c",
    "identifier": "BUG-493",
    "title": "HIGH: The 'limit' query parameter has an undocumented 'maximum' constraint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification imposes a `maximum` of 3000 on the `limit` parameter, which is not present in the official OneRoster specification.\n\n**Summary:** \nThe local specification imposes a `maximum` of 3000 on the `limit` parameter, which is not present in the official OneRoster specification.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `limit` query parameter in the local specification.\n      2. It defines a `maximum` value of 3000.\n      3. Review the schema for the `limit` query parameter in the upstream specification.\n      4. The upstream specification does not define a `maximum` value for this parameter.\n\n   ```bash\n   # A request that is valid according to the upstream spec, but might be rejected by our implementation\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school/classes/some-class/students?limit=5000' -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nThe implementation should not impose a maximum limit that is not documented in the base specification, or if it does, it must be clearly marked as a vendor-specific constraint. To be compliant, the `maximum` constraint should be removed from the specification.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This undocumented constraint will cause unexpected errors for clients who attempt to request a page size larger than 3000, which is permissible according to the official specification. This breaks the principle of least surprise and creates a compliance gap.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:59:59.623Z",
    "updatedAt": "2025-07-03T05:45:06.180Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-493/high-the-limit-query-parameter-has-an-undocumented-maximum-constraint"
  },
  {
    "id": "0132c5c3-27f8-4422-80dc-dd88007859b7",
    "identifier": "BUG-492",
    "title": "HIGH: Undocumented 'search' query parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification includes a non-standard query parameter `search` that is not part of the official OneRoster 1.2 specification for this endpoint.\n\n**Summary:** \nThe local API specification includes a non-standard query parameter `search` that is not part of the official OneRoster 1.2 specification for this endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the parameters for the GET operation in the local spec.\n      2\\. It includes a query parameter named `search`.\n      3. Review the parameters for the same operation in the upstream JSON and HTML specifications.\n      4. The `search` parameter is not defined in the upstream specifications.\n\n   ```bash\n   # A developer following the local spec might try this:\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school/classes/some-class/students?search=John' -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nThe API should only expose parameters defined in the upstream specification. The standard parameters for filtering collections are `filter`, `sort`, `orderBy`, `limit`, `offset`, and `fields`. The `search` parameter should be removed to maintain compliance.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding non-standard parameters breaks compliance and can confuse developers using the official standard for integration. While it might provide extra functionality, it deviates from the interoperability goals of OneRoster. If this functionality is required, it should be documented as a proprietary extension.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:58:28.665Z",
    "updatedAt": "2025-07-03T14:36:15.548Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-492/high-undocumented-search-query-parameter"
  },
  {
    "id": "435f1930-e486-44b0-8ad4-d24bcf3f2212",
    "identifier": "BUG-491",
    "title": "CRITICAL: The 'role' enum within the User's 'roles' object is incomplete",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The enum for the `roles.role` field is missing several values that are mandatory in the upstream OneRoster specification. It is missing `counselor`, `districtAdministrator`, `principal`, `siteAdministrator`, and `systemAdministrator`.\n\n**Summary:** \nThe enum for the `roles.role` field is missing several values that are mandatory in the upstream OneRoster specification. It is missing `counselor`, `districtAdministrator`, `principal`, `siteAdministrator`, and `systemAdministrator`.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the `roles` array within the User object in the 200 response.\n      2. The local spec defines the `role` property with an enum of: `administrator`, `aide`, `guardian`, `parent`, `proctor`, `relative`, `student`, `teacher`.\n      3. The upstream specification defines a much larger set of possible roles.\n      4. An attempt to process a user with a valid upstream role like `counselor` or `principal` would either fail validation against our local spec or the value would be missing from our documentation.\n\n**Expected:** \nThe `role` enum should include all values specified in the `RoleEnum` vocabulary of the upstream specification.\n\n```\n  From the HTML spec, section 6.3.11 `RoleEnum` Vocabulary Description, the full list is: `aide`, `counselor`, `districtAdministrator`, `guardian`, `parent`, `principal`, `proctor`, `relative`, `siteAdministrator`, `student`, `systemAdministrator`, `teacher`.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a compliance failure that will lead to data loss or integration errors. If the source system sends a user with a role of `principal`, our system may either reject the data or fail to represent it correctly because the value is not in the documented enum. This breaks interoperability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:57:26.914Z",
    "updatedAt": "2025-07-02T01:12:28.451Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-491/critical-the-role-enum-within-the-users-roles-object-is-incomplete"
  },
  {
    "id": "6fcf06eb-ba5e-4751-9e7f-3bd83faff730",
    "identifier": "BUG-490",
    "title": "CRITICAL: User response object is missing the required 'userProfiles' field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `User` object omits the `userProfiles` field entirely.\n\n**Summary:** \nThe local specification for the `User` object omits the `userProfiles` field entirely.\n\n**Steps to Reproduce:**\n\n1. Make a successful API call to the endpoint to retrieve a list of students.\n      2\\. Examine the fields available for each user object in the `users` array of the response.\n      3. The `userProfiles` field, which is defined in the upstream `UserDType`, is not present in the local specification's user schema.\n\n**Expected:** \nThe `User` object schema must include the `userProfiles` field, which is an array of `UserProfileDType` objects. This field is optional (`minItems: 0`) but its presence in the schema is part of the standard.\n\n```\n  The upstream JSON spec at `definitions.UserDType.properties` includes:\n  ```json\n  \"userProfiles\": {\n    \"description\": \"The set of system/app/tool profiles for the user.\",\n    \"type\": \"array\",\n    \"minItems\": 0,\n    \"items\": {\n      \"$ref\": \"#/definitions/UserProfileDType\"\n    }\n  }\n  ```\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a field from the specification means our implementation is non-compliant. Clients relying on the standard will expect this field to exist for managing user system access profiles and will fail to integrate correctly with our API if it's missing from both the data and the documentation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:56:18.926Z",
    "updatedAt": "2025-07-02T01:12:18.283Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-490/critical-user-response-object-is-missing-the-required-userprofiles"
  },
  {
    "id": "bc9c42bc-058e-48e6-ab40-f2b904979968",
    "identifier": "BUG-489",
    "title": "CRITICAL: Response contains undocumented 'demographics' object within the User schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `User` object schema in the local specification incorrectly includes a `demographics` field.\n\n**Summary:** \nThe `User` object schema in the local specification incorrectly includes a `demographics` field.\n\n**Steps to Reproduce:**\n\n1. Make a successful API call to the endpoint.\n      2\\. Examine the fields of a user object within the `users` array.\n      3. The local spec indicates that a `demographics` object may be present.\n      4. The upstream specification for the `UserDType` object does not include a `demographics` field. Demographics information is meant to be retrieved via a separate endpoint (`/demographics/{sourcedId}`).\n\n**Expected:** \nThe `User` object in the response should not contain a nested `demographics` object. This data must be fetched from the dedicated `/demographics/{sourcedId}` endpoint as per the OneRoster specification, which intentionally separates sensitive demographic data.\n\n```\n  The `definitions.UserDType.properties` in the upstream JSON spec does not list a `demographics` field. The HTML documentation (Section 4.5) confirms that demographics management is a separate interface.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Including sensitive demographic data in a general-purpose user endpoint is a significant design violation and a potential data exposure risk. The OneRoster specification explicitly segregates this data for privacy and security reasons. This deviation breaks the specified data model and could expose sensitive information where it is not expected.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:55:17.604Z",
    "updatedAt": "2025-07-02T01:12:05.830Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-489/critical-response-contains-undocumented-demographics-object-within-the"
  },
  {
    "id": "d5d4d31a-58e8-483b-a03e-7cfcb30e96b0",
    "identifier": "BUG-488",
    "title": "CRITICAL: Incorrect data type for 'enabledUser' field in User object response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `enabledUser` field in the User object as a `boolean` type.\n\n**Summary:** \nThe local specification defines the `enabledUser` field in the User object as a `boolean` type.\n\n**Steps to Reproduce:**\n\n1. Make a successful API call to the endpoint to retrieve a list of students.\n      2\\. Examine the `enabledUser` field for any user object in the `users` array of the response.\n      3. According to the local spec, this field will be a JSON boolean (`true` or `false`).\n      4. According to the upstream spec, this field must be a JSON string (`\"true\"` or `\"false\"`).\n\n   ```bash\n   # Request\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school/classes/some-class/students' -H 'Authorization: Bearer $TOKEN'\n   \n   # Incorrect response based on local spec\n   # { \"users\": [ { ..., \"enabledUser\": true, ... } ] }\n   \n   # Correct response based on upstream spec\n   # { \"users\": [ { ..., \"enabledUser\": \"true\", ... } ] }\n   ```\n\n**Expected:** \nThe `enabledUser` field should be a `string` type with an enum of `\"true\"` or `\"false\"`, as defined by the upstream OneRoster specification.\n\n```\n  The upstream JSON spec at `definitions.UserDType.properties.enabledUser` states:\n  ```json\n  \"enabledUser\": {\n    \"description\": \"This is used to determine whether or not the record is active in the local system. 'false' denotes that the record is active but system access is curtailed according to the local administration rules.\",\n    \"type\": \"string\",\n    \"enum\": [ \"true\", \"false\" ]\n  }\n  ```\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This data type mismatch will cause parsing errors in any strictly-typed client built against the official OneRoster specification. It is a direct violation of the data model contract.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:53:58.571Z",
    "updatedAt": "2025-07-02T01:11:52.037Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-488/critical-incorrect-data-type-for-enableduser-field-in-user-object"
  },
  {
    "id": "2ced4517-13e0-4e10-a8f9-217143fee136",
    "identifier": "BUG-487",
    "title": "CRITICAL: Response body uses a non-standard pagination model instead of the specified 'X-Total-Count' header",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API response includes pagination metadata (`totalCount`, `pageCount`, `pageNumber`, etc.) directly in the JSON body.\n\n**Summary:** \nThe API response includes pagination metadata (`totalCount`, `pageCount`, `pageNumber`, etc.) directly in the JSON body.\n\n**Steps to Reproduce:**\n\n1. Make a successful API call to the endpoint.\n      2\\. Observe the response body.\n\n   ```bash\n   # Hypothetical curl command demonstrating the expected structure mismatch\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school/classes/some-class/students' -H 'Authorization: Bearer $TOKEN'\n   ```\n   3. The local implementation returns a JSON body with pagination fields: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n   4. The upstream specification dictates that the response body should be a `UserSetDType` object (containing only a 'users' array) and pagination information, specifically the total count, should be returned in the `X-Total-Count` HTTP header.\n\n**Expected:** \nThe response body should conform to the `UserSetDType` which only contains a `users` array. The total number of records should be communicated via the `X-Total-Count` response header, as specified by the upstream standard.\n\n```\n  The upstream JSON spec defines the 200 response as:\n  ```json\n  \"200\": {\n    \"description\": \"The request was successfully completed and a collection has been returned...\",\n    \"schema\": {\n      \"$ref\": \"#/definitions/UserSetDType\"\n    },\n    \"headers\": {\n      \"X-Total-Count\": {\n        \"description\": \"The total number of resources that are available to be returned\",\n        \"type\": \"integer\"\n      }\n    }\n  }\n  ```\n  The referenced `UserSetDType` contains only the `users` property.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a fundamental break from the OneRoster specification's pagination model. Any compliant client will fail to parse our response correctly because it will not expect the extra fields in the body and will look for the count in the headers. This makes our implementation incompatible with standard OneRoster clients.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:52:38.671Z",
    "updatedAt": "2025-07-03T05:33:35.684Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-487/critical-response-body-uses-a-non-standard-pagination-model-instead-of"
  },
  {
    "id": "c1543ace-96a0-45ed-8c94-6a5bbda08fd8",
    "identifier": "BUG-486",
    "title": "CRITICAL: Incorrect Security Definition Missing Required OAuth2 Scope",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:**       The local OpenAPI specification defines a generic security requirement `OAuth2: []`, failing to specify the mandatory OAuth2 scope required by the upstream OneRoster specification.\n\n**Summary:** \n      The local OpenAPI specification defines a generic security requirement `OAuth2: []`, failing to specify the mandatory OAuth2 scope required by the upstream OneRoster specification.\n\n**Steps to Reproduce:**\n      1. Review the security definition for the route `GET /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students`.\n      2. The local spec defines security as `OAuth2: []`, implying any valid token is sufficient.\n      3. The upstream specification requires a specific scope for this operation.\n      4. A request with a valid token but without the 'roster.readonly' scope may be incorrectly accepted by the local implementation, or the documentation fails to inform the developer of the required scope for a successful request.\n\n```\n  This is a documentation and contract bug, not reproducible with a single curl command without knowing the server's actual validation logic. However, the contract violation is clear from the specs.\n```\n\n**Expected:** \n      The security definition should align with the upstream specification, which mandates the '[https://purl.imsglobal.org/spec/or/v1p2/scope/roster.readonly](https://purl.imsglobal.org/spec/or/v1p2/scope/roster.readonly)' scope for this operation.\n\n```\n  The upstream JSON spec at `/paths/~1schools~1{schoolSourcedId}~1classes~1{classSourcedId}~1students/get/security` states:\n  ```json\n  \"security\": [\n    {\n      \"OAuth2CC\": [\n        \"https://purl.imsglobal.org/spec/or/v1p2/scope/roster.readonly\"\n      ]\n    }\n  ]\n  ```\n```\n\n**Environment:**       API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/students.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:**       This is a critical security and compliance issue. By not enforcing or documenting the required scope, our API is non-compliant with the OneRoster standard. This could lead to authorization bypass vulnerabilities if the server code relies on this incorrect specification, or it will cause integration failures for clients who follow our documentation and don't request the correct scope. The local security scheme should also be named `OAuth2CC` to match the upstream spec.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:51:23.143Z",
    "updatedAt": "2025-07-03T12:47:04.450Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-486/critical-incorrect-security-definition-missing-required-oauth2-scope"
  },
  {
    "id": "2e3340ad-df1d-42ef-957c-5e21c4764762",
    "identifier": "BUG-485",
    "title": "Incorrect and duplicate tags applied to the endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification applies two tags to the endpoint: `Schools Management` and `Enrollments Management`. It also contains a duplicate definition for the `Schools Management` tag at the root level.\n\n**Summary:** \nThe local specification applies two tags to the endpoint: `Schools Management` and `Enrollments Management`. It also contains a duplicate definition for the `Schools Management` tag at the root level.\n\n**Steps to Reproduce:**\n\n1. Inspect the `tags` section of the GET operation in the local specification.\n      2. Observe the presence of `Schools Management` and `Enrollments Management`.\n      3. Inspect the top-level `tags` definition in the local specification.\n      4. Observe that `Schools Management` is defined twice with different descriptions.\n\n**Expected:** \nAccording to the upstream specification, this endpoint should only have the `SchoolsManagement` tag. There should not be an additional `Enrollments Management` tag for this specific operation, nor should there be duplicate root tag definitions.\n\n```\n  Evidence from upstream JSON spec for the endpoint:\n  `\"tags\": [\"SchoolsManagement\"]`\n```\n\n**Environment:** According to the upstream specification, this endpoint should only have the `SchoolsManagement` tag. There should not be an additional `Enrollments Management` tag for this specific operation, nor should there be duplicate root tag definitions.\n\n```\n  Evidence from upstream JSON spec for the endpoint:\n  `\"tags\": [\"SchoolsManagement\"]`\n```\n\n**Additional Notes:** This is a minor specification quality and organization issue. While it does not affect API functionality, it creates a messy and confusing contract for developers and can lead to poorly organized documentation when using tools like Swagger UI. It deviates from the clean tagging of the official specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:41:46.012Z",
    "updatedAt": "2025-07-02T01:11:02.125Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-485/incorrect-and-duplicate-tags-applied-to-the-endpoint"
  },
  {
    "id": "04751c07-a4b4-41f5-8d25-249824364c04",
    "identifier": "BUG-484",
    "title": "The `fields` query parameter is inaccurately typed as a simple string",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `fields` parameter as a simple string, which does not accurately represent its function as a comma-separated list of values.\n\n**Summary:** \nThe local specification defines the `fields` parameter as a simple string, which does not accurately represent its function as a comma-separated list of values.\n\n**Steps to Reproduce:**\n\n1. Examine the local OpenAPI specification for the endpoint.\n      2\\. Note that the `fields` query parameter is defined with `schema: { type: string }`.\n\n**Expected:** \nThe upstream Swagger 2.0 specification defines this parameter as an array of strings that is serialized as a comma-separated value.\n      Evidence from upstream JSON spec:\n      `json       \"name\": \"fields\",       \"in\": \"query\",       \"description\": \"To identify the range of fields that should be supplied in the response message.\",       \"required\": false,       \"type\": \"array\",       \"items\": {         \"type\": \"string\"       },       \"collectionFormat\": \"csv\"       `\n      While OpenAPI 3.x represents this differently, a simple `type: string` is an oversimplification. It should be defined as an array with appropriate styling to indicate its comma-separated nature (e.g., `style: form, explode: false`).\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is primarily a documentation and specification quality issue. It hinders automated client generation and misinforms developers about the expected format of the `fields` parameter. A more accurate schema definition would improve the clarity and usability of the API",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:40:21.483Z",
    "updatedAt": "2025-07-03T17:05:41.463Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-484/the-fields-query-parameter-is-inaccurately-typed-as-a-simple-string"
  },
  {
    "id": "cca14260-6d51-462a-a8a7-761ee9e35f61",
    "identifier": "BUG-483",
    "title": "Missing `enum` constraint on `type` field in nested objects",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local schema for the enrollment response lacks `enum` validation on the `user.type` and `class.type` fields.\n\n**Summary:** \nThe local schema for the enrollment response lacks `enum` validation on the `user.type` and `class.type` fields.\n\n**Steps to Reproduce:**\n\n1. Inspect the 200 OK response schema in the local specification.\n      2\\. Look at the `user` and `class` objects nested within each enrollment object.\n      3. Observe that their respective `type` fields are defined as simple strings without an `enum` constraint.\n\n   ```bash\n   # Request data to observe the response structure\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/enrollments' \\\n   -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nThe upstream specification strictly defines the value for these `type` fields to identify the object being referenced.\n      - The `user.type` field should be a string with `enum: ['user']`.\n      - The `class.type` field should be a string with `enum: ['class']`.\n\n```\n  Evidence from upstream JSON spec:\n  - The `UserGUIDRefDType` definition includes: `\"type\": { \"description\": \"...\", \"type\": \"string\", \"enum\": [\"user\"] }`\n  - The `ClassGUIDRefDType` definition includes: `\"type\": { \"description\": \"...\", \"type\": \"string\", \"enum\": [\"class\"] }`\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The absence of the `enum` constraint makes the schema less strict than the standard requires. This could potentially allow the server to send non-standard or incorrect data in these fields, or it could mislead a developer who generates a client from this spec into thinking other values are permissible.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:38:49.124Z",
    "updatedAt": "2025-07-02T01:10:28.407Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-483/missing-enum-constraint-on-type-field-in-nested-objects"
  },
  {
    "id": "6b7b8c8e-5000-4c55-97f0-b0bf61efd558",
    "identifier": "BUG-482",
    "title": "`limit` query parameter has a non-standard `maximum` constraint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `limit` query parameter imposes a `maximum` value of 3000, which is not defined in the official OneRoster specification.\n\n**Summary:** \nThe local specification for the `limit` query parameter imposes a `maximum` value of 3000, which is not defined in the official OneRoster specification.\n\n**Steps to Reproduce:**\n\n1. Examine the local OpenAPI specification for the endpoint.\n      2\\. Note that the `limit` query parameter has a `maximum: 3000` constraint.\n      3. Attempt to make a request with a limit greater than 3000.\n\n   ```bash\n   # This request might be rejected by the server due to the constraint\n   curl -v -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/enrollments?limit=3001' \\\n   -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nThe `limit` parameter should not have a `maximum` constraint defined in the specification, as the upstream standard does not impose one. While a service provider can choose to enforce a server-side maximum, documenting it in the specification makes the proprietary limit part of the API contract, which is a deviation.\n\n```\n  Evidence from upstream JSON spec:\n  The `limit` parameter definition only includes `minimum: 1` and `default: 100`. There is no `maximum`.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This undocumented restriction can cause unexpected failures for clients that are built strictly to the public specification and attempt to request larger page sizes. It limits the functionality of the API in a non-standard way.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:37:34.725Z",
    "updatedAt": "2025-07-03T05:41:55.960Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-482/limit-query-parameter-has-a-non-standard-maximum-constraint"
  },
  {
    "id": "605106c9-459c-46a9-b2ef-0189c50017f4",
    "identifier": "BUG-481",
    "title": "`beginDate` and `endDate` fields in Enrollment object are incorrectly marked as required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `beginDate` and `endDate` fields as required within the enrollment object schema.\n\n**Summary:** \nThe local specification defines the `beginDate` and `endDate` fields as required within the enrollment object schema.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments` endpoint.\n      2. Inspect the schema for the enrollment objects in the response.\n      3. The `beginDate` and `endDate` fields are listed in the `required` array for each enrollment object.\n\n   ```bash\n   # Request data from the endpoint\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/enrollments' \\\n   -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nThe upstream OneRoster specification defines both `beginDate` and `endDate` as optional fields. They should not be in the `required` array.\n\n```\n  Evidence from upstream JSON spec (`EnrollmentDType` definition):\n  Neither `beginDate` nor `endDate` are present in the `required` array.\n\n  Evidence from upstream HTML documentation (Tables 6.1.14.6 and 6.1.14.7):\n  Both `beginDate` and `endDate` are listed with a multiplicity of `[0..1]`, confirming they are optional.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Marking optional fields as required is a critical violation of the specification. It forces the server to always provide these fields, even when they might not be applicable or available, and misleads client developers into expecting them. The local spec attempts to work around this by making the fields nullable, but this is not the same as being optional (i.e., the key may not be present at all). This is a deviation from the standard contract.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:36:25.973Z",
    "updatedAt": "2025-07-02T01:20:17.481Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-481/begindate-and-enddate-fields-in-enrollment-object-are-incorrectly"
  },
  {
    "id": "2da78453-d03b-4ffe-9b5c-2a3b97262e64",
    "identifier": "BUG-480",
    "title": "Undocumented `search` query parameter is implemented",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification includes a `search` query parameter, which is not part of the official OneRoster specification.\n\n**Summary:** \nThe local API specification includes a `search` query parameter, which is not part of the official OneRoster specification.\n\n**Steps to Reproduce:**\n\n1. Examine the local OpenAPI specification for the endpoint.\n      2\\. Note the presence of a query parameter named `search`.\n      3. This parameter can be used in a GET request.\n\n   ```bash\n   # Example of using the non-standard parameter\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/enrollments?search=somequery' \\\n   -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nThe API should only implement the query parameters defined in the upstream OneRoster specification. The `search` parameter should not exist.\n\n```\n  The upstream JSON spec for the `/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments` path lists only the following query parameters: `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`.\n\n  The upstream HTML documentation (Section 4.9.4) for the `getEnrollmentsForClassInSchool` operation also confirms this list of query parameters and makes no mention of a `search` parameter.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Implementing undocumented and non-standard parameters is a significant security risk. It expands the attack surface of the API. If this parameter is not properly sanitized, it could be vulnerable to injection attacks (e.g., SQLi, NoSQLi). It also represents a deviation from the standard that could cause confusion for developers building compliant clients.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:35:25.730Z",
    "updatedAt": "2025-07-03T14:36:15.550Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-480/undocumented-search-query-parameter-is-implemented"
  },
  {
    "id": "4a06581d-28f3-482c-8f87-2c9386ad92ce",
    "identifier": "BUG-479",
    "title": "Incorrect data type and required status for `primary` field in Enrollment object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `primary` field as a required JSON boolean (`type: boolean`).\n\n**Summary:** \nThe local specification defines the `primary` field as a required JSON boolean (`type: boolean`).\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments` endpoint.\n      2. Inspect the schema for the enrollment objects in the response.\n      3. The `primary` field is defined as a required `boolean`.\n\n   ```bash\n   # Request data from the endpoint\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/enrollments' \\\n   -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nThe upstream specification defines the `primary` field as an optional string with an enum of `['true', 'false']`.\n\n```\n  There are two distinct bugs here:\n  1.  **Incorrect Data Type:** It should be a string, not a boolean.\n  2.  **Incorrect Required Status:** It should be optional, not required.\n\n  Evidence from upstream JSON spec (`EnrollmentDType` definition):\n  `\"primary\": { \"description\": \"...\", \"type\": \"string\", \"enum\": [\"true\", \"false\"] }`\n  The field is NOT listed in the `required` array.\n\n  Evidence from upstream HTML documentation (Table 6.1.14.5):\n  The `primary` attribute has a multiplicity of `[0..1]` (optional) and its data type is `TrueFalseEnum`, which is an enumeration of strings.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This deviation is critical because it involves both an incorrect data type and an incorrect required status for the same field. Compliant clients will fail when trying to parse a boolean instead of a string, and they are not prepared to handle a missing field if the server were to treat it as optional (which it should). This breaks the data contract in two ways.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:34:17.070Z",
    "updatedAt": "2025-07-02T01:20:25.339Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-479/incorrect-data-type-and-required-status-for-primary-field-in"
  },
  {
    "id": "d5dbbeca-a290-425e-b71b-9045702aecd8",
    "identifier": "BUG-478",
    "title": "Required `school` field is missing from enrollment objects in the response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The enrollment objects returned by the API are missing the `school` field, which should contain a GUIDRef object linking to the school.\n\n**Summary:** \nThe enrollment objects returned by the API are missing the `school` field, which should contain a GUIDRef object linking to the school.\n\n**Steps to Reproduce:**\n\n1. Make a successful GET request to the `/ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments` endpoint.\n      2. Inspect the individual enrollment objects within the `enrollments` array in the response.\n      3. Observe that the `school` field is missing from each object.\n\n   ```bash\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/enrollments' \\\n   -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nThe upstream OneRoster specification defines the `school` field as a required component of the `Enrollment` data model. Every enrollment object must include this field.\n\n```\n  Evidence from upstream JSON spec (`EnrollmentDType` definition):\n  The `required` array explicitly lists `school`:\n  `\"required\": [\"sourcedId\", \"status\", \"dateLastModified\", \"user\", \"class\", \"school\", \"role\"]`\n\n  Evidence from upstream HTML documentation (Table 6.1.14 Enrollment Class Description):\n  The `school` attribute is listed with a multiplicity of `[1]`, meaning it is mandatory.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The absence of a required field is a major violation of the API contract. Clients that are compliant with the OneRoster specification will expect the `school` field to be present and may fail to parse the response correctly, leading to application errors.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:32:49.586Z",
    "updatedAt": "2025-07-02T01:09:10.598Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-478/required-school-field-is-missing-from-enrollment-objects-in-the"
  },
  {
    "id": "94c18ed6-376d-4812-b82c-3b452a45352e",
    "identifier": "BUG-477",
    "title": "Non-standard pagination fields returned in 200 OK response body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns pagination metadata directly within the 200 OK JSON response body, using fields like `totalCount`, `pageCount`, `pageNumber`, etc.\n\n**Summary:** \nThe local implementation returns pagination metadata directly within the 200 OK JSON response body, using fields like `totalCount`, `pageCount`, `pageNumber`, etc.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments` endpoint.\n      2. Observe the JSON response body.\n      3. It contains top-level keys for pagination: `totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`.\n\n   ```bash\n   # Make a standard request to the endpoint\n   curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/some-school-id/classes/some-class-id/enrollments' \\\n   -H 'Authorization: Bearer $TOKEN'\n   ```\n\n**Expected:** \nAccording to the upstream OneRoster specification, for collection endpoints, pagination metadata should be communicated via HTTP headers. Specifically, the total number of available resources should be returned in the `X-Total-Count` header. The response body itself should only contain the `enrollments` array, wrapped within a root object.\n\n```\n  The upstream JSON spec for a 200 response on this endpoint shows:\n  ```json\n  \"headers\": {\n    \"X-Total-Count\": {\n      \"description\": \"The total number of resources that are available to be returned\",\n      \"type\": \"integer\"\n    }\n  },\n  \"schema\": {\n    \"$ref\": \"#/definitions/EnrollmentSetDType\"\n  }\n  ```\n  The `EnrollmentSetDType` definition only contains the `enrollments` array.\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments\n      Local Spec: ims/oneroster/rostering/v1p2/schools/{schoolSourcedId}/classes/{classSourcedId}/enrollments.filtered.yaml\n      Upstream Spec (JSON): oneroster.rostering.upstream.json\n      Upstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation from the OneRoster specification's defined pagination mechanism. Clients built to the standard will look for the `X-Total-Count` header and will not know how to parse the proprietary pagination fields in the response body. This breaks compliance and interoperability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:29:58.630Z",
    "updatedAt": "2025-07-03T05:33:38.903Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-477/non-standard-pagination-fields-returned-in-200-ok-response-body"
  },
  {
    "id": "a725ef55-b54a-4a89-96e6-77305b3577b7",
    "identifier": "BUG-476",
    "title": "LOW: Path Mismatch Due to Trailing Slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The path for the organizations resource in the local spec is defined as `/ims/oneroster/rostering/v1p2/orgs/`, which includes a trailing slash.\n\n**Summary:** \nThe path for the organizations resource in the local spec is defined as `/ims/oneroster/rostering/v1p2/orgs/`, which includes a trailing slash.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the path defined in the local spec: `/ims/oneroster/rostering/v1p2/orgs/`.\n2. Observe the path defined in the upstream spec. The `basePath` is `/ims/oneroster/rostering/v1p2` and the path is `/orgs`. The combined path is `/ims/oneroster/rostering/v1p2/orgs`.\n3. Note the extra trailing slash in the local implementation's path.\n\n**Expected:** \nThe upstream specification combines a `basePath` of `/ims/oneroster/rostering/v1p2` with a relative path of `/orgs` to form the full path `/ims/oneroster/rostering/v1p2/orgs`, without a trailing slash. While many web frameworks treat these paths as equivalent, it is a literal deviation from the specification.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a minor inconsistency but can cause issues with clients or test harnesses that perform strict string matching on URL paths. For full compliance and to avoid any potential routing issues, the path should exactly match the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:26:31.363Z",
    "updatedAt": "2025-07-02T01:13:21.249Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-476/low-path-mismatch-due-to-trailing-slash"
  },
  {
    "id": "fd200f09-d403-40c8-9006-ef15f9339442",
    "identifier": "BUG-475",
    "title": "MEDIUM: Incorrect Type for 'fields' Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `fields` query parameter is defined as `type: string` in the local OpenAPI 3.1 specification.\n\n**Summary:** \nThe `fields` query parameter is defined as `type: string` in the local OpenAPI 3.1 specification.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the definition of the `fields` query parameter for `GET /orgs` in the local spec. It is defined with `type: string`.\n2. Examine the definition in the upstream JSON spec. It is defined as `type: array` with `collectionFormat: \"csv\"`.\n\n**Expected:** \nThe upstream OpenAPI 2.0 specification defines `fields` as an array of strings, which will be formatted as a CSV string on the wire.\n\nFrom `oneroster.rostering.upstream.json`:\n\n```json\n\"name\": \"fields\",\n\"in\": \"query\",\n...\n\"required\": false,\n\"type\": \"array\",\n\"items\": {\n    \"type\": \"string\"\n},\n\"collectionFormat\": \"csv\"\n```\n\nWhile the on-the-wire format might be the same (e.g., `?fields=sourcedId,name`), the type definition is incorrect. The correct way to represent this in OpenAPI 3.x is with `type: array` and `style: form`, `explode: false`. Defining it as a simple `string` loses semantic meaning and can cause issues for code generation tools that rely on the correct type information.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a medium-severity bug. Although the runtime behavior might appear correct for simple clients, the inaccurate type definition in the OpenAPI spec misrepresents the parameter's nature. This can lead to incorrect client code generation, validation errors in tooling, and a misunderstanding of how the parameter should be constructed (i.e., as a collection of values rather than a single opaque string).",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:25:24.763Z",
    "updatedAt": "2025-07-03T17:05:41.456Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-475/medium-incorrect-type-for-fields-query-parameter"
  },
  {
    "id": "e0c729d7-6479-4ade-a4ac-6cc7610b5cf7",
    "identifier": "BUG-474",
    "title": "HIGH: 'children' Field is Incorrectly Required in Org Object Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `children` field in the response `org` object schema for `GET /orgs` is marked as required.\n\n**Summary:** \nThe `children` field in the response `org` object schema for `GET /orgs` is marked as required.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schema for the `org` object in the `200` response of `GET /ims/oneroster/rostering/v1p2/orgs/`.\n2. The local spec lists the `children` field in the `required` array for the `org` object.\n3. Compare this with the upstream specification, which defines `children` as optional.\n\nCurl command to demonstrate a valid upstream response that would be invalid according to the local spec:\n\n```bash\n# This response, without a 'children' field, is valid according to the upstream spec but not the local one.\n{\n    \"orgs\": [\n        {\n            \"sourcedId\": \"org123\",\n            \"status\": \"active\",\n            \"dateLastModified\": \"2022-09-19T10:00:00Z\",\n            \"name\": \"Top Level Org\",\n            \"type\": \"district\",\n            \"identifier\": \"DIST-01\",\n            \"parent\": null\n        }\n    ],\n    ...\n}\n```\n\n**Expected:** \nThe upstream specification defines the `children` field as optional. Both the JSON and HTML specifications show its multiplicity is `[0.. unbounded]`, meaning it can be omitted.\n\nFrom the upstream JSON specification, `definitions.OrgDType.properties.children`:\n\n```json\n\"children\": {\n    \"description\": \"The 'sourcedIds' for the set of child organizations.\",\n    \"type\": \"array\",\n    \"minItems\": 0,\n    \"items\": {\n        \"$ref\": \"#/definitions/OrgGUIDRefDType\"\n    }\n}\n```\n\nThe `minItems: 0` and the absence of `children` from the `required` array in the base `OrgDType` definition indicate it is optional.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Incorrectly marking an optional field as required is a significant schema violation. A server that strictly adheres to the upstream spec might omit the `children` field for an organization that has no children. A client generated from the local spec would fail to parse this valid response, causing runtime errors.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:24:08.889Z",
    "updatedAt": "2025-07-02T01:21:24.769Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-474/high-children-field-is-incorrectly-required-in-org-object-schema"
  },
  {
    "id": "042611ad-1966-4b8e-90c3-081e8bc4a0d1",
    "identifier": "BUG-473",
    "title": "HIGH: Undocumented 'search' Query Parameter on GET /orgs",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification includes a `search` query parameter for the `GET /orgs` endpoint.\n\n**Summary:** \nThe local API specification includes a `search` query parameter for the `GET /orgs` endpoint.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the parameters for the `GET /ims/oneroster/rostering/v1p2/orgs/` endpoint in the local specification.\n2. Note the presence of a `search` query parameter.\n3. Review the parameters for the corresponding `GET /orgs` endpoint in the upstream JSON and HTML specifications.\n4. The `search` parameter is not defined in either upstream document.\n\nCurl command to demonstrate the non-standard parameter:\n\n```bash\ncurl \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/?search=somequery\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe official upstream specifications do not define a `search` parameter. The standard parameters for filtering collections are `filter`, `fields`, `limit`, `offset`, `sort`, and `orderBy`. The `search` parameter is a non-standard extension and should not be present.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding non-standard query parameters breaks interoperability. Clients built against the official specification will be unaware of this `search` functionality. While it doesn't break existing compliant behavior, it introduces fragmentation. If this functionality is desired, it should be documented as a proprietary extension. The standard way to query data is with the `filter` parameter.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:22:35.449Z",
    "updatedAt": "2025-07-03T06:01:26.051Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-473/high-undocumented-search-query-parameter-on-get-orgs"
  },
  {
    "id": "d39e383d-e776-4d12-8a13-6d2dafd3acbb",
    "identifier": "BUG-472",
    "title": "CRITICAL: 'dateLastModified' Field is Not Required in Org Object Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the `200` response schema for `GET /orgs`, the `dateLastModified` field within each `org` object is defined as optional.\n\n**Summary:** \nIn the `200` response schema for `GET /orgs`, the `dateLastModified` field within each `org` object is defined as optional.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schema for the `org` object in the `200` response of `GET /ims/oneroster/rostering/v1p2/orgs/`.\n2. The local spec defines the `dateLastModified` field but does not list it in the `required` array for the `org` object.\n3. Compare this with the upstream specification, which mandates that `dateLastModified` must be present.\n\nCurl command to demonstrate a potentially valid (but non-compliant) response from the local implementation:\n\n```bash\n# A response missing 'dateLastModified' would be considered valid by the local spec, but invalid by the upstream spec.\ncurl \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification mandates that the `dateLastModified` field is required for all `Org` objects. This is defined in the `Base` class, from which `OrgDType` inherits.\n\nFrom the upstream HTML documentation, section 6.1.4.3:\nThe multiplicity for `dateLastModified` is `[1]`, meaning it is mandatory.\n\nFrom the upstream JSON specification, `definitions.AcademicSessionDType` (which inherits from `Base` just like `OrgDType` does) lists `dateLastModified` in its `required` array, confirming the inheritance pattern. `OrgDType` also has a `dateLastModified` field that is required because it inherits from `Base`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Missing a required field is a critical schema violation. The `dateLastModified` timestamp is essential for clients that need to synchronize data and query for objects that have been modified since their last request. An implementation that omits this field prevents clients from performing efficient, incremental data fetches.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:21:26.466Z",
    "updatedAt": "2025-07-02T19:51:35.853Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-472/critical-datelastmodified-field-is-not-required-in-org-object-schema"
  },
  {
    "id": "e9637d4c-fbf7-46f8-b593-aa2e3981b72c",
    "identifier": "BUG-471",
    "title": "CRITICAL: Incorrect Pagination Mechanism in GET /orgs Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) within the JSON response body for the `GET /orgs` endpoint.\n\n**Summary:** \nThe local implementation returns pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) within the JSON response body for the `GET /orgs` endpoint.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/orgs/` endpoint.\n2. Observe the response body. The local spec shows a JSON body containing pagination fields: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n3. Check the upstream JSON specification for the `GET /orgs` endpoint. It specifies that the total count of resources should be returned in the `X-Total-Count` HTTP header, not in the response body.\n\nCurl command to illustrate the expected header:\n\n```bash\n# This is a conceptual command, as the server implements the wrong behavior.\n# A correct implementation would return the X-Total-Count header.\ncurl -I \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/?limit=5\" \\\n-H \"Authorization: Bearer $TOKEN\"\n\n# Expected Response Header:\n# X-Total-Count: 1234\n```\n\n**Expected:** \nAccording to the upstream OpenAPI 2.0 JSON specification for the `GET /orgs` endpoint, the total number of available resources must be returned in the `X-Total-Count` response header.\n\nFrom `oneroster.rostering.upstream.json`, under `paths./orgs.get.responses.200`:\n\n```json\n\"headers\": {\n  \"X-Total-Count\": {\n    \"description\": \"The total number of resources that are available to be returned\",\n    \"type\": \"integer\"\n  }\n}\n```\n\nThe response body should only contain a wrapper object with the `orgs` array, as defined by the `OrgSetDType` schema. The other pagination fields are non-standard and violate the specified pagination mechanism.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical bug because it breaks the standard method for clients to determine the total number of items for pagination. A compliant client will look for the `X-Total-Count` header and will not know how to parse the proprietary pagination fields in the response body. This makes client-side pagination logic incompatible with the specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:18:58.425Z",
    "updatedAt": "2025-07-03T05:43:00.403Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-471/critical-incorrect-pagination-mechanism-in-get-orgs-response"
  },
  {
    "id": "becf78cd-d770-4fcd-bc12-edde54f286e6",
    "identifier": "BUG-470",
    "title": "CRITICAL: Undocumented POST /orgs Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `POST /ims/oneroster/rostering/v1p2/orgs/` endpoint for creating new organizations.\n\n**Summary:** \nThe local API specification defines a `POST /ims/oneroster/rostering/v1p2/orgs/` endpoint for creating new organizations.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the upstream OneRoster 1.2 specifications (both JSON and HTML).\n2. Note that for the `/orgs` resource, only GET operations (`getAllOrgs`, `getOrg`) are defined.\n3. Compare this with the local specification, which defines a `POST /ims/oneroster/rostering/v1p2/orgs/` endpoint.\n4. The presence of this POST endpoint is a non-standard, undocumented extension.\n\nCurl command to demonstrate the implemented (but non-standard) endpoint:\n\n```bash\ncurl -X POST https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/ \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"org\": {\n    \"name\": \"New Test Org\",\n    \"type\": \"school\"\n  }\n}'\n```\n\n**Expected:** \nThe official upstream OneRoster 1.2 specifications do not include a POST method for the `/orgs` resource. Both the upstream JSON spec (`oneroster.rostering.upstream.json`) and the HTML documentation (`oneroster.rostering.upstream.html`) only define `GET` operations for this resource collection. The specification is read-only for this object type. Therefore, the `POST /orgs` endpoint should not exist.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation from the standard. The local implementation provides write capabilities (`POST`) for a resource that the official specification designates as read-only. This can lead to significant interoperability issues, as compliant clients will not expect this functionality. It also expands the attack surface by introducing a non-standard data modification endpoint. Section 4.8 of the upstream HTML documentation, \"OrgsManagement Interface Description\", only lists `getAllOrgs` and `getOrg`, with no mention of a creation operation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:17:44.200Z",
    "updatedAt": "2025-07-02T01:12:15.749Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-470/critical-undocumented-post-orgs-endpoint"
  },
  {
    "id": "68b72713-7711-4fba-8175-e330782230a9",
    "identifier": "BUG-469",
    "title": "'children' field is incorrectly marked as required in Org schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `children` field is included in the `required` array of the `Org` schema in the local specification. This mandates that the `children` field must always be present in the response.\n\n**Summary:** \nThe `children` field is included in the `required` array of the `Org` schema in the local specification. This mandates that the `children` field must always be present in the response.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the /ims/oneroster/rostering/v1p2/orgs/{sourcedId} endpoint for an organization that has no children.\n2. According to the local spec, the `children` field must still be present in the response (e.g., as an empty array).\n3. Compare this to the upstream specification which states the field is optional.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/some-leaf-node-org\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `children` field is optional and should not be in the `required` array. It should only be present if an organization has child organizations.\n\nEvidence from upstream JSON specification (`definitions.OrgDType`):\nThe `children` field is defined as `{\"type\": \"array\", \"minItems\": 0, ...}` and is NOT listed in the `required` array of `OrgDType`.\n\nEvidence from upstream HTML documentation (Section 6.1.18.5, Table 6.1.18.5):\nThe multiplicity for the `children` attribute is `[0.. unbounded]`, which confirms it is optional and can be absent.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While less severe than omitting a required field, mandating an optional field is still a schema deviation. Parsers that are strictly compliant with the upstream specification may not expect the `children` field to be present for a leaf-node organization. Although the local spec defines a `default: []` for this field, which mitigates some risk, it's still a deviation from the official specification's definition of the object structure. This adds unnecessary bloat to the response payload for organizations without children.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:13:22.992Z",
    "updatedAt": "2025-07-02T01:21:23.927Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-469/children-field-is-incorrectly-marked-as-required-in-org-schema"
  },
  {
    "id": "2afff56c-544a-4ffc-8b76-7ecf1d50670b",
    "identifier": "BUG-468",
    "title": "'dateLastModified' field is not marked as required in Org schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `dateLastModified` field is defined in the `Org` schema but is not included in the `required` array for the schema. This means the implementation may omit this field.\n\n**Summary:** \nThe `dateLastModified` field is defined in the `Org` schema but is not included in the `required` array for the schema. This means the implementation may omit this field.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the /ims/oneroster/rostering/v1p2/orgs/{sourcedId} endpoint.\n2. Note that according to the local spec, the `dateLastModified` field may be omitted from the response.\n3. Compare this to the upstream specification which mandates its presence.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `dateLastModified` field MUST be present in the response for an `Org` object. It is a required field according to the official specification.\n\nEvidence from upstream JSON specification (`definitions.OrgDType.required`):\nThe `required` array for `OrgDType` is: `[\"sourcedId\", \"status\", \"dateLastModified\", \"name\", \"type\", \"identifier\"]`.\n\nEvidence from upstream HTML documentation (Section 6.1.4.3, Table 6.1.4.3):\nThe multiplicity for the inherited `dateLastModified` attribute is `[1]`, meaning it is mandatory.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical schema violation. The `dateLastModified` field is essential for clients that need to synchronize data and query for changes since a certain point in time. Omitting this required field breaks a fundamental feature of the OneRoster specification and will cause compliant clients to fail validation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:12:12.973Z",
    "updatedAt": "2025-07-03T13:03:48.329Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-468/datelastmodified-field-is-not-marked-as-required-in-org-schema"
  },
  {
    "id": "7e809c94-7cdc-4bcf-8898-5959328cd05c",
    "identifier": "BUG-467",
    "title": "Incorrect Schema for 'parent' Object in Org Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `parent` object in the `Org` schema is defined as an object containing only a `sourcedId` field.\nLocal `Org.properties.parent` schema:\n\n```yaml\nparent:\n  type:\n    - object\n    - 'null'\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Summary:** \nThe `parent` object in the `Org` schema is defined as an object containing only a `sourcedId` field.\nLocal `Org.properties.parent` schema:\n\n```yaml\nparent:\n  type:\n    - object\n    - 'null'\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the /ims/oneroster/rostering/v1p2/orgs/{sourcedId} endpoint for an organization that has a parent.\n2. Inspect the `parent` object within the `org` object in the JSON response.\n3. Observe that the `parent` object only contains a `sourcedId` field.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/some-child-org-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `parent` object should conform to the `OrgGUIDRefDType` schema, which requires three fields: `href`, `sourcedId`, and `type`.\n\nEvidence from upstream JSON specification (`definitions.OrgDType` and `definitions.OrgGUIDRefDType`):\nThe `parent` property in `OrgDType` references `OrgGUIDRefDType`. The `OrgGUIDRefDType` is defined as:\n\n```json\n\"OrgGUIDRefDType\": {\n    \"properties\": {\n        \"href\": { \"type\": \"string\", \"format\": \"uri\" },\n        \"sourcedId\": { \"type\": \"string\" },\n        \"type\": { \"type\": \"string\", \"enum\": [\"org\"] }\n    },\n    \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical schema violation. The local implementation's `parent` object is missing the required `href` and `type` fields. A compliant client attempting to parse this response will fail validation and will be unable to correctly reference the parent organization. The `href` field is particularly important as it provides the direct link to the referenced resource.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:10:44.210Z",
    "updatedAt": "2025-07-02T01:25:17.888Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-467/incorrect-schema-for-parent-object-in-org-response"
  },
  {
    "id": "692cf9e3-f87b-4e09-9845-17448689ac35",
    "identifier": "BUG-466",
    "title": "Missing 'fields' Query Parameter in GET /orgs/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /ims/oneroster/rostering/v1p2/orgs/{sourcedId}` does not include the optional `fields` query parameter. This indicates the implementation does not support field selection.\n\n**Summary:** \nThe local specification for `GET /ims/oneroster/rostering/v1p2/orgs/{sourcedId}` does not include the optional `fields` query parameter. This indicates the implementation does not support field selection.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the /ims/oneroster/rostering/v1p2/orgs/{sourcedId} endpoint.\n2. Attempt to use the `fields` query parameter to select a subset of fields for the response (e.g., `?fields=sourcedId,name`).\n3. Observe that the local specification does not list this parameter, implying it is not supported.\n\nCurl command (to test expected behavior):\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/some-sourced-id?fields=sourcedId,name\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe endpoint should support the optional `fields` query parameter to allow clients to request a subset of fields in the response, as defined by the official OneRoster 1.2 specification.\n\nEvidence from upstream JSON specification (`paths./orgs/{sourcedId}.get.parameters`):\n\n```json\n{\n    \"name\": \"fields\",\n    \"in\": \"query\",\n    \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n    \"required\": false,\n    \"type\": \"array\",\n    \"items\": {\n        \"type\": \"string\"\n    },\n    \"collectionFormat\": \"csv\",\n    \"allowEmptyValue\": false\n}\n```\n\nEvidence from upstream HTML documentation (Section 4.8.2 \"getOrg\" Operation Notes):\n\"Query Parameters for the REST-based binding have been defined for this operation, namely: fields - to identify the range of fields that should be supplied in the response message.\"\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting the standard `fields` parameter prevents clients from optimizing their requests by fetching only the data they need. This can lead to increased bandwidth usage and slower response processing for clients that are built to the full specification. While not a data corruption issue, it's a significant deviation from the standard's performance-oriented features.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:09:23.646Z",
    "updatedAt": "2025-07-03T19:25:53.498Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-466/missing-fields-query-parameter-in-get-orgssourcedid"
  },
  {
    "id": "c2adf4da-08ff-4056-b082-9ac064a0da2b",
    "identifier": "BUG-465",
    "title": "Unsupported 'DELETE' Method on /orgs/{sourcedId} Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `DELETE` method for the `/ims/oneroster/rostering/v1p2/orgs/{sourcedId}` endpoint, allowing for the deletion of an organization record.\n\n**Summary:** \nThe local specification defines a `DELETE` method for the `/ims/oneroster/rostering/v1p2/orgs/{sourcedId}` endpoint, allowing for the deletion of an organization record.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a DELETE request to the /ims/oneroster/rostering/v1p2/orgs/{sourcedId} endpoint.\n2. Observe that the endpoint is implemented locally but is not defined in the official OneRoster 1.2 specification.\n\nCurl command:\n\n```bash\ncurl -X DELETE \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe official OneRoster 1.2 specification does not define a `DELETE` method for this endpoint. The service should only support the methods defined in the upstream specification. The `OrgsManagement` interface is read-only.\n\nEvidence from upstream HTML documentation (Section 4.8, Table 4.8):\nThe documented operations for the \"OrgsManagement\" interface are only `getAllOrgs` and `getOrg`. There is no `deleteOrg` or equivalent operation.\n\nEvidence from upstream JSON specification:\nThe path item for `/orgs/{sourcedId}` only contains a `get` operation. There is no `delete` operation defined.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation as it implements a non-standard, proprietary destructive operation on a resource that the official specification defines as read-only. This can lead to significant interoperability failures and potential data integrity issues if a non-compliant client attempts to use it. Compliant clients will not be aware of this endpoint's existence.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:08:19.846Z",
    "updatedAt": "2025-07-02T01:11:11.123Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-465/unsupported-delete-method-on-orgssourcedid-endpoint"
  },
  {
    "id": "41f0e59c-52b5-420b-8f53-7d3d5bb71241",
    "identifier": "BUG-464",
    "title": "Unsupported 'PUT' Method on /orgs/{sourcedId} Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `PUT` method for the `/ims/oneroster/rostering/v1p2/orgs/{sourcedId}` endpoint, allowing for the update of an organization record.\n\n**Summary:** \nThe local specification defines a `PUT` method for the `/ims/oneroster/rostering/v1p2/orgs/{sourcedId}` endpoint, allowing for the update of an organization record.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a PUT request to the /ims/oneroster/rostering/v1p2/orgs/{sourcedId} endpoint.\n2. Observe that the endpoint is implemented locally but is not defined in the official OneRoster 1.2 specification.\n\nCurl command:\n\n```bash\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"org\": {\n    \"name\": \"Updated Org Name\",\n    \"type\": \"school\"\n  }\n}'\n```\n\n**Expected:** \nThe official OneRoster 1.2 specification does not define a `PUT` method for this endpoint. The service should only support the methods defined in the upstream specification. The `OrgsManagement` interface is read-only.\n\nEvidence from upstream HTML documentation (Section 4.8, Table 4.8):\nThe documented operations for the \"OrgsManagement\" interface are only `getAllOrgs` and `getOrg`. There is no `updateOrg` or equivalent operation.\n\nEvidence from upstream JSON specification:\nThe path item for `/orgs/{sourcedId}` only contains a `get` operation. There is no `put` operation defined.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/orgs/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/orgs/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation as it implements a non-standard, proprietary write operation on a resource that the official specification defines as read-only. This can lead to significant interoperability failures with compliant clients, which would not expect to be able to update an organization. Furthermore, the request body for this non-standard endpoint defines a `parent` object that is inconsistent with the `OrgGUIDRefDType` defined elsewhere in the specification, as it is missing the required `href` and `type` fields.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:07:14.516Z",
    "updatedAt": "2025-07-02T01:11:01.394Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-464/unsupported-put-method-on-orgssourcedid-endpoint"
  },
  {
    "id": "a1622359-2f53-4438-b97e-49c674cffb6f",
    "identifier": "BUG-463",
    "title": "Non-Standard POST Endpoint for Creating Grading Periods",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation provides a `POST` endpoint to create new grading periods. This includes a custom request body schema and a custom response schema for the `201 Created` status.\n\n**Summary:** \nThe local implementation provides a `POST` endpoint to create new grading periods. This includes a custom request body schema and a custom response schema for the `201 Created` status.\n\n**Steps to Reproduce:**\n\n1. Observe that the local specification defines a `POST` method for the path `/ims/oneroster/rostering/v1p2/gradingPeriods/`.\n2. Compare this with the upstream JSON specification for the `/gradingPeriods` path, which only defines a `GET` method.\n\nExample of non-standard request:\n`curl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/' -H 'Authorization: Bearer $TOKEN' -H 'Content-Type: application/json' -d '{\"academicSession\": {...}}'`\n\n**Expected:** \nThe upstream OneRoster 1.2 specification for `/gradingPeriods` is read-only. It does not define any `POST`, `PUT`, `PATCH`, or `DELETE` operations for this endpoint. Adding a `POST` method is a major deviation from the standard. Any write operations, if supported, should be defined in a separate specification or as a documented, namespaced extension, not presented as part of the core rostering service implementation. Furthermore, the request body for this custom operation is also invalid, as the `parent` object is missing required fields (`href`, `type`) defined in the standard `AcadSessionGUIDRefDType`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This endpoint introduces non-standard write capabilities into a read-only service endpoint, which is a critical violation of the specification's contract. This can lead to unexpected data modification and severe interoperability failures. Clients built against the official spec would have no knowledge of this create functionality.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:05:26.092Z",
    "updatedAt": "2025-07-02T01:10:51.884Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-463/non-standard-post-endpoint-for-creating-grading-periods"
  },
  {
    "id": "3bbb9c4a-b735-4dd6-b6b7-725c26d44eee",
    "identifier": "BUG-462",
    "title": "Multiple Schema Deviations in the `gradingPeriods` Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The schema for the individual grading period objects returned by the API contains multiple deviations from the official `AcademicSessionDType` specification:\n\n1. `schoolYear` is a `number`, not a `string`.\n2. `startDate` and `endDate` are defined as `string` without `format: date`.\n3. The `children` field, an array of `AcadSessionGUIDRefDType`, is completely missing.\n4. A non-standard `org` object has been added.\n5. The enum for the nested `parent.type` field is overly permissive, containing many values not allowed by the standard.\n6. The list of `required` fields is incorrect: it omits the standard `dateLastModified` field and includes the non-standard `org` field.\n\n**Summary:** \nThe schema for the individual grading period objects returned by the API contains multiple deviations from the official `AcademicSessionDType` specification:\n\n1. `schoolYear` is a `number`, not a `string`.\n2. `startDate` and `endDate` are defined as `string` without `format: date`.\n3. The `children` field, an array of `AcadSessionGUIDRefDType`, is completely missing.\n4. A non-standard `org` object has been added.\n5. The enum for the nested `parent.type` field is overly permissive, containing many values not allowed by the standard.\n6. The list of `required` fields is incorrect: it omits the standard `dateLastModified` field and includes the non-standard `org` field.\n\n**Steps to Reproduce:**\n\n1. Make a `GET` request to the `/ims/oneroster/rostering/v1p2/gradingPeriods/` endpoint.\n   `curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/' -H 'Authorization: Bearer $TOKEN'`\n2. Inspect the fields of an individual object within the `gradingPeriods` array.\n3. Compare these fields against the `AcademicSessionDType` definition in the upstream JSON and HTML specifications.\n4. Note the discrepancies in data types, missing/extra fields, incorrect enums, and the list of required fields.\n\n**Expected:** \nThe response object should strictly adhere to the `AcademicSessionDType` schema defined upstream.\n\n1. `schoolYear`: Should be of type `string` with a format of 'YYYY'. Upstream description: \"The school year for the academic session. ... This is in the \\[ISO 8601\\] format of 'YYYY'.\"\n2. `startDate` / `endDate`: Should have `format: date` to specify they are dates, not just any string. Upstream description: \"This is in \\[ISO 8601\\] format of 'YYYY-MM-DD'.\"\n3. `children`: A field named `children` containing an array of `AcadSessionGUIDRefDType` objects must be present if applicable, as defined in the upstream `AcademicSessionDType`. The local spec omits it entirely.\n4. `org`: This field should not be present as it is not part of the standard `AcademicSessionDType` model.\n5. `parent.type`: The enum for this field should only contain `academicSession`, as defined in the upstream `AcadSessionGUIDRefDType`.\n6. `required` list: The list of required properties should be `[\"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"startDate\", \"endDate\", \"type\", \"schoolYear\"]`, exactly as specified in the upstream `AcademicSessionDType` definition.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** These are critical schema violations that will cause data type errors, parsing failures, and data integrity issues for any client attempting to consume this endpoint according to the official specification. The presence of non-standard fields and absence of standard fields breaks compliance.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:04:24.662Z",
    "updatedAt": "2025-07-02T01:20:48.850Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-462/multiple-schema-deviations-in-the-gradingperiods-response-object"
  },
  {
    "id": "f01419ad-b16a-43f9-9dc1-b75975ad1204",
    "identifier": "BUG-461",
    "title": "Incorrect Response Envelope and Pagination Mechanism for GET /gradingPeriods",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation for `GET /gradingPeriods` returns a JSON object with a top-level key named `gradingPeriods` and several pagination-related fields (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the body.\n\n**Summary:** \nThe local implementation for `GET /gradingPeriods` returns a JSON object with a top-level key named `gradingPeriods` and several pagination-related fields (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the body.\n\n**Steps to Reproduce:**\n\n1. Make a `GET` request to the `/ims/oneroster/rostering/v1p2/gradingPeriods/` endpoint.\n   `curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/' -H 'Authorization: Bearer $TOKEN'`\n2. Observe the structure of the JSON response body. It contains top-level keys like `gradingPeriods`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n3. Observe the response headers and note the absence of the `X-Total-Count` header.\n\n**Expected:** \nThe upstream specification defines a completely different response structure.\n\n1. **Incorrect Key**: The response body should be an object with a single top-level key `academicSessions`, not `gradingPeriods`. This is defined in the upstream `AcademicSessionSetDType` schema: `{\"properties\": {\"academicSessions\": ...}}`.\n2. **Incorrect Pagination**: The upstream specification indicates pagination count should be handled via the `X-Total-Count` response header. The local implementation's use of body fields for pagination (`totalCount`, `pageCount`, etc.) is a severe deviation from the standard.\n\nFrom the upstream JSON for the `200` response of `GET /gradingPeriods`:\n\n```json\n\"schema\": {\n  \"$ref\": \"#/definitions/AcademicSessionSetDType\"\n},\n\"headers\": {\n  \"X-Total-Count\": {\n    \"description\": \"The total number of resources that are available to be returned\",\n    \"type\": \"integer\"\n  }\n}\n```\n\nThe referenced `AcademicSessionSetDType` is:\n\n```json\n\"AcademicSessionSetDType\": {\n  \"properties\": {\n    \"academicSessions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/AcademicSessionDType\"\n      }\n    }\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical bug because it fundamentally changes the structure of the response payload. A client written strictly against the official specification would fail to parse the response from this endpoint. The pagination mechanism is also non-compliant, breaking any client expecting to use the standard `X-Total-Count` header.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:03:23.161Z",
    "updatedAt": "2025-07-03T05:42:56.440Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-461/incorrect-response-envelope-and-pagination-mechanism-for-get"
  },
  {
    "id": "90d32bdc-75a6-44b7-a15d-1470d621aec3",
    "identifier": "BUG-460",
    "title": "Non-Standard 'maximum' Constraint on 'limit' Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation adds a `maximum` constraint of `3000` to the `limit` query parameter.\n\n**Summary:** \nThe local implementation adds a `maximum` constraint of `3000` to the `limit` query parameter.\n\n**Steps to Reproduce:**\n\n1. Review the definition of the `limit` query parameter for the `GET /ims/oneroster/rostering/v1p2/gradingPeriods/` operation in the local spec.\n2. Note the `maximum: 3000` constraint.\n3. Compare this with the definition of the `limit` parameter in the upstream JSON spec for `getAllGradingPeriods`.\n\nLocal `limit` parameter schema:\n\n```yaml\nschema:\n  type: integer\n  minimum: 1\n  maximum: 3000\n  default: 100\n```\n\n**Expected:** \nThe upstream specification for the `limit` parameter does not define a maximum value. It only specifies a `minimum` of `1` and a `default` of `100`. By adding an arbitrary maximum value, the local implementation deviates from the standard and imposes a restriction on clients that is not part of the official specification. This can break clients that may attempt to request a larger page size, even if not recommended in practice.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While setting an upper limit on pagination is a good practice for server stability, this limit should be documented as a server-specific policy rather than being presented as part of the core API specification if it's not in the upstream standard. This deviation constrains client behavior beyond the official specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:02:30.128Z",
    "updatedAt": "2025-07-03T05:45:01.491Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-460/non-standard-maximum-constraint-on-limit-query-parameter"
  },
  {
    "id": "09d44922-0e3a-42d1-b61f-0bc87b9f4c73",
    "identifier": "BUG-459",
    "title": "Non-Standard 'search' Query Parameter on GET /gradingPeriods",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation defines a `search` query parameter for the `GET /gradingPeriods` endpoint.\n\n**Summary:** \nThe local implementation defines a `search` query parameter for the `GET /gradingPeriods` endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the defined query parameters for the `GET /ims/oneroster/rostering/v1p2/gradingPeriods/` operation in the local spec.\n2. Compare this list with the parameters defined for the `getAllGradingPeriods` operation in both the upstream JSON and HTML specifications.\n3. Note the presence of the `search` parameter in the local spec, which is absent from the upstream specs.\n\nExample of non-standard usage:\n`curl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/?search=somequery' -H 'Authorization: Bearer $TOKEN'`\n\n**Expected:** \nThe upstream specification for `getAllGradingPeriods` (JSON path `/gradingPeriods`, GET operation) defines a fixed set of query parameters: `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. The `search` parameter is not part of the official specification. Adding custom parameters that are not namespaced or defined in the spec's extension mechanism (`metadata`) constitutes a compliance violation. The API should only support the documented parameters.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Introducing a non-standard `search` parameter creates a deviation from the 1EdTech specification. This can lead to interoperability issues as clients built against the official specification will not be aware of this functionality. All filtering should be handled by the standard `filter` parameter.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:01:47.784Z",
    "updatedAt": "2025-07-02T18:03:32.129Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-459/non-standard-search-query-parameter-on-get-gradingperiods"
  },
  {
    "id": "9b1e75f1-ce2d-4fc3-9a03-0a4b0da23000",
    "identifier": "BUG-458",
    "title": "Incorrect API Path for Grading Periods Collection",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation for the grading periods collection endpoint uses the path `/ims/oneroster/rostering/v1p2/gradingPeriods/`, which includes a trailing slash.\n\n**Summary:** \nThe local implementation for the grading periods collection endpoint uses the path `/ims/oneroster/rostering/v1p2/gradingPeriods/`, which includes a trailing slash.\n\n**Steps to Reproduce:**\n\n1. Observe the path definition in the local OpenAPI spec.\n2. Compare it with the path constructed from the upstream spec's `basePath` and the endpoint's path key.\n\nLocal Path: `/ims/oneroster/rostering/v1p2/gradingPeriods/`\nUpstream Path: `basePath` (`/ims/oneroster/rostering/v1p2`) + path (`/gradingPeriods`) = `/ims/oneroster/rostering/v1p2/gradingPeriods`\n\n**Expected:** \nThe upstream specification defines the path for this resource without a trailing slash. The `basePath` is `/ims/oneroster/rostering/v1p2` and the path key is `/gradingPeriods`. The combined, correct path should be `/ims/oneroster/rostering/v1p2/gradingPeriods`. While some web servers treat paths with and without a trailing slash as equivalent, it is a deviation from the official specification and can cause issues with strict client implementations or routing configurations.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a deviation from the canonical path defined in the upstream OpenAPI 2.0 specification. Adhering to the exact path structure is crucial for maintaining strict compliance with the API standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T15:00:44.061Z",
    "updatedAt": "2025-07-02T01:09:25.857Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-458/incorrect-api-path-for-grading-periods-collection"
  },
  {
    "id": "c42dadc9-0972-4d2c-bf2a-eede581907de",
    "identifier": "BUG-457",
    "title": "Inconsistent Tag Naming for Grading Periods Management",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification uses the tag `name: Grading Periods Management`.\n\n**Summary:** \nThe local specification uses the tag `name: Grading Periods Management`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the `tags` section in the local YAML specification.\n2. Note the tag name is \"Grading Periods Management\".\n3. Inspect the `tags` section in the upstream JSON specification.\n4. Note the corresponding tag name is \"GradingPeriodsManagement\".\n\n**Expected:** \nThe tag should match the upstream specification, which is `name: GradingPeriodsManagement`.\n\nEvidence from upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"tags\": [\n    ...\n    {\n        \"name\": \"GradingPeriodsManagement\",\n        \"description\": \"This enables the management of grading periods i.e. specific academic sessions.\"\n    },\n    ...\n]\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While this seems like a minor cosmetic issue, inconsistent tag naming can break automated tooling for documentation generation, SDK creation, and API gateway configuration. Adhering to the exact upstream naming convention is important for maintaining interoperability and toolchain compatibility.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:56:09.802Z",
    "updatedAt": "2025-07-02T01:09:18.725Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-457/inconsistent-tag-naming-for-grading-periods-management"
  },
  {
    "id": "03d36276-0768-4f9e-b43a-9d2f49b2e84d",
    "identifier": "BUG-456",
    "title": "Incorrect Semantics for Unsupported PUT Operation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** For the unsupported `PUT` operation, the local spec dictates incorrect behavior:\n\n1. It returns an HTTP `201 Created` status code for a successful update.\n2. The request body for `academicSession.type` is hardcoded to `const: gradingPeriod`.\n\n**Summary:** \nFor the unsupported `PUT` operation, the local spec dictates incorrect behavior:\n\n1. It returns an HTTP `201 Created` status code for a successful update.\n2. The request body for `academicSession.type` is hardcoded to `const: gradingPeriod`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local specification for `PUT /gradingPeriods/{sourcedId}`.\n2. Note that the success response is `201 Created`.\n3. Note that the request body schema for `academicSession.type` is constrained to a constant value of `gradingPeriod`.\n\nCURL command (demonstrating the documented successful response):\n\n# A successful PUT should respond with 200 or 204, not 201.\n\ncurl -v -X PUT '[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id)' \n-H 'Authorization: Bearer $TOKEN' \n-H 'Content-Type: application/json' \n--data-raw '{\n  \"academicSession\": {\n    \"sourcedId\": \"some-sourced-id\",\n    \"status\": \"active\",\n    \"title\": \"Updated Title\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-06-01\",\n    \"type\": \"gradingPeriod\",\n    \"schoolYear\": \"2024\",\n    \"org\": {\n      \"sourcedId\": \"org-id\"\n    }\n  }\n}'\n\n**Expected:** \nWhile the `PUT` method itself should be removed entirely, its specified behavior is also incorrect according to REST best practices and the OneRoster specification's intent.\n\n1. A `PUT` operation that updates an existing resource should return `200 OK` (if returning the updated resource) or `204 No Content` (if returning nothing). `201 Created` is reserved for the creation of a new resource.\n2. The `type` field should allow any valid value from the `SessionTypeEnum` vocabulary (`gradingPeriod`, `semester`, `schoolYear`, `term`), not be constrained to a single constant, as the underlying model is `AcademicSession`.\n\nEvidence from upstream HTML doc (`oneroster.rostering.upstream.html`):\nWhile the `PUT` operation is not specified, `Table 6.3.13` defines the `SessionTypeEnum` vocabulary with multiple values (`gradingPeriod`, `schoolYear`, `semester`, `term`), indicating the `type` field in the `AcademicSession` model is not meant to be constant. Standard REST principles dictate the correct usage of HTTP status codes.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This bug is rated Medium because it applies to an unsupported operation. However, if the operation were to remain, these semantic errors would cause significant confusion and potential issues for clients trying to interact with the API. The primary fix is to remove the `PUT` endpoint; this report details the secondary issues with its current definition.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:51:11.489Z",
    "updatedAt": "2025-07-03T05:34:20.443Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-456/incorrect-semantics-for-unsupported-put-operation"
  },
  {
    "id": "2a2a7933-514e-4027-b698-aabeaca8a73b",
    "identifier": "BUG-455",
    "title": "Multiple Schema Deviations in the AcademicSession Model",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `AcademicSession` schema, used in both the GET response and PUT request body, deviates from the upstream `AcademicSessionDType` in several ways:\n\n1. `schoolYear` is a `number` instead of a `string`.\n2. `startDate` and `endDate` are `string` but are missing `format: date`.\n3. The `children` field is missing.\n4. An extra, non-standard `org` field has been added and marked as required.\n5. The `parent` object is missing its required `href` and `type` fields.\n\n**Summary:** \nThe local `AcademicSession` schema, used in both the GET response and PUT request body, deviates from the upstream `AcademicSessionDType` in several ways:\n\n1. `schoolYear` is a `number` instead of a `string`.\n2. `startDate` and `endDate` are `string` but are missing `format: date`.\n3. The `children` field is missing.\n4. An extra, non-standard `org` field has been added and marked as required.\n5. The `parent` object is missing its required `href` and `type` fields.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to `/gradingPeriods/{sourcedId}`.\n2. Inspect the returned object (under the `gradingPeriod` key).\n3. Compare the fields, data types, and structures to the upstream `AcademicSessionDType` definition.\n4. Observe the multiple discrepancies.\n\nCURL command:\ncurl -X GET '[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id)' \n-H 'Authorization: Bearer $TOKEN'\n\n**Expected:** \nThe `AcademicSession` schema should strictly match the upstream `AcademicSessionDType` definition.\n\n1. `schoolYear` must be a `string` with the format 'YYYY'.\n2. `startDate` and `endDate` must be strings with `format: date`.\n3. The optional `children` field (an array of `AcadSessionGUIDRefDType`) must be included in the schema.\n4. The non-standard `org` field must be removed.\n5. The `parent` object must conform to `AcadSessionGUIDRefDType`, containing the required `href`, `sourcedId`, and `type` fields.\n\nEvidence from upstream JSON spec (`oneroster.rostering.upstream.json` under `definitions.AcademicSessionDType`):\n\n* `schoolYear`: `\"type\": \"string\", \"description\": \"...This is in the [ISO 8601] format of 'YYYY'.\"`\n* `startDate`: `\"type\": \"string\", \"format\": \"date\"`\n* `endDate`: `\"type\": \"string\", \"format\": \"date\"`\n* `children`: ` \"type\": \"array\", \"minItems\": 0, \"items\": { \"$ref\": \"#/definitions/AcadSessionGUIDRefDType\" }`\n* `parent`: `\"$ref\": \"#/definitions/AcadSessionGUIDRefDType\"`, which itself requires `href`, `sourcedId`, and `type`.\n* The `org` field is not present in the `AcademicSessionDType` definition.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** These schema mismatches are critical because they lead to data corruption and interoperability failures. Clients built against the official spec will fail to parse the response from the local implementation due to incorrect data types and object structures. The addition of a required, non-standard field (`org`) makes it impossible for a standard client to create or update resources.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:49:30.766Z",
    "updatedAt": "2025-07-02T17:28:49.682Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-455/multiple-schema-deviations-in-the-academicsession-model"
  },
  {
    "id": "0f39d19e-7140-4c41-96f0-7bc82712faeb",
    "identifier": "BUG-454",
    "title": "GET /gradingPeriods/{sourcedId} Operation Deviates from Specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /gradingPeriods/{sourcedId}` has two issues:\n\n1. The successful `200` response body is documented to be wrapped in a `gradingPeriod` object: `{\"gradingPeriod\": {...}}`.\n2. It does not document the optional `fields` query parameter.\n\n**Summary:** \nThe local specification for `GET /gradingPeriods/{sourcedId}` has two issues:\n\n1. The successful `200` response body is documented to be wrapped in a `gradingPeriod` object: `{\"gradingPeriod\": {...}}`.\n2. It does not document the optional `fields` query parameter.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/gradingPeriods/{sourcedId}` endpoint.\n2. Observe the JSON response is wrapped in a `gradingPeriod` object.\n3. Make a GET request with the `fields` query parameter, e.g., `?fields=sourcedId,title`.\n4. Observe that the API does not document support for this parameter.\n\nCURL commands:\n\n# Check response wrapper\n\ncurl -X GET '[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id)' \n-H 'Authorization: Bearer $TOKEN'\n\n# Test for missing 'fields' parameter support\n\ncurl -X GET '[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id?fields=sourcedId,title](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id?fields=sourcedId,title)' \n-H 'Authorization: Bearer $TOKEN'\n\n**Expected:** \nBased on the upstream specification, the implementation should be corrected:\n\n1. The `200` response body should be wrapped in an `academicSession` object: `{\"academicSession\": {...}}`. This is dictated by the `SingleAcademicSessionDType` schema.\n2. The endpoint must support the optional `fields` query parameter, allowing clients to request a subset of fields.\n\nEvidence from upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n* The `200` response for `getGradingPeriod` refers to `SingleAcademicSessionDType`:\n\n```json\n\"200\": {\n    \"description\": \"The request was successfully completed...\",\n    \"schema\": {\n        \"$ref\": \"#/definitions/SingleAcademicSessionDType\"\n    }\n}\n```\n\n* The `SingleAcademicSessionDType` definition clearly uses the key `academicSession`:\n\n```json\n\"SingleAcademicSessionDType\": {\n    \"properties\": {\n        \"academicSession\": {\n            \"$ref\": \"#/definitions/AcademicSessionDType\"\n        }\n    },\n    \"required\": [\"academicSession\"]\n}\n```\n\n* The `getGradingPeriod` operation defines the `fields` parameter:\n\n```json\n\"parameters\": [\n    ...\n    {\n        \"name\": \"fields\",\n        \"in\": \"query\",\n        \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n        \"required\": false,\n        \"type\": \"array\",\n        ...\n    }\n]\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** These are critical deviations. The incorrect response wrapper will break any compliant client attempting to parse the response. The lack of the `fields` parameter removes a standard feature that clients expect for optimizing data retrieval, forcing them to over-fetch data.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:48:30.150Z",
    "updatedAt": "2025-07-02T01:08:56.125Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-454/get-gradingperiodssourcedid-operation-deviates-from-specification"
  },
  {
    "id": "9f8ef454-0cf4-4547-95bb-0e86bcbd52d8",
    "identifier": "BUG-453",
    "title": "Unsupported PUT and DELETE Methods on /gradingPeriods/{sourcedId} Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines `PUT` and `DELETE` methods for the `/ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}` route.\n\n**Summary:** \nThe local API specification defines `PUT` and `DELETE` methods for the `/ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}` route.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the upstream specification for the `/gradingPeriods/{sourcedId}` endpoint.\n2. Observe that only a GET method is defined.\n3. Review the local specification for the same endpoint.\n4. Observe that GET, PUT, and DELETE methods are defined.\n5. The presence of PUT and DELETE is a deviation.\n\nTo test the unsupported methods:\n\n1. Attempt a PUT request to update a grading period.\n2. Attempt a DELETE request to delete a grading period.\n\nCURL commands:\n\n# Attempt to update a resource\n\ncurl -X PUT '[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id)' \n-H 'Authorization: Bearer $TOKEN' \n-H 'Content-Type: application/json' \n--data-raw '{\n  \"academicSession\": {\n    \"sourcedId\": \"some-sourced-id\",\n    \"status\": \"active\",\n    \"title\": \"Updated Title\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-06-01\",\n    \"type\": \"gradingPeriod\",\n    \"schoolYear\": \"2024\",\n    \"org\": {\n      \"sourcedId\": \"org-id\"\n    }\n  }\n}'\n\n# Attempt to delete a resource\n\ncurl -X DELETE '[https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id](https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/some-sourced-id)' \n-H 'Authorization: Bearer $TOKEN'\n\n**Expected:** \nThe upstream specification only defines a `GET` method for this endpoint. The `PUT` and `DELETE` methods should not be implemented for this route as they are not part of the official OneRoster v1.2 specification for `/gradingPeriods/{sourcedId}`.\n\nEvidence from upstream JSON spec (`oneroster.rostering.upstream.json`):\nThe path definition for `/gradingPeriods/{sourcedId}` only contains a `get` key:\n\n```json\n\"/gradingPeriods/{sourcedId}\": {\n    \"get\": {\n        \"operationId\": \"getGradingPeriod\",\n        ...\n    }\n}\n```\n\nThere are no `put` or `delete` keys present.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/gradingPeriods/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Implementing unsupported write/delete operations is a critical deviation from the specification. It expands the attack surface of the API and introduces behavior that compliant clients would not expect. The local `DELETE` operation description also specifies a \"soft delete\" behavior, which is an implementation detail for a completely unsupported action. All non-`GET` operations should be removed from this endpoint to conform to the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:46:55.272Z",
    "updatedAt": "2025-07-02T01:08:35.332Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-453/unsupported-put-and-delete-methods-on-gradingperiodssourcedid-endpoint"
  },
  {
    "id": "8db78732-047c-4b12-8b3a-6e0cc68c42f8",
    "identifier": "BUG-452",
    "title": "Endpoint Path `/enrollments/` Contains a Trailing Slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the path for the enrollments endpoint as `/ims/oneroster/rostering/v1p2/enrollments/`, which includes a trailing slash.\n\n**Summary:** \nThe local specification defines the path for the enrollments endpoint as `/ims/oneroster/rostering/v1p2/enrollments/`, which includes a trailing slash.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the path definition in the local spec: `/ims/oneroster/rostering/v1p2/enrollments/`.\n2. Observe the `basePath` and path definition in the upstream JSON spec.\n3. Upstream `basePath` is `/ims/oneroster/rostering/v1p2`.\n4. Upstream path for enrollments is `/enrollments`.\n5. The combined upstream path is `/ims/oneroster/rostering/v1p2/enrollments`.\n6. Note the trailing slash in the local spec's path is an addition.\n\n**Expected:** \nThe endpoint path should be `/ims/oneroster/rostering/v1p2/enrollments` without a trailing slash. The upstream JSON specification defines a `basePath` of `/ims/oneroster/rostering/v1p2` and a path for this resource as `/enrollments`. Combining these results in a path without a trailing slash. RESTful conventions often treat paths with and without a trailing slash as distinct resources, so this inconsistency can lead to routing issues or ambiguity.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While many web frameworks handle trailing slashes gracefully via redirects or internal routing rules, the official API specification is the source of truth. Deviating from the specified path, even by a single character, is a bug. It creates ambiguity and can cause problems for strict clients, proxies, or gateways that treat URLs literally. The local spec should be corrected to match the upstream path exactly.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:43:41.995Z",
    "updatedAt": "2025-07-02T01:08:29.420Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-452/endpoint-path-enrollments-contains-a-trailing-slash"
  },
  {
    "id": "af63ffcc-1752-4ce9-b42c-d2f570571cba",
    "identifier": "BUG-451",
    "title": "GET /enrollments/ Supports Non-Standard `search` Parameter and Incorrectly Defines `fields` Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec for `GET /enrollments/` defines two issues with its query parameters:\n\n1. It includes a `search` parameter, which is not part of the standard set of parameters.\n2. It defines the `fields` parameter as `type: string`.\n\n**Summary:** \nThe local spec for `GET /enrollments/` defines two issues with its query parameters:\n\n1. It includes a `search` parameter, which is not part of the standard set of parameters.\n2. It defines the `fields` parameter as `type: string`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Attempt to make a GET request to the endpoint using the `search` query parameter.\n2. Attempt to make a GET request using the `fields` parameter as an array (e.g., `?fields=sourcedId&fields=status`).\n3. According to the local spec, `search` is supported and `fields` should be a single string. The upstream spec says the opposite.\n\nCurl commands:\n\n```\n# Demonstrates non-standard 'search' parameter\ncurl \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/?search=somequery\" \\\n-H \"Authorization: Bearer $TOKEN\"\n\n# Demonstrates incorrect 'fields' type (local spec expects a string)\ncurl \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/?fields=sourcedId,status\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe query parameters should strictly match the upstream specification.\n\n1. The non-standard `search` parameter should be removed. The standard parameters are `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`.\n2. The `fields` parameter should be defined as an array of strings. The upstream JSON spec defines it as: `\"type\": \"array\", \"items\": { \"type\": \"string\" }, \"collectionFormat\": \"csv\"`. The local OpenAPI 3.1 spec should represent this as `type: array` with items of `type: string`. A simple string type is incorrect.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding non-standard filter parameters like `search` breaks interoperability and is a deviation from the spec. Incorrectly typing the `fields` parameter is also a significant deviation. While the server might correctly parse a comma-separated string, the OpenAPI contract is wrong, which will mislead clients and automated tooling that rely on the specification for code generation and validation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:42:23.832Z",
    "updatedAt": "2025-07-03T05:25:09.946Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-451/get-enrollments-supports-non-standard-search-parameter-and-incorrectly"
  },
  {
    "id": "459dc428-ab2f-429c-a251-700390fa189d",
    "identifier": "BUG-450",
    "title": "`enrollment` Object Schema in GET /enrollments/ Response Deviates from Specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The schema for the `enrollment` object in the local spec deviates from the upstream `EnrollmentDType` in multiple ways:\n\n1. **Missing Field:** The `school` field is completely missing.\n2. **Incorrect Data Type:** The `primary` field is defined as `type: boolean`.\n3. **Incorrect Required Fields:**\n   * The local spec is missing `dateLastModified` and `school` from its `required` list.\n   * The local spec incorrectly adds `primary`, `beginDate`, and `endDate` to its `required` list.\n\n**Summary:** \nThe schema for the `enrollment` object in the local spec deviates from the upstream `EnrollmentDType` in multiple ways:\n\n1. **Missing Field:** The `school` field is completely missing.\n2. **Incorrect Data Type:** The `primary` field is defined as `type: boolean`.\n3. **Incorrect Required Fields:**\n   * The local spec is missing `dateLastModified` and `school` from its `required` list.\n   * The local spec incorrectly adds `primary`, `beginDate`, and `endDate` to its `required` list.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/enrollments/` endpoint.\n2. Examine the fields and data types of an individual object within the `enrollments` array in the response.\n3. Note the missing `school` field.\n4. Note the data type of the `primary` field is boolean (`true`/`false`) instead of string (`\"true\"`/`\"false\"`).\n5. Note the `dateLastModified` field is missing.\n\nCurl command:\n\n```\ncurl https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/ \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `enrollment` object schema must match the `EnrollmentDType` from the upstream specification.\n\n1. **Missing Field:** The `school` field of type `OrgGUIDRefDType` MUST be present. The upstream `EnrollmentDType` definition explicitly marks it as required: `\"required\": [..., \"school\", ...]`.\n2. **Incorrect Data Type:** The `primary` field must be of `type: string` with an `enum` of `[\"true\", \"false\"]`. The upstream `EnrollmentDType` defines it as: `\"primary\": { \"type\": \"string\", \"enum\": [\"true\", \"false\"] }`.\n3. **Incorrect Required Fields:** The `required` list must be `[\"sourcedId\", \"status\", \"dateLastModified\", \"user\", \"class\", \"school\", \"role\"]`. The fields `primary`, `beginDate`, and `endDate` are optional (`\"multiplicity\": \"[0..1]\"` in the HTML spec) and should not be in the `required` list.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** These schema deviations render the implementation non-compliant. The missing `school` field is a critical data omission. The incorrect data type for `primary` will cause deserialization errors in strictly-typed clients. The incorrect `required` list constitutes a validation logic bug; the server is not enforcing the presence of required fields (`dateLastModified`, `school`) and is incorrectly promising the presence of optional fields.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:41:17.834Z",
    "updatedAt": "2025-07-02T01:20:16.266Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-450/enrollment-object-schema-in-get-enrollments-response-deviates-from"
  },
  {
    "id": "ea9569fe-e94b-4dd8-b9c6-eea0bf6e6efe",
    "identifier": "BUG-449",
    "title": "Incorrect Response Body Structure for GET /enrollments/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that a 200 OK response for `GET /enrollments/` returns a flat JSON object containing an `enrollments` array alongside several custom pagination fields: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Summary:** \nThe local specification indicates that a 200 OK response for `GET /enrollments/` returns a flat JSON object containing an `enrollments` array alongside several custom pagination fields: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/enrollments/` endpoint.\n2. Observe the structure of the JSON response body.\n3. Note the presence of top-level keys: `totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`.\n4. Note that the `enrollments` array is a direct property of the root object.\n\nCurl command:\n\n```\ncurl -i https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/ \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe response body should conform to the `EnrollmentSetDType` definition in the upstream spec. This means the root of the response should be an object with a single key, `enrollments`, which contains the array of enrollment objects.\nExample: `{ \"enrollments\": [...] }`\n\nFurthermore, the official specification handles pagination counts via a response header. The upstream JSON spec for `GET /enrollments` defines a `200` response header: `\"X-Total-Count\": { \"description\": \"The total number of resources that are available to be returned\", \"type\": \"integer\" }`. The pagination fields `totalCount`, `pageCount`, etc., should not be in the response body.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation that breaks spec compliance. Clients built against the official OneRoster specification will fail to parse the response from this endpoint because the structure is completely different. The local implementation has invented a custom pagination scheme in the response body instead of using the standard header-based approach.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:40:46.327Z",
    "updatedAt": "2025-07-03T05:37:14.656Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-449/incorrect-response-body-structure-for-get-enrollments"
  },
  {
    "id": "a0e3409c-650e-4d65-9599-e788e2fb8310",
    "identifier": "BUG-448",
    "title": "Non-Standard POST Method on `/enrollments/` Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `POST /ims/oneroster/rostering/v1p2/enrollments/` endpoint for creating new enrollments.\n\n**Summary:** \nThe local API specification defines a `POST /ims/oneroster/rostering/v1p2/enrollments/` endpoint for creating new enrollments.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the upstream OneRoster v1.2 specifications (JSON and HTML).\n2. Observe that for the `/enrollments` resource, only a GET method is defined.\n3. Compare with the local specification, which defines a POST method for `/ims/oneroster/rostering/v1p2/enrollments/`.\n\nCurl command (conceptual):\nThis bug is a design/documentation issue, not a runtime error. A `POST` request to the endpoint would demonstrate the non-standard behavior.\n\n```\ncurl -X POST https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/ \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"enrollment\": {\n    \"role\": \"student\",\n    \"user\": {\n      \"sourcedId\": \"some-user-id\"\n    },\n    \"class\": {\n      \"sourcedId\": \"some-class-id\"\n    }\n  }\n}'\n```\n\n**Expected:** \nThe local implementation should not include a `POST` method for this endpoint. The official OneRoster v1.2 specification, as defined in both the upstream JSON and HTML documents, does not support creating enrollments via this service.\n\nThe upstream JSON spec for the `/enrollments` path only defines a `get` operation.\n\nThe upstream HTML documentation in section 4.6 \"EnrollmentsManagement Interface Description\" only lists two operations: `getAllEnrollments` and `getEnrollment`. There is no operation for creating an enrollment.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Implementing a `POST` endpoint is a major deviation from the standard. The OneRoster specification is primarily a read-only service for rostering data. By adding a write capability, the local implementation introduces non-standard behavior that clients compliant with the official spec would not expect. This can lead to interoperability issues and potential data integrity problems if clients misuse this undocumented feature. This functionality should be exposed via a separate, properly documented proprietary API extension, not by modifying a standard route.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:39:05.433Z",
    "updatedAt": "2025-07-02T01:07:38.608Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-448/non-standard-post-method-on-enrollments-endpoint"
  },
  {
    "id": "8a29eca9-ac8a-4708-895f-ba86fa8320b7",
    "identifier": "BUG-447",
    "title": "Incorrect required status for `beginDate` and `endDate` in Enrollment schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Enrollment` schema marks `beginDate` and `endDate` as required by including them in the `required` array. This is inconsistent with the schema definition for these fields which allows `null`.\n\n**Summary:** \nThe local `Enrollment` schema marks `beginDate` and `endDate` as required by including them in the `required` array. This is inconsistent with the schema definition for these fields which allows `null`.\n\n**Steps to Reproduce:**\n\n1. Perform a GET request for an enrollment where `beginDate` or `endDate` might not be set.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe that the local spec requires these fields to always be present in the response, even if null.\n\n**Expected:** \nThe `beginDate` and `endDate` fields should be optional. The upstream JSON specification (`oneroster.rostering.upstream.json`) for `EnrollmentDType` does not include `beginDate` or `endDate` in its `required` array. The upstream HTML documentation (Sections 6.1.14.6 and 6.1.14.7) confirms their multiplicity is `[0..1]`, meaning optional. The format should also be specified as `date`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Marking optional fields as required is a significant data modeling error. It forces the server to always return these fields, even if they have no value (returning `null`), which can be confusing for clients. The primary issue is the violation of the specified optionality.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:33:49.720Z",
    "updatedAt": "2025-07-02T15:15:23.556Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-447/incorrect-required-status-for-begindate-and-enddate-in-enrollment"
  },
  {
    "id": "be1cc722-719a-4e7c-8624-0255704f8748",
    "identifier": "BUG-446",
    "title": "Missing `fields` query parameter for GET /enrollments/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}` does not list the `fields` query parameter.\n\n**Summary:** \nThe local specification for `GET /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}` does not list the `fields` query parameter.\n\n**Steps to Reproduce:**\n\n1. Attempt to make a request to the endpoint using the `fields` query parameter to select specific fields.\n\n```bash\n# This request should succeed and return only the specified fields\ncurl -G \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/some-sourced-id\" \\\n--data-urlencode \"fields=sourcedId,role\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. According to the local spec, this parameter is not supported and would likely be ignored or cause an error.\n\n**Expected:** \nThe endpoint should support the optional `fields` query parameter. The upstream JSON specification (`oneroster.rostering.upstream.json`) for the `getEnrollment` operation clearly defines this parameter: `name: \"fields\", in: \"query\", description: \"To identify the range of fields that should be supplied in the response message.\", required: false, type: \"array\", ...`. This allows clients to perform field selection to reduce payload size, a standard feature in this API.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a standard, specified parameter like `fields` breaks expected client functionality and can lead to performance issues for consumers who cannot limit the data they receive. This is a high-severity deviation from the specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:32:42.174Z",
    "updatedAt": "2025-07-03T19:25:49.219Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-446/missing-fields-query-parameter-for-get-enrollmentssourcedid"
  },
  {
    "id": "61785e1f-2fca-4d1a-9b58-abcd6e2c1711",
    "identifier": "BUG-445",
    "title": "Incorrect optionality for `dateLastModified` in Enrollment schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Enrollment` schema defines `dateLastModified` as optional; it is not included in the `required` array of the `Enrollment` schema.\n\n**Summary:** \nThe local `Enrollment` schema defines `dateLastModified` as optional; it is not included in the `required` array of the `Enrollment` schema.\n\n**Steps to Reproduce:**\n\n1. Perform a GET request to the endpoint.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the `enrollment` object in the response. According to the local spec, the `dateLastModified` field may be absent.\n\n**Expected:** \nThe `dateLastModified` field must be required. The upstream JSON specification (`oneroster.rostering.upstream.json`) explicitly includes `dateLastModified` in the `required` array for `EnrollmentDType`. The HTML documentation (Section 6.1.4.3) states: \"All objects MUST be annotated with the dateTime upon which they were last modified.\" Since `Enrollment` inherits from `Base`, this rule applies.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Failing to include a required field is a critical specification violation. Systems that rely on `dateLastModified` for synchronization and caching logic will fail or behave incorrectly when consuming data from this endpoint.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:29:43.645Z",
    "updatedAt": "2025-07-02T19:51:37.329Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-445/incorrect-optionality-for-datelastmodified-in-enrollment-schema"
  },
  {
    "id": "3b8bb53b-78da-4669-b573-49979e679b8f",
    "identifier": "BUG-444",
    "title": "Incorrect data type and required status for `primary` field in Enrollment schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Enrollment` schema defines the `primary` field as a `boolean` type and marks it as required.\n\n**Summary:** \nThe local `Enrollment` schema defines the `primary` field as a `boolean` type and marks it as required.\n\n**Steps to Reproduce:**\n\n1. Perform a GET request to fetch an enrollment.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the `primary` field in the response. It is a boolean value (e.g., `true` or `false` without quotes).\n3. Try to fetch an enrollment for a student (non-teacher) and observe that the `primary` field is still present.\n\n**Expected:** \nThe `primary` field should be an optional `string` with an enumerated vocabulary of `\"true\"` or `\"false\"`. The upstream JSON specification (`oneroster.rostering.upstream.json`) defines `primary` within `EnrollmentDType` as: `type: \"string\", enum: [\"true\", \"false\"]`. It is also not included in the `required` array, making it optional. The HTML documentation (Section 6.1.14.5) further clarifies its business logic: \"Applicable only to teachers... Multiplicity: \\[0..1\\]\". The local implementation violates the data type, the required status, and the business logic context.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This multi-faceted error is critical. The data type mismatch (`boolean` vs `string`) will break client-side parsing for strictly-typed languages. Making the field required when it should be optional, and applying it to all roles instead of just teachers, is a significant violation of the specification's data model and business rules.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:28:43.266Z",
    "updatedAt": "2025-07-02T01:09:22.274Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-444/incorrect-data-type-and-required-status-for-primary-field-in"
  },
  {
    "id": "78bac8b1-7d04-48d0-aec4-cd9b7bdc7355",
    "identifier": "BUG-443",
    "title": "Missing required field `school` in Enrollment object schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Enrollment` schema defined in `components/schemas/Enrollment` in the local spec does not include the `school` field.\n\n**Summary:** \nThe `Enrollment` schema defined in `components/schemas/Enrollment` in the local spec does not include the `school` field.\n\n**Steps to Reproduce:**\n\n1. Perform a GET request to the endpoint.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the JSON response.\n3. Note that the `enrollment` object in the response does not contain a `school` field.\n\n**Expected:** \nThe `Enrollment` object should contain a `school` field. According to the upstream JSON specification, the `EnrollmentDType` object has a `school` field of type `OrgGUIDRefDType` and it is listed in the `required` array: `[\"sourcedId\", \"status\", \"dateLastModified\", \"user\", \"class\", \"school\", \"role\"]`. This is also confirmed in the HTML documentation (Section 6.1.14), which lists `school` as a child of the `Enrollment` class with a multiplicity of \\[1\\].\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Missing a required field is a critical violation of the specification. Any compliant client application expecting the `school` field will fail to parse the response from this endpoint, leading to application errors. The local implementation is not interoperable with the standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:27:51.670Z",
    "updatedAt": "2025-07-02T01:09:08.498Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-443/missing-required-field-school-in-enrollment-object-schema"
  },
  {
    "id": "710c7b26-ffc6-4561-ad5c-17911cc958fb",
    "identifier": "BUG-442",
    "title": "Non-compliant DELETE method on /enrollments/{sourcedId} endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `DELETE /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}` endpoint for deleting an enrollment.\n\n**Summary:** \nThe local API specification defines a `DELETE /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}` endpoint for deleting an enrollment.\n\n**Steps to Reproduce:**\n\n1. Review the available methods for the `/ims/oneroster/rostering/v1p2/enrollments/{sourcedId}` endpoint in the local and upstream specifications.\n2. Observe that the local specification defines a `DELETE` method.\n3. Observe that the upstream JSON specification and the upstream HTML documentation do not define a `DELETE` method for this endpoint.\n\nExample `curl` command (hypothetical, as the endpoint should not exist):\n\n```bash\ncurl -X DELETE \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe endpoint should not support the `DELETE` method. The official OneRoster 1.2 specification, as provided in the upstream JSON and HTML documents, only defines a `GET` operation for the `/enrollments/{sourcedId}` path. There is no provision for deleting single enrollments via a `DELETE` request.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation from the 1EdTech OneRoster v1.2 specification. Exposing a non-standard `DELETE` method creates a significant interoperability problem. The upstream JSON file (`oneroster.rostering.upstream.json`) under `paths -> /enrollments/{sourcedId}` only contains a `get` key. The upstream HTML documentation (Table 4.6, \"EnrollmentsManagement\") only lists `getAllEnrollments` and `getEnrollment` operations. The local implementation's description of this as a \"soft delete\" is also a misuse of the `DELETE` verb.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:26:52.196Z",
    "updatedAt": "2025-07-02T01:06:32.831Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-442/non-compliant-delete-method-on-enrollmentssourcedid-endpoint"
  },
  {
    "id": "ba817d01-42ca-46a9-b261-48b6994ae409",
    "identifier": "BUG-441",
    "title": "Non-compliant PUT method on /enrollments/{sourcedId} endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `PUT /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}` endpoint for updating an enrollment.\n\n**Summary:** \nThe local API specification defines a `PUT /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}` endpoint for updating an enrollment.\n\n**Steps to Reproduce:**\n\n1. Review the available methods for the `/ims/oneroster/rostering/v1p2/enrollments/{sourcedId}` endpoint in the local and upstream specifications.\n2. Observe that the local specification defines a `PUT` method.\n3. Observe that the upstream JSON specification and the upstream HTML documentation do not define a `PUT` method for this endpoint.\n\nExample `curl` command (hypothetical, as the endpoint should not exist):\n\n```bash\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"enrollment\": {\n    \"role\": \"student\",\n    \"user\": { \"sourcedId\": \"user-guid\" },\n    \"class\": { \"sourcedId\": \"class-guid\" }\n  }\n}'\n```\n\n**Expected:** \nThe endpoint should not support the `PUT` method. The official OneRoster 1.2 specification, as provided in the upstream JSON and HTML documents, only defines a `GET` operation for the `/enrollments/{sourcedId}` path. There are no provisions for creating or updating single enrollments via this endpoint; such operations are typically handled via bulk import or are out of scope for the read-only portions of the spec.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/enrollments/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/enrollments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation from the 1EdTech OneRoster v1.2 specification. Exposing a non-standard `PUT` method introduces a significant interoperability problem and can lead to data inconsistencies if client systems attempt to use it. The upstream JSON file (`oneroster.rostering.upstream.json`) under `paths -> /enrollments/{sourcedId}` only contains a `get` key. Similarly, the upstream HTML documentation (Table 4.6, \"EnrollmentsManagement\") only lists `getAllEnrollments` and `getEnrollment` operations.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:25:52.010Z",
    "updatedAt": "2025-07-02T01:06:24.510Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-441/non-compliant-put-method-on-enrollmentssourcedid-endpoint"
  },
  {
    "id": "455adaa7-4fff-496d-afac-6310d0691999",
    "identifier": "BUG-440",
    "title": "Incorrect data type for `fields` query parameter in `GET /demographics`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local OpenAPI 3.1 specification defines the `fields` query parameter with `schema: { type: string }`.\n\n**Summary:** \nThe local OpenAPI 3.1 specification defines the `fields` query parameter with `schema: { type: string }`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the definition of the `fields` query parameter in the local spec.\n2. Compare this to the definition in the upstream spec.\n\ncURL command (example usage):\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/?fields=sourcedId,status' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream OpenAPI 2.0 specification defines the `fields` parameter as `type: \"array\"`, `items: { type: \"string\" }`, and `collectionFormat: \"csv\"`. This more accurately describes the parameter's function as a comma-separated list of string values. A simple `type: string` in the local spec loses this semantic information. The local OpenAPI 3.1 spec should represent this more accurately, for instance using `style: form` and `explode: false` on an array type, to correctly reflect that it's a list of values passed as a single comma-separated string.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While the on-the-wire format might be identical (a single string), the OpenAPI definition is a contract. Defining the parameter as a simple `string` is less precise and less descriptive than the upstream specification's `array` type. This can impact the quality of auto-generated client code and documentation, which would not understand that the parameter is a list of values.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:24:39.537Z",
    "updatedAt": "2025-07-03T17:05:41.461Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-440/incorrect-data-type-for-fields-query-parameter-in-get-demographics"
  },
  {
    "id": "f7eccf91-d7cb-4c34-8d2c-163f69ef415f",
    "identifier": "BUG-439",
    "title": "Path for `demographics` endpoint uses a non-standard trailing slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines the path for the demographics collection as `/ims/oneroster/rostering/v1p2/demographics/`, with a trailing slash.\n\n**Summary:** \nThe local spec defines the path for the demographics collection as `/ims/oneroster/rostering/v1p2/demographics/`, with a trailing slash.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the path defined in the local OpenAPI spec for the demographics endpoint.\n2. Compare it to the path defined in the upstream specification.\n\ncURL command (demonstrating the documented path):\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification (`oneroster.rostering.upstream.json`) defines a `basePath` of `/ims/oneroster/rostering/v1p2` and a path of `/demographics`. When combined, the correct, standard path is `/ims/oneroster/rostering/v1p2/demographics` (no trailing slash). All collection endpoints in the upstream spec are defined without a trailing slash. The local implementation should adhere to this.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While many web servers can be configured to treat paths with and without a trailing slash as equivalent, it is not guaranteed. This deviation from the specification can lead to routing issues, unexpected 301/302 redirects, or 404 errors for clients that are strictly following the official path structure. Consistency with the specification is crucial for interoperability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:23:20.585Z",
    "updatedAt": "2025-07-02T01:05:55.764Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-439/path-for-demographics-endpoint-uses-a-non-standard-trailing-slash"
  },
  {
    "id": "adc4ce36-90f0-4efc-86b5-116455b8a4f2",
    "identifier": "BUG-438",
    "title": "Incorrect enum for `sex` field in `GET /demographics` response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec for the `sex` field in the `GET /demographics` response includes `null` as one of the possible string values in its enum: `[\"male\", \"female\", \"other\", \"unspecified\", \"null\"]`.\n\n**Summary:** \nThe local spec for the `sex` field in the `GET /demographics` response includes `null` as one of the possible string values in its enum: `[\"male\", \"female\", \"other\", \"unspecified\", \"null\"]`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a GET request to the `/ims/oneroster/rostering/v1p2/demographics/` endpoint.\n2. Inspect the `sex` field in a response object.\n3. According to the local spec, the value could potentially be the literal string \"null\".\n\ncURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/?fields=sex' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream HTML documentation (Section 6.3.7, `GenderEnum` Vocabulary) defines the vocabulary for `sex` as `male`, `female`, `other`, and `unspecified`. The value `null` is not part of this vocabulary. Nullability of the field should be handled by allowing the JSON value to be `null` (which the local spec also does via `type: [- string, - 'null']`), not by adding the string `\"null\"` to the list of valid enum values. A client would not expect `\"null\"` as a valid gender string.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a data modeling error that confuses the concept of a null value with a string literal \"null\". It violates the specified vocabulary and can cause client-side parsing or logic errors. A client checking for gender would not anticipate \"null\" as a valid string value for the `sex` property.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:22:23.758Z",
    "updatedAt": "2025-07-02T01:05:48.954Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-438/incorrect-enum-for-sex-field-in-get-demographics-response"
  },
  {
    "id": "2062de2e-b194-4ee2-b010-f9d2e3f7b7b6",
    "identifier": "BUG-437",
    "title": "Non-standard `search` query parameter implemented for `GET /demographics`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation for `GET /demographics` defines and likely accepts a `search` query parameter for free-text searching.\n\n**Summary:** \nThe local implementation for `GET /demographics` defines and likely accepts a `search` query parameter for free-text searching.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a GET request to the `/ims/oneroster/rostering/v1p2/demographics/` endpoint.\n2. Include the non-standard `search` query parameter, e.g., `?search=somevalue`.\n3. Observe that the server may process this parameter.\n\ncURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/?search=somevalue' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe official OneRoster 1.2 specification does not include a `search` parameter. The upstream JSON and HTML documentation (Section 4.5.1, \"getAllDemographics\" Operation) define the standard query parameters as `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. The `filter` parameter is the specified mechanism for querying the data. The API should not support a non-standard `search` parameter.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding non-standard parameters makes the API non-compliant and can confuse clients built against the official specification. While it may seem like a useful feature, it fragments the standard. All querying should be performed using the powerful, well-defined `filter` parameter as specified by 1EdTech.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:20:59.032Z",
    "updatedAt": "2025-07-02T20:15:15.517Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-437/non-standard-search-query-parameter-implemented-for-get-demographics"
  },
  {
    "id": "bb09c16a-6a51-4f84-9b38-f67d5fb3fe5b",
    "identifier": "BUG-436",
    "title": "Incorrect data type and validation for race/ethnicity fields in `GET /demographics`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The race/ethnicity boolean fields (e.g., `americanIndianOrAlaskaNative`, `asian`, `white`, etc.) in the local spec's `GET /demographics` response are defined simply as nullable strings, with no enumeration to restrict their values.\n\n**Summary:** \nThe race/ethnicity boolean fields (e.g., `americanIndianOrAlaskaNative`, `asian`, `white`, etc.) in the local spec's `GET /demographics` response are defined simply as nullable strings, with no enumeration to restrict their values.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a GET request to the `/ims/oneroster/rostering/v1p2/demographics/` endpoint.\n2. Inspect one of the race/ethnicity fields, for example `white`, in the response.\n3. The local spec indicates this can be any string.\n\ncURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/?limit=1' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification requires these fields to represent boolean values using specific string tokens. The upstream JSON spec defines `DemographicsDType` fields such as `white` with `type: \"string\"` and a required `enum: [\"true\", \"false\"]`. This is also supported by the HTML documentation (Section 6.1.12.7) which points to the `TrueFalseEnum` vocabulary. The local implementation must enforce this enum to ensure data integrity and interoperability. Allowing any string value is a severe deviation.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data integrity and compatibility bug. A client expecting a string of \"true\" or \"false\" will fail to process other arbitrary string values like \"Yes\", \"No\", or \"1\". The specification is very clear about the required vocabulary for these fields to ensure consistent machine processing of boolean-like data.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:19:53.433Z",
    "updatedAt": "2025-07-02T01:05:25.327Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-436/incorrect-data-type-and-validation-for-raceethnicity-fields-in-get"
  },
  {
    "id": "1751c2a6-3b9f-4f5d-8d17-ce1aff277206",
    "identifier": "BUG-435",
    "title": "Incorrectly mandatory fields in `demographics` object for `GET /demographics` response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec for the `GET /demographics` response incorrectly marks a large number of fields as required in the `demographics` object schema. These include: `birthDate`, `sex`, `americanIndianOrAlaskaNative`, `asian`, `blackOrAfricanAmerican`, `nativeHawaiianOrOtherPacificIslander`, `white`, `demographicRaceTwoOrMoreRaces`, `hispanicOrLatinoEthnicity`, `countryOfBirthCode`, `stateOfBirthAbbreviation`, `cityOfBirth`, and `publicSchoolResidenceStatus`.\n\n**Summary:** \nThe local spec for the `GET /demographics` response incorrectly marks a large number of fields as required in the `demographics` object schema. These include: `birthDate`, `sex`, `americanIndianOrAlaskaNative`, `asian`, `blackOrAfricanAmerican`, `nativeHawaiianOrOtherPacificIslander`, `white`, `demographicRaceTwoOrMoreRaces`, `hispanicOrLatinoEthnicity`, `countryOfBirthCode`, `stateOfBirthAbbreviation`, `cityOfBirth`, and `publicSchoolResidenceStatus`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a GET request to the `/ims/oneroster/rostering/v1p2/demographics/` endpoint.\n2. Inspect a `demographics` object in the response array.\n3. According to the local spec, fields such as `birthDate`, `sex`, and `americanIndianOrAlaskaNative` will always be present, as they are marked as required.\n\ncURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/?limit=1' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nAccording to the upstream specification, most fields in the `Demographics` object are optional to accommodate varying levels of data availability. The upstream JSON specification (`oneroster.rostering.upstream.json`) defines the `DemographicsDType` with a `required` array containing only three fields: `[\"sourcedId\", \"status\", \"dateLastModified\"]`. All other demographic properties are optional and should not be in the `required` list. For example, `birthDate` has a multiplicity of `[0..1]` in the HTML documentation (Table 6.1.12.1), indicating it is optional. This applies to all the other fields listed above.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation that places an incorrect and heavy burden on the data provider to have complete demographic information for every user. It also misleads clients into expecting these fields to always be present, which can cause client-side errors if the data is not available and the API were to correctly omit them. This breaks the data contract defined by the official specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:18:49.781Z",
    "updatedAt": "2025-07-02T12:13:27.046Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-435/incorrectly-mandatory-fields-in-demographics-object-for-get"
  },
  {
    "id": "f47929ff-b377-4525-a0b4-1ea89baf9626",
    "identifier": "BUG-434",
    "title": "Incorrect response body structure for `GET /demographics` collection",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation for a `GET` request to `/demographics/` returns a JSON object containing pagination metadata fields directly in the body: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Summary:** \nThe local implementation for a `GET` request to `/demographics/` returns a JSON object containing pagination metadata fields directly in the body: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a GET request to the `/ims/oneroster/rostering/v1p2/demographics/` endpoint.\n2. Observe the structure of the JSON response body.\n3. Check the response headers for the `X-Total-Count` header.\n\ncURL command:\n\n```bash\ncurl -v -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/?limit=5' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe official OneRoster 1.2 specification requires that the total count of records be returned in the `X-Total-Count` HTTP header for collection GET requests. The upstream JSON specification for `GET /demographics` explicitly defines this in the `200` response: `\"headers\": { \"X-Total-Count\": { \"description\": \"The total number of resources that are available to be returned\", \"type\": \"integer\" } }`. The response body schema (`DemographicsSetDType`) is defined to contain only one property: a `demographics` array. There should be no pagination metadata fields in the response body.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical bug because it fundamentally changes the response structure for paginated collections, breaking any client that correctly implements the specification. Clients expect to find the total record count in the headers to handle pagination correctly, and will not be looking for the non-standard fields (`totalCount`, `pageCount`, etc.) in the response body. This makes the local implementation incompatible with standard OneRoster clients.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:17:41.353Z",
    "updatedAt": "2025-07-02T13:46:41.741Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-434/incorrect-response-body-structure-for-get-demographics-collection"
  },
  {
    "id": "4b2d9109-6fc8-42c3-be2a-c56cd0b09b53",
    "identifier": "BUG-433",
    "title": "Non-standard `POST /demographics` endpoint implemented",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation includes a `POST` method on the `/ims/oneroster/rostering/v1p2/demographics/` path, allowing for the creation of new demographic records.\n\n**Summary:** \nThe local implementation includes a `POST` method on the `/ims/oneroster/rostering/v1p2/demographics/` path, allowing for the creation of new demographic records.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a POST request to the `/ims/oneroster/rostering/v1p2/demographics/` endpoint.\n2. Observe that the server accepts the request and may create a resource.\n\ncURL command:\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"demographics\": {\n    \"sourcedId\": \"some-unique-id\",\n    \"status\": \"active\"\n  }\n}'\n```\n\n**Expected:** \nThe official OneRoster 1.2 Rostering Service specification is a read-only service and does not define any `POST` operations for creating data. Section 4 of the upstream HTML documentation (\"The Behavior Model\") only lists `get` operations for all management interfaces, including `DemographicsManagement` (Section 4.5). The upstream JSON specification file (`oneroster.rostering.upstream.json`) confirms this, showing only a `get` method for the `/demographics` path. The server should not implement this endpoint and should return a 404 Not Found or 405 Method Not Allowed for any `POST` requests to this path.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Implementing a non-standard write operation is a critical deviation from the specification. It breaks the contract of the OneRoster Rostering service, which is designed for reading roster data, not writing it. Consumers built against the official specification will not be aware of or able to use this functionality, and it represents a significant, unsupported extension that can lead to data inconsistencies and interoperability failures. The entire `requestBody` and the `201` response schema for this `POST` endpoint are proprietary and not found in the upstream specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:16:44.383Z",
    "updatedAt": "2025-07-02T01:04:39.960Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-433/non-standard-post-demographics-endpoint-implemented"
  },
  {
    "id": "91dd7339-15ce-4392-a60f-32b8688217b2",
    "identifier": "BUG-432",
    "title": "Inconsistent Summary for `GET /demographics/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec `summary` is: \"Get a specific Demographic record\".\n\n**Summary:** \nThe local spec `summary` is: \"Get a specific Demographic record\".\n\n**Steps to Reproduce:**\n\n1. Read the `summary` for the `GET` operation on `/ims/oneroster/rostering/v1p2/demographics/{sourcedId}` in the local spec.\n2. Compare this summary to the one provided for the same operation in the upstream JSON spec.\n\n**Expected:** \nThe summary should match the official text from the upstream JSON specification to ensure consistency. The upstream summary is: \"The REST read request message for the getDemographics() API call.\" While the local summary is arguably more human-friendly, it deviates from the source of truth.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a low-severity inconsistency but maintaining exact fidelity with the upstream specification text is important for documentation, tooling, and preventing confusion. Any deviation, no matter how small, represents a potential point of divergence.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:13:30.372Z",
    "updatedAt": "2025-07-03T20:11:29.692Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-432/inconsistent-summary-for-get-demographicssourcedid"
  },
  {
    "id": "9d0dbc96-3ebd-4542-a764-1e9ccbe82060",
    "identifier": "BUG-431",
    "title": "Inconsistent Description for `GET /demographics/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec has a generic description: \"Get a specific Demographic record on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Demographics record not found.'\"\n\n**Summary:** \nThe local spec has a generic description: \"Get a specific Demographic record on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Demographics record not found.'\"\n\n**Steps to Reproduce:**\n\n1. Read the `description` for the `GET` operation on `/ims/oneroster/rostering/v1p2/demographics/{sourcedId}` in the local spec.\n2. Compare this description to the one provided for the same operation in the upstream JSON spec and HTML documentation (Section 4.5.2).\n\n**Expected:** \nThe description should match the more precise and official text from the upstream specifications. The upstream JSON spec description is: \"To read, get, a specific user demographics. If the specified user and/or demographics recrds cannot be identified within the service provider then a status code of 'unknownobject' must be reported.\" This is mirrored in the upstream HTML documentation. The official description clarifies that the resource is \"user demographics\" and specifies the standard status code of \"unknownobject\" for a not-found error, which maps to a specific `codeMinor` value in the OneRoster error model, rather than just a generic 404.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While the local description conveys the general intent, it lacks the specific terminology and error handling details of the official specification. This can lead to ambiguity and cause developers to implement or expect error handling that is inconsistent with the OneRoster standard. Using the official description ensures clarity and adherence to the specified error reporting structure.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:12:26.824Z",
    "updatedAt": "2025-07-03T20:11:23.657Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-431/inconsistent-description-for-get-demographicssourcedid"
  },
  {
    "id": "c3b7d85c-00cf-4303-b678-94d21b4f1d96",
    "identifier": "BUG-430",
    "title": "Incorrect Enum Definition for `sex` Field in `Demographics` Response Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `sex` field in the `Demographics` response schema includes `null` as a value within its `enum` list.\n\n**Summary:** \nThe local specification for the `sex` field in the `Demographics` response schema includes `null` as a value within its `enum` list.\n\n**Steps to Reproduce:**\n\n1. Examine the `sex` property within the `Demographics` schema in the local spec.\n2. Note that its enum is defined as `[male, female, other, unspecified, null]`.\n3. Review the upstream HTML documentation, section 6.3.7 \"GenderEnum Vocabulary Description\" and Table 6.3.7.\n4. Observe the official vocabulary is `[female, male, other, unspecified]`.\n\n**Expected:** \nThe `sex` field should adhere to the `GenderEnum` vocabulary defined in the upstream HTML documentation (Table 6.3.7), which specifies the values `female`, `male`, `other`, and `unspecified`. The value `null` should not be part of the enum list. Nullability should be handled by the `type: ['string', 'null']` or `nullable: true` construct, not by adding `null` to the list of allowed string values. This is an incorrect use of the OpenAPI `enum` keyword.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Including `null` as a literal value inside an enum list is incorrect and can cause issues with code generators and validators, which expect all enum values to be of the specified type (`string` in this case). The upstream JSON spec is less precise here, simply defining `sex` as a `string`, but the HTML documentation provides the definitive vocabulary that the local spec attempts to implement, but does so incorrectly.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:11:22.217Z",
    "updatedAt": "2025-07-02T01:04:10.652Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-430/incorrect-enum-definition-for-sex-field-in-demographics-response"
  },
  {
    "id": "854431f0-d05a-44aa-ba11-a04afc539ee6",
    "identifier": "BUG-429",
    "title": "Missing Enum Validation for Boolean-like Race/Ethnicity Fields in `Demographics` Response Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Demographics` schema defines the race and ethnicity fields (e.g., `americanIndianOrAlaskaNative`, `asian`, `white`) as simple nullable strings, without any enum validation.\n\n**Summary:** \nThe local `Demographics` schema defines the race and ethnicity fields (e.g., `americanIndianOrAlaskaNative`, `asian`, `white`) as simple nullable strings, without any enum validation.\n\n**Steps to Reproduce:**\n\n1. Examine the `Demographics` schema in the local spec.\n2. Observe that a field like `americanIndianOrAlaskaNative` is defined as `type: ['string', 'null']` with no `enum`.\n3. Examine the `DemographicsDType` definition in the upstream JSON spec.\n4. Observe that the same field is defined as `type: string` with `enum: [\"true\", \"false\"]`.\n\n**Expected:** \nThese fields should be defined as strings with a required enum of `[\"true\", \"false\"]` to represent their boolean nature, as specified in the upstream JSON `DemographicsDType` definition. For example, `americanIndianOrAlaskaNative` is defined as:\n\n```json\n\"americanIndianOrAlaskaNative\": {\n  \"description\": \"Identification of whether or not the user is an American Indian or Alaska Native ethnicity.\",\n  \"type\": \"string\",\n  \"enum\": [\"true\", \"false\"]\n}\n```\n\nThe local schema should enforce this validation. While it correctly identifies the fields as nullable (which represents their optionality), it fails to enforce the critical enum constraint.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data integrity and validation bug. The local spec would permit any string value (e.g., \"Yes\", \"no\", \"maybe\", or an empty string) for these fields, whereas the official specification strictly limits the values to \"true\" or \"false\". This can lead to data corruption and interoperability failures.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:09:26.016Z",
    "updatedAt": "2025-07-03T17:35:49.685Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-429/missing-enum-validation-for-boolean-like-raceethnicity-fields-in"
  },
  {
    "id": "ca7b56cc-9d8f-4ec7-8cd2-225f44adb80c",
    "identifier": "BUG-428",
    "title": "Incorrect `required` Properties in `Demographics` Response Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Demographics` schema in the local specification incorrectly marks most of its properties as `required`.\n\n**Summary:** \nThe `Demographics` schema in the local specification incorrectly marks most of its properties as `required`.\n\n**Steps to Reproduce:**\n\n1. Examine the `Demographics` schema in the `components/schemas` section of the local spec.\n2. Note the extensive list of fields in the `required` array, including `birthDate`, `sex`, and all ethnicity fields.\n3. Examine the `DemographicsDType` definition in the upstream JSON spec.\n4. Note that its `required` array contains only `sourcedId`, `status`, and `dateLastModified`.\n\n**Expected:** \nAccording to the upstream specification, most fields in the `Demographics` object are optional. The `required` array for the `DemographicsDType` object in the upstream JSON spec is `[ \"sourcedId\", \"status\", \"dateLastModified\" ]`. The local specification should reflect this to be compliant. All other fields should be optional.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical bug because it creates a strict local contract that is incompatible with the official specification. A compliant service provider could return a valid `Demographics` object containing only the three required fields, but this response would fail validation against the local schema. This could cause client-side or gateway-level errors when processing perfectly valid data from the service.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:08:18.874Z",
    "updatedAt": "2025-07-02T12:13:27.043Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-428/incorrect-required-properties-in-demographics-response-schema"
  },
  {
    "id": "23c44094-73e8-4d8e-b421-15ad6d3332b7",
    "identifier": "BUG-427",
    "title": "Missing `fields` Query Parameter in GET /demographics/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /ims/oneroster/rostering/v1p2/demographics/{sourcedId}` is missing the optional `fields` query parameter.\n\n**Summary:** \nThe local specification for `GET /ims/oneroster/rostering/v1p2/demographics/{sourcedId}` is missing the optional `fields` query parameter.\n\n**Steps to Reproduce:**\n\n1. Review the parameters for `GET /demographics/{sourcedId}` in the local spec.\n2. Observe that only the `sourcedId` path parameter is defined.\n3. Review the parameters for the same operation in the upstream JSON and HTML specifications.\n4. Note that an optional `fields` query parameter is defined for field selection.\n\nA compliant client should be able to make this request, but the local spec does not document it:\n\n```\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/some-sourced-id?fields=sourcedId,status,birthDate\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe endpoint should support the optional `fields` query parameter as defined in the upstream specifications. This parameter allows a client to request a subset of fields in the response, which is a standard feature for optimizing API calls.\n\nThe upstream JSON spec defines it as:\n\n```json\n{\n  \"name\": \"fields\",\n  \"in\": \"query\",\n  \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  },\n  \"collectionFormat\": \"csv\",\n  \"allowEmptyValue\": false\n}\n```\n\nThe upstream HTML documentation (Section 4.5.2) also confirms this: \"Query Parameters for the REST-based binding have been defined for this operation, namely: fields - to identify the range of fields that should be supplied in the response message.\"\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The omission of the standard `fields` parameter is a high-severity bug. It breaks a feature that compliant clients will expect to use for performance optimization. An implementation may or may not support this functionality, but its absence from the specification means developers building against the local spec are unaware of it, and any client built to the official spec will try to use a feature that is not documented.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:07:12.602Z",
    "updatedAt": "2025-07-03T19:25:45.045Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-427/missing-fields-query-parameter-in-get-demographicssourcedid"
  },
  {
    "id": "99a3c2cc-e31b-43b1-86ee-904e666612c1",
    "identifier": "BUG-426",
    "title": "Unauthorized `DELETE` Method on `/demographics/{sourcedId}` Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `DELETE` method for the `/ims/oneroster/rostering/v1p2/demographics/{sourcedId}` endpoint. The description indicates it performs a \"soft delete\" by changing the record's status.\n\n**Summary:** \nThe local API specification defines a `DELETE` method for the `/ims/oneroster/rostering/v1p2/demographics/{sourcedId}` endpoint. The description indicates it performs a \"soft delete\" by changing the record's status.\n\n**Steps to Reproduce:**\n\n1. Review the upstream specification for the `/demographics/{sourcedId}` path.\n2. Note that only a `GET` method is defined.\n3. Review the local specification for the `/ims/oneroster/rostering/v1p2/demographics/{sourcedId}` path.\n4. Observe that a `DELETE` method is defined, which is not present in the official specification. The description for this method also describes a non-standard \"soft delete\" behavior.\n\nTo trigger the non-standard endpoint:\n\n```\ncurl -X DELETE https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/some-sourced-id \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specifications do not define a `DELETE` method for this endpoint. The official OneRoster 1.2 specification only provides read access to demographics data. The `paths` -> `/demographics/{sourcedId}` object in the upstream JSON spec only contains a `get` key. The HTML documentation under section 4.5 \"DemographicsManagement Interface Description\" confirms that only read operations are available. The local implementation should not include this unauthorized `DELETE` method or its associated soft-delete behavior.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Implementing a `DELETE` method where none is specified by the standard is a critical bug. It introduces destructive capabilities that are not part of the official API contract, creating a significant security and data integrity risk. The \"soft delete\" logic is also a custom, non-standard behavior that further deviates from the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:06:11.584Z",
    "updatedAt": "2025-07-03T05:34:01.350Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-426/unauthorized-delete-method-on-demographicssourcedid-endpoint"
  },
  {
    "id": "57552ca5-50de-408a-b348-28bfad8bef89",
    "identifier": "BUG-425",
    "title": "Unauthorized `PUT` Method on `/demographics/{sourcedId}` Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `PUT` method for the `/ims/oneroster/rostering/v1p2/demographics/{sourcedId}` endpoint, allowing for the update of a demographic record.\n\n**Summary:** \nThe local API specification defines a `PUT` method for the `/ims/oneroster/rostering/v1p2/demographics/{sourcedId}` endpoint, allowing for the update of a demographic record.\n\n**Steps to Reproduce:**\n\n1. Review the upstream specification for the `/demographics/{sourcedId}` path.\n2. Note that only a `GET` method is defined.\n3. Review the local specification for the `/ims/oneroster/rostering/v1p2/demographics/{sourcedId}` path.\n4. Observe that a `PUT` method is defined, which is not present in the official specification.\n\nTo trigger the non-standard endpoint:\n\n```\ncurl -X PUT https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/some-sourced-id \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"demographics\": {\n    \"sourcedId\": \"some-sourced-id\",\n    \"status\": \"active\"\n  }\n}'\n```\n\n**Expected:** \nThe upstream specifications (both JSON and HTML) do not define a `PUT` method for this endpoint. The official specification only provides read access to demographics data. The `paths` -> `/demographics/{sourcedId}` object in the upstream JSON spec only contains a `get` key. Similarly, the HTML documentation under section 4.5 \"DemographicsManagement Interface Description\" only lists `getAllDemographics` and `getDemographics` operations. The local implementation should not include this unauthorized `PUT` method.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/demographics/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/demographics/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a write method (`PUT`) where the official specification only allows read operations (`GET`) is a critical deviation. It expands the attack surface of the API and introduces behavior that compliant clients would not expect. This functionality is entirely non-standard and violates the principle of adhering to the upstream specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:04:50.027Z",
    "updatedAt": "2025-07-02T01:03:01.941Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-425/unauthorized-put-method-on-demographicssourcedid-endpoint"
  },
  {
    "id": "b5d27cd4-b231-437a-918a-71bce567c005",
    "identifier": "BUG-424",
    "title": "Incorrect Path with Trailing Slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines the route with a trailing slash: `/ims/oneroster/rostering/v1p2/courses/`.\n\n**Summary:** \nThe local spec defines the route with a trailing slash: `/ims/oneroster/rostering/v1p2/courses/`.\n\n**Steps to Reproduce:**\n\n1. Observe the path defined in the local spec: `/ims/oneroster/rostering/v1p2/courses/`.\n2. Observe the `basePath` and path definition in the upstream spec.\n3. Upstream `basePath` is `/ims/oneroster/rostering/v1p2`.\n4. The relevant path in the `paths` object is `/courses`.\n5. The combined upstream path is `/ims/oneroster/rostering/v1p2/courses`.\n\n**Expected:** \nThe official specification defines the path without a trailing slash: `/ims/oneroster/rostering/v1p2/courses`. While many web frameworks treat these as equivalent, they are technically different URLs and this inconsistency can lead to routing issues, broken client-side relative URL resolution, or problems with caches and search engines that treat them as separate resources. The implementation should match the specification exactly.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a low-severity bug but indicates a lack of attention to detail in adhering to the specification. In a strict RESTful implementation, `/courses/` could be interpreted as a different resource from `/courses`. For maximum compatibility, the implementation should match the official path precisely.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:03:02.305Z",
    "updatedAt": "2025-07-02T01:02:52.527Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-424/incorrect-path-with-trailing-slash"
  },
  {
    "id": "cb75a109-8526-43dc-bf87-3513c811bd8f",
    "identifier": "BUG-423",
    "title": "Extra `gradingScheme` Field in Course Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Course` object in the local specification includes a proprietary field named `gradingScheme`.\n\n**Summary:** \nThe `Course` object in the local specification includes a proprietary field named `gradingScheme`.\n\n**Steps to Reproduce:**\n\n1. Examine the `properties` of the `Course` object schema in the local spec.\n2. Observe the presence of a field named `gradingScheme` of type string.\n3. Compare the list of properties with those defined in the upstream `CourseDType`.\n\n**Expected:** \nThe `Course` object should only contain fields defined in the official OneRoster specification. The `gradingScheme` field is not part of the standard `CourseDType` definition in either the upstream JSON spec or the HTML documentation (Section 6.1.8). Proprietary extensions must be placed within the `metadata` object.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is another instance of adding a non-standard field to a standard object, which compromises interoperability. Compliant clients will not recognize this field. The specification provides the `metadata` field for this exact purpose, which has not been used. Section 6.1.4.4 of the HTML spec states: \"All objects CAN be extended using the Metadata class.\"",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:02:05.317Z",
    "updatedAt": "2025-07-02T01:02:45.782Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-423/extra-gradingscheme-field-in-course-object"
  },
  {
    "id": "aa4ef381-b9df-4d1a-a6c1-f7246023fae5",
    "identifier": "BUG-422",
    "title": "Extra `level` Field in Course Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Course` object in the local specification includes a proprietary field named `level`.\n\n**Summary:** \nThe `Course` object in the local specification includes a proprietary field named `level`.\n\n**Steps to Reproduce:**\n\n1. Examine the `properties` of the `Course` object schema in the local spec.\n2. Observe the presence of a field named `level` of type string.\n3. Compare the list of properties with those defined in the upstream `CourseDType`.\n\n**Expected:** \nThe `Course` object should only contain fields defined in the official OneRoster specification. The `level` field is not part of the standard `CourseDType` definition in either the upstream JSON spec or the HTML documentation (Section 6.1.8). Proprietary extensions should be placed within the `metadata` object, not as top-level properties.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding non-standard fields at the top level of a standard object breaks client compatibility. Compliant clients will ignore this field, but clients built specifically for this implementation will depend on it, creating a vendor lock-in situation. The correct way to add proprietary data, as per the specification, is to use the `metadata` field. Section 6.1.4.4 of the HTML spec states: \"All objects CAN be extended using the Metadata class.\"",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T14:00:18.673Z",
    "updatedAt": "2025-07-02T01:02:30.483Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-422/extra-level-field-in-course-object"
  },
  {
    "id": "53b6d808-3682-4bb3-a8a2-f7ba1daa1575",
    "identifier": "BUG-421",
    "title": "Non-Standard `search` Query Parameter in GET /courses",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation defines and presumably supports a `search` query parameter for the `GET /courses/` endpoint.\n\n**Summary:** \nThe local implementation defines and presumably supports a `search` query parameter for the `GET /courses/` endpoint.\n\n**Steps to Reproduce:**\n\n1. Examine the `parameters` list for the `GET /ims/oneroster/rostering/v1p2/courses/` operation in the local spec.\n2. Observe the presence of a query parameter named `search`.\n3. Compare this with the parameters defined for `getAllCourses` in the upstream JSON and HTML specifications.\n\nExample `curl` call using the non-standard parameter:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?search=history' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe official OneRoster specification does not include a `search` parameter. The standard method for querying is the `filter` parameter. The `search` parameter is a non-standard addition.\n\nThe upstream JSON spec for `paths.\"/courses\".get.parameters` lists only `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`.\n\nThe upstream HTML documentation in Section 4.4.1, `getAllCourses` Operation, also lists only those six standard parameters.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding non-standard parameters can lead to vendor lock-in and breaks the expectation of a standardized interface. Clients built to use this proprietary `search` parameter will not function correctly with other compliant OneRoster providers. The spec provides a powerful `filter` parameter for querying, which should be used instead.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T13:59:00.646Z",
    "updatedAt": "2025-07-02T20:15:15.561Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-421/non-standard-search-query-parameter-in-get-courses"
  },
  {
    "id": "82520c24-da85-4ae1-a10e-81eb50d2b2b5",
    "identifier": "BUG-420",
    "title": "Missing `resources` Field in Course Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Course` object schema in the local specification does not include a `resources` field.\n\n**Summary:** \nThe `Course` object schema in the local specification does not include a `resources` field.\n\n**Steps to Reproduce:**\n\n1. Examine the `properties` of the `Course` object schema in the local spec.\n2. Note the list of fields.\n3. Compare this list to the fields defined for the `CourseDType` in the upstream JSON and HTML specifications.\n\n**Expected:** \nThe `Course` object should contain an optional `resources` field, which is an array of `ResourceGUIDRefDType` objects. This allows a course to be associated with learning resources.\n\nFrom `oneroster.rostering.upstream.json` (`definitions.CourseDType.properties`):\n\n```json\n\"resources\": {\n  \"description\": \"The links to the associated resources if applicable i.e. the resource 'sourcedIds'.\",\n  \"type\": \"array\",\n  \"minItems\": 0,\n  \"items\": {\n    \"$ref\": \"#/definitions/ResourceGUIDRefDType\"\n  }\n}\n```\n\nThe upstream HTML documentation also confirms this in section 6.1.8.8, \"resources Attribute Description\". The local implementation completely omits this standard field.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a standard field from the data model prevents clients from accessing or associating resources with courses, a key feature of the broader OneRoster specification family. This is a significant feature gap and a deviation from the specified data model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T13:58:05.920Z",
    "updatedAt": "2025-07-02T01:02:45.177Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-420/missing-resources-field-in-course-object"
  },
  {
    "id": "6670134a-b685-4f48-8518-3d0192a16d80",
    "identifier": "BUG-419",
    "title": "Incorrect Schema for `org` Field in Course Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Course` object contains a required `org` field which is an object containing only a `sourcedId`.\n\n**Summary:** \nThe local `Course` object contains a required `org` field which is an object containing only a `sourcedId`.\n\n**Steps to Reproduce:**\n\n1. Examine the `Course` object schema in the local spec. It contains a field named `org`.\n2. The schema for `org` is `{\"type\": \"object\", \"properties\": {\"sourcedId\": {\"type\": \"string\"}}, \"required\": [\"sourcedId\"]}`.\n3. Compare this to the upstream `CourseDType` definition. The `org` field should reference `OrgGUIDRefDType`.\n\n**Expected:** \nThe upstream specification defines the `org` field as optional and its schema should be `OrgGUIDRefDType`. This is an object that MUST contain `href`, `sourcedId`, and `type`.\n\nFrom `oneroster.rostering.upstream.json`:\n\n```json\n\"CourseDType\": {\n  \"properties\": {\n    \"org\": {\n      \"$ref\": \"#/definitions/OrgGUIDRefDType\"\n    }\n    ...\n  }\n}\n\n\"OrgGUIDRefDType\": {\n  \"properties\": {\n    \"href\": { \"type\": \"string\", \"format\": \"uri\" },\n    \"sourcedId\": { \"type\": \"string\" },\n    \"type\": { \"type\": \"string\", \"enum\": [\"org\"] }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\nThe local schema for `org` is missing the required `href` and `type` fields. It also incorrectly marks `org` itself as a required field for the `Course` object.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The `GUIDRef` object structure is a core concept in OneRoster for creating relational links between objects. By providing an incomplete object, the local implementation breaks this pattern. Compliant clients will fail to parse this field correctly and will not be able to properly resolve the link to the organization resource without the `href`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T13:56:04.666Z",
    "updatedAt": "2025-07-02T01:25:18.705Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-419/incorrect-schema-for-org-field-in-course-object"
  },
  {
    "id": "7827473a-3cbe-4f21-8446-5684ba6dd358",
    "identifier": "BUG-418",
    "title": "Mismatched Field and Schema for `schoolYear` in Course Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Course` object contains a field named `academicSession`, defined as `{\"type\": \"object\", \"properties\": {\"sourcedId\": {\"type\": \"string\"}}, \"required\": [\"sourcedId\"]}`. It can also be null.\n\n**Summary:** \nThe local `Course` object contains a field named `academicSession`, defined as `{\"type\": \"object\", \"properties\": {\"sourcedId\": {\"type\": \"string\"}}, \"required\": [\"sourcedId\"]}`. It can also be null.\n\n**Steps to Reproduce:**\n\n1. Examine the `Course` object schema in the local spec. It contains a field named `academicSession`.\n2. The schema for `academicSession` is an object containing only a `sourcedId`.\n3. Compare this to the upstream `CourseDType` definition in the JSON and HTML files.\n\n**Expected:** \nThe upstream specification defines a field named `schoolYear`, not `academicSession`. Furthermore, the schema for this field should be `AcadSessionGUIDRefDType`, which is an object containing `href`, `sourcedId`, and `type`.\n\nFrom `oneroster.rostering.upstream.json`:\n\n```json\n\"CourseDType\": {\n  \"properties\": {\n    ...\n    \"schoolYear\": {\n      \"$ref\": \"#/definitions/AcadSessionGUIDRefDType\"\n    },\n    ...\n  }\n}\n\n\"AcadSessionGUIDRefDType\": {\n  \"properties\": {\n    \"href\": { \"type\": \"string\", \"format\": \"uri\" },\n    \"sourcedId\": { \"type\": \"string\" },\n    \"type\": { \"type\": \"string\", \"enum\": [\"academicSession\"] }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\nThe local implementation has the wrong field name (`academicSession` vs `schoolYear`) and an incorrect, simplified schema that is missing the `href` and `type` fields.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This bug involves both an incorrect field name and an incorrect schema for that field. It represents a fundamental misunderstanding or misimplementation of the `Course` data model. A compliant client would not be able to process the `academicSession` field and would report the `schoolYear` field as missing. The missing `href` and `type` fields remove critical linking information required by the standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T13:54:57.950Z",
    "updatedAt": "2025-07-02T01:01:40.503Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-418/mismatched-field-and-schema-for-schoolyear-in-course-object"
  },
  {
    "id": "2ce75e8b-bd46-40bf-ab04-b5f5022b6c7f",
    "identifier": "BUG-417",
    "title": "Incorrect Required Fields for Course Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for a `Course` object requires only the `status`, `title`, and `org` fields.\n\n**Summary:** \nThe local specification for a `Course` object requires only the `status`, `title`, and `org` fields.\n\n**Steps to Reproduce:**\n\n1. Examine the schema for the `Course` object in the local specification's `GET /courses/` response.\n2. Note the `required` array for the course object properties.\n3. The local spec lists `required: [status, title, org]`.\n4. Compare this to the `required` array in the upstream `CourseDType` definition.\n\n**Expected:** \nThe upstream specification requires a different set of fields. According to the `CourseDType` definition in the upstream JSON spec, the required fields are `sourcedId`, `status`, `dateLastModified`, `title`, and `courseCode`.\n\nFrom `oneroster.rostering.upstream.json`:\n\n```json\n\"CourseDType\": {\n  ...\n  \"required\": [\"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"courseCode\"],\n  ...\n}\n```\n\nThe local implementation fails to require `sourcedId`, `dateLastModified`, and `courseCode`. It also incorrectly requires `org`, which is optional in the upstream spec.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data integrity and compatibility bug. By not enforcing the official required fields, the API may return incomplete `Course` objects that are invalid according to the OneRoster standard. Clients expecting required fields like `sourcedId` or `courseCode` will fail when they are absent. This fundamentally breaks interoperability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T13:53:56.954Z",
    "updatedAt": "2025-07-02T01:01:25.929Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-417/incorrect-required-fields-for-course-object"
  },
  {
    "id": "e2a7cce0-de96-4c69-b924-c14df4b647a2",
    "identifier": "BUG-416",
    "title": "Incorrect Pagination Mechanism in GET /courses Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns pagination metadata within the JSON response body. The `200 OK` schema includes `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` alongside the `courses` array.\n\n**Summary:** \nThe local implementation returns pagination metadata within the JSON response body. The `200 OK` schema includes `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` alongside the `courses` array.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the `/ims/oneroster/rostering/v1p2/courses/` endpoint.\n2. Observe the structure of the `200 OK` response body as defined in the local spec.\n3. The local spec shows a JSON body containing pagination fields: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n```bash\n# Hypothetical response from local implementation\n# GET https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/\n{\n  \"courses\": [...],\n  \"totalCount\": 150,\n  \"pageCount\": 2,\n  \"pageNumber\": 1,\n  \"offset\": 100,\n  \"limit\": 100\n}\n```\n\n**Expected:** \nAccording to the upstream OneRoster specification, pagination information for collection endpoints should be handled via HTTP headers, specifically the `X-Total-Count` header. The response body should only contain the `CourseSetDType`, which is an object with a single key, `courses`, containing the array of course objects.\n\nThe upstream JSON spec for `GET /courses` shows:\n\n```json\n\"responses\": {\n  \"200\": {\n    \"description\": \"...\",\n    \"schema\": {\n      \"$ref\": \"#/definitions/CourseSetDType\"\n    },\n    \"headers\": {\n      \"X-Total-Count\": {\n        \"description\": \"The total number of resources that are available to be returned\",\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\nAnd `CourseSetDType` is defined as:\n\n```json\n\"CourseSetDType\": {\n  \"properties\": {\n    \"courses\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/CourseDType\"\n      }\n    }\n  }\n}\n```\n\nThere should be no pagination fields in the JSON body.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a significant deviation in the response structure. A client built strictly against the official specification would fail to parse the response correctly. It would not know to look for pagination data in the body and would not expect the extra top-level fields. This breaks standard client compatibility.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T13:52:12.724Z",
    "updatedAt": "2025-07-03T05:48:06.448Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-416/incorrect-pagination-mechanism-in-get-courses-response"
  },
  {
    "id": "40d4a7e5-1c53-4be3-b06a-d8e3a17bdb15",
    "identifier": "BUG-415",
    "title": "Non-Standard Write Operation: POST method is implemented for /courses/ but not defined in the official specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation provides a `POST /ims/oneroster/rostering/v1p2/courses/` endpoint to create new course resources.\n\n**Summary:** \nThe local implementation provides a `POST /ims/oneroster/rostering/v1p2/courses/` endpoint to create new course resources.\n\n**Steps to Reproduce:**\n\n1. Review the local OpenAPI specification for the path `/ims/oneroster/rostering/v1p2/courses/`.\n2. Observe that it defines a `POST` operation with `operationId: createCourse`.\n3. Cross-reference this with the upstream JSON and HTML specifications for the `/courses` endpoint.\n4. Note that neither the JSON specification (`paths.\"/courses\"`) nor the HTML documentation (Section 4.4, CoursesManagement) defines a `POST` method. This operation is entirely non-standard.\n\nExample `curl` command for the non-standard endpoint:\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\n  \"course\": {\n    \"status\": \"active\",\n    \"title\": \"New Course From Local Spec\",\n    \"org\": {\n      \"sourcedId\": \"some-org-id\"\n    }\n  }\n}'\n```\n\n**Expected:** \nThe official OneRoster 1.2 Rostering specification does not define a `POST` method for the `/courses` resource. The service should be read-only for this endpoint as per the specification. The `POST` method should not exist.\n\nThe upstream JSON specification for `paths.\"/courses\"` only defines a `get` method.\n\nThe upstream HTML documentation in Section 4.4, \"CoursesManagement Interface Description\", lists the available operations as `getAllCourses`, `getCourse`, and `getClassesForCourse`. There is no mention of an operation to create a course.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/\nLocal Spec: ims/oneroster/rostering/v1p2/courses/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Implementing a non-standard write operation is a critical deviation from the specification. It introduces functionality that clients compliant with the official OneRoster spec would not expect, potentially leading to data corruption, unexpected behavior, and significant integration challenges. This introduces a vector for creating data that may not adhere to the constraints of the system of record.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T13:51:15.226Z",
    "updatedAt": "2025-07-02T01:00:41.177Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-415/non-standard-write-operation-post-method-is-implemented-for-courses"
  },
  {
    "id": "948e6cf7-e5f2-4d42-adde-1e232cfe98be",
    "identifier": "BUG-414",
    "title": "Path Parameter 'sourcedId' Description is Less Specific than Upstream Spec",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The description of the `sourcedId` path parameter is \"The sourcedId of the course\".\n\n**Summary:** \nThe description of the `sourcedId` path parameter is \"The sourcedId of the course\".\n\n**Steps to Reproduce:**\n\n1. Compare the `description` for the `sourcedId` path parameter in the local spec with the upstream spec.\n2. Local Spec: `description: The sourcedId of the course`\n3. Upstream Spec: `description: The unique identifier, GUID, for this course.`\n\n**Expected:** \nThe description should be more specific, as in the upstream spec: \"The unique identifier, GUID, for this course.\". This clarifies that the identifier is not just any ID, but a GUID, which is a key detail of the OneRoster standard.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While minor, this documentation inconsistency omits an important detail about the format of the identifier. Clear and precise documentation prevents ambiguity for developers integrating with the API. The HTML spec reinforces this in section 6.1.4.1: \"This is a GUID System ID for an object.\"",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:58:01.763Z",
    "updatedAt": "2025-07-02T01:00:28.696Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-414/path-parameter-sourcedid-description-is-less-specific-than-upstream"
  },
  {
    "id": "0cec4cce-41aa-4503-af5f-8b7ff79ffb5a",
    "identifier": "BUG-413",
    "title": "Description for GET /courses/{sourcedId} is Inconsistent with Upstream Spec",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `description` for the `getCourse` operation in the local spec provides a simplified explanation and refers to a 'Course not found' message.\n\n**Summary:** \nThe `description` for the `getCourse` operation in the local spec provides a simplified explanation and refers to a 'Course not found' message.\n\n**Steps to Reproduce:**\n\n1. Compare the `description` field for the `GET /courses/{sourcedId}` operation in the local spec with the upstream JSON and HTML documentation.\n2. Local Spec: `description: Get a specific Course on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course not found.'`\n3. Upstream Spec: `description: To read, get, a specific course. If the specified course cannot be identified within the service provider then a status code of 'unknownobject' must be reported.`\n\n**Expected:** \nThe description should match the upstream specification, which is more formal: \"To read, get, a specific course. If the specified course cannot be identified within the service provider then a status code of 'unknownobject' must be reported.\". This correctly references the official `codeMinor` value of `unknownobject` for a 404 error, not a simple string message.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a documentation bug that could mislead developers. It incorrectly describes the error handling mechanism, referencing a generic message instead of the structured `imsx_StatusInfoDType` response with the `unknownobject` code that a compliant implementation should return.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:57:05.743Z",
    "updatedAt": "2025-07-02T01:00:18.699Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-413/description-for-get-coursessourcedid-is-inconsistent-with-upstream"
  },
  {
    "id": "9939c7fe-3f6f-4b6f-b68a-0c8ff5a7792c",
    "identifier": "BUG-412",
    "title": "Summary for GET /courses/{sourcedId} is Inconsistent with Upstream Spec",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `summary` for the `getCourse` operation in the local spec is \"Get a specific Course\".\n\n**Summary:** \nThe `summary` for the `getCourse` operation in the local spec is \"Get a specific Course\".\n\n**Steps to Reproduce:**\n\n1. Compare the `summary` field for the `GET /courses/{sourcedId}` operation in the local spec with the upstream JSON and HTML documentation.\n2. Local Spec: `summary: Get a specific Course`\n3. Upstream Spec: `summary: The REST read request message for the getCourse() API call.`\n\n**Expected:** \nThe summary should align with the official specification, which is \"The REST read request message for the getCourse() API call.\". While the local summary is human-friendly, it deviates from the machine-readable source of truth.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a low-severity documentation bug. However, maintaining consistency with the upstream specification in all aspects, including descriptions, is crucial for preventing confusion and ensuring that auto-generated documentation or client code is accurate.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:56:22.219Z",
    "updatedAt": "2025-07-02T00:59:42.456Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-412/summary-for-get-coursessourcedid-is-inconsistent-with-upstream-spec"
  },
  {
    "id": "903d42d8-e621-4f4a-9a0f-9479be397760",
    "identifier": "BUG-411",
    "title": "Incorrect 'imsx_codeMinorFieldValue' in 400 Bad Request Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec for the 400 Bad Request response uses an `imsx_codeMinorFieldValue` of `invaliddata`.\n\n**Summary:** \nThe local spec for the 400 Bad Request response uses an `imsx_codeMinorFieldValue` of `invaliddata`.\n\n**Steps to Reproduce:**\n\n1. Send a request with an invalid value for a query parameter, such as the `fields` parameter (which is missing from the local spec but should exist).\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id?fields=,,\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the error response for status code 400.\n3. The local spec indicates the `imsx_codeMinorFieldValue` will be `invaliddata`.\n\n**Expected:** \nFor a `get` operation, a 400 error is typically triggered by invalid query parameters. The upstream specification (Table B1.4 in the HTML spec) indicates that an invalid `fields` parameter should result in a `codeMinor` of `invalid_selection_field`. The `invaliddata` code is reserved for `422 Unprocessable Entity` errors, which relate to semantically incorrect request bodies, not query parameters.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Using the wrong `codeMinor` value for an error condition hinders automated error handling and debugging for clients. It provides misleading information about the nature of the error. The distinction between `400` and `422` errors, and their corresponding minor codes, is important for REST API design.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:55:20.216Z",
    "updatedAt": "2025-07-03T18:49:39.020Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-411/incorrect-imsx-codeminorfieldvalue-in-400-bad-request-response"
  },
  {
    "id": "88663707-969f-41c5-8395-9b0cbbb4b1f2",
    "identifier": "BUG-410",
    "title": "Several Array Fields in Course Response Incorrectly Allow 'null'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `grades`, `subjects`, and `subjectCodes` fields in the local spec's `course` object are defined with `type: ['array', 'null']`. This allows the API to return `null` for these fields.\n\n**Summary:** \nThe `grades`, `subjects`, and `subjectCodes` fields in the local spec's `course` object are defined with `type: ['array', 'null']`. This allows the API to return `null` for these fields.\n\n**Steps to Reproduce:**\n\n1. Send a request to the endpoint.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the response for a course that has no grades, subjects, or subject codes.\n3. According to the local spec, these fields could be returned as `null` (e.g., `\"grades\": null`).\n\n**Expected:** \nThese fields should be defined as `type: array`. The upstream specification (`CourseDType` in the JSON spec) defines these as `type: \"array\"` with `minItems: 0`. The standard practice is to return an empty array `[]` when there are no items, not `null`. Allowing `null` can cause deserialization errors or require extra null-checking logic in compliant clients that expect an array.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While some clients can handle `null` instead of an empty array, it is a deviation from the spec and best practices. It introduces ambiguity and forces client developers to write defensive code for a non-standard behavior. The specification is clear by defining the type as `array` and setting `minItems: 0`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:54:14.017Z",
    "updatedAt": "2025-07-02T00:59:22.069Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-410/several-array-fields-in-course-response-incorrectly-allow-null"
  },
  {
    "id": "1c124a54-5695-4903-9401-bf05c7229449",
    "identifier": "BUG-409",
    "title": "'metadata' Field in Course Response Incorrectly Disallows Properties",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `metadata` field defines it with `additionalProperties: {}`, which effectively makes it an empty, unextendable object.\n\n**Summary:** \nThe local specification for the `metadata` field defines it with `additionalProperties: {}`, which effectively makes it an empty, unextendable object.\n\n**Steps to Reproduce:**\n\n1. Send a request to the endpoint for a course that has extension data.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. According to the local spec, the `metadata` object cannot contain any properties (`additionalProperties: {}`). This would result in an empty object `{\"metadata\": {}}` or the field being omitted/null.\n\n**Expected:** \nThe `metadata` field is the designated container for proprietary extensions. The upstream JSON spec defines `MetadataDType` with `additionalProperties: true`, allowing any number of custom key-value pairs. The HTML documentation (Section 6.1.4.4) states, \"All objects CAN be extended using the Metadata class.\" The local implementation prevents this, defeating the purpose of the field.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This bug cripples the standard extension mechanism of the OneRoster specification. Any system needing to exchange custom data would be unable to do so in a compliant way. The local implementation forces non-compliant extensions by adding fields at the top-level of the `course` object instead of using the `metadata` object.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:53:18.382Z",
    "updatedAt": "2025-07-02T00:59:12.980Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-409/metadata-field-in-course-response-incorrectly-disallows-properties"
  },
  {
    "id": "db0fff6a-3cb7-4548-bebd-5b3421c5ab9a",
    "identifier": "BUG-408",
    "title": "'schoolYear' Field is Incorrectly Named 'academicSession' and has Incorrect Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec includes a field named `academicSession` in the `course` object. Its schema is defined as an object containing only a `sourcedId`.\n\n**Summary:** \nThe local spec includes a field named `academicSession` in the `course` object. Its schema is defined as an object containing only a `sourcedId`.\n\n**Steps to Reproduce:**\n\n1. Send a request to the endpoint.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the response for a field linking to the academic session/school year.\n3. The local spec indicates a field named `academicSession` will be returned.\n\n**Expected:** \nThe standard field for this purpose is `schoolYear`. It should conform to the `AcadSessionGUIDRefDType` definition, which requires the fields `href`, `sourcedId`, and `type`. The local implementation has the wrong name (`academicSession` instead of `schoolYear`) and an incorrect schema that is missing the required `href` and `type` fields.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a dual-purpose bug. First, the field is misnamed, which will break any compliant client. Second, its schema is incorrect and incomplete, violating the standard `GUIDRef` linking pattern used throughout the OneRoster specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:52:15.081Z",
    "updatedAt": "2025-07-02T01:03:58.130Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-408/schoolyear-field-is-incorrectly-named-academicsession-and-has"
  },
  {
    "id": "0d252c4b-e601-495f-908d-11382c5870bc",
    "identifier": "BUG-407",
    "title": "'org' Field in Course Response is Missing Required 'href' and 'type' Sub-fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `org` field in the `course` response object is defined in the local spec as an object containing only a `sourcedId`.\n\n**Summary:** \nThe `org` field in the `course` response object is defined in the local spec as an object containing only a `sourcedId`.\n\n**Steps to Reproduce:**\n\n1. Send a request to the endpoint that returns a course with an associated organization.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the `org` object in the response.\n3. The local spec indicates it will only contain `sourcedId`: `{\"org\": {\"sourcedId\": \"some_org_id\"}}`.\n\n**Expected:** \nThe `org` field should conform to the `OrgGUIDRefDType` definition from the upstream specification. This means it must be an object containing three required fields: `href` (a URI string), `sourcedId` (a string), and `type` (an enum with the value 'org'). The local implementation is missing the `href` and `type` fields.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** A `GUIDRef` object is a standard pattern in OneRoster used for linking between objects. It always includes `href` and `type` to provide context and a direct link to the referenced resource. By omitting these, the local implementation breaks this pattern and provides a non-compliant, less useful object.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:51:06.747Z",
    "updatedAt": "2025-07-03T18:04:47.198Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-407/org-field-in-course-response-is-missing-required-href-and-type-sub"
  },
  {
    "id": "7aac0e89-c062-427c-8144-c89d2d87fbbd",
    "identifier": "BUG-406",
    "title": "Extra Non-Standard Fields in Course Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `course` object in the 200 OK response schema includes three non-standard fields: `academicSession`, `level`, and `gradingScheme`.\n\n**Summary:** \nThe `course` object in the 200 OK response schema includes three non-standard fields: `academicSession`, `level`, and `gradingScheme`.\n\n**Steps to Reproduce:**\n\n1. Send a request to the endpoint.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the JSON response body.\n3. Note that the `academicSession`, `level`, and `gradingScheme` fields are present in the `course` object, but are not part of the official specification.\n\n**Expected:** \nThe response object should only contain fields defined in the official `CourseDType` definition. These three fields are not part of the upstream JSON or HTML specification. If custom data is needed, it should be placed inside the `metadata` object as per the spec's extension mechanism (see HTML spec section 6.1.4.4).\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding top-level proprietary fields pollutes the data model and violates the specification's extension mechanism. A compliant client will not know how to parse these fields and may fail if it performs strict validation. The `academicSession` field appears to be a misnamed implementation of the standard `schoolYear` field, which constitutes a separate, more critical bug.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:50:11.104Z",
    "updatedAt": "2025-07-02T00:58:37.373Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-406/extra-non-standard-fields-in-course-response-object"
  },
  {
    "id": "2238d483-e376-4718-a64a-d982a2b5bba1",
    "identifier": "BUG-405",
    "title": "Missing 'schoolYear' and 'resources' Fields in Course Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `course` object in the 200 OK response schema in the local spec is missing the standard `schoolYear` and `resources` fields.\n\n**Summary:** \nThe `course` object in the 200 OK response schema in the local spec is missing the standard `schoolYear` and `resources` fields.\n\n**Steps to Reproduce:**\n\n1. Send a request to the endpoint.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the JSON response body.\n3. Note that the `schoolYear` and `resources` fields are missing from the `course` object.\n\n**Expected:** \nThe response should include the `schoolYear` and `resources` fields as defined in the upstream `CourseDType`. The `schoolYear` field is an optional `AcadSessionGUIDRefDType` object, and `resources` is an optional array of `ResourceGUIDRefDType` objects. Compliant clients may expect these fields to exist, even if they are empty or absent.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting standard fields from the data model breaks compliance and limits the utility of the endpoint. The `schoolYear` links a course to a specific academic year, and `resources` links it to learning materials. Without these, the API provides an incomplete picture of the course object.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:48:58.376Z",
    "updatedAt": "2025-07-02T00:58:28.725Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-405/missing-schoolyear-and-resources-fields-in-course-response-object"
  },
  {
    "id": "6ee03f0e-4bff-4b04-8b38-a838ae13229c",
    "identifier": "BUG-404",
    "title": "'courseCode' Field Incorrectly Optional and Nullable in Course Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `courseCode` field in the `course` response object is defined as optional and nullable (`type: ['string', 'null']`) in the local spec.\n\n**Summary:** \nThe `courseCode` field in the `course` response object is defined as optional and nullable (`type: ['string', 'null']`) in the local spec.\n\n**Steps to Reproduce:**\n\n1. Send a request to the endpoint.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe that the `courseCode` field may be missing or `null` in the response, as the local spec defines it as optional (`type: ['string', 'null']`) and it is not in the `required` list.\n\n**Expected:** \nThe `courseCode` field must be a required, non-nullable string. The upstream JSON specification for `CourseDType` lists `courseCode` in its `required` array and defines its type as `string` (not `[string, null]`). Table 6.1.8.3 in the HTML documentation confirms its multiplicity is `[1]`, meaning it is mandatory.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Making a required field optional and nullable is a critical violation of the specification. Clients built against the official spec will expect `courseCode` to always be present and will likely fail when it is missing or null.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:47:54.401Z",
    "updatedAt": "2025-07-02T00:58:28.327Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-404/coursecode-field-incorrectly-optional-and-nullable-in-course-response"
  },
  {
    "id": "32675ce2-9e4c-4b98-8abd-a7db65c0c97d",
    "identifier": "BUG-403",
    "title": "Incorrect Required Fields for Course Object in GET /courses/{sourcedId} Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's `course` object in the 200 OK response has an incorrect `required` list. It requires `['status', 'title', 'org']`.\n\n**Summary:** \nThe local specification's `course` object in the 200 OK response has an incorrect `required` list. It requires `['status', 'title', 'org']`.\n\n**Steps to Reproduce:**\n\n1. Send a request to the endpoint.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n2. Observe the response structure and compare it to the local spec's `required` list for the `course` object.\n3. Local spec requires: `status`, `title`, `org`.\n4. Compare with the upstream spec's required list.\n\n**Expected:** \nThe `required` list should be `['sourcedId', 'status', 'dateLastModified', 'title', 'courseCode']` as defined in the upstream JSON specification for the `CourseDType` object and its parent `Base` object. Furthermore, the `org` field, which the local spec requires, is defined as optional in the upstream spec (Table 6.1.8.6 shows multiplicity of `[0..1]`).\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This bug is critical because it fundamentally misrepresents the data contract. The local implementation fails to require `sourcedId`, `dateLastModified`, and `courseCode`, which are mandatory upstream. It also incorrectly requires the `org` field, which is optional. This will lead to validation failures for compliant clients and allows the server to return non-compliant data.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:46:49.483Z",
    "updatedAt": "2025-07-02T15:15:23.554Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-403/incorrect-required-fields-for-course-object-in-get-coursessourcedid"
  },
  {
    "id": "8d84e030-2325-41be-8097-4ed09b80283f",
    "identifier": "BUG-402",
    "title": "Missing 'fields' Query Parameter in GET /courses/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /courses/{sourcedId}` does not define the standard `fields` query parameter, which is used for field selection (projections).\n\n**Summary:** \nThe local specification for `GET /courses/{sourcedId}` does not define the standard `fields` query parameter, which is used for field selection (projections).\n\n**Steps to Reproduce:**\n\n1. Examine the parameters for the `GET /ims/oneroster/rostering/v1p2/courses/{sourcedId}` endpoint in the local spec.\n2. Note that only the `sourcedId` path parameter is defined.\n3. Compare this to the upstream specification, which defines a `fields` query parameter for this operation.\n4. An attempt to use the standard `fields` parameter may be ignored or rejected by the server.\n\nA standard-compliant request would look like this:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id?fields=sourcedId,title\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe endpoint should support the `fields` query parameter. The upstream JSON spec for `getCourse` explicitly defines it: `{ \"name\": \"fields\", \"in\": \"query\", \"description\": \"To identify the range of fields that should be supplied in the response message.\", \"required\": false, \"type\": \"array\", \"items\": { \"type\": \"string\" }, \"collectionFormat\": \"csv\" }`. The upstream HTML documentation (Section 4.4.2) also confirms its existence.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting the `fields` parameter breaks compliance and reduces API efficiency. Clients cannot request a subset of data, forcing the server to always serialize the full object and increasing payload size. This is a violation of a standard feature present on all `get` operations in the specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:45:52.092Z",
    "updatedAt": "2025-07-03T19:26:04.622Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-402/missing-fields-query-parameter-in-get-coursessourcedid"
  },
  {
    "id": "7945879a-9951-4c34-b929-dfffef3e8304",
    "identifier": "BUG-401",
    "title": "Non-standard DELETE /courses/{sourcedId} Endpoint Implemented",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API implementation provides a `DELETE /ims/oneroster/rostering/v1p2/courses/{sourcedId}` endpoint, allowing clients to \"soft delete\" course data by changing its status to 'tobedeleted'.\n\n**Summary:** \nThe local API implementation provides a `DELETE /ims/oneroster/rostering/v1p2/courses/{sourcedId}` endpoint, allowing clients to \"soft delete\" course data by changing its status to 'tobedeleted'.\n\n**Steps to Reproduce:**\n\n1. Observe the local OpenAPI specification which defines a DELETE endpoint for /ims/oneroster/rostering/v1p2/courses/{sourcedId}.\n2. Cross-reference this with the official OneRoster 1.2 Rostering Service specifications (both JSON and HTML).\n3. Note that the official specification does not define any DELETE operations for managing courses.\n\nA client attempting to use this non-standard endpoint would look like this:\n\n```bash\ncurl -X DELETE \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThis endpoint should not exist. The official OneRoster v1.2 specification is read-only for rostering data. The upstream JSON specification for the `/courses/{sourcedId}` path only defines a `get` method. The upstream HTML documentation, in Table 4.4 \"The set of operations for the 'CoursesManagement' interface,\" does not list any `deleteCourse` operation. While the `tobedeleted` status exists, the mechanism to set it is external to this API; it is read from the source system.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Similar to the `PUT` endpoint, implementing a `DELETE` operation contradicts the read-only nature of the OneRoster Rostering Service. This creates a non-standard interface and can lead to severe data integrity issues if clients attempt to manage data through this API instead of relying on the authoritative source system.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:44:46.811Z",
    "updatedAt": "2025-07-02T16:41:29.097Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-401/non-standard-delete-coursessourcedid-endpoint-implemented"
  },
  {
    "id": "7bf664e5-dbf5-4e0c-835c-fbfc519cfe98",
    "identifier": "BUG-400",
    "title": "Non-standard PUT /courses/{sourcedId} Endpoint Implemented",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API implementation provides a `PUT /ims/oneroster/rostering/v1p2/courses/{sourcedId}` endpoint, allowing clients to update course data.\n\n**Summary:** \nThe local API implementation provides a `PUT /ims/oneroster/rostering/v1p2/courses/{sourcedId}` endpoint, allowing clients to update course data.\n\n**Steps to Reproduce:**\n\n1. Observe the local OpenAPI specification which defines a PUT endpoint for /ims/oneroster/rostering/v1p2/courses/{sourcedId}.\n2. Cross-reference this with the official OneRoster 1.2 Rostering Service specifications (both JSON and HTML).\n3. Note that the official specification does not define any PUT operations for managing courses. The service is read-only for rostering data.\n\nA client attempting to use this non-standard endpoint would look like this:\n\n```bash\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some_sourced_id\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"course\": {\"status\": \"active\", \"title\": \"Updated Course Title\", \"org\": {\"sourcedId\": \"org_id\"}}}'\n```\n\n**Expected:** \nThis endpoint should not exist. The official OneRoster v1.2 specification is read-only for rostering data management. The upstream JSON specification for the `/courses/{sourcedId}` path only defines a `get` method. The upstream HTML documentation, in Table 4.4 \"The set of operations for the 'CoursesManagement' interface,\" only lists `getAllCourses`, `getCourse`, and `getClassesForCourse`. There are no operations for updating or creating data.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The implementation of a write operation (`PUT`) is a fundamental deviation from the OneRoster specification, which treats the rostering data source (typically an SIS) as the single source of truth and provides read-only access to consumers. Implementing this endpoint introduces a significant risk of data inconsistency and violates the core architectural principles of the standard. This suggests a misunderstanding of the specification's purpose.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:43:45.802Z",
    "updatedAt": "2025-07-02T00:57:43.087Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-400/non-standard-put-coursessourcedid-endpoint-implemented"
  },
  {
    "id": "94c78d5a-1025-4281-8cac-015bb7735b84",
    "identifier": "BUG-399",
    "title": "Operation Summary and Description Deviate from Official Documentation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification has a `summary` of \"Get Classes for a Course\" and a `description` that says \"To get all Classes associated with a specific Course. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course not found.'\".\n\n**Summary:** \nThe local specification has a `summary` of \"Get Classes for a Course\" and a `description` that says \"To get all Classes associated with a specific Course. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course not found.'\".\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the `summary` and `description` of the GET operation in the local spec.\n2. Compare these fields to the corresponding fields in the upstream JSON spec and the description in the upstream HTML documentation (Section 4.4.3).\n3. Note the discrepancies in wording and detail.\n\n**Expected:** \nThe upstream specification provides different descriptive text.\nThe upstream JSON `summary` is: \"The REST read request message for the getClassesForCourse() API call.\"\nThe upstream JSON `description` is: \"To get the set of classes related to a specific course. If the specified course cannot be identified within the service provider then a status code of 'unknownobject' must be reported.\"\nThe local spec's summary and description should align with the upstream documentation to maintain consistency and avoid confusion for developers.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While the local descriptions are arguably more human-friendly, they deviate from the official specification. Such deviations, even if well-intentioned, create inconsistencies that can complicate maintenance and developer onboarding. The reference to a specific 404 error message \"Course not found.\" is a proprietary implementation detail that should not be in a spec meant to conform to a standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:41:38.307Z",
    "updatedAt": "2025-07-02T00:57:30.677Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-399/operation-summary-and-description-deviate-from-official-documentation"
  },
  {
    "id": "b55ea58d-60bc-4f8a-9845-9dc6824cfbee",
    "identifier": "BUG-398",
    "title": "Incorrect API Version in 'info.version' Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's `info.version` field is set to `1.0.0`.\n\n**Summary:** \nThe local specification's `info.version` field is set to `1.0.0`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Load the local OpenAPI specification file.\n2. Inspect the `info.version` field.\n3. Note that its value is `1.0.0`.\n4. Compare this to the upstream specification version.\n\n**Expected:** \nThe upstream specification is for OneRoster 1.2. The `info.version` in the upstream JSON spec is `1.2`. The local spec should align with the upstream version it is implementing. The `info.version` field should be `1.2`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While this doesn't break runtime functionality, it is incorrect metadata that can cause confusion for developers and automated tooling that rely on the version number to understand which specification is being implemented. It suggests the implementation may be based on an older, incompatible version of the API.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:40:27.079Z",
    "updatedAt": "2025-07-02T00:57:21.398Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-398/incorrect-api-version-in-infoversion-field"
  },
  {
    "id": "a480a77d-f6b8-4716-b46b-3b81c8026c14",
    "identifier": "BUG-397",
    "title": "Security Requirement is Missing Required OAuth 2.0 Scope",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's security requirement is defined as `OAuth2: []`. The empty array signifies that any valid token for the `OAuth2` scheme is accepted, without checking for specific scopes.\n\n**Summary:** \nThe local specification's security requirement is defined as `OAuth2: []`. The empty array signifies that any valid token for the `OAuth2` scheme is accepted, without checking for specific scopes.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain an OAuth2 token that does not have the `https://purl.imsglobal.org/spec/or/v1p2/scope/roster.readonly` scope.\n2. Attempt to call the `GET /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes` endpoint with this token.\n3. If the local implementation is based on the local spec, the call may succeed, which violates the security model.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some-course-id/classes\" \\\n-H \"Authorization: Bearer $TOKEN_WITHOUT_REQUIRED_SCOPE\"\n```\n\n**Expected:** \nThe upstream specification requires a specific scope for this operation. The upstream JSON spec shows:\n\n```json\n\"security\": [\n  {\n    \"OAuth2CC\": [\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/roster.readonly\"\n    ]\n  }\n]\n```\n\nThis means that any client accessing this endpoint must present a token that has been granted the `https://purl.imsglobal.org/spec/or/v1p2/scope/roster.readonly` scope. The local implementation should enforce this.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a security misconfiguration. By not enforcing the required scope, the API may grant access to clients that are not authorized for this level of data access. This violates the principle of least privilege and the security model of the OneRoster standard.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:39:22.584Z",
    "updatedAt": "2025-07-03T12:51:47.748Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-397/security-requirement-is-missing-required-oauth-20-scope"
  },
  {
    "id": "c7c0751e-224a-4353-846a-45b56498a210",
    "identifier": "BUG-396",
    "title": "Multiple Schema Deviations in the 'Class' Object in 200 OK Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Class` object schema in the local spec deviates from the upstream `ClassDType` in several ways:\n\n1. `dateLastModified` is optional locally, but required upstream.\n2. `classCode`, `classType`, and `location` are required (but nullable) locally, but optional upstream.\n3. `course` and `school` are nullable locally, but not nullable upstream.\n4. The `terms` array is missing the `minItems: 1` constraint that is required upstream.\n\n**Summary:** \nThe `Class` object schema in the local spec deviates from the upstream `ClassDType` in several ways:\n\n1. `dateLastModified` is optional locally, but required upstream.\n2. `classCode`, `classType`, and `location` are required (but nullable) locally, but optional upstream.\n3. `course` and `school` are nullable locally, but not nullable upstream.\n4. The `terms` array is missing the `minItems: 1` constraint that is required upstream.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the `/ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes` endpoint.\n2. Validate the returned `classes` array against the upstream `ClassDType` schema.\n3. Observe the multiple discrepancies in required status, nullability, and constraints.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some-course-id/classes\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `Class` object schema in the local spec must exactly match the `ClassDType` from the upstream specification. Specifically:\n\n* `dateLastModified` must be in the `required` list.\n* `classCode`, `classType`, and `location` must NOT be in the `required` list.\n* `course` and `school` must not be nullable. If they are absent, the field should be omitted, not set to null.\n* `terms` must have a `minItems: 1` constraint.\n\nFrom the upstream JSON spec, the required fields for `ClassDType` are `[\"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"course\", \"school\", \"terms\"]`. The local spec's `required` list is `[\"sourcedId\", \"status\", \"title\", \"classCode\", \"classType\", \"location\", \"course\", \"school\", \"terms\"]`, which is incorrect.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** These discrepancies represent a fundamental break from the official data model. Clients relying on the official specification for validation or object mapping will fail. For example, a client may encounter a `null` value for `course` where none is expected, or fail to find the required `dateLastModified` field. An empty `terms` array would be considered valid by the local spec but is invalid according to the upstream spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:38:22.566Z",
    "updatedAt": "2025-07-02T00:56:57.430Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-396/multiple-schema-deviations-in-the-class-object-in-200-ok-response"
  },
  {
    "id": "9343f7f4-60ec-42f5-bf33-eb222e2bedc4",
    "identifier": "BUG-395",
    "title": "Undocumented 'maximum' Constraint on 'limit' Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `limit` query parameter includes a `maximum: 3000` constraint.\n\n**Summary:** \nThe local specification for the `limit` query parameter includes a `maximum: 3000` constraint.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the endpoint's definition in the local OpenAPI spec.\n2. Observe that the `limit` parameter has a `maximum` value of 3000.\n3. Compare this to the upstream specification, which does not define a maximum.\n\nCurl command (to test the undocumented boundary):\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some-course-id/classes?limit=3001\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification for the `limit` parameter does not define any `maximum` value. It only defines `type: integer`, `default: 100`, and `minimum: 1`. Adding a `maximum` constraint is a proprietary restriction that is not part of the official specification and should be removed for compliance, or at a minimum, be documented as a specific implementation choice that deviates from the base spec.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Imposing undocumented limits can cause unexpected errors for clients. A client built against the official specification would have no reason to believe that a limit of 3001 is invalid. This deviation can break client integrations.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:37:25.052Z",
    "updatedAt": "2025-07-03T05:45:00.266Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-395/undocumented-maximum-constraint-on-limit-query-parameter"
  },
  {
    "id": "23f2546d-6e4e-4121-830f-f8bf4fc02dbf",
    "identifier": "BUG-394",
    "title": "Incorrect Data Type for 'fields' Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines the `fields` query parameter as `schema: { type: string }`.\n\n**Summary:** \nThe local spec defines the `fields` query parameter as `schema: { type: string }`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the endpoint's definition in the local OpenAPI spec.\n2. Observe that the `fields` parameter is defined with `type: string`.\n3. Compare this to the upstream specification.\n\nCurl command (conceptual):\nThis is a specification bug, not a runtime bug, but it affects how clients would be generated and how they would format requests. A standard client would send `?fields=sourcedId&fields=name` if based on an array type, versus `?fields=sourcedId,name` for a string type.\n\n```bash\n# A request that is valid according to upstream spec but may fail on local implementation if it doesn't handle CSV format\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some-course-id/classes?fields=sourcedId,title\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nhe upstream JSON spec defines the `fields` parameter as an array of strings that is formatted as a comma-separated value (CSV) list. The correct OpenAPI 2.0 definition is:\n\n```json\n{\n  \"name\": \"fields\",\n  \"in\": \"query\",\n  \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  },\n  \"collectionFormat\": \"csv\",\n  \"allowEmptyValue\": false\n}\n```\n\nThe local OpenAPI 3.1 spec should represent this more accurately, for example:\n\n```yaml\n- in: query\n  name: fields\n  schema:\n    type: array\n    items:\n      type: string\n  style: form\n  explode: false\n```\n\nDefining it as a simple `string` is a loss of type information and a deviation from the specification.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Incorrectly defining the type of the `fields` parameter can cause issues with client code generation and validation. A client expecting to provide an array of strings might format the request incorrectly if working from the local spec. This is a violation of the upstream contract.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:36:09.163Z",
    "updatedAt": "2025-07-03T17:05:41.460Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-394/incorrect-data-type-for-fields-query-parameter"
  },
  {
    "id": "ab3099c1-2960-4e33-bd48-2b0cd877de96",
    "identifier": "BUG-393",
    "title": "Incorrect Pagination Implementation in 200 OK Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the 200 OK response as a JSON object containing pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) alongside the `classes` data array. This contradicts the upstream specification.\n\n**Summary:** \nThe local specification defines the 200 OK response as a JSON object containing pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) alongside the `classes` data array. This contradicts the upstream specification.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the `/ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes` endpoint.\n2. Inspect the JSON response body.\n3. Note the presence of pagination fields like `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` in the top-level object.\n4. Inspect the response headers and note the absence of the `X-Total-Count` header.\n\nCurl command:\n\n```bash\ncurl -v -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some-course-id/classes\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification, the response body for a collection should be a `ClassSetDType` object, which contains only one property: `classes`. Pagination information, specifically the total number of records, should be communicated via the `X-Total-Count` HTTP header.\n\nThe upstream JSON spec for the 200 response explicitly defines this:\n\n```json\n\"headers\": {\n  \"X-Total-Count\": {\n    \"description\": \"The total number of resources that are available to be returned\",\n    \"type\": \"integer\"\n  }\n}\n```\n\nThe response body should only contain:\n\n```json\n{\n  \"classes\": [\n    ...\n  ]\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a major structural violation of the OneRoster specification. Clients built to the specification will expect to find pagination data in the headers and will parse the response body as a simple `ClassSet` object. The current implementation will break standard clients and requires proprietary logic to handle pagination.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:35:04.073Z",
    "updatedAt": "2025-07-03T05:48:05.515Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-393/incorrect-pagination-implementation-in-200-ok-response"
  },
  {
    "id": "ff25b748-7843-4e7e-a3a5-0f087f6d9066",
    "identifier": "BUG-392",
    "title": "Undocumented 'search' Query Parameter on GET /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local OpenAPI specification defines a query parameter named `search`. This parameter is not present in the official upstream OneRoster 1.2 specification for this endpoint.\n\n**Summary:** \nThe local OpenAPI specification defines a query parameter named `search`. This parameter is not present in the official upstream OneRoster 1.2 specification for this endpoint.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a GET request to the `/ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes` endpoint.\n2. Add a `search` query parameter with any string value.\n3. Observe that the API likely performs a search, a behavior not defined in the official specification.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/some-course-id/classes?search=somequery\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe endpoint should only support the query parameters defined in the upstream specification: `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. The `search` parameter should not be implemented or documented. The upstream JSON and HTML documentation for the `getClassesForCourse` operation do not list a `search` parameter.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes\nLocal Spec: ims/oneroster/rostering/v1p2/courses/{courseSourcedId}/classes.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation. Implementing non-standard parameters breaks conformity with the OneRoster specification and can lead to unpredictable behavior for clients built against the official spec. This proprietary extension must be documented as such or removed to ensure compliance.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T12:33:56.745Z",
    "updatedAt": "2025-07-03T06:01:35.094Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-392/undocumented-search-query-parameter-on-get"
  },
  {
    "id": "25feb0f0-7b7c-4d6d-b1f3-c5eb055bed03",
    "identifier": "BUG-391",
    "title": "Error Responses Don't Follow Standard 1EdTech imsx_StatusInfo Format",
    "description": "**Reporter:** Christopher Vidic (christopher.vidic@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** Different endpoints return error responses in varying formats, some following the 1EdTech standard and others using custom formats. This inconsistency makes it impossible to implement unified error handling in client applications.\n\n**Summary:** \nDifferent endpoints return error responses in varying formats, some following the 1EdTech standard and others using custom formats. This inconsistency makes it impossible to implement unified error handling in client applications.\n\n**Steps to Reproduce:**\n\n# Step 1: Trigger error on CASE endpoint\n\ncurl -X GET \"[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/invalid-id](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/invalid-id)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n# Response format A (Custom):\n\n{\n  \"error\": \"Not found\",\n  \"message\": \"Document not found\",\n  \"statusCode\": 404\n}\n\n# Step 2: Trigger error on OneRoster endpoint\n\ncurl -X GET \"[https://api.alpha-1edtech.com/ims/oneroster/v1p1/users/invalid-id](https://api.alpha-1edtech.com/ims/oneroster/v1p1/users/invalid-id)\" \n-H \"Authorization: Bearer $TOKEN\"\n\n# Response format B (Partial IMS):\n\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"message\": \"User not found\"\n  // Missing: imsx_description, imsx_codeMinor\n}\n\n# Step 3: Expected consistent format not found\n\n**Expected:** \nAll error responses must follow 1EdTech imsx_StatusInfo standard:\n\n```json\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"The specific resource 'invalid-id' cannot be found.\",\n  \"imsx_codeMinor\": \"unknownobject\"\n}\n```\n\nValid code minor values:\n\n* `fullsuccess`, `invalid_data`, `unauthorisedrequest`\n* `unknownobject`, `server_busy`, `invalidsourcedid`\n\n**Environment:** API Route: All endpoints across CASE and OneRoster\n1EdTech Spec: imsx_StatusInfo.Type definition\nLTI Standard: IMS Global StatusInfo model\nError Codes: imsx_CodeMinor.Type enumeration\n**Additional Notes:** Inconsistent error formats prevent: (1) Unified error handling logic, (2) Proper error logging and monitoring, (3) Internationalization of error messages, (4) Automated error recovery. Clients must implement endpoint-specific error parsing, increasing complexity and maintenance burden.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T04:55:10.585Z",
    "updatedAt": "2025-07-02T18:44:09.030Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-391/error-responses-dont-follow-standard-1edtech-imsx-statusinfo-format"
  },
  {
    "id": "c765e7bf-865e-42c5-906a-7140546e2c5e",
    "identifier": "BUG-390",
    "title": "OPTIONS Method Returns 204 Instead of 405 on Read-Only CASE API",
    "description": "**Reporter:** Christopher Vidic (christopher.vidic@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The CASE API incorrectly returns a 204 No Content response for OPTIONS requests when it should return 405 Method Not Allowed. The CASE specification explicitly defines the API as read-only, supporting only GET operations.\n\n**Summary:** \nThe CASE API incorrectly returns a 204 No Content response for OPTIONS requests when it should return 405 Method Not Allowed. The CASE specification explicitly defines the API as read-only, supporting only GET operations.\n\n**Steps to Reproduce:**\n\n```bash\n# Step 1: Send OPTIONS request to any CASE endpoint\ncurl -v -X OPTIONS \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments\" \\\n-H \"Origin: https://example.com\" \\\n-H \"Access-Control-Request-Method: GET\" \\\n-H \"Access-Control-Request-Headers: authorization\"\n\n# Step 2: Observe response\n# HTTP/1.1 204 No Content\n# Access-Control-Allow-Origin: *\n# Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\n# Access-Control-Allow-Headers: authorization, content-type\n\n# Step 3: Verify CASE spec only allows GET\n# From case.upstream.json: All endpoints only define \"get\" operations\n```\n\n**Expected:** \nAccording to the CASE v1.0 specification and the upstream OpenAPI definition, only GET methods are allowed. The server should return:\n\n```\nHTTP/1.1 405 Method Not Allowed\nAllow: GET\nContent-Type: application/json\n\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Method not allowed. Only GET is supported.\",\n  \"imsx_codeMinor\": \"invalid_request_method\"\n}\n```\n\n**Environment:** API Route: /ims/case/v1p1/\\*\nLocal Spec: All CASE endpoints\nUpstream Spec (JSON): case.upstream.json - only \"get\" operations defined\nUpstream Spec (HTML): Section 3.2 - \"read-only access to the competency frameworks\"\n**Additional Notes:**",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-07-01T04:44:46.247Z",
    "updatedAt": "2025-07-02T16:41:08.016Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-390/options-method-returns-204-instead-of-405-on-read-only-case-api"
  },
  {
    "id": "e5cea554-c37e-4585-b6da-9479dff330c7",
    "identifier": "BUG-389",
    "title": "HTTP Header Overflow Denial of Service Vulnerability",
    "description": "**Reporter:** Christopher Vidic (christopher.vidic@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The CASE API server accepts extremely large Authorization headers up to 65,536 bytes before returning a 431 Request Header Fields Too Large error. This represents a critical security vulnerability as it allows attackers to consume server resources by sending oversized headers, potentially leading to memory exhaustion and service degradation.\n\n**Summary:** \nThe CASE API server accepts extremely large Authorization headers up to 65,536 bytes before returning a 431 Request Header Fields Too Large error. This represents a critical security vulnerability as it allows attackers to consume server resources by sending oversized headers, potentially leading to memory exhaustion and service degradation.\n\n**Steps to Reproduce:**\n\n```bash\n# Step 1: Generate a 65KB Authorization header\nLARGE_TOKEN=$(python3 -c \"print('A' * 65530)\")\n\n# Step 2: Send request with oversized header\ncurl -v -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments\" \\\n-H \"Authorization: Bearer $LARGE_TOKEN\" \\\n-H \"Accept: application/json\"\n\n# Step 3: Observe server response\n# HTTP/1.1 431 Request Header Fields Too Large\n# Server continues to process the entire 65KB header before rejecting\n```\n\n**Expected:** \nAccording to RFC 7540 (HTTP/2) Section 10.3 and industry best practices, servers should enforce a maximum header size limit of 8,192 bytes. The server should immediately reject requests with headers exceeding this limit with a 400 Bad Request response, not process them up to 65KB.\n\nFrom nginx documentation: \"large_client_header_buffers 4 8k;\" is the recommended setting.\nFrom Apache documentation: \"LimitRequestFieldSize 8190\" is the default.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p0/CFDocuments.filtered.yaml\nIndustry Standard: RFC 7540 Section 10.3 - 8KB header limit\nCommon Practice: nginx (8KB), Apache (8KB), IIS (16KB)\n**Additional Notes:** This vulnerability can be exploited to launch denial-of-service attacks. An attacker could send multiple concurrent requests with 65KB headers to exhaust server memory and CPU resources. The server's willingness to process headers 8x larger than industry standards indicates a misconfiguration that poses significant risk.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T04:40:08.231Z",
    "updatedAt": "2025-07-02T00:55:18.956Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-389/http-header-overflow-denial-of-service-vulnerability"
  },
  {
    "id": "b69f76f0-c141-4ef3-a906-1232a1f6e8bf",
    "identifier": "BUG-388",
    "title": "Optional string fields in response incorrectly allow `null` type",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Numerous optional string fields in the response user object are explicitly defined to allow a `null` value, in addition to being a string.\n\n**Summary:** \nNumerous optional string fields in the response user object are explicitly defined to allow a `null` value, in addition to being a string.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the user object in the 200 OK response of the local spec.\n2. Observe that many fields like `username`, `middleName`, `email`, `phone`, `sms`, `password`, `pronouns`, `userMasterIdentifier`, etc., are defined with `type: [- string, - 'null']`.\n3. Compare this to the `UserDType` definition in the upstream specification.\n\n**Expected:** \nThese fields should be defined as `type: string` and be optional. The absence of a value should be represented by omitting the field from the JSON object, not by including the field with a `null` value. The upstream JSON specification defines these fields only as `type: string` and their optionality is handled by them not being in the `required` array. Allowing `null` is a deviation from this pattern and can cause issues for strictly-typed clients that do not expect `null`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While some JSON parsers may handle an explicit `null` and an omitted field similarly, it is a deviation from the specified schema. The OneRoster spec implies that optional fields are omitted if they have no value. Explicitly adding `null` as a possible type complicates client-side logic and violates the defined `UserDType` schema. This also applies to the `Demographics` object, where fields like `birthDate` and the boolean-like string fields are defined to allow `null`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:43:26.549Z",
    "updatedAt": "2025-07-03T18:10:31.141Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-388/optional-string-fields-in-response-incorrectly-allow-null-type"
  },
  {
    "id": "f16cfc5b-19bf-475c-88f7-7a2b51f9343f",
    "identifier": "BUG-387",
    "title": "Incorrect `imsx_codeMinorFieldValue` for 400 Bad Request response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the 400 Bad Request response uses an `imsx_codeMinorFieldValue` of `invaliddata`.\n\n**Summary:** \nThe local specification for the 400 Bad Request response uses an `imsx_codeMinorFieldValue` of `invaliddata`.\n\n**Steps to Reproduce:**\n\n1. Send a GET request with an invalid filter field.\n   `curl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/teachers?filter=invalidField%3D'foo'\" -H \"Authorization: Bearer $TOKEN\"`\n2. Inspect the JSON error payload in the 400 response.\n3. The local spec indicates the `imsx_codeMinorFieldValue` will be `invaliddata`.\n\n**Expected:** \nThe `imsx_codeMinorFieldValue` for a 400 error due to bad query parameters should be more specific. The upstream specification's description for the 400 response states: \"Either an invalid selection field or invalid filter selection was supplied and data filtering on the selection criteria was not possible i.e. 'invalid_selection_field' or 'invalid_filter_field' respectively.\"\n\nThe `imsx_CodeMinorValueEnum` vocabulary includes these specific values. The local implementation should use `invalid_filter_field` or `invalid_selection_field` instead of the more generic `invaliddata`, which is typically reserved for semantically incorrect request bodies (e.g., in a POST/PUT request).\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Using a generic error code when a more specific one is available reduces the utility of the error response. Compliant clients may have logic to handle specific error types like `invalid_filter_field` differently. By using `invaliddata`, the local implementation provides less granular and less helpful error feedback than required by the specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:41:28.721Z",
    "updatedAt": "2025-07-03T18:49:39.058Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-387/incorrect-imsx-codeminorfieldvalue-for-400-bad-request-response"
  },
  {
    "id": "256c9e68-7999-47e5-a4c8-7e0008b006c7",
    "identifier": "BUG-386",
    "title": "`beginDate` and `endDate` in `roles` array are incorrectly marked as required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the user object returned by the GET endpoint, the `beginDate` and `endDate` fields within each `roles` object are marked as required.\n\n**Summary:** \nIn the user object returned by the GET endpoint, the `beginDate` and `endDate` fields within each `roles` object are marked as required.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the items in the `roles` array in the local specification.\n2. Note that `beginDate` and `endDate` are in the `required` list for the object.\n3. Compare this to the `RoleDType` definition in the upstream specification.\n\n**Expected:** \nThe `beginDate` and `endDate` fields should be optional. The upstream JSON specification for `RoleDType` does not include them in its `required` array. The `required` array is `[\"roleType\", \"role\", \"org\"]`. The upstream HTML doc (Table 6.1.22.5 and 6.1.22.6) confirms their multiplicity is `[0..1]`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Marking optional fields as required is a significant deviation. It can cause validation issues for both clients and servers. If the underlying data source does not have a begin/end date for a role (which is permissible by the standard), the API would either have to return an invalid object (violating its own spec) or fail to return the data entirely. This breaks the flexibility intended by the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:39:03.495Z",
    "updatedAt": "2025-07-02T15:15:23.551Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-386/begindate-and-enddate-in-roles-array-are-incorrectly-marked-as"
  },
  {
    "id": "f7d84d7f-ff65-4bc7-82c1-4ec10fe4e9ae",
    "identifier": "BUG-385",
    "title": "Incomplete enum for `roles.role` field in `GET /classes/{classSourcedId}/teachers` response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuliders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The enum for the `role` property inside the `roles` array of the user object is incomplete. It is missing several standard roles. The local enum is: `administrator, aide, guardian, parent, proctor, relative, student, teacher`.\n\n**Summary:** \nThe enum for the `role` property inside the `roles` array of the user object is incomplete. It is missing several standard roles. The local enum is: `administrator, aide, guardian, parent, proctor, relative, student, teacher`.\n\n**Steps to Reproduce:**\n\n1. Send a GET request that returns a teacher with a role like `counselor` or `principal`.\n   `curl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/teachers\" -H \"Authorization: Bearer $TOKEN\"`\n2. A client validating against the local spec would reject this response, as the `role` enum is incomplete.\n\n**Expected:** \nThe `role` enum should include all values from the `RoleEnum` vocabulary in the upstream specification. The missing values include `counselor`, `districtAdministrator`, `principal`, `siteAdministrator`, and `systemAdministrator`.\n\nThe upstream HTML documentation (Section 6.3.11) lists the full vocabulary.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** An incomplete enum is a significant bug. It means the API documentation is lying to clients about the data they might receive. If the service sends a valid role (e.g., `principal`) that is not in the local spec's enum, any client performing strict validation based on the local spec will fail. This undermines the reliability of the API documentation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:37:28.407Z",
    "updatedAt": "2025-07-02T01:12:27.842Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-385/incomplete-enum-for-rolesrole-field-in-get"
  },
  {
    "id": "37c70498-5fa0-4d38-ae54-cf2c2859ac1b",
    "identifier": "BUG-384",
    "title": "Undocumented `maximum` constraint on `limit` query parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `limit` query parameter includes a `maximum` value of 3000, constraining the number of items that can be requested per page.\n\n**Summary:** \nThe local specification for the `limit` query parameter includes a `maximum` value of 3000, constraining the number of items that can be requested per page.\n\n**Steps to Reproduce:**\n\n1. Review the definition of the `limit` query parameter in the local specification.\n2. Observe the presence of `maximum: 3000`.\n3. Review the definition of the `limit` query parameter in the upstream JSON and HTML specifications.\n4. Observe that no `maximum` constraint is defined.\n\n**Expected:** \nThere should be no `maximum` constraint on the `limit` parameter according to the official specification. While implementers may impose their own limits, this deviation from the specification should be documented as a proprietary constraint, not presented as part of the standard implementation. The upstream spec only defines `minimum: 1` and `default: 100`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding an undocumented and non-standard constraint can cause unexpected behavior for clients. A client attempting to request a page size larger than 3000 (which is valid per the spec) would receive an error or an unexpectedly small page, breaking its pagination logic. This is an undocumented proprietary limitation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:36:30.739Z",
    "updatedAt": "2025-07-03T05:44:59.461Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-384/undocumented-maximum-constraint-on-limit-query-parameter"
  },
  {
    "id": "8829bab4-04e9-4005-8577-a78d698f0537",
    "identifier": "BUG-383",
    "title": "Incorrect type for `fields` query parameter on `GET /classes/{classSourcedId}/teachers`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `fields` query parameter as a simple string.\n\n**Summary:** \nThe local specification defines the `fields` query parameter as a simple string.\n\n**Steps to Reproduce:**\n\n1. Review the `parameters` section for the GET method in the local specification.\n2. Note that the `fields` parameter is defined with `schema: { type: string }`.\n3. Compare with the upstream specification.\n\n**Expected:** \nThe `fields` query parameter should be defined as an array of strings with a `csv` collection format. This correctly represents a comma-separated list of values in a URL query.\n\nThe upstream JSON specification defines it as:\n\n```json\n{\n  \"name\": \"fields\",\n  \"in\": \"query\",\n  \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  },\n  \"collectionFormat\": \"csv\",\n  \"allowEmptyValue\": false\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While functionally a comma-separated string can be parsed, defining the parameter incorrectly in the OpenAPI specification is a bug. It misleads tooling and developers about the expected format. The upstream spec uses the correct OpenAPI 2.0 representation for a comma-separated query parameter, and the local OpenAPI 3.1 spec should have used the equivalent modern syntax (e.g., `style: form`, `explode: false`). Simply defining it as `type: string` is an oversimplification and incorrect from a specification standpoint.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:34:55.180Z",
    "updatedAt": "2025-07-03T17:05:41.458Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-383/incorrect-type-for-fields-query-parameter-on-get"
  },
  {
    "id": "106879b0-4fed-45d5-b812-13059a120079",
    "identifier": "BUG-382",
    "title": "Incorrect schema for items in the `agents` array in `GET /classes/{classSourcedId}/teachers` user object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the items in the `agents` array with a `type` property that has a large and incorrect enum of many different OneRoster object types.\n\n**Summary:** \nThe local specification defines the items in the `agents` array with a `type` property that has a large and incorrect enum of many different OneRoster object types.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the endpoint.\n   `curl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/teachers\" -H \"Authorization: Bearer $TOKEN\"`\n2. Inspect an object within the `agents` array of a returned user.\n3. According to the local spec, the `type` field can have values like `academicSession`, `class`, `course`, etc.\n\n**Expected:** \nThe `agents` array should contain items conforming to the `UserGUIDRefDType`. In this reference object, the `type` property must have a single allowed enum value: `user`. The purpose of the `agents` field is to link a user to other users (e.g., a student to their parents).\n\nThe upstream JSON spec for `UserDType` defines `agents` as:\n\n```json\n\"agents\": {\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"#/definitions/UserGUIDRefDType\"\n  }\n}\n```\n\nAnd `UserGUIDRefDType` defines `type` as:\n\n```json\n\"type\": {\n  \"description\": \"The type of object being referenced i.e. a 'user'.\",\n  \"type\": \"string\",\n  \"enum\": [\"user\"]\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This appears to be a copy-paste error in the local specification, where an enum from a different kind of object was used. It renders the `agents` field completely non-compliant and unusable for any client following the standard. The field is meant to link users to other users, not to arbitrary objects like academic sessions or courses.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:32:19.820Z",
    "updatedAt": "2025-07-02T00:54:03.218Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-382/incorrect-schema-for-items-in-the-agents-array-in-get"
  },
  {
    "id": "02713eb3-b6b7-451d-ab92-184ba6f62487",
    "identifier": "BUG-381",
    "title": "Undocumented non-standard query parameter `search` on `GET /classes/{classSourcedId}/teachers`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `GET /.../teachers` endpoint includes a query parameter named `search`.\n\n**Summary:** \nThe local specification for the `GET /.../teachers` endpoint includes a query parameter named `search`.\n\n**Steps to Reproduce:**\n\n1. Review the parameters for `GET /classes/{classSourcedId}/teachers` in the local spec.\n2. Note the existence of the `search` query parameter.\n3. Review the parameters for the same endpoint in the upstream JSON and HTML specifications.\n4. Observe that `search` is not a defined parameter.\n\nExample of non-standard request:\n`curl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/teachers?search=John\" -H \"Authorization: Bearer $TOKEN\"`\n\n**Expected:** \nThe `search` query parameter should not exist. The official OneRoster v1.2 specification defines standard parameters for filtering (`filter`), sorting (`sort`, `orderBy`), field selection (`fields`), and pagination (`limit`, `offset`), but does not include a generic `search` parameter. Any filtering behavior should be implemented using the standard `filter` parameter.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a non-standard query parameter deviates from the specification and harms interoperability. Compliant clients will not know to use this parameter, and its behavior is undefined by the standard. This introduces proprietary functionality that should be handled through the specified `filter` mechanism.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:23:09.264Z",
    "updatedAt": "2025-07-02T20:15:15.644Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-381/undocumented-non-standard-query-parameter-search-on-get"
  },
  {
    "id": "80d92307-c4ce-4bb4-b0cc-7061df03e304",
    "identifier": "BUG-380",
    "title": "`Demographics` schema incorrectly marks optional fields as required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Demographics` component schema incorrectly marks many optional fields as required. The `required` list includes `birthDate`, `sex`, `americanIndianOrAlaskaNative`, `asian`, `blackOrAfricanAmerican`, `nativeHawaiianOrOtherPacificIslander`, `white`, `demographicRaceTwoOrMoreRaces`, `hispanicOrLatinoEthnicity`, `countryOfBirthCode`, `stateOfBirthAbbreviation`, `cityOfBirth`, and `publicSchoolResidenceStatus`.\n\n**Summary:** \nThe local `Demographics` component schema incorrectly marks many optional fields as required. The `required` list includes `birthDate`, `sex`, `americanIndianOrAlaskaNative`, `asian`, `blackOrAfricanAmerican`, `nativeHawaiianOrOtherPacificIslander`, `white`, `demographicRaceTwoOrMoreRaces`, `hispanicOrLatinoEthnicity`, `countryOfBirthCode`, `stateOfBirthAbbreviation`, `cityOfBirth`, and `publicSchoolResidenceStatus`.\n\n**Steps to Reproduce:**\n\n1. Review the `components.schemas.Demographics` in the local specification.\n2. Observe that the `required` array contains fields like `birthDate`, `sex`, `americanIndianOrAlaskaNative`, etc.\n3. Compare this with the `DemographicsDType` in the upstream JSON specification.\n\n**Expected:** \nMost fields in the `Demographics` object should be optional. According to the upstream `DemographicsDType` specification, only `sourcedId`, `status`, and `dateLastModified` are required. All other demographic data points are optional.\n\nThe `required` array in the upstream JSON `definitions.DemographicsDType` is:\n`\"required\": [\"sourcedId\", \"status\", \"dateLastModified\"]`\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical bug that fundamentally misunderstands the `Demographics` data model. Forcing these fields to be required places an undue burden on the data provider and will likely cause validation failures for any compliant data source that omits this optional PII data. It completely breaks the optional nature of sensitive demographic information.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:21:18.246Z",
    "updatedAt": "2025-07-02T12:13:27.042Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-380/demographics-schema-incorrectly-marks-optional-fields-as-required"
  },
  {
    "id": "0856ca8d-c371-4c5b-911c-e54d6ae125fa",
    "identifier": "BUG-379",
    "title": "Incorrect data type for `enabledUser` field in `GET /classes/{classSourcedId}/teachers` response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `enabledUser` field in the user object of the response is defined with `type: boolean` in the local specification.\n\n**Summary:** \nThe `enabledUser` field in the user object of the response is defined with `type: boolean` in the local specification.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to retrieve teachers for a class.\n   `curl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/teachers\" -H \"Authorization: Bearer $TOKEN\"`\n2. Inspect the `enabledUser` field in one of the returned teacher objects.\n\nThe local spec indicates the field will be a JSON boolean:\n`\"enabledUser\": true` or `\"enabledUser\": false`\n\n**Expected:** \nThe `enabledUser` field must be a string with a value of either \"true\" or \"false\".\n\nThe upstream JSON specification for `UserDType` defines `enabledUser` as:\n\n```json\n\"enabledUser\": {\n  \"description\": \"...\",\n  \"type\": \"string\",\n  \"enum\": [\"true\", \"false\"]\n}\n```\n\nThe upstream HTML documentation (Section 6.1.30.4) confirms this, referencing `TrueFalseEnum`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data type mismatch. A compliant client will expect a string and may fail to parse a boolean value, or will misinterpret it if using a loosely-typed language. Adherence to the specified data types and enums is fundamental for interoperability.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:19:42.872Z",
    "updatedAt": "2025-07-02T00:53:32.131Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-379/incorrect-data-type-for-enableduser-field-in-get"
  },
  {
    "id": "38994243-b163-421b-ae7a-51c06ee72df3",
    "identifier": "BUG-378",
    "title": "Missing required `X-Total-Count` header in 200 OK response for `GET /classes/{classSourcedId}/teachers`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification for a 200 OK response does not define the `X-Total-Count` header. Instead, it places the total count and other pagination metadata inside the JSON response body.\n\n**Summary:** \nThe local API specification for a 200 OK response does not define the `X-Total-Count` header. Instead, it places the total count and other pagination metadata inside the JSON response body.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the endpoint.\n   `curl -v -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/teachers\" -H \"Authorization: Bearer $TOKEN\"`\n2. Inspect the response headers.\n3. Observe that the `X-Total-Count` header is missing.\n\n**Expected:** \nFor collection endpoints, the upstream specification requires an `X-Total-Count` header to be returned with the 200 OK response to indicate the total number of available resources.\n\nThe upstream JSON spec `paths.\"/classes/{classSourcedId}/teachers\".get.responses.\"200\"` explicitly defines this header:\n\n```json\n\"headers\": {\n  \"X-Total-Count\": {\n    \"description\": \"The total number of resources that are available to be returned\",\n    \"type\": \"integer\"\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The `X-Total-Count` header is the standard mechanism for pagination in the OneRoster specification. Omitting it and creating a proprietary, body-based pagination system breaks compatibility with any standard client attempting to perform pagination. This is a critical failure to adhere to the specification's protocol for handling collections.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:16:59.020Z",
    "updatedAt": "2025-07-02T13:50:00.704Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-378/missing-required-x-total-count-header-in-200-ok-response-for-get"
  },
  {
    "id": "e5135255-28e3-4662-bc99-f888c5d5b2e5",
    "identifier": "BUG-377",
    "title": "Incorrect 200 OK response body structure for `GET /classes/{classSourcedId}/teachers`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the 200 OK response as a custom object containing a `teachers` array and several pagination-related fields (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the body.\n\n**Summary:** \nThe local specification defines the 200 OK response as a custom object containing a `teachers` array and several pagination-related fields (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the body.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the endpoint.\n   `curl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/teachers\" -H \"Authorization: Bearer $TOKEN\"`\n2. Observe the structure of the JSON response.\n\nExpected according to local spec:\n\n```json\n{\n  \"teachers\": [ ... ],\n  \"totalCount\": 1,\n  \"pageCount\": 1,\n  ...\n}\n```\n\n**Expected:** \nThe response body should conform to the `UserSetDType` definition from the upstream specification. This means the body should be an object with a single root property named `users` which contains the array of teacher objects. Pagination information, specifically the total count, should be communicated via the `X-Total-Count` HTTP header.\n\nUpstream JSON `paths.\"/classes/{classSourcedId}/teachers\".get.responses.\"200\".schema` points to `#/definitions/UserSetDType`.\nThe `UserSetDType` definition is:\n\n```json\n\"UserSetDType\": {\n  \"properties\": {\n    \"users\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/UserDType\"\n      }\n    }\n  }\n}\n```\n\nThe root property is `users`, not `teachers`. There are no pagination fields in the response body schema.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical bug because it completely changes the structure of the response payload, making it incompatible with any standard OneRoster client. Clients expecting a `{\"users\": [...]}` payload will fail to parse the `{\"teachers\": [...]}` payload. Moving pagination details from the standard `X-Total-Count` header into a non-standard body structure further breaks compatibility.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:15:06.412Z",
    "updatedAt": "2025-07-02T01:02:32.379Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-377/incorrect-200-ok-response-body-structure-for-get"
  },
  {
    "id": "954577a2-0a50-4b4f-ac60-ed4a872ecf38",
    "identifier": "BUG-376",
    "title": "Non-standard `POST /classes/{classSourcedId}/teachers` endpoint implemented",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `POST` method for the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers` route, allowing clients to add a teacher to a class.\n\n**Summary:** \nThe local API specification defines a `POST` method for the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers` route, allowing clients to add a teacher to a class.\n\n**Steps to Reproduce:**\n\n1. Review the official OneRoster v1.2 specifications (JSON and HTML).\n2. Observe that for the path `/classes/{classSourcedId}/teachers`, only a GET method is defined.\n3. Review the local implementation's OpenAPI spec.\n4. Observe that a POST method has been defined for this path.\n\nThis is a design-level bug, so a curl command is not applicable for reproduction. However, the non-standard endpoint is documented as:\n\n`POST /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers`\n\n**Expected:** \nThe `POST` method should not exist for this route. The official OneRoster v1.2 specification, as detailed in both the upstream JSON and HTML files, does not define any `POST` operation for this endpoint. It is a read-only endpoint for retrieving existing teachers in a class.\n\nThe upstream JSON spec for `/classes/{classSourcedId}/teachers` only contains a `get` key.\nThe upstream HTML documentation (Section 4.3 `ClassesManagement` Interface Description) only lists `getAllClasses`, `getClass`, `getStudentsForClass`, and `getTeachersForClass` operations, all of which are read operations.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/teachers.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Implementing a non-standard `POST` endpoint on a standardized route is a critical violation of the specification. It breaks interoperability with any compliant client and introduces proprietary write functionality where none should exist. This could lead to data corruption if clients make incorrect assumptions about the API's behavior. The functionality of adding a user to a class should be handled through the standard `enrollments` management, not a custom endpoint like this.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:13:02.335Z",
    "updatedAt": "2025-07-02T00:52:56.261Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-376/non-standard-post-classesclasssourcedidteachers-endpoint-implemented"
  },
  {
    "id": "7e38bdc5-de55-4268-b85b-c8ca3ea12f54",
    "identifier": "BUG-375",
    "title": "Missing `identifier` Field in User Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the User object does not include the `identifier` field.\n\n**Summary:** \nThe local specification for the User object does not include the `identifier` field.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the fields of a user object in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `UserDType` object in the upstream specification includes an optional `identifier` field. Although it is noted as being for backwards compatibility with OneRoster v1.0/1.1, it is still part of the v1.2 specification. A compliant implementation should be able to return it if present in the source data.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"identifier\": {\n  \"description\": \"Model Primitive Datatype = String. An identifier for the user. NOTE - This characteristic is kept for backwards compatibility with OneRoster 1.1/1.0. The 'userIds' characteristic SHOULD be used instead.\",\n  \"type\": \"string\"\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While the field is deprecated in favor of `userIds`, omitting it entirely from the specification is a deviation. Compliant clients, especially those that need to support older data sources, might expect this field to be present.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:11:24.626Z",
    "updatedAt": "2025-07-02T01:13:29.510Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-375/missing-identifier-field-in-user-object-response"
  },
  {
    "id": "b669f4ca-a40c-43d1-8880-e5a4430f0cda",
    "identifier": "BUG-374",
    "title": "Extra `format: email` Constraint on `email` Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `email` field in the User object with `type: string` and `format: email`.\n\n**Summary:** \nThe local specification defines the `email` field in the User object with `type: string` and `format: email`.\n\n**Steps to Reproduce:**\n\n1. Attempt to create or update a User with an email address that is valid as a string but not a standard email format (e.g., \"jdoe_at_school\").\n2. The local API might reject this value, while a compliant API should accept it.\n\n**Expected:** \nThe upstream `UserDType` specification defines the `email` field as an optional `string` with no specified format. The local implementation is therefore stricter than the standard.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"email\": {\n  \"description\": \"Model Primitive Datatype = NormalizedString. The email address for the user.\",\n  \"type\": \"string\"\n}\n```\n\nNo `format` is specified.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a format validator makes the implementation non-compliant by being more restrictive. While this may seem like a good practice, it can lead to interoperability issues if a source system provides a string that is a valid identifier for them but does not conform to the strict `email` format.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:10:26.380Z",
    "updatedAt": "2025-07-02T00:52:36.997Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-374/extra-format-email-constraint-on-email-field"
  },
  {
    "id": "ff65981b-6ca8-44ac-a09d-f62b2845d71e",
    "identifier": "BUG-373",
    "title": "Extra `maximum` Constraint on `limit` Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification imposes a `maximum: 3000` constraint on the `limit` query parameter.\n\n**Summary:** \nThe local specification imposes a `maximum: 3000` constraint on the `limit` query parameter.\n\n**Steps to Reproduce:**\n\n1. Attempt to make a GET request with `limit` set to a value greater than 3000.\n2. The server should reject the request, whereas a fully compliant server might accept it.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?limit=3001\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification for the `limit` parameter defines a `minimum: 1` and a `default: 100`, but does not specify a maximum value. By adding a maximum, the local implementation is more restrictive than the standard.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"name\": \"limit\",\n\"in\": \"query\",\n\"description\": \"...\",\n\"required\": false,\n\"type\": \"integer\",\n\"format\": \"int32\",\n\"default\": 100,\n\"minimum\": 1,\n\"allowEmptyValue\": false\n```\n\nNo `maximum` is defined.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While service providers are often free to set their own reasonable limits, defining this constraint in the specification makes the local spec non-compliant with the upstream spec. A client built against the official spec would not be aware of this upper bound and could make requests that are valid according to the standard but rejected by this implementation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:09:14.179Z",
    "updatedAt": "2025-07-03T05:45:07.238Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-373/extra-maximum-constraint-on-limit-query-parameter"
  },
  {
    "id": "efcae8cf-f7ab-4335-b232-757fd79572ce",
    "identifier": "BUG-372",
    "title": "Extra `Students Management` Tag on GET Operation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification assigns two tags to the GET operation: `[\"Classes Management\", \"Students Management\"]`.\n\n**Summary:** \nThe local specification assigns two tags to the GET operation: `[\"Classes Management\", \"Students Management\"]`.\n\n**Steps to Reproduce:**\n\n1. Review the API documentation generated from the local spec for the `GET /classes/{classSourcedId}/students` endpoint.\n2. Note the tags used to group the operation.\n\n**Expected:** \nThe upstream specification assigns only one tag to this operation: `[\"ClassesManagement\"]`. The operation is considered part of the \"ClassesManagement\" interface.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"/classes/{classSourcedId}/students\": {\n  \"get\": {\n    \"operationId\": \"getStudentsForClass\",\n    \"summary\": \"...\",\n    \"tags\": [\"ClassesManagement\"],\n    ...\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a minor documentation inconsistency. While it does not affect the runtime behavior of the API, it misrepresents the official grouping of the operation as defined in the standard. This can affect the organization of generated documentation and client code.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:07:51.874Z",
    "updatedAt": "2025-07-02T00:52:14.395Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-372/extra-students-management-tag-on-get-operation"
  },
  {
    "id": "ddeec753-286b-47d8-8897-eb9bee722679",
    "identifier": "BUG-371",
    "title": "Extra `imsx_error_details` Field in Error Responses",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines an extra field, `imsx_error_details`, in all of its error response schemas (e.g., `BadRequestResponse`, `NotFoundResponse`). This field is an array of objects.\n\n**Summary:** \nThe local specification defines an extra field, `imsx_error_details`, in all of its error response schemas (e.g., `BadRequestResponse`, `NotFoundResponse`). This field is an array of objects.\n\n**Steps to Reproduce:**\n\n1. Trigger an error condition, for example by providing an invalid parameter to generate a 400 Bad Request.\n2. Observe the JSON payload of the error response.\n\nFunctional curl command (example to trigger a 400):\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?limit=0\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe standard error response schema, `imsx_StatusInfoDType`, does not include an `imsx_error_details` field. The upstream spec defines the error response payload as containing only `imsx_codeMajor`, `imsx_severity`, `imsx_description`, and `imsx_CodeMinor`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"imsx_StatusInfoDType\": {\n  ...\n  \"properties\": {\n    \"imsx_codeMajor\": { ... },\n    \"imsx_severity\": { ... },\n    \"imsx_description\": { ... },\n    \"imsx_CodeMinor\": { ... }\n  },\n  \"required\": [\"imsx_codeMajor\", \"imsx_severity\"],\n  \"additionalProperties\": false\n}\n```\n\nThe `additionalProperties: false` confirms that no other properties should be present.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a non-standard field to error responses is a deviation from the specification. While it may not break clients that ignore unknown fields, it makes the implementation non-compliant and could cause issues with clients that perform strict validation on error payloads.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:04:50.189Z",
    "updatedAt": "2025-07-03T18:49:27.849Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-371/extra-imsx-error-details-field-in-error-responses"
  },
  {
    "id": "908ac769-31f3-49dc-8a19-48537ed2ef98",
    "identifier": "BUG-370",
    "title": "Incorrect Type for `Role.userProfile` Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `userProfile` field inside the `Role` object as a simple `type: string`.\n\n**Summary:** \nThe local specification defines the `userProfile` field inside the `Role` object as a simple `type: string`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to retrieve users and inspect their `roles`.\n2. Provide a non-URI string for `userProfile` in the source data.\n3. The API would accept and return this data without validation against the URI format.\n\n**Expected:** \nThe upstream `RoleDType` specification defines `userProfile` as a string with a specific format. It must be a URI.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"userProfile\": {\n  \"description\": \"Model Primitive Datatype = AnyURI. The identifier for the system/tool/app access account...\",\n  \"type\": \"string\",\n  \"format\": \"uri\"\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The lack of `format: uri` means the local implementation will not validate that the `userProfile` field is a correctly formatted URI, as required by the standard. This can lead to invalid data being stored and returned to clients.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T02:02:05.163Z",
    "updatedAt": "2025-07-02T00:51:54.102Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-370/incorrect-type-for-roleuserprofile-field"
  },
  {
    "id": "b7a7c552-d200-4281-b624-58c33c5252b9",
    "identifier": "BUG-369",
    "title": "Extra Non-Compliant `search` Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `search` query parameter on the GET endpoint.\n\n**Summary:** \nThe local specification defines a `search` query parameter on the GET endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the API documentation generated from the local spec.\n2. Note the presence of a `search` query parameter.\n\nFunctional curl command (hypothetical):\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?search=John\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream OneRoster specification does not define a `search` query parameter for this or any other endpoint. The standard mechanism for querying is the `filter` parameter. The `search` parameter is a non-compliant extension.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a non-standard query parameter deviates from the specification and can cause confusion for developers building clients against the official standard. It introduces a proprietary filtering mechanism alongside the standard `filter` parameter.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:59:54.867Z",
    "updatedAt": "2025-07-02T19:47:19.017Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-369/extra-non-compliant-search-query-parameter"
  },
  {
    "id": "ae04ed31-24a7-474b-845e-51cb02353eba",
    "identifier": "BUG-368",
    "title": "Incorrect Type for `fields` Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `fields` query parameter with `schema: { type: string }`.\n\n**Summary:** \nThe local specification defines the `fields` query parameter with `schema: { type: string }`.\n\n**Steps to Reproduce:**\n\n1. Attempt to make a GET request using the `fields` parameter according to client libraries generated from the upstream spec.\n2. The client library would likely format the request for an array type, which might be parsed incorrectly by the server.\n\nFunctional curl command (showing both styles):\n\n```bash\n# Correct representation (array)\n# GET /.../?fields=sourcedId,status\n# Incorrectly defined in local spec as a single string, could cause validation issues.\n```\n\n**Expected:** \nThe upstream OpenAPI 2.0 specification defines the `fields` parameter as an array of strings that should be serialized as a comma-separated value.\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"name\": \"fields\",\n\"in\": \"query\",\n\"description\": \"To identify the range of fields that should be supplied in the response message.\",\n\"required\": false,\n\"type\": \"array\",\n\"items\": {\n  \"type\": \"string\"\n},\n\"collectionFormat\": \"csv\",\n\"allowEmptyValue\": false\n```\n\nThe correct OpenAPI 3.1 representation would be `schema: { type: array, items: { type: string } }, style: form, explode: false`. Defining it as a simple `string` loses critical type information.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Incorrectly typing the `fields` parameter as a simple string instead of an array of strings can cause issues with server-side validation, request parsing, and client/SDK generation. It is a deviation from the specified data type.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:58:14.447Z",
    "updatedAt": "2025-07-03T17:05:41.454Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-368/incorrect-type-for-fields-query-parameter"
  },
  {
    "id": "157535da-c3ca-4b07-b458-584204fd1a38",
    "identifier": "BUG-367",
    "title": "GET Operation Description Mismatch",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's description for the GET operation is: \"To get all students enrolled in a specific Class. If the corresponding record cannot be located, the api will return a 404 error code and message 'Class not found.'\".\n\n**Summary:** \nThe local specification's description for the GET operation is: \"To get all students enrolled in a specific Class. If the corresponding record cannot be located, the api will return a 404 error code and message 'Class not found.'\".\n\n**Steps to Reproduce:**\n\n1. Review the documentation for the `GET /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint in the local spec.\n2. Compare it to the upstream HTML documentation.\n\n**Expected:** \nThe upstream specification describes the behavior differently. It specifies returning a status code of 'unknownobject' if the class cannot be found.\n\nThe upstream HTML doc (Section 4.3.3) states: \"To read, get, the collection of students associated with a specific class. If the specified class cannot be identified within the service provider then a status code of 'unknownobject' must be reported.\"\n\nWhile a 404 HTTP status is the correct RESTful mapping for 'unknownobject', the description in the local spec simplifies this and adds a custom error message (\"Class not found.\") not mentioned in the standard. The description should reflect the official language to avoid confusion about the error reporting mechanism.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This descriptive inconsistency can mislead developers about the specific error payload. The standard requires an `imsx_StatusInfoDType` payload with a `codeMinorFieldValue` of `unknownobject`, which is more specific than a generic \"Class not found\" message.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:55:56.786Z",
    "updatedAt": "2025-07-02T00:51:23.344Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-367/get-operation-description-mismatch"
  },
  {
    "id": "43ab0e8a-7367-4d6e-b165-52a273332b9d",
    "identifier": "BUG-366",
    "title": "Missing `resources` Field in User Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the User object does not include the `resources` field.\n\n**Summary:** \nThe local specification for the User object does not include the `resources` field.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the fields of a user object in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `UserDType` object in the upstream specification includes an optional `resources` field. This field is an array of `ResourceGUIDRefDType` objects and is used to link resources available to the user.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"resources\": {\n  \"description\": \"The identifiers (GUIDs) for the set of resources that are to be made available to the user...\",\n  \"type\": \"array\",\n  \"minItems\": 0,\n  \"items\": {\n    \"$ref\": \"#/definitions/ResourceGUIDRefDType\"\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a specified field from the data model is a significant deviation. Clients expecting to find user-specific resource links will be unable to do so, breaking integrations that rely on this part of the OneRoster standard for resource management.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:53:34.363Z",
    "updatedAt": "2025-07-02T00:51:14.265Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-366/missing-resources-field-in-user-object-response"
  },
  {
    "id": "d911bf33-ba02-48ad-b097-2a562e36ad96",
    "identifier": "BUG-365",
    "title": "Missing `userProfiles` Field in User Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the User object does not include the `userProfiles` field.\n\n**Summary:** \nThe local specification for the User object does not include the `userProfiles` field.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the fields of a user object in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `UserDType` object in the upstream specification includes an optional `userProfiles` field, which is an array of `UserProfileDType` objects. This field is used to manage user credentials for different systems.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"userProfiles\": {\n  \"description\": \"The set of system/app/tool profiles for the user.\",\n  \"type\": \"array\",\n  \"minItems\": 0,\n  \"items\": {\n    \"$ref\": \"#/definitions/UserProfileDType\"\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a specified field from the data model is a significant deviation. Clients expecting to find user profile and credential information in this field will be unable to do so, breaking integrations that rely on this part of the OneRoster standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:52:14.082Z",
    "updatedAt": "2025-07-03T05:29:24.473Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-365/missing-userprofiles-field-in-user-object-response"
  },
  {
    "id": "2833abb9-eb46-4ea5-9735-7d03d2435b36",
    "identifier": "BUG-364",
    "title": "Missing `X-Total-Count` Header in 200 OK Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `200` response does not define the `X-Total-Count` header.\n\n**Summary:** \nThe local specification for the `200` response does not define the `X-Total-Count` header.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. Inspect the response headers.\n\nFunctional curl command (with -i to show headers):\n\n```bash\ncurl -i -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe OneRoster v1.2 specification explicitly requires the `X-Total-Count` header to be returned on successful paginated collection requests. This header is the standard way to inform the client of the total number of available records.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"200\": {\n  \"description\": \"...\",\n  \"schema\": { ... },\n  \"headers\": {\n    \"X-Total-Count\": {\n      \"description\": \"The total number of resources that are available to be returned\",\n      \"type\": \"integer\"\n    }\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The absence of the `X-Total-Count` header breaks the standard pagination mechanism defined by OneRoster. Clients will be unable to determine the total number of pages or records, hindering their ability to properly paginate through the result set.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:50:23.759Z",
    "updatedAt": "2025-07-02T13:49:46.573Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-364/missing-x-total-count-header-in-200-ok-response"
  },
  {
    "id": "ec39031a-a804-4354-b296-c19d6b66e683",
    "identifier": "BUG-363",
    "title": "Non-Compliant POST /classes/{classSourcedId}/students Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation exposes a `POST` method on the `/classes/{classSourcedId}/students` path to add a student to a class.\n\n**Summary:** \nThe local implementation exposes a `POST` method on the `/classes/{classSourcedId}/students` path to add a student to a class.\n\n**Steps to Reproduce:**\n\n1. Attempt to make a POST request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. The local spec indicates this will succeed with a 201 status if valid data is provided.\n\nFunctional curl command:\n\n```bash\ncurl -X POST \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"enrollment\":{\"user\":{\"sourcedId\":\"some-student-id\"}}}'\n```\n\n**Expected:** \nThis endpoint should not exist. According to the official OneRoster v1.2 specification, the `/classes/{classSourcedId}/students` path only supports the `GET` method for reading the list of students. There is no `POST` method defined for this path in either the upstream JSON spec or the HTML documentation. Roster modifications are not handled by this endpoint in the standard.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`), the path definition is:\n\n```json\n\"/classes/{classSourcedId}/students\": {\n  \"get\": { ... }\n}\n```\n\nThere is no `post` key. The HTML documentation for the `ClassesManagement` interface (Section 4.3) only lists read operations.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a non-standard write operation is a major deviation from the specification. It poses a potential security risk by allowing data modification through an undocumented and non-compliant vector. Clients built to the specification will be unaware of this functionality.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:48:39.042Z",
    "updatedAt": "2025-07-02T00:50:49.429Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-363/non-compliant-post-classesclasssourcedidstudents-endpoint"
  },
  {
    "id": "aa75199d-b08b-444b-84a8-d891ceb923d1",
    "identifier": "BUG-362",
    "title": "Incorrect Required Fields in `Role` Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification incorrectly makes `beginDate` and `endDate` required fields within the `Role` object. The `required` list is `[roleType, role, org, beginDate, endDate]`.\n\n**Summary:** \nThe local specification incorrectly makes `beginDate` and `endDate` required fields within the `Role` object. The `required` list is `[roleType, role, org, beginDate, endDate]`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the `roles` array within a user object.\n3. Note that `beginDate` and `endDate` are always present.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?fields=roles\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream `RoleDType` specification defines `beginDate` and `endDate` as optional fields. The `required` list should only contain `roleType`, `role`, and `org`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"RoleDType\": {\n  ...\n  \"required\": [\"roleType\", \"role\", \"org\"],\n  \"additionalProperties\": false\n}\n```\n\nThis means compliant data sources may omit `beginDate` and `endDate`, but the local implementation would reject such data as invalid.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** By making optional fields required, the local implementation is overly strict and will fail to process valid OneRoster data. This breaks interoperability with systems that correctly treat these fields as optional.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:46:42.133Z",
    "updatedAt": "2025-07-02T15:15:23.549Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-362/incorrect-required-fields-in-role-object"
  },
  {
    "id": "ac990740-7161-425e-96f7-e9b8bb91945e",
    "identifier": "BUG-361",
    "title": "Incorrect Type and Format for `Role.beginDate` and `Role.endDate`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines `beginDate` and `endDate` within the `Role` object as nullable strings (`type: [- string, 'null']`) without a specific format.\n\n**Summary:** \nThe local spec defines `beginDate` and `endDate` within the `Role` object as nullable strings (`type: [- string, 'null']`) without a specific format.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the `roles` array within a user object.\n3. Observe the `beginDate` and `endDate` fields.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?fields=roles\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream `RoleDType` specification defines `beginDate` and `endDate` as optional, non-nullable strings with a `format: date`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"beginDate\": {\n  \"description\": \"Model Primitive Datatype = Date. The start date on which the role becomes active (inclusive). \",\n  \"type\": \"string\",\n  \"format\": \"date\"\n},\n\"endDate\": {\n  \"description\": \"Model Primitive Datatype = Date. The end date on which the role becomes inactive (exclusive). \",\n  \"type\": \"string\",\n  \"format\": \"date\"\n}\n```\n\nThey are also not in the `required` list for `RoleDType`, making them optional, not nullable.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The local implementation has three distinct errors here: the fields are nullable, they are missing the required `date` format, and they are incorrectly marked as required. This will cause validation and deserialization errors for compliant clients. I have filed a separate bug report for the incorrect required status.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:44:00.724Z",
    "updatedAt": "2025-07-02T01:07:27.790Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-361/incorrect-type-and-format-for-rolebegindate-and-roleenddate"
  },
  {
    "id": "ff9d3813-42e7-440b-a25b-c1fa6dd2646a",
    "identifier": "BUG-360",
    "title": "Non-compliant `demographics` Field in User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification includes a `demographics` field within the User object schema. This field contains a nested `Demographics` object.\n\n**Summary:** \nThe local specification includes a `demographics` field within the User object schema. This field contains a nested `Demographics` object.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Observe the fields within a user object in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?fields=demographics\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `demographics` object is not part of the `UserDType` in the upstream OneRoster specification. Demographics information is a separate top-level object model, linked to a user by a common `sourcedId`, and is intended to be fetched via the `/demographics/{sourcedId}` endpoint. Nesting it inside the User object is a major structural deviation. The upstream `UserDType` definition in the JSON spec does not contain a `demographics` property.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This implementation fundamentally changes the data model of the OneRoster specification by nesting a top-level object within another. This breaks the specified data architecture and will cause parsing and data modeling errors for any compliant client.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:42:13.098Z",
    "updatedAt": "2025-07-02T01:12:04.370Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-360/non-compliant-demographics-field-in-user-object"
  },
  {
    "id": "b0c10c5d-4fc4-4259-ad3a-dd427496b803",
    "identifier": "BUG-359",
    "title": "Non-Compliant Pagination Fields in Response Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** he local specification returns a custom wrapper object containing several non-standard pagination fields directly in the JSON body: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Summary:** \nhe local specification returns a custom wrapper object containing several non-standard pagination fields directly in the JSON body: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. Observe the root of the JSON response body.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe OneRoster specification does not define these fields in the response body. The standard mechanism for communicating the total number of records is via the `X-Total-Count` response header. The response body should only contain the `users` array, as defined in the `UserSetDType`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`), for the 200 response:\n\n```json\n\"headers\": {\n    \"X-Total-Count\": {\n        \"description\": \"The total number of resources that are available to be returned\",\n        \"type\": \"integer\"\n    }\n}\n```\n\nThe response body schema `UserSetDType` does not contain any of the pagination fields found in the local spec.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This deviation introduces a proprietary and non-standard pagination mechanism. Clients built to the specification will not know how to interpret these extra fields and will be missing the standard `X-Total-Count` header for determining the total number of records. This breaks compatibility.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:40:44.008Z",
    "updatedAt": "2025-07-03T05:48:02.299Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-359/non-compliant-pagination-fields-in-response-body"
  },
  {
    "id": "f950f708-dcde-4a1a-9e9a-16d143023263",
    "identifier": "BUG-358",
    "title": "Incorrect `required` Fields in User Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's `required` list for the User object is `[sourcedId, status, enabledUser, givenName, familyName, roles, agents]`. This means it incorrectly makes the `agents` field required and omits the `dateLastModified` field from the required list.\n\n**Summary:** \nThe local specification's `required` list for the User object is `[sourcedId, status, enabledUser, givenName, familyName, roles, agents]`. This means it incorrectly makes the `agents` field required and omits the `dateLastModified` field from the required list.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the returned user objects for the presence of the `dateLastModified` field.\n3. Note that the `agents` field is always present, even if empty.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification (`UserDType`) mandates a different set of required fields. The `dateLastModified` field MUST be present, and the `agents` field is optional.\n\nThe correct `required` list, from the upstream JSON spec, is:\n`[\"sourcedId\", \"status\", \"dateLastModified\", \"enabledUser\", \"givenName\", \"familyName\", \"roles\"]`\n\nThe HTML spec (Section 6.1.4) states for `dateLastModified`: \"All objects MUST be annotated with the dateTime upon which they were last modified.\" This confirms it is required. It also lists the multiplicity of `agents` as `[0.. unbounded]`, confirming it is optional.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The local implementation produces invalid User objects according to the OneRoster standard by omitting a required field (`dateLastModified`) and mandating an optional one (`agents`). Compliant clients may fail validation when processing responses from this endpoint.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:38:12.386Z",
    "updatedAt": "2025-07-02T01:13:16.521Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-358/incorrect-required-fields-in-user-object-response"
  },
  {
    "id": "eb1c18b2-30fe-44b3-96b2-4664b39b5a87",
    "identifier": "BUG-357",
    "title": "Incorrect Cardinality for `roles` Field in User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that the `roles` field in the User object is optional and can be an empty array. It specifies `default: []`.\n\n**Summary:** \nThe local specification indicates that the `roles` field in the User object is optional and can be an empty array. It specifies `default: []`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to retrieve a user who has no roles.\n2. Observe that the API returns the user object with an empty `roles` array.\n\nFunctional curl command:\n\n```bash\n# This is conceptual; a specific user without roles would need to be identified first.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream `UserDType` specification, the `roles` field is **required** and **must contain at least one item**.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"roles\": {\n  \"description\": \"The set of roles for each of the orgs to which the user is affilliated...\",\n  \"type\": \"array\",\n  \"minItems\": 1,\n  \"items\": {\n    \"$ref\": \"#/definitions/RoleDType\"\n  }\n},\n...\n\"required\": [ ..., \"roles\"]\n```\n\nThe HTML spec (Section 6.1.30.12) confirms the multiplicity is `[1.. unbounded]`, meaning it is required and cannot be empty.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The local implementation violates a mandatory constraint of the OneRoster specification. A compliant User object must always have at least one role. Returning a user with an empty `roles` array is invalid data according to the standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:35:43.287Z",
    "updatedAt": "2025-07-02T01:22:11.665Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-357/incorrect-cardinality-for-roles-field-in-user-object"
  },
  {
    "id": "513f55db-3d98-4fec-a5a1-a7492f3cf0b0",
    "identifier": "BUG-356",
    "title": "Incorrect Data Type for `enabledUser` Field in User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `enabledUser` field as a `boolean` type. For example, it would return `true` or `false`.\n\n**Summary:** \nThe local specification defines the `enabledUser` field as a `boolean` type. For example, it would return `true` or `false`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. Observe the data type of the `enabledUser` field for any user object in the `students` array.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?fields=enabledUser\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification (`UserDType`), the `enabledUser` field must be a `string` type, with an enumerated value of either `\"true\"` or `\"false\"`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"enabledUser\": {\n  \"description\": \"This is used to determine whether or not the record is active in the local system. 'false' denotes that the record is active but system access is curtailed according to the local administration rules.\",\n  \"type\": \"string\",\n  \"enum\": [\"true\", \"false\"]\n}\n```\n\nThe HTML spec (Section 6.1.30.4) confirms this.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data type mismatch. A JSON boolean `true` is fundamentally different from a JSON string `\"true\"`. Any strictly-typed client built against the official specification will fail to deserialize the response from this endpoint due to this incorrect data type.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:33:21.039Z",
    "updatedAt": "2025-07-02T01:11:49.626Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-356/incorrect-data-type-for-enableduser-field-in-user-object"
  },
  {
    "id": "1a1522b3-620e-4bc3-94c7-a7bdb0156f28",
    "identifier": "BUG-355",
    "title": "Incorrect Response Body Wrapper for GET /classes/{classSourcedId}/students",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that the list of students is returned inside a JSON object under the key `students`. The full response body is a custom wrapper: `{ \"students\": [...], \"totalCount\": ..., ... }`.\n\n**Summary:** \nThe local specification indicates that the list of students is returned inside a JSON object under the key `students`. The full response body is a custom wrapper: `{ \"students\": [...], \"totalCount\": ..., ... }`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. Observe the JSON response structure.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification, the response schema should be a `UserSetDType` object. This object contains a single key, `users`, which holds the array of user objects. The key should be `users`, not `students`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`), the response schema is `UserSetDType`:\n\n```json\n\"200\": {\n  \"description\": \"...\",\n  \"schema\": {\n    \"$ref\": \"#/definitions/UserSetDType\"\n  },\n...\n}\n```\n\nAnd `UserSetDType` is defined as:\n\n```json\n\"UserSetDType\": {\n  \"description\": \"...\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"users\": {\n      \"description\": \"The collection of user instances...\",\n      \"type\": \"array\",\n      \"minItems\": 0,\n      \"items\": {\n        \"$ref\": \"#/definitions/UserDType\"\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical breaking change. A client built to the official specification will look for the `users` key and will fail to parse the response from the local implementation, which uses the `students` key instead. This fundamentally breaks compatibility with the OneRoster standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:31:17.520Z",
    "updatedAt": "2025-07-03T05:49:07.159Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-355/incorrect-response-body-wrapper-for-get-classesclasssourcedidstudents"
  },
  {
    "id": "9598bb2e-4ce6-46e2-9e4a-53312ef142ef",
    "identifier": "BUG-354",
    "title": "HIGH: Non-Standard 'search' Query Parameter on GET /academicSessions/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `search` query parameter on the `GET /academicSessions/` endpoint.\n\n**Summary:** \nThe local specification defines a `search` query parameter on the `GET /academicSessions/` endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the available query parameters for the `GET /academicSessions/` endpoint in the local specification.\n2. Note the presence of a `search` parameter.\n3. Cross-reference this with the parameters defined in the upstream JSON and HTML specifications.\n\nExample curl command (hypothetical):\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?search=Fall' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe endpoint should only support the standard OneRoster query parameters: `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. The `search` parameter is not part of the official specification for this endpoint. Filtering behavior is strictly defined by the `filter` parameter.\n\nThe upstream JSON spec (`oneroster.rostering.upstream.json`) under `paths > /academicSessions > get > parameters` lists only the standard parameters mentioned above. The HTML documentation in section 4.2.1 \"getAllAcademicSessions Operation\" also only lists the standard parameters in its notes.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Introducing a non-standard query parameter like `search` creates ambiguity and breaks interoperability. Clients built to the specification will not know of its existence or how it interacts with the standard `filter` parameter. Does `search` override `filter`? Is it an AND/OR condition? This undocumented, non-standard behavior can lead to unpredictable query results and client-side bugs. The `search` parameter should be removed.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:22:08.099Z",
    "updatedAt": "2025-07-02T19:47:02.246Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-354/high-non-standard-search-query-parameter-on-get-academicsessions"
  },
  {
    "id": "adad216b-4edd-47b4-a1b6-1a579d8f39cc",
    "identifier": "BUG-353",
    "title": "CRITICAL: Incorrect and Overly Broad Enum for 'type' in GUIDRef Objects",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the `GET` response, the `parent` object's `type` field is defined with a massive enumeration of almost every possible object type in the OneRoster specification (e.g., `academicSession`, `assessmentLineItem`, `category`, `class`, `course`, etc.).\n\n**Summary:** \nIn the `GET` response, the `parent` object's `type` field is defined with a massive enumeration of almost every possible object type in the OneRoster specification (e.g., `academicSession`, `assessmentLineItem`, `category`, `class`, `course`, etc.).\n\n**Steps to Reproduce:**\n\n1. Review the local specification for the `GET /academicSessions/` response.\n2. Examine the schema for the `parent` object within an `academicSession`.\n3. Observe the enum values for the `parent.type` field.\n4. Compare these values to the `AcadSessionGUIDRefDType` in the upstream specification.\n\n**Expected:** \nThe `parent` field is a reference to another academic session. Therefore, its `type` must be `'academicSession'`. The upstream specification is explicit about this.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`), `definitions > AcadSessionGUIDRefDType > properties > type`:\n\n```json\n\"description\": \"The type of object being referenced i.e. an 'academicSession'.\",\n\"type\": \"string\",\n\"enum\": [\"academicSession\"]\n```\n\nThe local specification has incorrectly provided a generic, system-wide enum for a field that requires a very specific, context-dependent enum.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical modeling error. It incorrectly suggests that an academic session's parent could be a `user`, a `class`, or any other object type, which is semantically impossible within the OneRoster data model. This will mislead clients, break schema validation, and cause incorrect data interpretation. The enum for `parent.type` must be corrected to only contain `'academicSession'`. The same error is present in the non-standard `org` field.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:20:22.403Z",
    "updatedAt": "2025-07-02T01:10:26.387Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-353/critical-incorrect-and-overly-broad-enum-for-type-in-guidref-objects"
  },
  {
    "id": "fd6c6e35-f52e-4388-b25d-1271fca97d99",
    "identifier": "BUG-352",
    "title": "CRITICAL: 'dateLastModified' is Missing from Required Fields in AcademicSession Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification does not list `dateLastModified` as a required field for the `academicSession` object in the GET response.\n\n**Summary:** \nThe local specification does not list `dateLastModified` as a required field for the `academicSession` object in the GET response.\n\n**Steps to Reproduce:**\n\n1. Review the local specification for `GET /ims/oneroster/rostering/v1p2/academicSessions/`.\n2. Examine the `required` array within the `academicSessions` item schema.\n3. Note that `dateLastModified` is not listed.\n4. Compare this to the upstream specification.\n\n**Expected:** \nThe `dateLastModified` field MUST be required. The upstream `AcademicSessionDType` model, which inherits from the `Base` model, explicitly requires this field.\n\nFrom the upstream JSON (`oneroster.rostering.upstream.json`), `definitions > AcademicSessionDType`:\n\n```json\n\"required\": [\"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"startDate\", \"endDate\", \"type\", \"schoolYear\"]\n```\n\nFrom the HTML documentation, section 6.1.4.3 `dateLastModified` Attribute Description:\n\"All objects MUST be annotated with the dateTime upon which they were last modified.\" The multiplicity is `[1]`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a required field from the contract is a critical bug. Clients rely on `dateLastModified` for synchronization and querying for updates. An implementation that might omit this field is non-compliant and will break clients that depend on its presence for delta processing. The `dateLastModified` field must be added to the `required` array in the local specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:18:49.636Z",
    "updatedAt": "2025-07-02T19:51:39.220Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-352/critical-datelastmodified-is-missing-from-required-fields-in"
  },
  {
    "id": "09e10e7f-55cd-4dd1-8793-3bae46221394",
    "identifier": "BUG-351",
    "title": "HIGH: Extraneous 'org' Field in AcademicSession Response Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification includes an `org` object, defined as a GUIDRef, within the `academicSession` response object. This field is also marked as required.\n\n**Summary:** \nThe local specification includes an `org` object, defined as a GUIDRef, within the `academicSession` response object. This field is also marked as required.\n\n**Steps to Reproduce:**\n\n1. Perform a GET request to `/ims/oneroster/rostering/v1p2/academicSessions/`.\n2. Inspect the JSON response for an individual object within the `academicSessions` array.\n3. Note that the `org` field is present.\n\nExample curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?fields=sourcedId,title,org' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe `AcademicSession` object should not contain an `org` field. The upstream `AcademicSessionDType` data model does not define this field. The association between an academic session and an organization is established through other objects, such as a `Class` which links to both a `school` (an org) and `terms` (academic sessions). Adding this field directly to `AcademicSession` is a non-standard extension.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding an extraneous field to a standard data model breaks interoperability. While some clients might ignore the extra field, those that perform strict validation against the official schema will fail. Marking it as `required` is an even more severe deviation, as it makes the local implementation fundamentally incompatible with the official standard. This field should be removed from the schema.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:17:07.766Z",
    "updatedAt": "2025-07-02T00:17:01.543Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-351/high-extraneous-org-field-in-academicsession-response-schema"
  },
  {
    "id": "b673f155-c153-4870-9f72-0b75b16e0f3b",
    "identifier": "BUG-350",
    "title": "CRITICAL: Incorrect Data Type for 'schoolYear' in AcademicSession Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `schoolYear` field within the `academicSession` object as `type: number`.\n\n**Summary:** \nThe local specification defines the `schoolYear` field within the `academicSession` object as `type: number`.\n\n**Steps to Reproduce:**\n\n1. Perform a GET request to `/ims/oneroster/rostering/v1p2/academicSessions/`.\n2. Inspect the data type of the `schoolYear` field in an `academicSession` object in the response.\n3. The local spec indicates this is a number.\n\nExample curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?fields=sourcedId,schoolYear' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe `schoolYear` field must be a `string` representing the year in 'YYYY' format. This is explicitly stated in both upstream specifications.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`), under `definitions > AcademicSessionDType > properties > schoolYear`:\n\n```json\n\"description\": \"Model Primitive Datatype = NormalizedString. The school year for the academic session.  This year should include the school year end e.g. 2014. This is in the [ISO 8601] format of 'YYYY'.\",\n\"type\": \"string\"\n```\n\nThe HTML documentation (Table 6.1.2.7) confirms this: `Data Type: NormalizedString (Primitive-type)` and describes the format as 'YYYY'. Returning a number is a direct violation of the data type contract.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This data type mismatch is a critical bug. It can cause deserialization errors or data corruption in client applications that are correctly typed to expect a string. For example, a client attempting to parse \"2024\" will succeed, but will fail on a raw `2024` number if it expects string-specific operations. The schema must be corrected to `type: string`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:15:09.212Z",
    "updatedAt": "2025-07-02T01:20:52.057Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-350/critical-incorrect-data-type-for-schoolyear-in-academicsession-schema"
  },
  {
    "id": "788ce522-aa5c-4c9a-ad80-1b5ea565d3c8",
    "identifier": "BUG-349",
    "title": "CRITICAL: Missing 'children' Field in AcademicSession Response Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `AcademicSession` object schema defined in the local spec does not include the `children` field. This field represents links to child academic sessions (e.g., grading periods within a term).\n\n**Summary:** \nThe `AcademicSession` object schema defined in the local spec does not include the `children` field. This field represents links to child academic sessions (e.g., grading periods within a term).\n\n**Steps to Reproduce:**\n\n1. Perform a GET request to `/ims/oneroster/rostering/v1p2/academicSessions/`.\n2. Inspect the JSON response for an individual object within the `academicSessions` array.\n3. Note that the `children` field is absent.\n\nExample curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?fields=sourcedId,title,children' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe `AcademicSessionDType` model in the upstream specification clearly defines a `children` attribute. This is crucial for representing hierarchical relationships between academic sessions.\n\nFrom the upstream JSON (`oneroster.rostering.upstream.json`), under `definitions > AcademicSessionDType > properties`:\n\n```json\n\"children\": {\n    \"description\": \"The set of links to the child AcademicSessions i.e. a set of AcademicSession 'sourcedIds'.\",\n    \"type\": \"array\",\n    \"minItems\": 0,\n    \"items\": {\n        \"$ref\": \"#/definitions/AcadSessionGUIDRefDType\"\n    }\n}\n```\n\nThe HTML documentation also describes this relationship in section 6.1.2: \"The parent / child attributes of academic sessions allow terms to be connected to their grading periods and vice-versa.\" The local implementation fails to model this part of the data structure.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The absence of the `children` field is a critical data model inconsistency. It prevents clients from navigating the hierarchical structure of academic sessions (e.g., from a school year to its terms, and from a term to its grading periods), which is a fundamental feature of the OneRoster model. The field must be added to the response schema.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:12:44.282Z",
    "updatedAt": "2025-07-02T01:20:47.411Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-349/critical-missing-children-field-in-academicsession-response-schema"
  },
  {
    "id": "6f169996-1af8-496d-bfa1-cfe909ed563c",
    "identifier": "BUG-348",
    "title": "CRITICAL: Incorrect Pagination Implementation in GET /academicSessions/ Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly within the 200 OK JSON response body.\n\n**Summary:** \nThe local implementation returns pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly within the 200 OK JSON response body.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the `/ims/oneroster/rostering/v1p2/academicSessions/` endpoint.\n2. Observe the structure of the JSON response body.\n3. Compare the response body to the upstream specification.\n\nExample curl command:\n\n```bash\ncurl -i -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nAccording to the upstream specification, the response body for a successful `GET` request should be an `AcademicSessionSetDType` object, which only contains the `academicSessions` array. The total number of available records must be returned in the `X-Total-Count` HTTP header.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`), under `paths > /academicSessions > get > responses > 200`:\n\n```json\n\"headers\": {\n    \"X-Total-Count\": {\n        \"description\": \"The total number of resources that are available to be returned\",\n        \"type\": \"integer\"\n    }\n}\n```\n\nThe local implementation's response body, which includes pagination fields, is non-compliant.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Returning pagination information in the response body instead of the `X-Total-Count` header is a critical violation of the OneRoster specification. This breaks standard client implementations that expect to parse the header for pagination and could lead to incorrect handling of paginated data. The fields `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` should be removed from the 200 response schema, and the API must be updated to return the `X-Total-Count` header.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:09:50.274Z",
    "updatedAt": "2025-07-03T05:48:07.250Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-348/critical-incorrect-pagination-implementation-in-get-academicsessions"
  },
  {
    "id": "8a365edc-98ba-4c0d-8b2e-c56dc0962cd9",
    "identifier": "BUG-347",
    "title": "CRITICAL: Non-Standard POST Method on /academicSessions/ Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `/ims/oneroster/rostering/v1p2/academicSessions/` incorrectly implements a `POST` method, allowing for the creation of new academic sessions.\n\n**Summary:** \nThe local specification for `/ims/oneroster/rostering/v1p2/academicSessions/` incorrectly implements a `POST` method, allowing for the creation of new academic sessions.\n\n**Steps to Reproduce:**\n\n1. Review the upstream specifications for the `/academicSessions` path.\n2. Note that only a `GET` method is defined.\n3. Observe that the local implementation incorrectly defines a `POST` method for this path.\n4. Attempt to use the non-standard POST method.\n\nExample curl command:\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\n    \"academicSession\": {\n        \"sourcedId\": \"new-session-123\",\n        \"status\": \"active\",\n        \"title\": \"New Semester\",\n        \"startDate\": \"2024-09-01\",\n        \"endDate\": \"2024-12-20\",\n        \"type\": \"semester\",\n        \"schoolYear\": \"2025\",\n        \"org\": {\n            \"sourcedId\": \"school-org-1\"\n        }\n    }\n}'\n```\n\n**Expected:** \nThe `/academicSessions` endpoint should only support the `GET` method as defined by the official OneRoster v1.2 specification. There should be no `POST` method available on this path. The upstream JSON spec for the `paths > /academicSessions` object only contains a `get` key. The HTML documentation in section \"4.2 AcademicSessionsManagement Interface Description\" also only lists `getAllAcademicSessions` and `getAcademicSession` operations, both of which map to GET requests. Any write operations are out of scope for this endpoint.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical deviation from the official specification. Implementing a non-standard write operation introduces unpredictable behavior for clients built against the official spec and poses a security risk by opening up a modification endpoint where none should exist. This could lead to data corruption or unauthorized data creation if not properly secured, and it breaks interoperability with compliant systems. The entire `paths > /ims/oneroster/rostering/v1p2/academicSessions/ > post` block should be removed from the local specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:07:40.363Z",
    "updatedAt": "2025-07-02T00:16:14.563Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-347/critical-non-standard-post-method-on-academicsessions-endpoint"
  },
  {
    "id": "54810aeb-69c4-40c3-8c35-7b606e0eb927",
    "identifier": "BUG-346",
    "title": "Inconsistent API Tagging for Academic Sessions",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec uses the tag `Academic Sessions Management` (with a space) for its operations.\n\n**Summary:** \nThe local spec uses the tag `Academic Sessions Management` (with a space) for its operations.\n\n**Steps to Reproduce:**\n\n1. Review the tags used in the local specification for all operations under `/ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}`.\n2. Observe the tag used is \"Academic Sessions Management\".\n3. Review the corresponding tag in the upstream JSON specification (`oneroster.rostering.upstream.json`).\n4. Note that the tag name is \"AcademicSessionsManagement\" (no space).\n\n**Expected:** \nThe tag should be `AcademicSessionsManagement` (without a space) to match the upstream specification. While this may seem minor, it affects documentation generation and client tooling that groups operations by tag name. Consistency with the upstream specification is required.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a low-severity bug but is still a clear deviation from the official specification. It can cause fragmentation in generated documentation and SDKs, where operations that should be grouped together appear under different categories.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:04:46.674Z",
    "updatedAt": "2025-07-02T00:16:08.410Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-346/inconsistent-api-tagging-for-academic-sessions"
  },
  {
    "id": "7d7b46cd-6f6e-48a9-832b-82877088d4da",
    "identifier": "BUG-345",
    "title": "Missing 'format: date' for startDate and endDate in AcademicSession schema",
    "description": "**Reporter:** Bjorn Pagne (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `startDate` and `endDate` properties in the `AcademicSession` schema are defined as generic strings, lacking the specific `format: date` attribute.\n\n**Summary:** \nThe `startDate` and `endDate` properties in the `AcademicSession` schema are defined as generic strings, lacking the specific `format: date` attribute.\n\n**Steps to Reproduce:**\n\n1. Review the `AcademicSession` schema in the local specification's `components` section.\n2. Examine the `startDate` and `endDate` properties.\n3. Observe that they are defined as `type: string` with no `format` specified.\n4. Review the `AcademicSessionDType` definition in the upstream JSON specification.\n5. Note that `startDate` and `endDate` are defined as `type: \"string\", format: \"date\"`.\n\n**Expected:** \nThe `startDate` and `endDate` properties should be explicitly defined with `format: date` to conform to the standard. This clarifies that the string must adhere to the ISO 8601 'YYYY-MM-DD' format.\n\nThe upstream HTML documentation (Sections 6.1.2.2 and 6.1.2.3) confirms this: \"This is in \\[ISO 8601\\] format of 'YYYY-MM-DD'.\" The JSON spec enforces this with `format: \"date\"`. The local spec should be equally specific.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Lacking a `format` specifier makes the schema less precise than the standard. While many clients may handle the string correctly, those that rely on the format attribute for validation or code generation may fail or behave unexpectedly. It is a deviation that reduces the specification's clarity and strictness.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:02:42.501Z",
    "updatedAt": "2025-07-02T01:03:59.709Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-345/missing-format-date-for-startdate-and-enddate-in-academicsession"
  },
  {
    "id": "b80789a9-5f4b-4d75-b90d-03ce5703e145",
    "identifier": "BUG-344",
    "title": "'dateLastModified' is optional in PUT /academicSessions/{sourcedId} request body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the request body for the non-standard `PUT` operation, the `dateLastModified` field within the `academicSession` object is optional.\n\n**Summary:** \nIn the request body for the non-standard `PUT` operation, the `dateLastModified` field within the `academicSession` object is optional.\n\n**Steps to Reproduce:**\n\n1. Review the local specification for the `PUT /academicSessions/{sourcedId}` operation.\n2. Examine the `requestBody.content.application/json.schema.properties.academicSession.required` array.\n3. Observe that `dateLastModified` is not in the list of required properties.\n4. Review the `AcademicSessionDType` definition in the upstream JSON specification.\n5. Note that `dateLastModified` is in the `required` array for the object.\n\n**Expected:** \nThe `dateLastModified` field should be required in the `PUT` request body. The standard `AcademicSessionDType` model, which this operation attempts to update, mandates this field.\n\nThe upstream JSON specification for `AcademicSessionDType` includes `\"dateLastModified\"` in its `required` array. The HTML specification (Section 6.1.4.3) states: \"All objects MUST be annotated with the dateTime upon which they were last modified.\" Making this field optional for an update operation violates this core requirement.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Although the `PUT` method is non-standard, its request body should still accurately reflect the object model it is manipulating. By making a required field optional, the local implementation deviates from the data model's integrity rules. This could lead to inconsistent data states if clients omit the field.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T01:00:05.335Z",
    "updatedAt": "2025-07-02T17:28:49.681Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-344/datelastmodified-is-optional-in-put-academicsessionssourcedid-request"
  },
  {
    "id": "4c752c54-6243-44c6-bf12-307a9c08a6ae",
    "identifier": "BUG-343",
    "title": "Overly broad enum for 'parent.type' in AcademicSession response schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `type` property within the `parent` object of the `AcademicSession` response schema has an enum that includes almost every object type in the OneRoster specification, rather than being restricted to just \"academicSession\".\n\n**Summary:** \nThe `type` property within the `parent` object of the `AcademicSession` response schema has an enum that includes almost every object type in the OneRoster specification, rather than being restricted to just \"academicSession\".\n\n**Steps to Reproduce:**\n\n1. Review the `AcademicSession` schema in the local specification's `components` section.\n2. Examine the `parent.properties.type` field.\n3. Observe that its `enum` contains a very long list of many possible OneRoster object types.\n4. Review the `AcadSessionGUIDRefDType` in the upstream JSON specification, which is the correct type for the `parent` field.\n5. Note that its `type` property has a strict enum containing only one value: `\"academicSession\"`.\n\n**Expected:** \nThe `parent` field of an `AcademicSession` must refer to another `AcademicSession`. Therefore, its `type` property must be strictly `academicSession`.\n\nThe upstream JSON spec for `AcadSessionGUIDRefDType` correctly defines this:\n\n```json\n\"type\": {\n  \"description\": \"The type of object being referenced i.e. an 'academicSession'.\",\n  \"type\": \"string\",\n  \"enum\": [\"academicSession\"]\n}\n```\n\nThe local spec should restrict the enum for `parent.type` to `[academicSession]`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This overly permissive schema is a deviation from the standard. It incorrectly suggests that an academic session's parent could be a user, a class, or another unrelated object type. While the server may always return the correct value (`\"academicSession\"`), the specification is misleading and could cause issues for code generators or clients that rely on the spec for validation logic.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:58:04.019Z",
    "updatedAt": "2025-07-02T01:10:27.590Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-343/overly-broad-enum-for-parenttype-in-academicsession-response-schema"
  },
  {
    "id": "c85f0c30-fcdc-48d4-a6cb-8ac2f3cf3753",
    "identifier": "BUG-342",
    "title": "Incorrect schema for 'parent' object in PUT /academicSessions/{sourcedId} request body",
    "description": "**Reporter:** Incorrect schema for 'parent' object in PUT /academicSessions/{sourcedId} request body (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `parent` object in the request body for the non-standard `PUT` operation is defined with a schema that only contains `sourcedId`.\n\n**Summary:** \nThe `parent` object in the request body for the non-standard `PUT` operation is defined with a schema that only contains `sourcedId`.\n\n**Steps to Reproduce:**\n\n1. Review the local specification for the `PUT /academicSessions/{sourcedId}` operation.\n2. Examine the inline schema for the `requestBody`.\n3. Note that the `parent` property is defined as an object containing only a `sourcedId` string.\n4. Compare this to the standard `AcadSessionGUIDRefDType` in the upstream JSON specification (definitions/AcadSessionGUIDRefDType).\n5. Observe that the standard type requires `href`, `sourcedId`, and `type`.\n\n**Expected:** \nWhile the `PUT` operation itself is non-standard, its use of a standard data type (`parent` should be an `AcadSessionGUIDRefDType`) should conform to that type's definition. The `parent` object's schema should require `href` (string, uri), `sourcedId` (string), and `type` (enum: \"academicSession\").\n\nThe correct schema, based on `AcadSessionGUIDRefDType`, should be:\n\n```yaml\nparent:\n  type: object\n  properties:\n    href:\n      type: string\n      format: uri\n    sourcedId:\n      type: string\n    type:\n      type: string\n      enum:\n        - academicSession\n  required:\n    - href\n    - sourcedId\n    - type\n```\n\nThe local implementation is missing `href` and `type` and does not make `sourcedId` required within the object.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical schema violation. Even within a non-standard method, reusing a standard object type like a GUID Reference requires adhering to its defined structure. This incomplete schema will lead to invalid data being sent to the server and demonstrates a fundamental inconsistency in how object references are handled compared to the specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:56:05.443Z",
    "updatedAt": "2025-07-02T17:28:49.703Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-342/incorrect-schema-for-parent-object-in-put-academicsessionssourcedid"
  },
  {
    "id": "ea39889e-622b-4546-899b-fa7333b190b9",
    "identifier": "BUG-341",
    "title": "Extraneous 'org' field in AcademicSession schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `AcademicSession` schema in the local specification includes a required `org` property, which is a non-standard extension.\n\n**Summary:** \nThe `AcademicSession` schema in the local specification includes a required `org` property, which is a non-standard extension.\n\n**Steps to Reproduce:**\n\n1. Review the `AcademicSession` schema in the local specification under `components.schemas.AcademicSession`.\n2. Observe the presence of a required property named `org`.\n3. Review the `AcademicSessionDType` definition in the upstream JSON specification and Section 6.1.2 of the upstream HTML documentation.\n4. Note that there is no `org` field defined in the standard `AcademicSession` model.\n\n**Expected:** \nThe `AcademicSession` schema should not contain the `org` field. According to the upstream specifications, the `AcademicSession` object's attributes are limited to `sourcedId`, `status`, `dateLastModified`, `metadata`, `title`, `startDate`, `endDate`, `type`, `parent`, `children`, and `schoolYear`. The addition of an `org` field is a proprietary extension that violates the standard schema.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding non-standard fields to a specified model can cause issues for strictly-validating clients, which may reject the response due to the unexpected property. While the standard allows for extensions via the `metadata` object, adding a new top-level property is not the correct mechanism and breaks conformance. Since the field is also marked as `required`, it creates a significant burden on the non-standard `PUT` operation as well.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:53:36.955Z",
    "updatedAt": "2025-07-02T00:17:00.991Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-341/extraneous-org-field-in-academicsession-schema"
  },
  {
    "id": "59c04b6e-a11c-4898-a171-8dd8918198f3",
    "identifier": "BUG-340",
    "title": "Missing 'children' field in AcademicSession response schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `AcademicSession` schema in the local specification is missing the `children` property.\n\n**Summary:** \nThe `AcademicSession` schema in the local specification is missing the `children` property.\n\n**Steps to Reproduce:**\n\n1. Review the `AcademicSession` schema in the local specification under `components.schemas.AcademicSession`.\n2. Observe that there is no property named `children`.\n3. Review the `AcademicSessionDType` definition in the upstream JSON specification and Section 6.1.2.6 of the upstream HTML documentation.\n4. Note the presence of an optional `children` field, which is an array of `AcadSessionGUIDRefDType` objects.\n\n**Expected:** \nThe `AcademicSession` schema should include the optional `children` property to conform to the standard. This field is essential for representing hierarchical relationships between academic sessions (e.g., a school year containing terms).\n\nThe upstream JSON spec defines it as:\n\n```json\n\"children\": {\n  \"description\": \"The set of links to the child AcademicSessions i.e. a set of AcademicSession 'sourcedIds'.\",\n  \"type\": \"array\",\n  \"minItems\": 0,\n  \"items\": {\n    \"$ref\": \"#/definitions/AcadSessionGUIDRefDType\"\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a standard field, even an optional one, is a significant deviation. It prevents the API from conveying complete information as defined by the OneRoster standard. Clients built against the full spec will be unable to retrieve hierarchical session data, breaking a key feature of the `AcademicSession` model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:50:46.775Z",
    "updatedAt": "2025-07-02T00:59:01.839Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-340/missing-children-field-in-academicsession-response-schema"
  },
  {
    "id": "b2730c9a-a741-45a5-b06f-50dc49287811",
    "identifier": "BUG-339",
    "title": "Incorrect data type for 'schoolYear' in AcademicSession schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `schoolYear` property in the `AcademicSession` response schema and `putAcademicSession` request body is defined as `type: number`.\n\n**Summary:** \nThe `schoolYear` property in the `AcademicSession` response schema and `putAcademicSession` request body is defined as `type: number`.\n\n**Steps to Reproduce:**\n\n1. Review the `AcademicSession` schema in the local specification under `components.schemas.AcademicSession`.\n2. Observe that the `schoolYear` property is defined as `type: number`.\n3. Review the `AcademicSessionDType` definition in the upstream JSON and HTML specifications.\n4. Observe that `schoolYear` is defined as a string, specifically in the format 'YYYY'.\n\n**Expected:** \nThe `schoolYear` property should be defined as `type: string`. The upstream HTML documentation (Section 6.1.2.7) explicitly states its format: \"The school year for the academic session. This year should include the school year end e.g. 2014. This is in the \\[ISO 8601\\] format of 'YYYY'.\" The upstream JSON spec confirms this with `type: \"string\"`. A numeric type cannot correctly represent the 'YYYY' format as intended.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data type mismatch. A client conforming to the standard will send and expect a string (e.g., \"2024\"), while the local implementation expects a number (e.g., 2024). This will cause validation errors, parsing failures, and potential data corruption. It directly violates the `AcademicSessionDType` schema defined in the upstream specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:49:05.543Z",
    "updatedAt": "2025-07-03T05:32:05.459Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-339/incorrect-data-type-for-schoolyear-in-academicsession-schema"
  },
  {
    "id": "9e15f6be-8cf0-46ce-a934-a3b14f8b56f5",
    "identifier": "BUG-338",
    "title": "Missing 'fields' query parameter in GET /academicSessions/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}` does not include the optional `fields` query parameter.\n\n**Summary:** \nThe local specification for `GET /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}` does not include the optional `fields` query parameter.\n\n**Steps to Reproduce:**\n\n1. Review the upstream JSON and HTML specifications for the `getAcademicSession` operation.\n2. Note the presence of an optional query parameter named `fields`.\n3. Review the local specification for `GET /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}`.\n4. Observe that the `parameters` list only includes `sourcedId` and is missing the `fields` parameter.\n\nA conforming client should be able to make this request:\n\n```\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/some-sourced-id?fields=sourcedId,title,status\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\nThe local spec does not document this capability.\n\n**Expected:** \nThe local specification should include the `fields` query parameter to conform to the upstream standard. This parameter allows clients to request a subset of fields in the response, which is a standard feature for this operation.\n\nThe upstream JSON spec (`oneroster.rostering.upstream.json`) defines it as:\n\n```json\n{\n  \"name\": \"fields\",\n  \"in\": \"query\",\n  \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": { \"type\": \"string\" },\n  \"collectionFormat\": \"csv\",\n  \"allowEmptyValue\": false\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a standard parameter like `fields` is a significant deviation. It prevents clients from using a standard feature for optimizing payloads, forcing them to always receive the full object. This impacts performance and bandwidth. While the API might support it under the hood, the failure to document it in the specification is a bug that will prevent clients from discovering and using the feature.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:46:02.570Z",
    "updatedAt": "2025-07-03T19:24:47.851Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-338/missing-fields-query-parameter-in-get-academicsessionssourcedid"
  },
  {
    "id": "cacdfaa9-8f23-4ae8-9fbb-5ebbdae8ada3",
    "identifier": "BUG-337",
    "title": "Non-standard DELETE method implemented for /academicSessions/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `DELETE` method on the `/ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}` endpoint, allowing for the deletion of an academic session.\n\n**Summary:** \nThe local API specification defines a `DELETE` method on the `/ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}` endpoint, allowing for the deletion of an academic session.\n\n**Steps to Reproduce:**\n\n1. Review the official upstream OneRoster 1.2 specifications (both JSON and HTML).\n2. Note that for the path `/academicSessions/{sourcedId}`, only a `GET` method is defined.\n3. Review the local specification.\n4. Observe that a `DELETE` method is defined for this path, which is not part of the official standard.\n\nTo demonstrate, a `DELETE` request can be sent:\n\n```\ncurl -X DELETE \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe official OneRoster 1.2 specifications do not define a `DELETE` method for this endpoint. Both the upstream JSON spec (`oneroster.rostering.upstream.json`) and the HTML documentation (`oneroster.rostering.upstream.html`) only specify a `GET` operation for the path `/academicSessions/{sourcedId}`. Therefore, the `DELETE` method should not exist as it is a non-standard operation.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Like the `PUT` method, implementing a non-standard `DELETE` method is a critical deviation. It breaks the read-only nature of the specified API for this data model and creates an interoperability issue. Clients built against the standard will not expect this functionality, and its presence indicates a fundamental misunderstanding or intentional deviation from the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:43:16.058Z",
    "updatedAt": "2025-07-02T00:57:28.139Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-337/non-standard-delete-method-implemented-for-academicsessionssourcedid"
  },
  {
    "id": "a6bccfe2-0aba-4b15-b52a-0f665873048f",
    "identifier": "BUG-336",
    "title": "Non-standard PUT method implemented for /academicSessions/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines a `PUT` method on the `/ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}` endpoint, allowing for the update of an academic session.\n\n**Summary:** \nThe local API specification defines a `PUT` method on the `/ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}` endpoint, allowing for the update of an academic session.\n\n**Steps to Reproduce:**\n\n1. Review the official upstream OneRoster 1.2 specifications (both JSON and HTML).\n2. Note that for the path `/academicSessions/{sourcedId}`, only a `GET` method is defined.\n3. Review the local specification.\n4. Observe that a `PUT` method is defined for this path, which is not part of the official standard.\n\nTo demonstrate, a `PUT` request can be sent:\n\n```\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"academicSession\": {\n    \"sourcedId\": \"some-sourced-id\",\n    \"status\": \"active\",\n    \"title\": \"Updated Session Title\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-06-01\",\n    \"type\": \"semester\",\n    \"schoolYear\": \"2024\",\n    \"org\": {\n      \"sourcedId\": \"org-id-123\"\n    }\n  }\n}'\n```\n\n**Expected:** \nThe official OneRoster 1.2 specifications do not define a `PUT` method for this endpoint. Both the upstream JSON spec (`oneroster.rostering.upstream.json`) and the HTML documentation (`oneroster.rostering.upstream.html`) only specify a `GET` operation for the path `/academicSessions/{sourcedId}`. Therefore, the `PUT` method should not exist, as it represents an unsupported and non-standard operation.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}\nLocal Spec: ims/oneroster/rostering/v1p2/academicSessions/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Implementing non-standard methods is a critical deviation from the specification. It breaks interoperability and can lead to unpredictable behavior for clients who build their integrations based on the official standard. The upstream specification is read-only for this data model via the API. Any write operations would need to be defined in a separate service or a new version of the specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:39:52.401Z",
    "updatedAt": "2025-07-02T00:57:29.060Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-336/non-standard-put-method-implemented-for-academicsessionssourcedid"
  },
  {
    "id": "03ec70e7-1e6b-49a5-816e-45516ff3076e",
    "identifier": "BUG-335",
    "title": "MEDIUM: Path has incorrect trailing slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the path for getting all resources with a trailing slash: `/ims/oneroster/resources/v1p2/resources/`.\n\n**Summary:** \nThe local specification defines the path for getting all resources with a trailing slash: `/ims/oneroster/resources/v1p2/resources/`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Compare the path defined in the local spec with the path constructed from the upstream spec.\n\nLocal path: `/ims/oneroster/resources/v1p2/resources/`\nUpstream path: `basePath` (`/ims/oneroster/resources/v1p2`) + `path` (`/resources`) = `/ims/oneroster/resources/v1p2/resources`\n\n**Expected:** \nThe upstream specification combines a `basePath` of `/ims/oneroster/resources/v1p2` and a path of `/resources` to form the endpoint `/ims/oneroster/resources/v1p2/resources`. There is no trailing slash. While many web frameworks handle this ambiguity, it is a deviation from the specification and can cause issues with strict clients, routing, or proxy configurations. The path should be `/ims/oneroster/resources/v1p2/resources/`.\n\n**Environment:** API Route: /ims/oneroster/resources/v1p2/resources/\nLocal Spec: ims/oneroster/resources/v1p2/resources/.filtered.yaml\nUpstream Spec (JSON): oneroster.resources.upstream.json\nUpstream Spec (HTML): oneroster.resources.upstream.html\n**Additional Notes:** A trailing slash can be interpreted as a distinct resource URL from one without it. Adhering to the exact path structure defined in the specification is crucial for interoperability. The local implementation should remove the trailing slash from its path definition to match the upstream spec.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:35:29.734Z",
    "updatedAt": "2025-07-02T18:08:59.722Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-335/medium-path-has-incorrect-trailing-slash"
  },
  {
    "id": "18fa8418-67d5-4932-b2e4-5c83b65a271f",
    "identifier": "BUG-334",
    "title": "MEDIUM: Missing required 'X-Total-Count' header in GET /resources/ response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `200 OK` response of `GET /resources/` does not define the `X-Total-Count` header. The implementation puts a `totalCount` field in the JSON body instead.\n\n**Summary:** \nThe local specification for the `200 OK` response of `GET /resources/` does not define the `X-Total-Count` header. The implementation puts a `totalCount` field in the JSON body instead.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/oneroster/resources/v1p2/resources/` endpoint.\n2. Inspect the HTTP response headers.\n3. Observe that the `X-Total-Count` header is missing.\n4. Note that the local spec's 200 response definition also omits this header.\n\nCurl Command (with verbose flag to see headers):\n\n```\ncurl -v -X GET https://api.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/ \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream JSON specification explicitly defines a response header for the `200 OK` status code:\n`\"headers\": { \"X-Total-Count\": { \"description\": \"The total number of resources that are available to be returned\", \"type\": \"integer\" } }`\n\nThis header is the specified mechanism for communicating the total number of records available for pagination. The API response MUST include this header.\n\n**Environment:** API Route: /ims/oneroster/resources/v1p2/resources/\nLocal Spec: ims/oneroster/resources/v1p2/resources/.filtered.yaml\nUpstream Spec (JSON): oneroster.resources.upstream.json\nUpstream Spec (HTML): oneroster.resources.upstream.html\n**Additional Notes:** Failure to include the `X-Total-Count` header breaks pagination for clients that correctly follow the specification. A conforming client will look for this header to determine the total number of pages and will not find it. It will also not know to look for the proprietary `totalCount` field in the response body. This deviation breaks a core feature of the API (pagination).",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:35:28.323Z",
    "updatedAt": "2025-07-02T13:48:25.381Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-334/medium-missing-required-x-total-count-header-in-get-resources-response"
  },
  {
    "id": "9ec67b51-4170-451f-a53e-339bd8b6a066",
    "identifier": "BUG-333",
    "title": "HIGH: Undocumented 'search' query parameter exposed on GET /resources/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification for `GET /ims/oneroster/resources/v1p2/resources/` includes a query parameter named `search` of type `string`.\n\n**Summary:** \nThe local API specification for `GET /ims/oneroster/resources/v1p2/resources/` includes a query parameter named `search` of type `string`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the documented query parameters for `GET /resources/` in the upstream JSON and HTML specifications.\n2. Note that `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields` are the only specified parameters.\n3. Review the local specification for the same endpoint.\n4. Observe the presence of an additional `search` parameter.\n\nCurl Command:\n\n```\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/?search=somequery\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThis endpoint should only support the query parameters defined in the official OneRoster specification. The upstream JSON and HTML specifications for the `getAllResources` operation do not include a `search` parameter. The only defined parameters for modifying the result set are `filter`, `sort`, `orderBy`, `limit`, `offset`, and `fields`. The `search` parameter is a non-standard, proprietary extension that is not documented in the official specification.\n\n**Environment:** API Route: /ims/oneroster/resources/v1p2/resources/\nLocal Spec: ims/oneroster/resources/v1p2/resources/.filtered.yaml\nUpstream Spec (JSON): oneroster.resources.upstream.json\nUpstream Spec (HTML): oneroster.resources.upstream.html\n**Additional Notes:** Exposing undocumented parameters is a security risk. It can lead to unpredictable behavior and potential vulnerabilities like SQL or other injection attacks if the backend does not properly sanitize the input. Because its behavior is undefined by the standard, clients will not know how to use it, and it represents a significant deviation from the specified interface.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:31:28.122Z",
    "updatedAt": "2025-07-03T06:01:29.260Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-333/high-undocumented-search-query-parameter-exposed-on-get-resources"
  },
  {
    "id": "18959ae5-64c8-4cf2-9d8e-f8dde616aa67",
    "identifier": "BUG-332",
    "title": "CRITICAL: The 'roles' field in the Resource object contains completely incorrect enum values",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `roles` field as an array of strings with a fixed enum of `[\"primary\", \"secondary\"]`. These values are incorrect.\n\n**Summary:** \nThe local specification defines the `roles` field as an array of strings with a fixed enum of `[\"primary\", \"secondary\"]`. These values are incorrect.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/oneroster/resources/v1p2/resources/` endpoint.\n2. Examine the `roles` array within a `resource` object in the response.\n3. According to the local spec, the values would be from the set `[\"primary\", \"secondary\"]`.\n4. Compare these values to the valid roles defined in the upstream specification.\n\nCurl Command:\n\n```\ncurl -X GET https://api.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/ \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `roles` field should contain values indicating the type of user, such as `student` or `teacher`. The values `primary` and `secondary` belong to the `importance` field, not the `roles` field.\n\nThe upstream HTML specification (Table 6.4.3, \"RoleEnum Vocabulary Description\") clearly defines the base vocabulary for roles, which includes: `administrator`, `aide`, `guardian`, `parent`, `proctor`, `relative`, `student`, `teacher`.\n\nThe local implementation has conflated the `roles` and `importance` fields, resulting in a completely invalid data model for the `roles` property.\n    </what_should_happen>\n\n**Environment:** API Route: /ims/oneroster/resources/v1p2/resources/\nLocal Spec: ims/oneroster/resources/v1p2/resources/.filtered.yaml\nUpstream Spec (JSON): oneroster.resources.upstream.json\nUpstream Spec (HTML): oneroster.resources.upstream.html\n**Additional Notes:** This is a critical data modeling error that makes the `roles` field unusable and nonsensical. Any client attempting to determine resource roles based on the specification will be unable to interpret the data provided by this implementation. The values are not only wrong, but they belong to a different field entirely. This must be fixed immediately.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:29:11.107Z",
    "updatedAt": "2025-07-02T00:13:40.669Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-332/critical-the-roles-field-in-the-resource-object-contains-completely"
  },
  {
    "id": "3f62af40-fa98-4398-b877-bb004e485d97",
    "identifier": "BUG-331",
    "title": "CRITICAL: Incorrect 'required' fields in Resource object model",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `resource` object in the response for `GET /resources/` defines the `required` fields as: `[\"sourcedId\", \"status\", \"title\", \"vendorResourceId\"]`. This means `title` is mandatory, and `dateLastModified` is optional.\n\n**Summary:** \nThe local specification for the `resource` object in the response for `GET /resources/` defines the `required` fields as: `[\"sourcedId\", \"status\", \"title\", \"vendorResourceId\"]`. This means `title` is mandatory, and `dateLastModified` is optional.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/oneroster/resources/v1p2/resources/` endpoint.\n2. Examine the fields within one of the `resource` objects in the response array.\n3. Note which fields are present or absent.\n4. Compare this against the `required` array in the local and upstream specifications.\n\nCurl Command:\n\n```\ncurl -X GET https://api.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/ \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream JSON specification, in the `ResourceDType` definition, defines the `required` fields as: `[\"sourcedId\", \"status\", \"dateLastModified\", \"vendorResourceId\"]`.\n\nThis reveals two critical discrepancies:\n\n1. `dateLastModified` MUST be required: The upstream spec mandates its presence. The local implementation makes it optional. The upstream HTML documentation (Section 6.1.1.3) states: \"All objects MUST be annotated with the dateTime upon which they were last modified.\"\n2. `title` MUST be optional: The upstream spec does not list `title` as required. The local implementation incorrectly makes it mandatory. The upstream HTML documentation (Table 6.1.3.1) shows `title` has a multiplicity of `[0..1]`, confirming it is optional.\n\n**Environment:** API Route: /ims/oneroster/resources/v1p2/resources/\nLocal Spec: ims/oneroster/resources/v1p2/resources/.filtered.yaml\nUpstream Spec (JSON): oneroster.resources.upstream.json\nUpstream Spec (HTML): oneroster.resources.upstream.html\n**Additional Notes:** This bug violates the data model contract. Clients built to the spec will expect `dateLastModified` to always be present and will not expect `title` to always be present. This can lead to parsing errors or incorrect data handling. A client might throw an error if `dateLastModified` is missing, or it might incorrectly assume `title` will always be available. This must be corrected to align with the official specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:27:02.667Z",
    "updatedAt": "2025-07-03T12:32:42.785Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-331/critical-incorrect-required-fields-in-resource-object-model"
  },
  {
    "id": "2b857d3e-2854-479f-8095-dc457d046e35",
    "identifier": "BUG-330",
    "title": "CRITICAL: Incorrect response body structure for GET /resources/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for a 200 OK response returns a JSON object with a custom pagination wrapper. The structure is:\n\n```json\n{\n  \"resources\": [...],\n  \"totalCount\": ...,\n  \"pageCount\": ...,\n  \"pageNumber\": ...,\n  \"offset\": ...,\n  \"limit\": ...\n}\n```\n\n**Summary:** \nThe local specification for a 200 OK response returns a JSON object with a custom pagination wrapper. The structure is:\n\n```json\n{\n  \"resources\": [...],\n  \"totalCount\": ...,\n  \"pageCount\": ...,\n  \"pageNumber\": ...,\n  \"offset\": ...,\n  \"limit\": ...\n}\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/oneroster/resources/v1p2/resources/` endpoint.\n2. Observe the structure of the JSON response body.\n3. Compare this structure to the one defined in the upstream specification.\n\nCurl Command:\n\n```\ncurl -X GET https://api.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/ \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification (`ResourceSetDType`) mandates that the response body for this request should be a simple JSON object containing only the `resources` array.\nThe correct structure is:\n\n```json\n{\n  \"resources\": [\n    {\n      \"sourcedId\": \"...\",\n      \"status\": \"active\",\n      ...\n    }\n  ]\n}\n```\n\nPagination information, specifically the total count of records, is meant to be communicated via the `X-Total-Count` HTTP response header, as stated in the upstream JSON specification's `responses`/`200`/`headers` section. The other pagination details (`offset`, `limit`) are already known from the request parameters. The local implementation incorrectly places this information in the response body.\n\n**Environment:** API Route: /ims/oneroster/resources/v1p2/resources/\nLocal Spec: ims/oneroster/resources/v1p2/resources/.filtered.yaml\nUpstream Spec (JSON): oneroster.resources.upstream.json\nUpstream Spec (HTML): oneroster.resources.upstream.html\n**Additional Notes:** This is a critical bug because it breaks the fundamental contract of the API response structure. Any client built to the official specification will fail to parse this response. The custom wrapper is a complete deviation from the upstream `ResourceSetDType` definition. The implementation must be changed to return the correct body structure and use the `X-Total-Count` header for the total record count.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:24:58.189Z",
    "updatedAt": "2025-07-03T13:02:58.418Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-330/critical-incorrect-response-body-structure-for-get-resources"
  },
  {
    "id": "dc8cf5ec-7bec-45af-b11c-0d0f361eef9a",
    "identifier": "BUG-329",
    "title": "CRITICAL: Unauthorized POST method exposed on /resources/ endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines and exposes a `POST /ims/oneroster/resources/v1p2/resources/` endpoint with an `operationId` of `createResource`. This allows for the creation of new `resource` objects.\n\n**Summary:** \nThe local API specification defines and exposes a `POST /ims/oneroster/resources/v1p2/resources/` endpoint with an `operationId` of `createResource`. This allows for the creation of new `resource` objects.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the upstream OneRoster Resources specification (both JSON and HTML).\n2. Observe that the `/resources` path only defines a GET method for retrieving all resources.\n3. Review the local API specification.\n4. Observe that the local spec defines both a GET and a POST method for the `/ims/oneroster/resources/v1p2/resources/` path.\n\nCurl Command:\nThe local specification documents the following unauthorized endpoint. An attempt to use it would look like this:\n\n```\ncurl -X POST https://api.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/ \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"resource\": {\n    \"title\": \"New Unauthorized Resource\",\n    \"vendorResourceId\": \"vendor-res-123\"\n  }\n}'\n```\n\n**Expected:** \nAccording to the upstream OneRoster v1.2 Resources specification, the `/resources` endpoint is read-only. It should only support the `GET` method (`getAllResources`). There is no `POST` method defined for this path in either the upstream JSON or HTML specification. The API should not allow creation of resources via this endpoint and should not document this capability.\n\nThe upstream JSON spec for the `\"/resources\"` path only contains a `get` method.\n\nThe upstream HTML documentation (Section 4.4, \"ResourcesManagement Interface Description\") only lists two operations: `getAllResources` (GET) and `getResource` (GET). There is no mention of a create operation.\n\n**Environment:** API Route: /ims/oneroster/resources/v1p2/resources/\nLocal Spec: ims/oneroster/resources/v1p2/resources/.filtered.yaml\nUpstream Spec (JSON): oneroster.resources.upstream.json\nUpstream Spec (HTML): oneroster.resources.upstream.html\n**Additional Notes:** This is a critical security and compliance issue. The local implementation has introduced a write capability (resource creation) that is not part of the official OneRoster v1.2 Resources specification. This creates a significant deviation from the standard, potentially leading to data integrity issues, unauthorized data creation, and breaking client integrations that are built strictly against the official specification. This endpoint must be removed.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:22:33.747Z",
    "updatedAt": "2025-07-02T00:13:01.033Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-329/critical-unauthorized-post-method-exposed-on-resources-endpoint"
  },
  {
    "id": "7fa79fd5-c63b-4412-b0eb-10d09a5d5d8d",
    "identifier": "BUG-328",
    "title": "Path Mismatch due to Trailing Slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local path `/ims/oneroster/gradebook/v1p2/scoreScales/` includes a trailing slash.\n\n**Summary:** \nThe local path `/ims/oneroster/gradebook/v1p2/scoreScales/` includes a trailing slash.\n\n**Steps to Reproduce:**\n\n1. Compare the path in the local spec with the path constructed from the upstream spec.\n2. Local path: `/ims/oneroster/gradebook/v1p2/scoreScales/`\n3. Upstream path: `basePath: /ims/oneroster/gradebook/v1p2` + path: `/scoreScales` = `/ims/oneroster/gradebook/v1p2/scoreScales`\n\n**Expected:** \nThe official path constructed from the upstream specification does not have a trailing slash. For strict compliance, the path should match exactly.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While many modern web frameworks handle paths with and without a trailing slash interchangeably (often via a redirect), some are configured to be strict. In a strict environment, a request to the correct path without the slash would result in a 404 Not Found error. This inconsistency can lead to subtle and frustrating integration problems.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:06:43.618Z",
    "updatedAt": "2025-07-02T18:10:21.926Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-328/path-mismatch-due-to-trailing-slash"
  },
  {
    "id": "737f0f27-8d45-458f-9fc0-38cfebeb8ec5",
    "identifier": "BUG-327",
    "title": "Undocumented 'maximum' Constraint on 'limit' Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `limit` query parameter on `GET /scoreScales/` has a `maximum` value of 3000 defined in the local specification.\n\n**Summary:** \nThe `limit` query parameter on `GET /scoreScales/` has a `maximum` value of 3000 defined in the local specification.\n\n**Steps to Reproduce:**\n\n1. Review the definition for the `limit` query parameter on `GET /scoreScales/` in the local spec.\n2. Note the presence of `maximum: 3000`.\n3. Review the same parameter in the upstream spec and note the absence of a maximum constraint.\n\nExample of a request that might fail unexpectedly:\n\n```bash\ncurl -X GET -H \"Authorization: Bearer $TOKEN\" \\\n\"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/?limit=3001\"\n```\n\n**Expected:** \nThe upstream JSON specification for the `limit` parameter defines a `minimum` of 1 and a `default` of 100, but does not specify a `maximum` value. While setting a server-side maximum is a good practice, it represents a deviation from the official specification's contract.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This undocumented constraint can cause unexpected `400 Bad Request` errors for clients who are adhering to the official specification, which does not mention a maximum limit. If this is an intentional implementation choice for performance or stability, it must be clearly documented as a vendor-specific constraint. As it stands, it is a silent deviation from the published standard.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:04:32.853Z",
    "updatedAt": "2025-07-03T05:44:58.414Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-327/undocumented-maximum-constraint-on-limit-query-parameter"
  },
  {
    "id": "fa9618cd-a74c-47cf-9228-21abcbd07362",
    "identifier": "BUG-326",
    "title": "Missing Required OAuth 2.0 Scopes in Security Definitions",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's security definition for the GET and POST operations is simply `OAuth2: []`, indicating that scopes are not defined or required.\n\n**Summary:** \nThe local specification's security definition for the GET and POST operations is simply `OAuth2: []`, indicating that scopes are not defined or required.\n\n**Steps to Reproduce:**\n\n1. Review the `security` section of the operations in the local specification.\n2. Note that the security scheme `OAuth2` is used with an empty array of scopes: `security: - OAuth2: []`.\n3. Compare this to the upstream specification which lists specific scopes for each operation.\n\n**Expected:** \nThe upstream specification requires specific OAuth 2.0 scopes for authorizing access to endpoints.\n\n* For `GET /scoreScales` (`getAllScoreScales`), the required scopes are `https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly` OR `https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook-core.readonly`.\n* For `PUT /scoreScales/{sourcedId}` (`putScoreScale`), the required scope is `https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.createput`.\n\nThe local specification should define these scopes within its security requirements.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a significant security and compliance issue. By omitting the scopes, the local specification provides incomplete information for client developers to correctly request access tokens. This can lead to authorization failures and prevents the implementation of granular, least-privilege access control as intended by the OneRoster security model.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:03:02.141Z",
    "updatedAt": "2025-07-03T12:51:58.694Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-326/missing-required-oauth-20-scopes-in-security-definitions"
  },
  {
    "id": "28bae28e-2292-41d0-bc0e-d8e6537e6581",
    "identifier": "BUG-325",
    "title": "Multiple Required Fields are Missing or Optional in ScoreScale Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `ScoreScale` schema defines multiple fields incorrectly:\n\n1. `sourcedId` is optional (not in the `required` list).\n2. `dateLastModified` is optional (not in the `required` list).\n\n**Summary:** \nThe local `ScoreScale` schema defines multiple fields incorrectly:\n\n1. `sourcedId` is optional (not in the `required` list).\n2. `dateLastModified` is optional (not in the `required` list).\n\n**Steps to Reproduce:**\n\n1. Make a `GET` request to the `/scoreScales/` endpoint.\n2. Validate the returned `scoreScales` objects against the upstream `ScoreScaleDType` specification.\n3. Note that `sourcedId` and `dateLastModified` may be missing from the response objects.\n\n```bash\ncurl -X GET -H \"Authorization: Bearer $TOKEN\" \\\n\"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/\"\n```\n\n**Expected:** \nThe upstream `ScoreScaleDType` model requires both `sourcedId` and `dateLastModified` to be present in every `ScoreScale` object. The `required` list in the upstream JSON spec (`definitions.ScoreScaleDType`) is `[\"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"type\", \"class\", \"scoreScaleValue\"]`.\n\nThe HTML documentation (Section 6.1.7, Base Class Description) reinforces this:\n\n* `sourcedId`: \"All objects MUST be identified by a Source Identifier.\"\n* `dateLastModified`: \"All objects MUST be annotated with the dateTime upon which they were last modified.\"\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** These omissions represent fundamental data model violations. A missing `sourcedId` makes the object impossible to reference in subsequent API calls. A missing `dateLastModified` breaks the ability for clients to perform delta synchronization. Both are critical for a compliant and functional implementation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-07-01T00:00:29.802Z",
    "updatedAt": "2025-07-02T00:12:23.820Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-325/multiple-required-fields-are-missing-or-optional-in-scorescale-schema"
  },
  {
    "id": "d9f5c2d8-7ea5-4c3e-957c-14b20828cb3a",
    "identifier": "BUG-324",
    "title": "Extraneous Fields 'value' and 'description' in scoreScaleValue Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The objects within the `scoreScaleValue` array in the `ScoreScale` schema contain two extra, undefined fields: `value` (string, optional) and `description` (string, optional).\n\n**Summary:** \nThe objects within the `scoreScaleValue` array in the `ScoreScale` schema contain two extra, undefined fields: `value` (string, optional) and `description` (string, optional).\n\n**Steps to Reproduce:**\n\n1. Make a `GET` request to the `/scoreScales/` endpoint.\n2. Inspect the objects within the `scoreScaleValue` array in the response.\n\n```bash\ncurl -X GET -H \"Authorization: Bearer $TOKEN\" \\\n\"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/\"\n```\n\n**Expected:** \nThe upstream specification for `ScoreScaleValueDType` defines only two fields: `itemValueLHS` and `itemValueRHS`. Both are required strings.\n\nThe HTML documentation (Section 6.1.29, ScoreScaleValue Class Description) and the JSON spec (`definitions.ScoreScaleValueDType`) confirm that no other fields should be present.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Adding undocumented fields to a defined schema violates the contract of the specification. While some clients might ignore them, this can cause deserialization errors for clients that perform strict schema validation, leading to application crashes or data loss. This non-compliance makes the implementation unreliable.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:55:01.082Z",
    "updatedAt": "2025-07-02T00:12:23.280Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-324/extraneous-fields-value-and-description-in-scorescalevalue-schema"
  },
  {
    "id": "6b05a4bf-b0ae-4c30-a2a4-ec4f9f50f965",
    "identifier": "BUG-323",
    "title": "Undocumented and Non-Standard 'search' Query Parameter on GET /scoreScales/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `search` query parameter for the `GET /scoreScales/` endpoint.\n\n**Summary:** \nThe local specification defines a `search` query parameter for the `GET /scoreScales/` endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the defined query parameters for the `GET /scoreScales/` endpoint in the local spec.\n2. Cross-reference these parameters with the `getAllScoreScales` operation in the upstream JSON and HTML specifications.\n3. Note the presence of the `search` parameter in the local spec.\n\nExample of non-standard usage:\n\n```bash\ncurl -X GET -H \"Authorization: Bearer $TOKEN\" \\\n\"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/?search=somequery\"\n```\n\n**Expected:** \nThe upstream JSON and HTML specifications for the `getAllScoreScales` operation do not define a `search` parameter. The only defined query parameters for filtering and querying collections are `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Introducing a non-standard query parameter without documenting it as a vendor extension breaks compliance with the OneRoster specification. Clients built to the specification will not know this parameter exists, and its behavior is undefined. This can lead to unpredictable results and compatibility issues. Any extension should be clearly marked, for example, as `ext_search`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:51:54.399Z",
    "updatedAt": "2025-07-03T05:38:19.094Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-323/undocumented-and-non-standard-search-query-parameter-on-get"
  },
  {
    "id": "d4c994f7-aee0-4eff-9f9b-3ef63225b784",
    "identifier": "BUG-322",
    "title": "Incorrect `required` Fields in User Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's `required` list for the User object is `[sourcedId, status, enabledUser, givenName, familyName, roles, agents]`. This means it incorrectly makes the `agents` field required and omits the `dateLastModified` field from the required list.\n\n**Summary:** \nThe local specification's `required` list for the User object is `[sourcedId, status, enabledUser, givenName, familyName, roles, agents]`. This means it incorrectly makes the `agents` field required and omits the `dateLastModified` field from the required list.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the returned user objects for the presence of the `dateLastModified` field.\n3. Note that the `agents` field is always present, even if empty.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification (`UserDType`) mandates a different set of required fields. The `dateLastModified` field MUST be present, and the `agents` field is optional.\n\nThe correct `required` list, from the upstream JSON spec, is:\n`[\"sourcedId\", \"status\", \"dateLastModified\", \"enabledUser\", \"givenName\", \"familyName\", \"roles\"]`\n\nThe HTML spec (Section 6.1.4) states for `dateLastModified`: \"All objects MUST be annotated with the dateTime upon which they were last modified.\" This confirms it is required. It also lists the multiplicity of `agents` as `[0.. unbounded]`, confirming it is optional.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The local implementation produces invalid User objects according to the OneRoster standard by omitting a required field (`dateLastModified`) and mandating an optional one (`agents`). Compliant clients may fail validation when processing responses from this endpoint.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:48:10.125Z",
    "updatedAt": "2025-07-03T12:32:42.778Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-322/incorrect-required-fields-in-user-object-response"
  },
  {
    "id": "328cb38e-440b-430d-a5ff-ce874ee7b123",
    "identifier": "BUG-321",
    "title": "Incomplete Schema for Nested 'class' and 'course' GUIDRef Objects",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The nested `class` and `course` objects within the `ScoreScale` schema only define a single `sourcedId` field. They are missing the `href` and `type` fields.\n\n**Summary:** \nThe nested `class` and `course` objects within the `ScoreScale` schema only define a single `sourcedId` field. They are missing the `href` and `type` fields.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/scoreScales/` endpoint.\n2. Inspect the `class` and `course` objects within the returned `scoreScales` array.\n\n```bash\ncurl -X GET -H \"Authorization: Bearer $TOKEN\" \\\n\"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/\"\n```\n\n**Expected:** \nThe upstream specification defines these objects as `ClassGUIDRefDType` and `CourseGUIDRefDType` respectively. Both of these types are required to contain three fields:\n\n1. `href`: A URI to the referenced resource.\n2. `sourcedId`: The GUID of the referenced resource.\n3. `type`: An enum value specifying the type of resource ('class' or 'course').\n\nThe upstream JSON spec for `ClassGUIDRefDType` shows `\"required\": [\"href\", \"sourcedId\", \"type\"]`. The same is true for `CourseGUIDRefDType`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Missing required fields in a nested object makes the implementation non-compliant and breaks the ability for a client to correctly interpret and use the reference. The `href` provides a direct link to the related resource, and `type` is essential for polymorphic deserialization. Omitting them cripples the utility of the reference object.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:47:13.455Z",
    "updatedAt": "2025-07-02T17:28:42.217Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-321/incomplete-schema-for-nested-class-and-course-guidref-objects"
  },
  {
    "id": "34f0ad10-5631-47e0-907a-46fb19ba86bf",
    "identifier": "BUG-320",
    "title": "Pagination Metadata Returned in Response Body Instead of HTTP Header",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation's `200 OK` response for `GET /scoreScales/` includes pagination fields (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the JSON response body.\n\n**Summary:** \nThe local implementation's `200 OK` response for `GET /scoreScales/` includes pagination fields (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the JSON response body.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/scoreScales/` endpoint.\n2. Inspect the JSON response body and the HTTP response headers.\n\n```bash\ncurl -v -X GET -H \"Authorization: Bearer $TOKEN\" \\\n\"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/\"\n```\n\n**Expected:** \nThe upstream specification requires pagination metadata to be handled via HTTP headers. Specifically, the upstream JSON spec for `getAllScoreScales` defines a `200 OK` response that returns the collection and specifies the total count in a header:\n`\"headers\": { \"X-Total-Count\": { \"description\": \"The total number of resources that are available to be returned\", \"type\": \"integer\" } }`\n\nThe response body should only contain the `scoreScales` collection, wrapped in a root object (e.g., `{\"scoreScales\": [...]}`).\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a major structural deviation from the specification. Clients built to the official spec would look for the `X-Total-Count` header for pagination and would not be able to parse the extra, non-standard fields in the response body. This breaks standard client implementations and violates a core aspect of the API's design for handling collections.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:45:00.342Z",
    "updatedAt": "2025-07-03T05:48:03.225Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-320/pagination-metadata-returned-in-response-body-instead-of-http-header"
  },
  {
    "id": "bdf43a34-0600-4ee2-aeef-fbc736b5dcdb",
    "identifier": "BUG-319",
    "title": "Incorrect Response Body on Score Scale Creation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `POST /scoreScales/` operation returns a `201 Created` response with a JSON body containing a `sourcedIdPairs` object.\n\n**Summary:** \nThe local `POST /scoreScales/` operation returns a `201 Created` response with a JSON body containing a `sourcedIdPairs` object.\n\n**Steps to Reproduce:**\n\n1. Send a request to create a new Score Scale using the locally defined endpoint.\n2. Observe the response body returned by the server.\n\n```bash\ncurl -v -X POST -H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttps://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/ \\\n-d '{\"scoreScale\": { \"status\": \"active\", \"title\": \"New Scale\", \"type\": \"Grade\", \"class\": { \"sourcedId\": \"class123\" }, \"scoreScaleValue\": [{\"itemValueLHS\": \"A\", \"itemValueRHS\": \"90\"}] }}'\n```\n\n**Expected:** \nThe correct upstream method for creation, `PUT /scoreScales/{sourcedId}`, specifies a `201 Created` response with **no response body**.\n\nThe upstream JSON spec for `putScoreScale` shows a `201` response with only a description: `\"description\": \"The object has been successfully stored in the Service Provider repository.\"`.\n\nThe upstream HTML documentation for the `putScoreScaleOperation` (section 4.9.4) shows it has no \"Returned (out) Parameters\". The response body structure `sourcedIdPairs` is meant for operations where the server allocates the ID, which is not the case here.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This violates the specified contract for the creation endpoint. A client built against the official spec would not expect a response body and would likely fail during parsing. The returned `sourcedIdPairs` object is irrelevant for a `PUT` operation where the client already supplied the `sourcedId`. This indicates a fundamental misunderstanding of the upstream specification's design for create operations.",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:43:22.417Z",
    "updatedAt": "2025-07-02T16:41:06.432Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-319/incorrect-response-body-on-score-scale-creation"
  },
  {
    "id": "c805b646-a849-412e-8263-0db51e97b7b8",
    "identifier": "BUG-318",
    "title": "Incorrect HTTP Method and Path for Creating Score Scale (POST vs PUT)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation incorrectly uses the `POST` HTTP method on the collection endpoint (`/scoreScales/`) for creating a new Score Scale.\n\n**Summary:** \nThe local implementation incorrectly uses the `POST` HTTP method on the collection endpoint (`/scoreScales/`) for creating a new Score Scale.\n\n**Steps to Reproduce:**\n\n1. Review the local and upstream specifications for the Score Scale creation endpoint.\n2. The local spec defines `POST /ims/oneroster/gradebook/v1p2/scoreScales/`.\n3. The upstream spec defines `PUT /scoreScales/{sourcedId}`.\n\nThe local implementation suggests the following incorrect cURL command:\n\n```bash\n# Incorrect local implementation\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttps://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/ \\\n-d '{\"scoreScale\": { ... } }'\n```\n\nThe correct cURL command according to the upstream specification should be:\n\n```bash\n# Correct upstream specification\ncurl -X PUT -H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttps://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/{client-supplied-sourcedId} \\\n-d '{\"scoreScale\": { ... } }'\n```\n\n**Expected:** \nThe upstream specification requires using the `PUT` HTTP method on a resource-specific endpoint (`/scoreScales/{sourcedId}`) to create a new Score Scale where the client provides the `sourcedId`.\n\nThe upstream HTML documentation for the `putScoreScale` operation (section 4.9.4) confirms this behavior: \"To create a new scoreScale. The associated sourcedId for this new record is supplied by the requesting system.\"\n\nThe upstream JSON specification defines the endpoint as `PUT /scoreScales/{sourcedId}`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a fundamental deviation from the RESTful pattern defined in the official specification. It changes the HTTP verb, the path structure, and the mechanism for specifying the resource ID. The local `POST` method suggests a server-generated ID, while the upstream `PUT` method mandates a client-supplied ID. This breaks compatibility with any client built to the official specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:40:51.378Z",
    "updatedAt": "2025-07-02T14:41:57.479Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-318/incorrect-http-method-and-path-for-creating-score-scale-post-vs-put"
  },
  {
    "id": "31583462-9e7b-4215-a3a1-8a1ffe61cc40",
    "identifier": "BUG-317",
    "title": "GET /scoreScales/{sourcedId} description is incomplete",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification provides a very brief description for the GET operation, omitting important details about error handling.\n\n**Summary:** \nThe local specification provides a very brief description for the GET operation, omitting important details about error handling.\n\n**Steps to Reproduce:**\n\n1. Review the `description` for the `GET` operation in the local spec. It states: \"Get a specific scoreScale on the service provider.\"\n2. Review the `description` for the `GET` operation in the upstream `oneroster.gradebook.upstream.json` spec. It states: \"Get a specific scoreScale on the service provider. If the corresponding record cannot be located then an 'unknown' error code is returned.\"\n\n**Expected:** \nThe description should match the upstream specification, which provides crucial information about the expected behavior when a resource is not found. The upstream spec explicitly states that an 'unknown' error code is returned in this case, which corresponds to a 404 Not Found response. This information is valuable for client developers.\n\nThe local spec should be updated to include this detail for clarity and completeness.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While the 404 response is defined in the `responses` section, having the behavior clearly stated in the operation's description is a standard practice that improves developer experience and reduces ambiguity. The local spec's description is less helpful than the official one.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:37:51.292Z",
    "updatedAt": "2025-07-02T00:10:35.090Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-317/get-scorescalessourcedid-description-is-incomplete"
  },
  {
    "id": "a6d84fb8-e4ef-4619-8868-0ff0743b3948",
    "identifier": "BUG-316",
    "title": "DELETE /scoreScales/{sourcedId} description is inconsistent with upstream specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's description for the `DELETE` operation explicitly describes a \"soft delete\" behavior (changing the status to 'tobedeleted').\n\n**Summary:** \nThe local specification's description for the `DELETE` operation explicitly describes a \"soft delete\" behavior (changing the status to 'tobedeleted').\n\n**Steps to Reproduce:**\n\n1. Review the `description` for the `DELETE` operation in the local spec. It states: \"Perform a soft delete on a specific ScoreScale on the service provider. This operation changes the status of the ScoreScale to 'tobedeleted'.\"\n2. Review the `description` for the `DELETE` operation in the upstream `oneroster.gradebook.upstream.json` spec. It states: \"Delete a specific scoreScale on the service provider. If the corresponding record cannot be located then an 'unknown' error code is returned.\"\n\n**Expected:** \nThe description in the local spec should match the description in the upstream spec, which describes a generic delete operation without specifying the implementation (soft vs. hard delete).\n\nThe upstream HTML documentation (Use-case 11) clarifies that \"the nature of the deletion is implementation dependent\". However, the machine-readable `oneroster.gradebook.upstream.json` does not specify a soft-delete behavior in its description. Our local spec makes a specific implementation choice and documents it as the sole behavior, which is a deviation from the more abstract upstream description. This can mislead clients who might not expect a soft delete or who might expect the resource to be gone entirely. The description should be aligned with the upstream spec to avoid confusion.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While the implementation of a soft delete is permitted by the wider OneRoster documentation, baking this implementation detail into the primary description of the operation in our local spec creates a direct inconsistency with the upstream machine-readable spec. This can confuse developers and lead to incorrect assumptions about the API's behavior. A better approach would be to align the primary description and add implementation-specific details to an `x-` extension property or a separate implementation note.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:34:08.320Z",
    "updatedAt": "2025-07-03T11:50:44.531Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-316/delete-scorescalessourcedid-description-is-inconsistent-with-upstream"
  },
  {
    "id": "bb1d4f71-055c-41d3-80d3-6df8e26b9703",
    "identifier": "BUG-315",
    "title": "Schema Mismatch: 'ScoreScale' schema is missing 'sourcedId' and 'dateLastModified' from its required list",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `ScoreScale` object in the local specification does not mark the `sourcedId` and `dateLastModified` fields as required.\n\n**Summary:** \nThe `ScoreScale` object in the local specification does not mark the `sourcedId` and `dateLastModified` fields as required.\n\n**Steps to Reproduce:**\n\n1. Examine the `ScoreScale` schema in the local specification.\n2. Observe the `required` array: `['status', 'title', 'type', 'class', 'scoreScaleValue']`.\n3. Examine the `ScoreScaleDType` schema in the upstream `oneroster.gradebook.upstream.json` specification.\n4. Observe its `required` array, which is `['sourcedId', 'status', 'dateLastModified', 'title', 'type', 'class', 'scoreScaleValue']`.\n\n**Expected:** \nThe `sourcedId` and `dateLastModified` fields must be marked as required for the `ScoreScale` object, in addition to the other required fields. These are fundamental properties of all base objects in the OneRoster specification.\n\nFrom the upstream `ScoreScaleDType` definition:\n\n```json\n\"required\": [\n  \"sourcedId\",\n  \"status\",\n  \"dateLastModified\",\n  \"title\",\n  \"type\",\n  \"class\",\n  \"scoreScaleValue\"\n]\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Missing fields from the `required` list is a critical schema violation. It means our API could potentially produce invalid `ScoreScale` objects that are missing a unique identifier (`sourcedId`) or a modification timestamp (`dateLastModified`), which would break clients that rely on these fields being present as per the official specification.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:32:34.416Z",
    "updatedAt": "2025-07-02T00:12:22.440Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-315/schema-mismatch-scorescale-schema-is-missing-sourcedid-and"
  },
  {
    "id": "da22f381-bb0f-471d-88f1-3a90761550ba",
    "identifier": "BUG-314",
    "title": "Schema Mismatch: 'scoreScaleValue' items contain extra, non-standard properties",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `ScoreScale.scoreScaleValue` schema defines objects with two extra fields, `value` and `description`, that are not part of the official specification.\n\n**Summary:** \nThe local `ScoreScale.scoreScaleValue` schema defines objects with two extra fields, `value` and `description`, that are not part of the official specification.\n\n**Steps to Reproduce:**\n\n1. Examine the `ScoreScale` schema in the local specification, specifically the `scoreScaleValue` array property.\n2. Observe that the items in the array are objects with properties: `itemValueLHS`, `itemValueRHS`, `value`, and `description`.\n3. Examine the `ScoreScaleValueDType` schema in the upstream `oneroster.gradebook.upstream.json` specification, which is the type for items in the `scoreScaleValue` array.\n4. Observe that this upstream schema only defines `itemValueLHS` and `itemValueRHS`.\n\n**Expected:** \nThe objects within the `scoreScaleValue` array should only contain the fields `itemValueLHS` and `itemValueRHS`, as defined in the upstream `ScoreScaleValueDType`. The extra `value` and `description` fields should be removed to comply with the standard.\n\nThe upstream `ScoreScaleValueDType` is defined as:\n\n```json\n\"ScoreScaleValueDType\": {\n  \"description\": \"...\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"itemValueLHS\": { ... },\n    \"itemValueRHS\": { ... }\n  },\n  \"required\": [\"itemValueLHS\", \"itemValueRHS\"],\n  \"additionalProperties\": false\n}\n```\n\nThe `additionalProperties: false` flag in the upstream schema (inferred from the specification model) means that no extra properties are allowed.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Adding non-standard fields to a defined object is a schema violation. While less severe than missing required fields, it can still cause issues with strictly-validating clients. If these extra fields are needed, they should be placed inside a `metadata` extension object, which is the correct mechanism for proprietary extensions according to the OneRoster specification (HTML, Section 8.1.2).",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:32:33.782Z",
    "updatedAt": "2025-07-02T00:12:09.172Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-314/schema-mismatch-scorescalevalue-items-contain-extra-non-standard"
  },
  {
    "id": "b92f76b6-4a38-43d1-80cd-91635ff6e38c",
    "identifier": "BUG-313",
    "title": "Schema Mismatch: 'ScoreScale.course' field is incomplete",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `course` object within the `ScoreScale` schema in the local spec, when present, only defines and requires the `sourcedId` field.\n\n**Summary:** \nThe `course` object within the `ScoreScale` schema in the local spec, when present, only defines and requires the `sourcedId` field.\n\n**Steps to Reproduce:**\n\n1. Examine the `ScoreScale` schema in the local specification.\n2. Observe the definition for the optional `course` property: `type: ['object', 'null']`, `properties: { sourcedId: { type: string } }`, `required: ['sourcedId']`.\n3. Examine the upstream `oneroster.gradebook.upstream.json` specification.\n4. Observe that the `ScoreScaleDType.course` property references `CourseGUIDRefDType`.\n5. Examine the `CourseGUIDRefDType` definition, which requires three properties if the object is present: `href`, `sourcedId`, and `type`.\n\n**Expected:** \nIf the optional `course` object is included, it must conform to the upstream `CourseGUIDRefDType` schema, which requires three fields: `href` (string, uri), `sourcedId` (string), and `type` (string, enum with value 'course').\n\nThe upstream `CourseGUIDRefDType` definition is:\n\n```json\n\"CourseGUIDRefDType\": {\n  \"description\": \"...\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"href\": { ... },\n    \"sourcedId\": { ... },\n    \"type\": {\n      \"description\": \"...\",\n      \"type\": \"string\",\n      \"enum\": [\"course\"]\n    }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"],\n  \"additionalProperties\": false\n}\n```\n\nThe local implementation is missing the `href` and `type` fields.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema violation. Although the `course` field is optional on the `ScoreScale` object, if a client sends it or receives it, it must be in the correct format. Our implementation defines an invalid structure for this object, which will cause data validation failures and break client integrations.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:29:55.190Z",
    "updatedAt": "2025-07-02T17:28:42.297Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-313/schema-mismatch-scorescalecourse-field-is-incomplete"
  },
  {
    "id": "5f1f3e3e-c9b3-48e5-afd8-5c4477907ff7",
    "identifier": "BUG-312",
    "title": "Schema Mismatch: 'ScoreScale.class' field is incomplete and missing required fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `class` object within the `ScoreScale` schema in the local spec only defines and requires the `sourcedId` field.\n\n**Summary:** \nThe `class` object within the `ScoreScale` schema in the local spec only defines and requires the `sourcedId` field.\n\n**Steps to Reproduce:**\n\n1. Examine the `ScoreScale` schema in the local specification.\n2. Observe the definition for the `class` property: `type: object`, `properties: { sourcedId: { type: string } }`, `required: ['sourcedId']`.\n3. Examine the upstream `oneroster.gradebook.upstream.json` specification.\n4. Observe that the `ScoreScaleDType.class` property references `ClassGUIDRefDType`.\n5. Examine the `ClassGUIDRefDType` definition, which has three required properties: `href`, `sourcedId`, and `type`.\n\n**Expected:** \nThe `class` object should conform to the upstream `ClassGUIDRefDType` schema, which requires three fields: `href` (string, uri), `sourcedId` (string), and `type` (string, enum with value 'class').\n\nThe upstream `ClassGUIDRefDType` definition is:\n\n```json\n\"ClassGUIDRefDType\": {\n  \"description\": \"...\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"href\": { ... },\n    \"sourcedId\": { ... },\n    \"type\": {\n      \"description\": \"...\",\n      \"type\": \"string\",\n      \"enum\": [\"class\"]\n    }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"],\n  \"additionalProperties\": false\n}\n```\n\nThe local implementation is missing the `href` and `type` fields, and they are not marked as required.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema violation. The `class` field is a required field on the `ScoreScale` object itself. By providing an incomplete and non-conformant object for this field, our API will produce invalid `ScoreScale` objects that will break any client expecting the official OneRoster format. The `href` and `type` fields are essential for identifying the linked resource.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:28:47.255Z",
    "updatedAt": "2025-07-03T18:02:57.394Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-312/schema-mismatch-scorescaleclass-field-is-incomplete-and-missing"
  },
  {
    "id": "bac2d7ec-c1ee-4bed-8c2c-0f53ea235197",
    "identifier": "BUG-311",
    "title": "PUT /scoreScales/{sourcedId} incorrectly returns a response body on success",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a response body for a successful `PUT` request, which returns the `scoreScale` object.\n\n**Summary:** \nThe local specification defines a response body for a successful `PUT` request, which returns the `scoreScale` object.\n\n**Steps to Reproduce:**\n\n1. Review the `responses` section for `PUT /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}` in the local spec.\n2. Observe that the `'200'` success response defines a content body containing the created/updated `scoreScale` object.\n3. Review the `responses` section for the same operation in the upstream `oneroster.gradebook.upstream.json`.\n4. Observe that the `'201'` success response has no defined schema, meaning no response body should be returned.\n\n**Expected:** \nA successful `PUT` (create) operation for this endpoint should return a `201 Created` status code with no response body, as specified by the upstream standard.\n\nUpstream `oneroster.gradebook.upstream.json` for `put /scoreScales/{sourcedId}`:\n\n```json\n\"responses\": {\n  \"201\": {\n    \"description\": \"The object has been successfully stored in the Service Provider repository.\"\n  }\n}\n```\n\nNote the absence of a `schema` key for the 201 response.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Returning an unnecessary response body increases payload size and deviates from the API contract. Clients built against the official spec will not expect a body and may fail to parse the response correctly. The local implementation should be changed to return an empty body on success.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:27:32.203Z",
    "updatedAt": "2025-07-02T14:43:20.537Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-311/put-scorescalessourcedid-incorrectly-returns-a-response-body-on"
  },
  {
    "id": "29ae353d-1ad8-4a49-868b-a7dc407b4e67",
    "identifier": "BUG-310",
    "title": "PUT /scoreScales/{sourcedId} returns incorrect success status code",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that a successful `PUT` request returns a `200 OK` status code.\n\n**Summary:** \nThe local specification indicates that a successful `PUT` request returns a `200 OK` status code.\n\n**Steps to Reproduce:**\n\n1. Review the `responses` section for `PUT /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}` in the local spec.\n2. Observe the success response code is `'200'`.\n3. Review the `responses` section for the same operation in the upstream `oneroster.gradebook.upstream.json`.\n4. Observe the success response code is `'201'`.\n\nExample curl command to create a resource:\n\n```bash\ncurl -X PUT 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/new-sourced-id' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\"scoreScale\": {\"status\": \"active\", \"title\": \"New Scale\", \"type\": \"letter\", \"class\": {\"sourcedId\": \"class-id-123\"}, \"scoreScaleValue\": [{\"itemValueLHS\": \"90\", \"itemValueRHS\": \"A\"}]}}'\n```\n\nThis request should receive a `201 Created` response, not `200 OK`.\n\n**Expected:** \nThe operation should return a `201 Created` status code upon successful creation of a new `scoreScale` resource, as defined by the upstream specification and standard REST practices for creation via PUT.\n\nUpstream `oneroster.gradebook.upstream.json` for `put /scoreScales/{sourcedId}`:\n\n```json\n\"responses\": {\n  \"201\": {\n    \"description\": \"The object has been successfully stored in the Service Provider repository.\"\n  },\n...\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Using the wrong success status code violates the HTTP specification and the API contract. A `201` is the correct response for successfully creating a resource. A `200` typically indicates a successful update. This bug is a direct consequence of the behavioral mismatch where the operation is misinterpreted as an update instead of a create.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:26:12.378Z",
    "updatedAt": "2025-07-03T05:34:24.389Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-310/put-scorescalessourcedid-returns-incorrect-success-status-code"
  },
  {
    "id": "ad188fd7-11d4-4ba2-9b0c-7ba49df19aa4",
    "identifier": "BUG-309",
    "title": "PUT /scoreScales/{sourcedId} has mismatched behavior (Update vs. Create)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification describes the `PUT` method as an operation to *update* an existing `scoreScale`.\n\n**Summary:** \nThe local specification describes the `PUT` method as an operation to *update* an existing `scoreScale`.\n\n**Steps to Reproduce:**\n\n1. Review the `description` for `PUT /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}` in the local spec. It states: \"To update an existing scoreScale...\".\n2. Review the `description` for the same operation in the upstream `oneroster.gradebook.upstream.json`. It states: \"To create a new scoreScale...\".\n3. Review the upstream HTML documentation in section `4.9.4 \"putScoreScale\" Operation`, which also states: \"To create a new scoreScale. The associated sourcedId for this new record is supplied by the requesting system.\"\n\n**Expected:** \nThe `PUT` method for this endpoint should be for *creating* a new `scoreScale` where the client provides the `sourcedId`. Both the upstream JSON and HTML specifications are explicit about this behavior. This is a critical semantic difference that changes the fundamental behavior of the endpoint from an update to a create operation.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a major functional deviation. An idempotent PUT for creation is a standard REST pattern, but our local spec misrepresents it as an update operation. This will cause incorrect client implementations and unpredictable server behavior. The success status code mismatch (Bug #5) further confirms this discrepancy. The implementation logic must be corrected to handle client-provided IDs for resource creation, not updates.",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 2,
    "createdAt": "2025-06-30T23:24:55.886Z",
    "updatedAt": "2025-07-03T18:41:44.778Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-309/put-scorescalessourcedid-has-mismatched-behavior-update-vs-create"
  },
  {
    "id": "929c8cdc-c01c-41bc-932d-55dfb173771e",
    "identifier": "BUG-308",
    "title": "PUT /scoreScales/{sourcedId} has incorrect operationId",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the PUT operation on this route uses `operationId: updateScoreScale`.\n\n**Summary:** \nThe local specification for the PUT operation on this route uses `operationId: updateScoreScale`.\n\n**Steps to Reproduce:**\n\n1. Review the local OpenAPI specification for `PUT /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}`.\n2. Observe the `operationId` is `updateScoreScale`.\n3. Review the upstream `oneroster.gradebook.upstream.json` for the same route and method.\n4. Observe the `operationId` is `putScoreScale`.\n\n**Expected:** \nThe `operationId` should be `putScoreScale` to match the official upstream specification. `operationId` is often used for code generation and tooling, and this inconsistency can cause integration issues.\n\nUpstream `oneroster.gradebook.upstream.json` for `put /scoreScales/{sourcedId}`:\n\n```json\n\"operationId\": \"putScoreScale\"\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While this seems minor, `operationId` discrepancies can break automated SDK generation and monitoring tools that rely on this field for unique identification of an operation. It also reflects a misunderstanding of the operation's intent, as the upstream spec defines this PUT for creation, not updates.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:23:39.209Z",
    "updatedAt": "2025-07-02T00:08:51.299Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-308/put-scorescalessourcedid-has-incorrect-operationid"
  },
  {
    "id": "cd80ef7e-ec8a-4ca9-830d-259d05e42844",
    "identifier": "BUG-307",
    "title": "All operations for /scoreScales/{sourcedId} are missing required OAuth2 security scopes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for all methods on the `/scoreScales/{sourcedId}` route declares a security requirement for `OAuth2` but provides an empty array `[]` for the scopes.\n\n**Summary:** \nThe local specification for all methods on the `/scoreScales/{sourcedId}` route declares a security requirement for `OAuth2` but provides an empty array `[]` for the scopes.\n\n**Steps to Reproduce:**\n\n1. Review the security definition for any operation (`GET`, `PUT`, `DELETE`) under the `/ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}` path in the local specification.\n2. Observe that the security requirement is defined as `security: - OAuth2: []`. The scope array is empty.\n3. Review the corresponding operations in the upstream `oneroster.gradebook.upstream.json` specification.\n4. Observe that each operation has specific, non-empty scopes defined.\n\nA correctly scoped request should be declared in the spec, for example, for the GET request:\n\n```\nsecurity:\n  - OAuth2CC:\n    - https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly\n    - https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook-core.readonly\n```\n\n**Expected:** \nEach operation should declare the specific OAuth2 scopes required for authorization, as mandated by the upstream specification. This ensures that clients request tokens with the correct permissions and that gateways or the application can enforce granular access control.\n\nThe upstream JSON spec requires the following scopes:\n\n* **GET:** `[\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly\", \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook-core.readonly\"]`\n* **PUT:** `[\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.createput\"]`\n* **DELETE:** `[\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.delete\"]`\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Defining an empty scope array is a major security risk. It implies that any valid bearer token is sufficient to access the endpoint, regardless of the granular permissions it holds. This could lead to authorization bypass vulnerabilities if the backend relies on the gateway to validate scopes defined in the spec. The local spec must be updated to reflect the precise scopes for each operation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:22:44.969Z",
    "updatedAt": "2025-07-03T12:50:47.214Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-307/all-operations-for-scorescalessourcedid-are-missing-required-oauth2"
  },
  {
    "id": "f318168b-cd8e-44b7-81d5-43f2fddb675c",
    "identifier": "BUG-306",
    "title": "GET /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId} is missing the 'fields' query parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local OpenAPI specification for `GET /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}` does not define the `fields` query parameter. It only lists the `sourcedId` path parameter.\n\n**Summary:** \nThe local OpenAPI specification for `GET /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}` does not define the `fields` query parameter. It only lists the `sourcedId` path parameter.\n\n**Steps to Reproduce:**\n\n1. Review the local OpenAPI specification for the route GET /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.\n2. Observe that the only defined parameter is the 'sourcedId' path parameter.\n3. Review the upstream oneroster.gradebook.upstream.json specification for the same route.\n4. Observe that the route supports both a 'sourcedId' path parameter and a 'fields' query parameter.\n\nExample of expected usage according to upstream spec:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/some-sourced-id?fields=sourcedId,status,title' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\nThe local specification does not account for the 'fields' parameter.\n\n**Expected:** \nThe endpoint should support the `fields` query parameter as defined in the official OneRoster specification. This allows clients to request a subset of fields in the response, reducing payload size.\n\nThe upstream JSON specification (`oneroster.gradebook.upstream.json`) for `GET /scoreScales/{sourcedId}` explicitly defines this parameter:\n\n```json\n{\n  \"name\": \"fields\",\n  \"in\": \"query\",\n  \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  },\n  \"collectionFormat\": \"csv\",\n  \"allowEmptyValue\": false\n}\n```\n\nThe upstream HTML documentation (Section 4.9.2, \"getScoreScale\" Operation Notes) also confirms its existence.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Missing standard parameters like `fields` is a significant deviation. It breaks client expectations and prevents a standard feature of the OneRoster API from being used. Clients built against the official specification will find this feature non-functional in our implementation. This should be added to the local spec to match the upstream standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:21:49.832Z",
    "updatedAt": "2025-07-03T19:25:53.526Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-306/get-imsonerostergradebookv1p2scorescalessourcedid-is-missing-the"
  },
  {
    "id": "0c915d94-29d6-4cb2-bc50-587966a58389",
    "identifier": "BUG-305",
    "title": "Undocumented maximum value for 'limit' parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `limit` query parameter in the local specification has a `maximum` value of 3000 defined in its schema.\n\n**Summary:** \nThe `limit` query parameter in the local specification has a `maximum` value of 3000 defined in its schema.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the definition of the `limit` parameter in the upstream specification.\n2. Note that it has a `minimum` and a `default`, but no `maximum`.\n3. Review the local specification, which adds a `maximum` of 3000.\n\ncURL command (attempting to exceed the undocumented limit):\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/?limit=3001' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification for the `limit` parameter on the `getAllResults` operation (`paths./results.get.parameters`) defines a `minimum` of 1 and a `default` of 100, but does not specify a `maximum` value. Adding a `maximum` value is a server-specific constraint that is not part of the official specification. This should be documented as a proprietary constraint, not as part of the standard API definition.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/\nLocal Spec: ims/oneroster/gradebook/v1p2/results/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Imposing an undocumented limit is a deviation from the spec. While it's a common and reasonable practice for performance reasons, a client built strictly against the official specification would not be aware of this limitation and might make requests that the server would reject. This constraint should be documented separately as an implementation-specific detail.",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T23:20:28.835Z",
    "updatedAt": "2025-07-03T18:05:27.994Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-305/undocumented-maximum-value-for-limit-parameter"
  },
  {
    "id": "b146c1e8-a411-4e3b-aa4b-d8866d5ac29b",
    "identifier": "BUG-304",
    "title": "Path mismatch due to trailing slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the path as `/ims/oneroster/gradebook/v1p2/results/`, which includes a trailing slash.\n\n**Summary:** \nThe local specification defines the path as `/ims/oneroster/gradebook/v1p2/results/`, which includes a trailing slash.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the path defined in the local spec: `/ims/oneroster/gradebook/v1p2/results/`.\n2. Examine the path defined in the upstream spec. The `basePath` is `/ims/oneroster/gradebook/v1p2` and the endpoint path is `/results`.\n3. Note the trailing slash in the local spec's path.\n\ncURL command:\n\n```bash\n# Request to the locally specified path\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/' \\\n-H 'Authorization: Bearer $TOKEN'\n\n# Request to the upstream specified path\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification (`oneroster.gradebook.upstream.json`) defines the path for this resource as `/results` relative to the `basePath` of `/ims/oneroster/gradebook/v1p2`. The combined, canonical path is `/ims/oneroster/gradebook/v1p2/results`, without a trailing slash. While many web frameworks treat paths with and without a trailing slash as equivalent, they are technically different URLs and a strict implementation should follow the specification exactly.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/\nLocal Spec: ims/oneroster/gradebook/v1p2/results/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a minor deviation, but it represents a lack of precision in implementing the specification. A strict server or client might not correctly resolve the route if it does not handle the trailing slash. The local spec should be updated to match the upstream path exactly.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:19:25.167Z",
    "updatedAt": "2025-07-02T18:08:53.526Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-304/path-mismatch-due-to-trailing-slash"
  },
  {
    "id": "88e3e01c-5ba9-49cc-bd4f-84112a84403b",
    "identifier": "BUG-303",
    "title": "Error response schema is non-compliant and contains proprietary fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines custom, restrictive error schemas for each HTTP status code. For example, a 400 Bad Request is hardcoded to have an `imsx_codeMinorFieldValue` of `invaliddata`. The schemas also include a proprietary field `imsx_error_details`.\n\n**Summary:** \nThe local specification defines custom, restrictive error schemas for each HTTP status code. For example, a 400 Bad Request is hardcoded to have an `imsx_codeMinorFieldValue` of `invaliddata`. The schemas also include a proprietary field `imsx_error_details`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Trigger an error, for example by providing an invalid filter parameter to `GET /results/`.\n2. Observe the error response body.\n3. Compare its structure to the `imsx_StatusInfoDType` defined in the upstream spec.\n4. Note the presence of the non-standard `imsx_error_details` field.\n5. Note the restrictive `imsx_codeMinorFieldValue`.\n\ncURL command:\n\n```bash\ncurl -i -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/?filter=invalidfield='true'\" \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nAll error responses should conform to the generic `imsx_StatusInfoDType` schema defined in the upstream specification. This schema allows for a variety of `imsx_codeMinorFieldValue` values depending on the specific error. For a 400 error, the upstream spec allows for `invalid_filter_field` or `invalid_selection_field`, which are not covered by the local spec's hardcoded `invaliddata`.\n\nFurthermore, the `imsx_StatusInfoDType` schema does not contain an `imsx_error_details` field. This is an undocumented proprietary extension.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/\nLocal Spec: ims/oneroster/gradebook/v1p2/results/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** The local error schemas are both too restrictive (in the case of `imsx_codeMinorFieldValue`) and improperly extended (with `imsx_error_details`). This will break error handling for compliant clients who expect the standard `imsx_StatusInfoDType` structure and a wider range of minor error codes as documented in Appendix B of the upstream HTML specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:17:42.300Z",
    "updatedAt": "2025-07-03T18:45:36.186Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-303/error-response-schema-is-non-compliant-and-contains-proprietary-fields"
  },
  {
    "id": "d159ee6b-2e3e-49af-8fbd-ef1757ce2f90",
    "identifier": "BUG-302",
    "title": "Missing OAuth2 Scopes in Security Requirement",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification applies the `OAuth2` security scheme with an empty scope array: `security: - OAuth2: []`.\n\n**Summary:** \nThe local specification applies the `OAuth2` security scheme with an empty scope array: `security: - OAuth2: []`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the security requirements for the `GET /results` endpoint in the local spec.\n2. Note that it requires `OAuth2` but with an empty scope array `[]`.\n3. Compare with the upstream spec which requires specific scopes.\n\ncURL command:\nThis is a specification issue, not directly reproducible with a simple cURL command without knowledge of the server's authorization logic. A client could present a token with an invalid scope, and based on the local spec, it might be accepted.\n\n**Expected:** \nThe upstream specification (`paths./results.get.security`) requires the `OAuth2CC` scheme with at least one of two specific scopes.\n\n```json\n\"security\": [\n    {\n        \"OAuth2CC\": [\n            \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly\",\n            \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook-core.readonly\"\n        ]\n    }\n]\n```\n\nThe local specification fails to document these mandatory scopes, implying that any valid token is sufficient, regardless of its granted scopes. This is a significant security and compliance deviation.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/\nLocal Spec: ims/oneroster/gradebook/v1p2/results/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** By omitting the required scopes from the specification, the implementation fails to communicate the correct authorization requirements to clients. If the backend does not enforce these scopes, it could lead to an authorization bypass where a token with insufficient permissions could access data. If the backend does enforce them, the documentation is incorrect and will cause client-side confusion and implementation errors.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:16:30.018Z",
    "updatedAt": "2025-07-03T12:50:56.105Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-302/missing-oauth2-scopes-in-security-requirement"
  },
  {
    "id": "0301f908-6e7e-412e-83e0-bb471b8d9e47",
    "identifier": "BUG-301",
    "title": "Intermittent 502 Server Crash on Empty Required Fields in Caliper API",
    "description": "**Reporter:** Ameer Alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** Caliper API\n**Bug Type:** The API intermittently returns a 502 Bad Gateway error (server crash) when receiving a POST request with empty strings for required fields sensor and sendTime. On the 3rd attempt of sending 50 parallel requests, request #26 triggered: {\"status\":\"error\",\"code\":502,\"message\":\"Application failed to respond\",\"request_id\":\"-JJIM0zsTQCnvVRaueLfZA\"}\n\n**Summary:** \nThe API intermittently returns a 502 Bad Gateway error (server crash) when receiving a POST request with empty strings for required fields sensor and sendTime. On the 3rd attempt of sending 50 parallel requests, request #26 triggered: {\"status\":\"error\",\"code\":502,\"message\":\"Application failed to respond\",\"request_id\":\"-JJIM0zsTQCnvVRaueLfZA\"}\n\n**Steps to Reproduce:**\n\n1. Obtain valid authentication credentials\n2. Send multiple parallel POST requests to /caliper/event/validate with payload:\n\n   ```json\n   {\n     \"sensor\": \"\",\n     \"sendTime\": \"\",\n     \"dataVersion\": \"http://purl.imsglobal.org/ctx/caliper/v1p2\",\n     \"data\": []\n   }\n   ```\n3. Bug triggers intermittently (typically within 50-150 requests)\n\n**Expected:** \nAPI should consistently return HTTP 400 Bad Request with a validation error message indicating that sensor and sendTime fields are required and cannot be empty\n\n**Environment:** - **API Endpoint**: `https://caliper.alpha-1edtech.com`\n\n* **Affected Endpoints**: `/caliper/event`, `/caliper/event/validate`\n* **Discovery Method**: Automated generative fuzzing.\n* **Time to Discovery**: Approximately 14 minutes.\n  **Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T23:00:50.565Z",
    "updatedAt": "2025-07-01T23:30:58.090Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-301/intermittent-502-server-crash-on-empty-required-fields-in-caliper-api"
  },
  {
    "id": "5bb00531-bad9-44b7-9184-a29cbb4a528c",
    "identifier": "BUG-300",
    "title": "PUT /powerpath/updateStudentQuestionResponse returns 500 HTML error for invalid data",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** When the underlying resource for a lesson has an invalid QTI URL in its metadata, the API fails with a `500 Internal Server Error` and returns an HTML page containing a stack trace. The error message is `Error: Invalid QTI test URL: ...`.\n\n**Summary:** \nWhen the underlying resource for a lesson has an invalid QTI URL in its metadata, the API fails with a `500 Internal Server Error` and returns an HTML page containing a stack trace. The error message is `Error: Invalid QTI test URL: ...`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token.\n2. Create the necessary OneRoster entities: a course, a resource with an invalid `metadata.url` (e.g., `https://example.com/launch`), and a student. Create a lesson attempt for this setup.\n3. Send a PUT request to `/powerpath/updateStudentQuestionResponse` with the IDs from the previous steps.\n4. Observe the server's response.\n\ncURL command:\n\n```bash\ncurl --location --request PUT 'https://api.staging.alpha-1edtech.com/powerpath/updateStudentQuestionResponse' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"student\": \"YOUR_STUDENT_ID\",\n    \"lesson\": \"YOUR_LESSON_ID\",\n    \"question\": \"any-question-id\",\n    \"response\": \"some-answer\"\n}'\n```\n\n**Expected:** \nThis is a data validation or failed dependency issue, not a server crash. The API should detect that the linked QTI URL is invalid and return an appropriate client-side error code, such as `422 Unprocessable Entity` or `424 Failed Dependency`, along with a structured JSON error body. Returning a 500 error with a stack trace is incorrect and insecure.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/powerpath/updateStudentQuestionResponse](https://api.staging.alpha-1edtech.com/powerpath/updateStudentQuestionResponse)\nAs observed in logs from 2025/06/30 at 17:32:33.\n**Additional Notes:** This is another endpoint exhibiting the flawed error-handling pattern of returning 500 HTML errors for predictable issues. This makes the API fragile and difficult to integrate with robustly.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:52:23.021Z",
    "updatedAt": "2025-07-03T16:53:51.089Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-300/put-powerpathupdatestudentquestionresponse-returns-500-html-error-for"
  },
  {
    "id": "8849c1dc-7333-4e98-aa7b-513db95b0f2a",
    "identifier": "BUG-299",
    "title": "POST /powerpath/createNewAttempt returns 500 HTML error for invalid lesson ID",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** The API responds with a `500 Internal Server Error` and an HTML body containing a full stack trace. The error message within the HTML correctly states `Error: Lesson invalid-lesson-id not found`.\n\n**Summary:** \nThe API responds with a `500 Internal Server Error` and an HTML body containing a full stack trace. The error message within the HTML correctly states `Error: Lesson invalid-lesson-id not found`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token for the PowerPath API.\n2. Send a POST request to `/powerpath/createNewAttempt` with a valid student ID but a non-existent `lesson` ID.\n3. Observe the server's response.\n\ncURL command:\n\n```bash\ncurl --location 'https://api.staging.alpha-1edtech.com/powerpath/createNewAttempt' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"student\": \"a-valid-student-id\",\n    \"lesson\": \"invalid-lesson-id\"\n}'\n```\n\n**Expected:** \nThis is a predictable client error (providing a non-existent resource ID). The API should handle this gracefully by returning a `404 Not Found` status code with a structured JSON error body (like the `imsxError` format used elsewhere) that explains the issue. It should never return a 500 error or a stack trace for client-side errors.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/powerpath/createNewAttempt](https://api.staging.alpha-1edtech.com/powerpath/createNewAttempt)\nAs observed in logs from 2025/06/30 at 17:32:32.\n**Additional Notes:** This is a new instance of a previously reported error-handling pattern bug, but on a different endpoint (`createNewAttempt`). Exposing stack traces is a security risk (CWE-209), and improper use of HTTP status codes violates REST principles, making client-side error handling difficult.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:50:47.426Z",
    "updatedAt": "2025-07-03T16:53:46.830Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-299/post-powerpathcreatenewattempt-returns-500-html-error-for-invalid"
  },
  {
    "id": "ea3e1e6c-68a5-4235-8fe4-3d058790f850",
    "identifier": "BUG-298",
    "title": "POST /ims/oneroster/rostering/v1p2/courses/component-resources returns incorrect response schema and status code",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API responds with a `201 Created` status code and a `sourcedIdPairs` object in the body, which is inconsistent with the expected full resource representation.\n\n**Summary:** \nThe API responds with a `201 Created` status code and a `sourcedIdPairs` object in the body, which is inconsistent with the expected full resource representation.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token.\n2. Create a parent course, a resource, and a course component.\n3. Send a POST request to `/ims/oneroster/rostering/v1p2/courses/component-resources` to link the resource to the component.\n4. Observe the HTTP status code and response body.\n\ncURL command:\n\n```bash\n# Prerequisite: A valid courseComponentId and resourceId must exist.\ncurl --location 'https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/component-resources' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"componentResource\": {\n        \"sourcedId\": \"test-comp-res-bug-report\",\n        \"courseComponent\": { \"sourcedId\": \"YOUR_COMPONENT_ID\" },\n        \"resource\": { \"sourcedId\": \"YOUR_RESOURCE_ID\" }\n    }\n}'\n```\n\n**Expected:** \nThe API should return a `200 OK` status code with a response body containing the full `componentResource` object that was just created. This ensures clients can validate the created resource without a follow-up request.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/component-resources](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/component-resources)\nAs observed in logs from 2025/06/30 at 17:32:32.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:48:38.226Z",
    "updatedAt": "2025-07-03T12:36:43.985Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-298/post-imsonerosterrosteringv1p2coursescomponent-resources-returns"
  },
  {
    "id": "bd54dce6-476e-4f06-9aae-51f4c2baef2e",
    "identifier": "BUG-297",
    "title": "POST /ims/oneroster/rostering/v1p2/courses/components returns incorrect response body schema and status code",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API responds with a `201 Created` status code and a body containing a `sourcedIdPairs` object. This is another instance of the incorrect response schema pattern seen across other OneRoster creation endpoints.\n\n**Summary:** \nThe API responds with a `201 Created` status code and a body containing a `sourcedIdPairs` object. This is another instance of the incorrect response schema pattern seen across other OneRoster creation endpoints.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token for the OneRoster API.\n2. Create a course to serve as the parent for the component.\n3. Send a POST request to `/ims/oneroster/rostering/v1p2/courses/components` with a valid payload, referencing the created course.\n4. Observe the HTTP status code and response body.\n\ncURL command:\n\n```bash\n# First, create a course and get its ID (not shown for brevity, assume COURSE_ID is known)\ncurl --location 'https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/components' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"courseComponent\": {\n        \"sourcedId\": \"test-component-bug-report\",\n        \"title\": \"Bug Report Test Component\",\n        \"course\": { \"sourcedId\": \"YOUR_COURSE_ID\" }\n    }\n}'\n```\n\n**Expected:** \nThe endpoint should return a `200 OK` status with a response body containing the full `courseComponent` object that was created. This allows the client to verify the resource state post-creation.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/components](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/components)\nAs observed in logs from 2025/06/30 at 17:32:31.\n**Additional Notes:** This consistent violation across multiple endpoints points to a systemic issue in the API's implementation of the POST verb.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:46:16.461Z",
    "updatedAt": "2025-07-03T12:36:36.240Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-297/post-imsonerosterrosteringv1p2coursescomponents-returns-incorrect"
  },
  {
    "id": "38676885-0361-4199-a0e1-258d5e6db261",
    "identifier": "BUG-296",
    "title": "POST /ims/oneroster/resources/v1p2/resources/ returns incorrect response body schema and status code",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API responds with a `201 Created` status code and a body containing a `sourcedIdPairs` object: `{\"sourcedIdPairs\":{\"suppliedSourcedId\":\"...\",\"allocatedSourcedId\":\"...\"}}`. This is the same incorrect behavior observed in the `/users` and `/courses` creation endpoints.\n\n**Summary:** \nThe API responds with a `201 Created` status code and a body containing a `sourcedIdPairs` object: `{\"sourcedIdPairs\":{\"suppliedSourcedId\":\"...\",\"allocatedSourcedId\":\"...\"}}`. This is the same incorrect behavior observed in the `/users` and `/courses` creation endpoints.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token for the OneRoster API.\n2. Send a POST request to `/ims/oneroster/resources/v1p2/resources/` with a valid payload to create a new resource.\n3. Observe the HTTP status code and response body.\n\ncURL command:\n\n```bash\ncurl --location 'https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"resource\": {\n        \"sourcedId\": \"test-resource-bug-report\",\n        \"status\": \"active\",\n        \"title\": \"Bug Report Test Resource\",\n        \"vendorResourceId\": \"vendor-res-123\"\n    }\n}'\n```\n\n**Expected:** \nAccording to standard RESTful design and the implied contract from the SDKs used in the test suite, the endpoint should return a `200 OK` status with a response body containing the full `resource` object that was created. This allows the client to confirm all properties of the newly created resource without making a subsequent GET request.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/](https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/)\nAs observed in logs from 2025/06/30 at 17:32:31.\n**Additional Notes:** This bug is a pattern of inconsistent and non-compliant behavior across multiple OneRoster creation endpoints. It breaks spec-compliant clients and requires custom workarounds for each affected endpoint, increasing integration complexity. The test suite's lifecycle helper confirms this pattern by implementing another workaround.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:43:33.806Z",
    "updatedAt": "2025-07-03T12:36:31.443Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-296/post-imsonerosterresourcesv1p2resources-returns-incorrect-response"
  },
  {
    "id": "4c43db60-0704-4b22-a0b7-14166af67284",
    "identifier": "BUG-295",
    "title": "Undocumented 'search' Query Parameter on GET /results/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /ims/oneroster/gradebook/v1p2/results/` includes a query parameter named `search`.\n\n**Summary:** \nThe local specification for `GET /ims/oneroster/gradebook/v1p2/results/` includes a query parameter named `search`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the parameters for the `getAllResults` operation in the upstream JSON and HTML specifications.\n2. Note that `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields` are the only documented parameters.\n3. Compare with the local spec, which includes an additional `search` parameter.\n\ncURL command (using the undocumented parameter):\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/?search=somequery' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe `search` parameter is not part of the official OneRoster v1.2 specification for the `getAllResults` operation. Both the upstream JSON (`paths./results.get.parameters`) and HTML (Section 4.7.1 \"getAllResults\" Operation) specifications list only `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields` as valid query parameters. The `search` parameter is a non-standard, proprietary extension.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/\nLocal Spec: ims/oneroster/gradebook/v1p2/results/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Adding undocumented parameters deviates from the standard and can cause confusion for developers building clients against the official specification. While it might be intended as an enhancement, it is not compliant. Any extension to the specification should be clearly documented as such, but this parameter is presented as if it were standard.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:43:32.950Z",
    "updatedAt": "2025-07-03T06:01:15.026Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-295/undocumented-search-query-parameter-on-get-results"
  },
  {
    "id": "190e8a62-19fe-4a5e-b4bb-e5a047776fd3",
    "identifier": "BUG-294",
    "title": "Incorrect Response Schema for Bulk Creation in POST /results/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `201 Created` response schema for the local `POST /.../results/` endpoint defines the `sourcedIdPairs` field as a single object: `{ \"suppliedSourcedId\": \"string\", \"allocatedSourcedId\": \"string\" }`.\n\n**Summary:** \nThe `201 Created` response schema for the local `POST /.../results/` endpoint defines the `sourcedIdPairs` field as a single object: `{ \"suppliedSourcedId\": \"string\", \"allocatedSourcedId\": \"string\" }`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Send a (non-compliant) POST request to `/ims/oneroster/gradebook/v1p2/results/`.\n2. Observe the `201 Created` response body schema.\n3. The schema defines `sourcedIdPairs` as a single object, not an array of objects.\n\ncURL command (hypothetical):\n\n```bash\n# This endpoint is non-compliant, but if it were to follow bulk-creation patterns...\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\n    \"result\": { ... }\n}'\n```\n\n**Expected:** \nAll upstream bulk-creation `POST` endpoints (like `postResultsForLineItem`) must return a `GUIDPairSetDType`. This schema requires the `sourcedIdPairs` field to be an **array** of `GUIDPairDType` objects.\n\nFrom the upstream JSON (`definitions.GUIDPairSetDType`):\n\n```json\n\"properties\": {\n    \"sourcedIdPairs\": {\n        \"description\": \"...\",\n        \"type\": \"array\",\n        \"minItems\": 0,\n        \"items\": {\n            \"$ref\": \"#/definitions/GUIDPairDType\"\n        }\n    }\n}\n```\n\nThe local implementation incorrectly returns a single object instead of an array, which is incompatible with the specification's model for bulk creation responses.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/\nLocal Spec: ims/oneroster/gradebook/v1p2/results/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Even though the `POST /results/` endpoint itself is non-compliant, its response schema further violates the established patterns for bulk creation in the OneRoster specification. A client built to handle bulk creation would expect an array for `sourcedIdPairs` and would fail to parse the single object returned by this implementation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:36:24.909Z",
    "updatedAt": "2025-07-03T19:20:51.709Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-294/incorrect-response-schema-for-bulk-creation-in-post-results"
  },
  {
    "id": "62fdfec6-bfc1-4656-80fc-456b21df9a56",
    "identifier": "BUG-293",
    "title": "Incorrect Response Body for Pagination in GET /results/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns pagination information (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the 200 OK response body.\n\n**Summary:** \nThe local implementation returns pagination information (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the 200 OK response body.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to `/ims/oneroster/gradebook/v1p2/results/`.\n2. Observe the response body. It contains pagination metadata like `totalCount`.\n3. Observe the response headers. The `X-Total-Count` header specified by the upstream spec is missing.\n\ncURL command (showing headers with `-i`):\n\n```bash\ncurl -i -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification dictates a different mechanism for pagination metadata. The response body should only contain the `results` array (wrapped in a `ResultSetDType` object). The total number of available records must be returned in the `X-Total-Count` HTTP header.\n\nFrom the upstream JSON spec for `GET /results`:\n\n```json\n\"responses\": {\n    \"200\": {\n        \"schema\": { \"$ref\": \"#/definitions/ResultSetDType\" },\n        \"headers\": {\n            \"X-Total-Count\": {\n                \"description\": \"The total number of resources that are available to be returned\",\n                \"type\": \"integer\"\n            }\n        }\n    }\n}\n```\n\nThe local implementation's inclusion of pagination fields in the body and omission of the `X-Total-Count` header is a direct violation of the specification.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/\nLocal Spec: ims/oneroster/gradebook/v1p2/results/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This deviation breaks any standard client expecting to find the total record count in the `X-Total-Count` header, as specified by the OneRoster standard for paginated endpoints. The extra fields in the response body are also non-standard and will be ignored or cause parsing errors for compliant clients.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:34:44.613Z",
    "updatedAt": "2025-07-03T13:02:58.416Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-293/incorrect-response-body-for-pagination-in-get-results"
  },
  {
    "id": "206dff24-efc8-49c8-83ed-a3e411a7c027",
    "identifier": "BUG-292",
    "title": "Non-compliant POST /results/ endpoint for creating Results",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `POST /ims/oneroster/gradebook/v1p2/results/` endpoint to create a single result.\n\n**Summary:** \nThe local specification defines a `POST /ims/oneroster/gradebook/v1p2/results/` endpoint to create a single result.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the available paths in the upstream specification for `ResultsManagement`.\n2. Observe that there is no `POST` method defined for the top-level `/results` path.\n3. Compare this with the local specification which incorrectly defines `POST /ims/oneroster/gradebook/v1p2/results/`.\n\ncURL command (hypothetical, as the endpoint should not exist):\n\n```bash\n# This endpoint is non-compliant and should not exist.\n# Upstream specs define PUT /results/{sourcedId} for single creation with a client-supplied ID,\n# or POST endpoints on more specific paths (e.g., /lineItems/{id}/results) for bulk creation.\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\n    \"result\": {\n        \"status\": \"active\",\n        \"lineItem\": { \"sourcedId\": \"some-lineitem-id\" },\n        \"student\": { \"sourcedId\": \"some-student-id\" },\n        \"scoreStatus\": \"submitted\",\n        \"scoreDate\": \"2024-01-01\"\n    }\n}'\n```\n\n**Expected:** \nAccording to the upstream JSON and HTML specifications, there is no `POST` method on the `/results` path.\n\nResult creation is handled in two ways by the official spec:\n\n1. **Single Result Creation (client-supplied ID):** `PUT /results/{sourcedId}`. The client provides the `sourcedId` in the path and the result object in the body.\n2. **Bulk Result Creation (server-supplied ID):** `POST` on more specific paths, such as `POST /lineItems/{lineItemSourcedId}/results`. This takes an array of results and returns an array of ID mappings.\n\nThe local implementation of `POST /results/` is a non-standard, non-compliant operation that mixes concepts from both upstream creation methods incorrectly.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/\nLocal Spec: ims/oneroster/gradebook/v1p2/results/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical deviation. The local implementation has invented an endpoint that does not exist in the official specification. The upstream JSON spec for the `/results` path (`paths./results`) only defines a `get` method. The upstream HTML documentation (Section 4.7) for \"ResultsManagement\" only lists `getAllResults`, `getResult`, `deleteResult`, and `putResult`. There is no `postResult` or `createResult` operation at this path. This will lead to complete interoperability failure with any compliant client.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:32:35.229Z",
    "updatedAt": "2025-07-03T19:20:51.709Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-292/non-compliant-post-results-endpoint-for-creating-results"
  },
  {
    "id": "dff93b2f-18ca-40d7-87d5-85766fb4dc52",
    "identifier": "BUG-291",
    "title": "Error Response Schemas Incorrectly Mark Optional Fields as Required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's error response schemas (e.g., `NotFoundResponse`, `BadRequestResponse`, etc.) all list `imsx_description` and `imsx_CodeMinor` in their `required` array. For example, `NotFoundResponse`:\n`required: ['imsx_codeMajor', 'imsx_severity', 'imsx_description', 'imsx_CodeMinor']`\n\n**Summary:** \nThe local specification's error response schemas (e.g., `NotFoundResponse`, `BadRequestResponse`, etc.) all list `imsx_description` and `imsx_CodeMinor` in their `required` array. For example, `NotFoundResponse`:\n`required: ['imsx_codeMajor', 'imsx_severity', 'imsx_description', 'imsx_CodeMinor']`\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect any of the error response schemas in the local spec (e.g., `NotFoundResponse`).\n2. Examine the `required` array for that schema.\n3. Note that it includes `imsx_description` and `imsx_CodeMinor`.\n4. Compare this to the upstream `imsx_StatusInfoDType` definition, which serves as the model for all error responses.\n\n**Expected:** \nThe `imsx_description` and `imsx_CodeMinor` fields should be optional in the error response body. The only required fields are `imsx_codeMajor` and `imsx_severity`.\n\nThe upstream JSON specification for `imsx_StatusInfoDType` defines this correctly:\n`\"required\": [\"imsx_codeMajor\", \"imsx_severity\"]`\n\nThe upstream HTML documentation (Section 5.15, \"imsx_StatusInfo\" Class Description) also shows the multiplicity for `imsx_description` and `imsx_CodeMinor` as `[0..1]`, confirming they are optional.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/results/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This deviation forces the server to always provide a description and a minor code, even when they may not be applicable or available. It also misleads client developers into expecting these fields to always be present, which could lead to null pointer exceptions or other runtime errors if the server ever correctly omits them. This is a violation of the upstream data model for error handling.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:28:05.685Z",
    "updatedAt": "2025-07-03T18:45:27.351Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-291/error-response-schemas-incorrectly-mark-optional-fields-as-required"
  },
  {
    "id": "2dbcf771-40fd-4edf-898e-ea21414f46e9",
    "identifier": "BUG-290",
    "title": "Result Schema Boolean-like Fields Missing Enum Constraint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Result` schema defines the `inProgress`, `incomplete`, `late`, and `missing` properties as `type: string` with no other constraints. This would permit any string value.\n\n**Summary:** \nThe local `Result` schema defines the `inProgress`, `incomplete`, `late`, and `missing` properties as `type: string` with no other constraints. This would permit any string value.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the `Result` schema definition in the `components/schemas` section of the local spec.\n2. Find the `inProgress`, `incomplete`, `late`, and `missing` properties.\n3. Observe their type is simply `string`.\n4. Compare this with the `ResultDType` definition in the upstream spec.\n\n**Expected:** \nThese fields should be constrained to a string enum of `[\"true\", \"false\"]` to represent boolean states.\n\nThe upstream JSON specification for `ResultDType` defines these fields correctly. For example, `inProgress`:\n\n```json\n\"inProgress\": {\n  \"description\": \"...\",\n  \"type\": \"string\",\n  \"enum\": [\"true\", \"false\"]\n}\n```\n\nThis is repeated for `incomplete`, `late`, and `missing`. The local implementation fails to enforce this vocabulary.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/results/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical validation bug. Without the `enum` constraint, the API could accept or return arbitrary strings (e.g., \"True\", \"1\", \"yes\"), leading to ambiguity and breaking strict clients that expect only \"true\" or \"false\". This violates the data contract and introduces a high risk of interoperability failures.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:26:36.559Z",
    "updatedAt": "2025-07-03T18:44:05.157Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-290/result-schema-boolean-like-fields-missing-enum-constraint"
  },
  {
    "id": "971946d7-38a0-4948-92b1-dd570ece2f15",
    "identifier": "BUG-289",
    "title": "Incorrect Success Response for PUT /results/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification documents that a successful `PUT` request will return a `200 OK` status code with the created/updated `Result` object in the response body.\n\n**Summary:** \nThe local specification documents that a successful `PUT` request will return a `200 OK` status code with the created/updated `Result` object in the response body.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `responses` section for the `PUT` operation in the local specification.\n2. Note that the success response is a `200 OK` which includes the result object in the body.\n3. Compare this with the upstream specification's success response for the same operation.\n\nCurl command to demonstrate the discrepancy:\n\n```bash\n# This is what the local spec implies\n# EXPECTED (local): HTTP/1.1 200 OK, with JSON body\ncurl -i -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/{new_sourcedId}\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"result\": {...}}'\n\n# This is what should happen according to the upstream spec\n# EXPECTED (upstream): HTTP/1.1 201 Created, with NO body\n```\n\n**Expected:** \nA successful `PUT` request to this endpoint (which is a \"create\" operation) should return a `201 Created` status code with an empty response body.\n\nThe upstream JSON specification at `paths > /results/{sourcedId} > put > responses` clearly defines this:\n\n```json\n\"201\": {\n  \"description\": \"The object has been successfully stored in the Service Provider repository.\"\n}\n```\n\nNote the absence of a `schema` for the 201 response, indicating no body should be returned. The upstream HTML documentation for `putResult` (Use-case 6) also aligns with the creation workflow, for which `201 Created` is the correct semantic response code.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/results/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug for two reasons. First, the HTTP status code `200` is semantically incorrect for a resource creation; `201` is the standard. Second, returning a response body when none is expected violates the API contract, causing potential parsing errors in strictly-implemented clients and wasting bandwidth. This deviation breaks client compatibility.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:24:43.712Z",
    "updatedAt": "2025-07-03T18:41:44.777Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-289/incorrect-success-response-for-put-resultssourcedid"
  },
  {
    "id": "9c189855-62c3-4710-a618-9d7403ae651e",
    "identifier": "BUG-288",
    "title": "Incorrect Behavior for PUT /results/{sourcedId}: Defined as \"Update\" instead of \"Create\"",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's summary and description for `PUT /ims/oneroster/gradebook/v1p2/results/{sourcedId}` clearly state that the operation is used to update an existing result.\nLocal `summary`: \"Update a Result\"\nLocal `description`: \"To update an existing result. The sourcedId for the record to be updated is supplied by the requesting system.\"\n\n**Summary:** \nThe local specification's summary and description for `PUT /ims/oneroster/gradebook/v1p2/results/{sourcedId}` clearly state that the operation is used to update an existing result.\nLocal `summary`: \"Update a Result\"\nLocal `description`: \"To update an existing result. The sourcedId for the record to be updated is supplied by the requesting system.\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Read the `summary` and `description` for the `PUT` operation in the local specification. It states \"Update a Result\" and \"To update an existing result.\"\n2. Read the `summary` and `description` for the same operation in the upstream JSON and HTML specifications.\n3. Observe the direct contradiction: the upstream spec defines this operation for creation.\n\n**Expected:** \nThe `PUT` operation on this path should be for creating a new result where the client supplies the `sourcedId`. This is a common pattern in OneRoster for client-managed IDs.\n\nUpstream JSON `description`: \"To create a new result. The associated sourcedId for this new record is supplied by the requesting system.\"\nUpstream HTML (Section 4.7.4, \"putResult Operation\"): \"To create a new result. The associated sourcedId for this new record is supplied by the requesting system.\"\nThis indicates a fundamental misunderstanding or misimplementation of the HTTP verb's purpose for this specific endpoint. The operation should be idempotent for creation, not for updating.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/results/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a high-severity behavioral bug. While not a direct crash or data leak, it represents a complete divergence from the specified contract. Systems built against the local spec would attempt to use this endpoint for updates (likely with PATCH-like semantics), while the service provider should be expecting it as a create operation. This will lead to unpredictable behavior and integration failures.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:23:25.585Z",
    "updatedAt": "2025-07-03T18:41:44.795Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-288/incorrect-behavior-for-put-resultssourcedid-defined-as-update-instead"
  },
  {
    "id": "dc9cd130-f9de-4d05-a851-1af71856c14d",
    "identifier": "BUG-287",
    "title": "Unauthorized Parameter Constraints",
    "description": "**Reporter:** Ameer Alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The implementation adds a `maximum: 3000` constraint to the `limit` query parameter that is not defined in the specification.\n\n### Impact\n\n* Restricts client behavior beyond specification requirements\n* May break clients expecting larger page sizes\n* Modifies the public API contract\n\n**Summary:** \nThe implementation adds a `maximum: 3000` constraint to the `limit` query parameter that is not defined in the specification.\n\n### Impact\n\n* Restricts client behavior beyond specification requirements\n* May break clients expecting larger page sizes\n* Modifies the public API contract\n\n**Steps to Reproduce:**\n\n```bash\n# This should be valid per specification but is rejected\ncurl -X GET 'https://api.staging.alpha-1edtech.com/ims/clr/v2p0/credentials?limit=5000' \\\n  -H 'Authorization: Bearer $TOKEN'\n\n# Returns 400 Bad Request: limit exceeds maximum of 3000\n```\n\n**Expected:**\n\n* Follow specification constraints only (minimum: 1, default: 100)\n* If server-side maximum is needed, enforce internally without exposing in API contract\n* Return capped results rather than rejecting the request\n\n**Environment:** staging\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:22:55.653Z",
    "updatedAt": "2025-07-01T23:27:54.890Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-287/unauthorized-parameter-constraints"
  },
  {
    "id": "a902b7c7-563d-4d73-9f2b-dd0fb7ddafd5",
    "identifier": "BUG-286",
    "title": "Missing Required OAuth2 Scopes on All Operations for /results/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the security requirement for all operations on this path as `security: - OAuth2: []`. This incorrectly implies that any valid OAuth2 token is sufficient, without specifying the required granular scopes.\n\n**Summary:** \nThe local specification defines the security requirement for all operations on this path as `security: - OAuth2: []`. This incorrectly implies that any valid OAuth2 token is sufficient, without specifying the required granular scopes.\n\n**Steps to Reproduce:**\numan-readable steps:\n\n1. Examine the `security` definition for the `GET`, `PUT`, and `DELETE` operations on the `/ims/oneroster/gradebook/v1p2/results/{sourcedId}` path in the local specification.\n2. Observe that the security requirement is defined as `OAuth2: []`, indicating no specific scopes are documented.\n3. Compare this with the upstream specification, which lists specific required scopes for each operation.\n\nCurl command (conceptual, as this relates to authorization configuration):\n\n```bash\n# A request to GET a result should be rejected if the token lacks the required scopes.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/{some_sourcedId}\" \\\n-H \"Authorization: Bearer $TOKEN_WITHOUT_GRADEBOOK_READONLY_SCOPE\"\n```\n\n**Expected:** \nEach operation should document the specific OAuth2 scopes required for authorization, as defined in the upstream specification.\n\nFor `GET /results/{sourcedId}`:\nThe upstream JSON spec requires `[\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly\", \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook-core.readonly\"]`.\n\nFor `PUT /results/{sourcedId}`:\nThe upstream JSON spec requires `[\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.createput\"]`.\n\nFor `DELETE /results/{sourcedId}`:\nThe upstream JSON spec requires `[\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.delete\"]`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/results/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Missing security scope definitions is a critical flaw in API documentation and can lead to security vulnerabilities. Developers implementing against the local spec will not know which permissions to request, and the API gateway might be misconfigured to not enforce these scopes. This breaks the principle of least privilege and deviates significantly from the IMS Security Framework that OneRoster relies upon.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:22:30.603Z",
    "updatedAt": "2025-07-03T12:52:04.111Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-286/missing-required-oauth2-scopes-on-all-operations-for-resultssourcedid"
  },
  {
    "id": "63057161-9146-41b9-9d81-d74c28d5ad9f",
    "identifier": "BUG-285",
    "title": "Incorrect HTTP Status Codes",
    "description": "**Reporter:** Ameer Alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** POST operations that create new resources return `200 OK` instead of `201 Created`.\n\n**Summary:** \nPOST operations that create new resources return `200 OK` instead of `201 Created`.\n\n**Steps to Reproduce:**\n\n```bash\ncurl -i -X POST 'https://api.staging.alpha-1edtech.com/ims/clr/v2p0/credentials' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"userId\": \"123\", \"achievementIds\": [\"abc\"]}'\n\n# Returns 200 OK instead of 201 Created\n# Missing Location header\n```\n\n**Expected:**\n\n* Return `201 Created` when a new resource is created\n* Return `200 OK` only when updating existing resources\n* Include `Location` header with URI of created resource\n\n**Environment:** staging\n**Additional Notes:** inconsistency with 1edtech clr standards",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:21:22.385Z",
    "updatedAt": "2025-07-01T23:27:34.291Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-285/incorrect-http-status-codes"
  },
  {
    "id": "d8201439-3fad-4277-b0ab-f1e3a93ce5f9",
    "identifier": "BUG-284",
    "title": "Missing 'fields' Query Parameter in GET /ims/oneroster/gradebook/v1p2/results/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local OpenAPI specification for `GET /ims/oneroster/gradebook/v1p2/results/{sourcedId}` only defines one parameter: `sourcedId` in the path.\n\n**Summary:** \nThe local OpenAPI specification for `GET /ims/oneroster/gradebook/v1p2/results/{sourcedId}` only defines one parameter: `sourcedId` in the path.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the definition for the GET /ims/oneroster/gradebook/v1p2/results/{sourcedId} endpoint in the local specification.\n2. Compare its defined parameters with the upstream specification.\n3. Observe that the 'fields' query parameter is missing from the local implementation.\n\nCurl command to demonstrate the expected functionality (which is currently not documented):\n\n```bash\n# This call should work according to the upstream spec, but is not documented locally.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/{some_sourcedId}?fields=sourcedId,status\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n```\n</steps_to_reproduce>\n<brief_bug_summary_what_actually_happened>\n```\n\nThe local OpenAPI specification for `GET /ims/oneroster/gradebook/v1p2/results/{sourcedId}` only defines one parameter: `sourcedId` in the path.\n\n**Expected:** \nThe endpoint should also support the `fields` query parameter, which allows clients to select a subset of fields to be returned in the response.\n\nThe upstream JSON specification at `paths > /results/{sourcedId} > get > parameters` explicitly defines this parameter:\n\n```json\n{\n  \"name\": \"fields\",\n  \"in\": \"query\",\n  \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  },\n  \"collectionFormat\": \"csv\",\n  \"allowEmptyValue\": false\n}\n```\n\nThe upstream HTML documentation (Section 4.7.2, \"getResult Operation\", Notes) also confirms this: \"Query Parameters for the REST-based binding have been defined for this operation, namely: fields - to identify the range of fields that should be supplied in the response message.\"\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/results/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/results/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** The absence of the `fields` parameter is a critical deviation. This parameter is a standard feature in the OneRoster specification for optimizing payloads by allowing clients to request only the data they need. Its omission prevents clients from using this feature, leading to unnecessary data transfer and increased response sizes. It also indicates a failure to fully implement the upstream specification for this endpoint.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:20:47.061Z",
    "updatedAt": "2025-07-03T19:24:59.485Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-284/missing-fields-query-parameter-in-get"
  },
  {
    "id": "7ba0da57-3fc2-4002-a076-a5728c453357",
    "identifier": "BUG-283",
    "title": "Incorrect Error Response Schema",
    "description": "**Reporter:** Ameer Alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** Multiple issues with error response implementation:\n\n1. **Incorrect field casing**: Uses `imsx_CodeMinor` instead of `imsx_codeMinor`\n2. **Non-standard field**: Adds `imsx_error_details` array not in specification\n3. **Wrong HTTP status codes**: Implements 422, 429, 500 instead of specified 406, 421\n4. **Missing error definitions**: Many endpoints don't define error responses\n\n### Impact\n\n* Breaks error parsing in strictly-typed clients\n* Causes deserialization failures\n* Prevents proper error handling\n\n**Summary:** \nMultiple issues with error response implementation:\n\n1. **Incorrect field casing**: Uses `imsx_CodeMinor` instead of `imsx_codeMinor`\n2. **Non-standard field**: Adds `imsx_error_details` array not in specification\n3. **Wrong HTTP status codes**: Implements 422, 429, 500 instead of specified 406, 421\n4. **Missing error definitions**: Many endpoints don't define error responses\n\n### Impact\n\n* Breaks error parsing in strictly-typed clients\n* Causes deserialization failures\n* Prevents proper error handling\n\n**Steps to Reproduce:**\n\n```bash\n# Trigger a 400 error\ncurl -X POST 'https://api.staging.alpha-1edtech.com/ims/clr/v2p0/credentials' \\\n  -H 'Authorization: Bearer $TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"invalid\": \"data\"}'\n\n# Response uses incorrect casing and extra fields\n```\n\n**Expected:** \nAll error responses must conform to `imsx_StatusInfoDType`:\n\n```json\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error description\",\n  \"imsx_codeMinor\": {\n    \"imsx_codeMinorName\": \"invalid_data\",\n    \"imsx_codeMinorValue\": \"400\"\n  }\n}\n```\n\n**Environment:** staging\n**Additional Notes:** doesn't meet 1edtech clr standards",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:19:50.812Z",
    "updatedAt": "2025-07-03T18:48:19.286Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-283/incorrect-error-response-schema"
  },
  {
    "id": "d50c2020-8c04-4b77-8048-1db284aa22fe",
    "identifier": "BUG-282",
    "title": "Non-Standard Response Structure",
    "description": "**Reporter:** Ameer Alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The implementation wraps response data in a custom pagination object instead of using standard HTTP headers:\n\n```json\n{\n  \"clrs\": [...],\n  \"totalCount\": 150,\n  \"pageCount\": 3,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 50\n}\n```\n\n**Summary:** \nThe implementation wraps response data in a custom pagination object instead of using standard HTTP headers:\n\n```json\n{\n  \"clrs\": [...],\n  \"totalCount\": 150,\n  \"pageCount\": 3,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 50\n}\n```\n\n**Steps to Reproduce:**\n\n```bash\ncurl -i -X GET 'https://api.staging.alpha-1edtech.com/ims/clr/v2p0/credentials?limit=10' \\\n  -H 'Authorization: Bearer $TOKEN'\n\n# Response includes wrapper object instead of direct data\n# Missing X-Total-Count header\n```\n\n**Expected:**\n\n* Return data array directly in response body\n* Use `X-Total-Count` HTTP header for total count\n* Follow standard HTTP patterns for pagination metadata\n\n**Environment:** staging\n**Additional Notes:** doesn't align with 1edtech CLR standards",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:18:19.963Z",
    "updatedAt": "2025-07-02T13:49:23.289Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-282/non-standard-response-structure"
  },
  {
    "id": "6758b439-d12c-4db8-9312-afdac242f206",
    "identifier": "BUG-281",
    "title": "Invalid Response Schema for `POST /lineItems/` (`sourcedIdPairs` must be an array)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `201` response schema for the locally-defined `POST /lineItems/` returns a `sourcedIdPairs` field that is a single object, not an array of objects.\n\n**Summary:** \nThe `201` response schema for the locally-defined `POST /lineItems/` returns a `sourcedIdPairs` field that is a single object, not an array of objects.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a request to the non-standard `POST /lineItems/` endpoint.\n2. Inspect the `201 Created` response body.\n3. Observe that the `sourcedIdPairs` key contains a single JSON object.\n\nExample of an object returned by the local implementation:\n\n```json\n{\n  \"sourcedIdPairs\": {\n    \"suppliedSourcedId\": \"temp-id-123\",\n    \"allocatedSourcedId\": \"server-guid-456\"\n  }\n}\n```\n\n**Expected:** \nThe upstream specification defines the response for bulk creation operations that return GUID mappings using the `GUIDPairSetDType` schema. In this schema, `sourcedIdPairs` is explicitly defined as an array of `GUIDPairDType` objects.\n\nFrom `oneroster.gradebook.upstream.json`, `definitions.GUIDPairSetDType`:\n\n```json\n\"GUIDPairSetDType\": {\n  \"properties\": {\n    \"sourcedIdPairs\": {\n      \"description\": \"The set of sourcedId pairs...\",\n      \"type\": \"array\",\n      \"minItems\": 0,\n      \"items\": {\n        \"$ref\": \"#/definitions/GUIDPairDType\"\n      }\n    }\n  }\n}\n```\n\nEven if creating a single item, the response must conform to the standard structure, which is an array containing one object. The correct response should be:\n\n```json\n{\n  \"sourcedIdPairs\": [\n    {\n      \"suppliedSourcedId\": \"temp-id-123\",\n      \"allocatedSourcedId\": \"server-guid-456\"\n    }\n  ]\n}\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema violation. Returning an object where an array is expected will cause deserialization errors in any strictly-typed client. While the `POST /lineItems` endpoint is itself non-standard, its response schema also violates the standard pattern for this type of data structure.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:17:36.768Z",
    "updatedAt": "2025-07-03T18:54:51.814Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-281/invalid-response-schema-for-post-lineitems-sourcedidpairs-must-be-an"
  },
  {
    "id": "fb21b3f6-32b0-44d6-abd4-6c82cb25f60c",
    "identifier": "BUG-280",
    "title": "Non-Standard Query Parameters",
    "description": "**Reporter:** Ameer Alnseirat (ameer.alnseirat@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The implementation introduces proprietary query parameters not defined in any CLR specification:\n\n* `fields` - for field selection\n* `sort` - for sorting results\n* `orderBy` - for ordering direction\n* `filter` - for complex filtering\n* `search` - for text search\n\nAdditionally, it omits the standard `since` parameter for time-based filtering.\n\n**Summary:** \nThe implementation introduces proprietary query parameters not defined in any CLR specification:\n\n* `fields` - for field selection\n* `sort` - for sorting results\n* `orderBy` - for ordering direction\n* `filter` - for complex filtering\n* `search` - for text search\n\nAdditionally, it omits the standard `since` parameter for time-based filtering.\n\n**Steps to Reproduce:**\n\n```bash\n# Non-standard parameters that shouldn't exist\ncurl -X GET 'https://api.staging.alpha-1edtech.com/ims/clr/v2p0/credentials?filter=status%3Dactive&sort=dateCreated'\n\n# Standard parameter that's missing\ncurl -X GET 'https://api.staging.alpha-1edtech.com/ims/clr/v2p0/credentials?since=2024-01-01T00:00:00Z'\n# Returns error: parameter not recognized\n```\n\n**Expected:** \nOnly standard query parameters should be supported:\n\n* `limit` - number of results per page\n* `offset` - pagination offset\n* `since` - retrieve records created after timestamp\n\n**Environment:** Staging\n**Additional Notes:** Doesn't match 1edtech standards for CLR",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:16:35.243Z",
    "updatedAt": "2025-07-03T05:47:08.216Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-280/non-standard-query-parameters"
  },
  {
    "id": "0c915427-c314-4ea6-8268-eaad76873680",
    "identifier": "BUG-279",
    "title": "PowerPath API getAttempts returns inconsistent date format in scoreStatus field",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** The response should have consistent field naming and proper typing. The scoreStatus field should either be a string enum or the field should be named differently to reflect its content.\n\n**Summary:** \nThe response should have consistent field naming and proper typing. The scoreStatus field should either be a string enum or the field should be named differently to reflect its content.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token for the PowerPath API.\n2. Create a PowerPath lesson using createExternalTestOut.\n3. Call getAttempts for the lesson and student.\n4. Observe the response format in the attempts array.\n\ncURL command:\n\n```bash\ncurl --location 'https://api.staging.alpha-1edtech.com/powerpath/getAttempts?lesson=LESSON_ID&student=STUDENT_ID' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Accept: application/json'\n```\n\n**Expected:** \nThe API returns a response with a field named \"scoreStatus\" that contains the value \"not submitted\" (a string), but the field name suggests it should contain score status information, not submission status.\n\nExample response:\n\n```json\n{\n  \"attempts\": [{\n    \"attempt\": 1,\n    \"startedAt\": \"2025-06-30T22:04:47.975Z\",\n    \"completedAt\": null,\n    \"score\": 0,\n    \"scoreStatus\": \"not submitted\"\n  }]\n}\n```\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\n\n* **API Component**: PowerPath API\n* **Endpoint**: `/powerpath/getAttempts`\n* **HTTP Method**: GET\n* **Authentication**: Bearer token (OAuth2 client credentials flow)\n* **Content-Type**: application/json\n* **SDK Used**: @superbuilders/powerpath SDK\n  **Additional Notes:** This appears to be a naming inconsistency in the API response schema. The field \"scoreStatus\" contains submission status information (\"not submitted\") rather than score-related status. This should either be:\n\n1. Renamed to \"submissionStatus\" or \"attemptStatus\" to better reflect its content\n2. Or the OpenAPI specification should clarify that \"scoreStatus\" includes submission states\n\nThis affects API consumers who expect the field to contain score-related information based on its name.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:15:31.523Z",
    "updatedAt": "2025-07-01T23:26:24.473Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-279/powerpath-api-getattempts-returns-inconsistent-date-format-in"
  },
  {
    "id": "3896edb1-784e-40fe-8ef5-52ffa729fcce",
    "identifier": "BUG-278",
    "title": "Non-standard `POST /lineItems/` Endpoint for Creating a Single LineItem",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** he local specification defines a `POST` method on the `/ims/oneroster/gradebook/v1p2/lineItems/` collection endpoint to create a single LineItem.\n\n**Summary:** \nhe local specification defines a `POST` method on the `/ims/oneroster/gradebook/v1p2/lineItems/` collection endpoint to create a single LineItem.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Attempt to create a single LineItem by making a POST request to the `/lineItems/` collection endpoint.\n2. Observe the request is processed.\n3. Compare this behavior to the upstream specification.\n\ncURL command (based on local spec):\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"lineItem\": { ... }\n}'\n```\n\n**Expected:** \nThe upstream OneRoster specification does not include a `POST` method on the `/lineItems` collection endpoint. The standard way to create a single `LineItem` where the client provides the ID is via `PUT /lineItems/{sourcedId}`.\n\nFrom the upstream HTML documentation, section 4.6 LineItemsManagement Interface Description, the available operations are:\n\n* `getAllLineItems`\n* `getLineItem`\n* `deleteLineItem`\n* `putLineItem`\n* `postResultsForLineItem`\n\nThere is no `postLineItem` or `postLineItems` operation on this interface. The implementation has invented a non-standard endpoint and method for creating a resource, which directly conflicts with the specified `PUT` method for this action.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Introducing a non-standard endpoint for a core CRUD operation is a major deviation. It violates the principle of least astonishment and breaks compatibility for any client expecting to use the standard `PUT /lineItems/{sourcedId}` method for creating or updating a line item. This endpoint should be removed and the standard `PUT` method should be implemented instead. The local POST seems to be attempting a server-side ID allocation, which is typically reserved for bulk `POST` operations on nested endpoints (e.g., `POST /classes/{id}/lineItems`), not the top-level collection.",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-30T22:15:30.580Z",
    "updatedAt": "2025-07-03T18:45:58.923Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-278/non-standard-post-lineitems-endpoint-for-creating-a-single-lineitem"
  },
  {
    "id": "cdcd0954-1023-44ee-9417-2331a7833842",
    "identifier": "BUG-277",
    "title": "OneRoster DELETE operations return 204 but SDK expects different response format",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The OneRoster SDK should handle 204 No Content responses correctly for DELETE operations, as this is the standard HTTP response for successful resource deletion.\n\n**Summary:** \nThe OneRoster SDK should handle 204 No Content responses correctly for DELETE operations, as this is the standard HTTP response for successful resource deletion.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token for the OneRoster API.\n2. Create any OneRoster resource (course, user, component, etc.).\n3. Send a DELETE request to remove the created resource.\n4. Observe that the API returns 204 No Content with empty body.\n5. Notice that the SDK throws an error: \"APIError: Unexpected Status or Content-Type: Status 204 Content-Type \"\" Body \"\"\"\n\ncURL command:\n\n```bash\ncurl --location --request DELETE 'https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/COURSE_ID' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Accept: application/json'\n```\n\n**Expected:** \nThe SDK throws an APIError: \"Unexpected Status or Content-Type: Status 204 Content-Type \"\" Body \"\"\" even though the DELETE operation was successful (the resource is actually deleted).\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\n\n* **API Component**: OneRoster API\n* **Endpoints**: All DELETE endpoints (/courses, /users, /components, /component-resources, /resources)\n* **HTTP Method**: DELETE\n* **Authentication**: Bearer token (OAuth2 client credentials flow)\n* **Expected Status**: 204 No Content (which is correct)\n* **SDK Used**: @superbuilders/oneroster SDK\n* **Test Framework**: Bun + TypeScript test suite\n  **Additional Notes:** This is an SDK bug where the OneRoster SDK doesn't properly handle the standard 204 No Content response for DELETE operations. The OpenAPI specification should clarify that DELETE operations return 204 with no content, and the SDK should be updated to handle this correctly. This affects cleanup operations in test suites and production deletion workflows.\n\nThe actual HTTP response is correct (204 No Content), but the SDK's response parsing logic expects a different format, causing it to throw errors for successful operations.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:13:38.131Z",
    "updatedAt": "2025-07-02T13:53:39.369Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-277/oneroster-delete-operations-return-204-but-sdk-expects-different"
  },
  {
    "id": "288b0d6c-f700-4e01-9b46-61fb827bd48a",
    "identifier": "BUG-276",
    "title": "Incorrect Implementation of GUID Reference Types in `LineItem` Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `LineItem` schema in the local spec defines GUID reference types (e.g., `class`, `school`, `category`, `gradingPeriod`, `academicSession`, `scoreScale`) as simple objects containing only a `sourcedId`.\n\n**Summary:** \nThe `LineItem` schema in the local spec defines GUID reference types (e.g., `class`, `school`, `category`, `gradingPeriod`, `academicSession`, `scoreScale`) as simple objects containing only a `sourcedId`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Request a collection of line items via `GET /lineItems/`.\n2. Inspect the `LineItem` objects in the response.\n3. Observe the structure of the `class`, `school`, `category`, and other GUID reference fields. They will only contain a `sourcedId`.\n\nExample of an object returned by the local implementation:\n\n```json\n{\n  \"class\": {\n    \"sourcedId\": \"some-guid\"\n  },\n  \"school\": {\n    \"sourcedId\": \"another-guid\"\n  },\n  // ... other fields\n}\n```\n\n**Expected:** \nThe OneRoster specification defines a standard structure for all GUID references, which must include `href`, `sourcedId`, and `type`.\n\nFor example, the `class` field should conform to `ClassGUIDRefDType`, which is defined in `oneroster.gradebook.upstream.json` as:\n\n```json\n\"ClassGUIDRefDType\": {\n  \"description\": \"This is the container for reference to a OneRoster 'Class' object...\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"href\": {\n      \"description\": \"The URI for the type of object being referenced.\",\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"sourcedId\": {\n      \"description\": \"The globally unique identifier of the object being referenced.\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"description\": \"The type of object being referenced i.e. a 'class'.\",\n      \"type\": \"string\",\n      \"enum\": [\"class\"]\n    }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\nThe local implementation is missing the required `href` and `type` fields for all GUID reference objects within the `LineItem` model. A correct `class` object should look like this:\n\n```json\n{\n  \"href\": \"https://.../ims/oneroster/rostering/v1p2/classes/some-guid\",\n  \"sourcedId\": \"some-guid\",\n  \"type\": \"class\"\n}\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical and systemic schema violation. The `href` and `type` fields are essential for clients to understand the nature of the relationship and to have a direct, discoverable link to the related resource. Omitting them breaks the hypermedia aspect of the API and violates the data model, making it impossible for a conformant client to correctly parse these relationships. This issue applies to the `class`, `school`, `category`, `gradingPeriod`, `academicSession`, and `scoreScale` fields.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:13:04.021Z",
    "updatedAt": "2025-07-03T18:11:28.581Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-276/incorrect-implementation-of-guid-reference-types-in-lineitem-schema"
  },
  {
    "id": "e5e731c8-d7e2-4b41-bff8-659f0dfa9abb",
    "identifier": "BUG-275",
    "title": "`LineItem` Schema is Missing Required Fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `LineItem` schema defined in the local specification's `components/schemas` is missing several fields from its `required` array. Specifically, `sourcedId`, `status`, and `dateLastModified` are not marked as required, even though they are part of the object's properties.\n\n**Summary:** \nThe `LineItem` schema defined in the local specification's `components/schemas` is missing several fields from its `required` array. Specifically, `sourcedId`, `status`, and `dateLastModified` are not marked as required, even though they are part of the object's properties.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Request a collection of line items via `GET /lineItems/`.\n2. Inspect one of the `LineItem` objects in the response.\n3. Observe that the object may be missing `sourcedId`, `status`, or `dateLastModified`.\n4. Alternatively, attempt to create a `LineItem` via `POST` without these fields. The local spec suggests this would be valid.\n\ncURL command (demonstrating a potentially valid POST according to the local spec, but invalid by the upstream spec):\n\n```bash\n# The local spec's LineItem schema does not require sourcedId, status, or dateLastModified\n# This POST is to the non-standard endpoint but demonstrates the schema issue\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"lineItem\": {\n    \"title\": \"Required Title\",\n    \"assignDate\": \"2024-01-01T00:00:00Z\",\n    \"dueDate\": \"2024-01-02T00:00:00Z\",\n    \"class\": { \"sourcedId\": \"guid-class\" },\n    \"school\": { \"sourcedId\": \"guid-school\" },\n    \"category\": { \"sourcedId\": \"guid-category\" }\n  }\n}'\n```\n\n**Expected:** \nAccording to the upstream `LineItemDType` definition, these fields are mandatory for every `LineItem` object.\n\nFrom `oneroster.gradebook.upstream.json`, `definitions.LineItemDType.required`:\n\n```json\n\"required\": [\n  \"sourcedId\",\n  \"status\",\n  \"dateLastModified\",\n  \"title\",\n  \"assignDate\",\n  \"dueDate\",\n  \"class\",\n  \"school\",\n  \"category\"\n]\n```\n\nThe local implementation fails to enforce the requirement for `sourcedId`, `status`, and `dateLastModified`. This means the API could produce or accept invalid `LineItem` objects that are missing these essential fields.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical data model inconsistency. `sourcedId` is the primary key for the object. `status` and `dateLastModified` are fundamental for data synchronization and management. Omitting these from the `required` list can lead to data corruption, synchronization failures, and client-side errors when processing incomplete objects.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:11:32.574Z",
    "updatedAt": "2025-07-02T19:51:32.864Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-275/lineitem-schema-is-missing-required-fields"
  },
  {
    "id": "1c035391-830b-44a2-91c3-59e028c81bcf",
    "identifier": "BUG-274",
    "title": "Server error when resourceMetadata is null in createExternalTestOut",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** The API should either:\n\n1. Accept `resourceMetadata: null` and handle it gracefully, or\n2. Return a clear 400 Bad Request error indicating that resourceMetadata cannot be null\n\n**Summary:** \nThe API should either:\n\n1. Accept `resourceMetadata: null` and handle it gracefully, or\n2. Return a clear 400 Bad Request error indicating that resourceMetadata cannot be null\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token for the PowerPath API.\n2. Create a course using the OneRoster API.\n3. Send a POST request to `/powerpath/createExternalTestOut` with `resourceMetadata: null` in the payload.\n4. Observe the 500 Internal Server Error with TypeError about Object.keys().\n\ncURL command:\n\n```bash\ncurl --location 'https://api.staging.alpha-1edtech.com/powerpath/createExternalTestOut' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"courseId\": \"VALID_COURSE_ID\",\n    \"lessonTitle\": \"Test Lesson\",\n    \"launchUrl\": \"\",\n    \"toolProvider\": \"edulastic\",\n    \"unitTitle\": \"Test Unit\",\n    \"courseComponentSourcedId\": \"\",\n    \"vendorId\": \"test-vendor\",\n    \"description\": \"Test lesson\",\n    \"resourceMetadata\": null,\n    \"lessonType\": \"test-out\",\n    \"xp\": 100\n}'\n```\n\n**Expected:** \nThe API returns a 500 Internal Server Error with the following stack trace:\n\n```\nTypeError: Cannot convert undefined or null to object\nat Function.keys (<anonymous>)\nat CreateExternalTestService.buildResourceMetadata (file:///app/dist/server/modules/powerpath/services/createExternalTest.service.js:352:35)\nat CreateExternalTestService.updateExistingResource (file:///app/dist/server/modules/powerpath/services/createExternalTest.service.js:183:34)\n```\n\nThe server-side code is calling `Object.keys()` on a null value without proper null checking.\n\n**Environment:** - **API Environment**: Staging ([api.staging.alpha-1edtech.com](http://api.staging.alpha-1edtech.com))\n\n* **API Component**: PowerPath API\n* **Endpoint**: `/powerpath/createExternalTestOut`\n* **HTTP Method**: POST\n* **Authentication**: Bearer token (OAuth2 client credentials flow)\n* **Content-Type**: application/json\n* **Test Framework**: Bun + TypeScript test suite\n* **SDK Used**: @superbuilders/powerpath SDK (though bypassed for this test due to incomplete OpenAPI spec)\n* **Client OS**: macOS 24.5.0 (darwin)\n* **Node Runtime**: Bun\n  **Additional Notes:** This suggests that the PowerPath service has a bug in its `buildResourceMetadata` method where it doesn't handle null values properly. The server should either:\n\n1. Provide default empty object handling for null resourceMetadata\n2. Validate the input and return a proper 400 error before processing\n3. Update the OpenAPI specification to indicate that resourceMetadata is required and cannot be null\n\nThis is a server-side defensive programming issue that affects API reliability.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:10:02.326Z",
    "updatedAt": "2025-07-03T16:56:04.235Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-274/server-error-when-resourcemetadata-is-null-in-createexternaltestout"
  },
  {
    "id": "1b99af19-23f2-49cd-adc0-37f94d398f2e",
    "identifier": "BUG-273",
    "title": "Non-compliant Pagination Implementation for `GET /lineItems`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for a 200 OK response from `GET /lineItems/` defines a JSON body containing pagination metadata fields: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Summary:** \nThe local specification for a 200 OK response from `GET /lineItems/` defines a JSON body containing pagination metadata fields: `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/lineItems` endpoint.\n2. Inspect the JSON response body.\n3. Note the presence of `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` fields.\n4. Inspect the response headers for the `X-Total-Count` header.\n\ncURL command (demonstrates the expected behavior based on the local spec):\n\n```bash\n# The local spec implies a response body with pagination fields\ncurl -v -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe OneRoster specification mandates a different mechanism for pagination. The total count of available records should be returned in a response header, not in the response body.\n\nFrom the upstream JSON spec for `GET /lineItems`:\n\n```json\n\"responses\": {\n  \"200\": {\n    \"description\": \"...\",\n    \"schema\": {\n      \"$ref\": \"#/definitions/LineItemSetDType\"\n    },\n    \"headers\": {\n      \"X-Total-Count\": {\n        \"description\": \"The total number of resources that are available to be returned\",\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n```\n\nThe `LineItemSetDType` schema only contains `{\"properties\": {\"lineItems\": ...}}`. It does not contain any top-level pagination fields. The local implementation's response body is entirely non-compliant.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical deviation from the specification. Clients expecting to find the total record count in the `X-Total-Count` header will fail. The custom pagination fields in the response body fundamentally alter the structure of the response, breaking compatibility with any client written to the official OneRoster standard.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:09:20.603Z",
    "updatedAt": "2025-07-03T13:02:58.413Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-273/non-compliant-pagination-implementation-for-get-lineitems"
  },
  {
    "id": "d5a24b0d-d54e-4872-b89d-377097b1f73b",
    "identifier": "BUG-272",
    "title": "Non-standard `search` Query Parameter on `GET /lineItems`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /ims/oneroster/gradebook/v1p2/lineItems/` includes a query parameter named `search`.\n\n**Summary:** \nThe local specification for `GET /ims/oneroster/gradebook/v1p2/lineItems/` includes a query parameter named `search`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the defined query parameters for the `GET /lineItems/` operation in the local specification.\n2. Note the presence of the `search` parameter.\n3. Cross-reference this with the official parameters listed for the `getAllLineItems` operation in both the upstream JSON and HTML specifications.\n\ncURL command (demonstrates the non-standard parameter):\n\n```bash\n# This command uses a non-standard 'search' parameter defined locally\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/?search=somequery' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification for the `getAllLineItems` operation does not define a `search` parameter. The standard parameters for filtering and querying are `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. Adding a `search` parameter is a proprietary extension that is not part of the OneRoster v1.2 standard.\n\nThe upstream JSON `paths.\"/lineItems\".get.parameters` list confirms the standard parameters, and the `search` parameter is absent. The HTML documentation (Section 4.6.1) also does not mention a `search` parameter.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Implementing non-standard parameters breaks conformity with the OneRoster specification. Clients built strictly against the official spec will not know about this parameter, and its functionality is undocumented from the standard's perspective. If such functionality is needed, it should be clearly marked and documented as a vendor extension, but it remains a deviation from the base specification. The standard method for querying data is the `filter` parameter.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:08:05.740Z",
    "updatedAt": "2025-07-02T18:03:21.834Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-272/non-standard-search-query-parameter-on-get-lineitems"
  },
  {
    "id": "1dba7d3e-a213-4a91-8dfb-ca175f5b6f99",
    "identifier": "BUG-271",
    "title": "Invalid API Path for LineItems Collection",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the path for the LineItems collection endpoint with a trailing slash: `/ims/oneroster/gradebook/v1p2/lineItems/`.\n\n**Summary:** \nThe local specification defines the path for the LineItems collection endpoint with a trailing slash: `/ims/oneroster/gradebook/v1p2/lineItems/`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the path definition in the local OpenAPI specification for the LineItems collection.\n2. Compare this path with the combination of `basePath` and the path definition in the upstream specification.\n\ncURL command (demonstrates the locally defined path):\n\n```bash\n# This command reflects the incorrect path defined in the local spec\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification does not use a trailing slash for collection endpoints. The correct path should be a combination of the `basePath` and the specific path key.\n\nFrom `oneroster.gradebook.upstream.json`:\n\n* `basePath`: `/ims/oneroster/gradebook/v1p2`\n* Path key: `/lineItems`\n\nThe fully resolved, correct path should be `/ims/oneroster/gradebook/v1p2/lineItems` (without the trailing slash). Trailing slashes can cause issues with routing and client compatibility.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While some web frameworks can treat paths with and without a trailing slash as equivalent, it is a deviation from the official specification. This inconsistency can lead to broken client integrations, failed requests if the server is strict about routing, and confusion for developers. All paths should conform exactly to the upstream specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:06:55.796Z",
    "updatedAt": "2025-07-02T18:08:40.199Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-271/invalid-api-path-for-lineitems-collection"
  },
  {
    "id": "6d2883b9-f72a-4ebc-8db5-7e621bb7cf53",
    "identifier": "BUG-270",
    "title": "Extraneous Default Value for 'status' Property in LineItem Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's `LineItem` schema defines a default value for the `status` field: `default: active`.\n\n**Summary:** \nThe local specification's `LineItem` schema defines a default value for the `status` field: `default: active`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `status` property within the `LineItem` schema in the local specification.\n2. Observe that it has a `default: active` key-value pair.\n3. Compare this to the `status` property in the `LineItemDType` schema in the upstream JSON specification, which does not define a default value.\n\n**Expected:** \nThe upstream specification for `LineItemDType` defines the `status` property with its type and enum, but it does not specify a default value. While the server is likely to default new objects to 'active' as a business rule, specifying this in the OpenAPI spec is a deviation that can affect client-side code generation and expectations. The client should not assume a default value unless the specification requires it.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Adding a `default` value where the upstream specification has none is a deviation. It can cause discrepancies between different client implementations based on whether their code generators respect the `default` keyword. The upstream specification treats `status` as a required field that must be explicitly provided by the client when creating a resource. The local spec's `default` implies the client could omit it, which contradicts the upstream `required` constraint.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:03:55.608Z",
    "updatedAt": "2025-07-02T19:51:31.243Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-270/extraneous-default-value-for-status-property-in-lineitem-schema"
  },
  {
    "id": "749a8d0a-2e9f-412c-a44f-393bc7f9075a",
    "identifier": "BUG-269",
    "title": "DELETE Operation Incorrectly Documented as Soft Delete Only",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's description for the `DELETE` operation is: \"Perform a soft delete on a specific Line Item on the service provider. This operation changes the status of the LineItem to 'tobedeleted'.\"\n\n**Summary:** \nThe local specification's description for the `DELETE` operation is: \"Perform a soft delete on a specific Line Item on the service provider. This operation changes the status of the LineItem to 'tobedeleted'.\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the `description` for the `DELETE` operation on `/ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}` in the local specification.\n2. Observe that it states the operation performs a \"soft delete\" by changing the status to `'tobedeleted'`.\n3. Compare this to the upstream specifications, which describe a generic delete.\n\nCurl Command:\n`curl -X DELETE https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/some-guid -H \"Authorization: Bearer $TOKEN\"`\nAfter this call, a client might expect a subsequent `GET` to return a 404. However, the local spec implies the object will still exist but with a changed status, which might still be retrievable.\n\n**Expected:** \nThe upstream specification describes a more general delete behavior, without mandating a \"soft delete\" implementation.\n\n* Upstream JSON description: \"Delete a specific lineItem on the service provider.\"\n* Upstream HTML (use case 5): \"The specified lineItem is to be deleted i.e. subsequent attempts to 'read' this object will fail... The nature of the deletion is implementation dependent.\"\n\nWhile the nature is \"implementation dependent\", the expectation is that the resource becomes inaccessible. The local spec's description is overly prescriptive and may not align with the standard expectation of a `DELETE` verb, which is to make the resource unavailable at its URI (typically resulting in a 404 Not Found on subsequent `GET` requests). By only changing the status, the resource may still be accessible, which is a significant behavioral difference.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This bug represents a mismatch in behavioral expectations. A client performing a `DELETE` operation usually expects the resource to be gone. The local specification's description of only changing the status is a specific implementation choice that deviates from this common expectation and the generic language of the upstream spec. This can lead to confusion and incorrect assumptions by API consumers about the state of the resource after a delete operation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:02:33.217Z",
    "updatedAt": "2025-07-03T11:50:44.494Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-269/delete-operation-incorrectly-documented-as-soft-delete-only"
  },
  {
    "id": "d6bf3426-34a9-431b-8026-876ecbb4d87a",
    "identifier": "BUG-268",
    "title": "Multiple Properties in LineItem Schema Incorrectly Defined as Nullable",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Several optional fields in the local `LineItem` schema are explicitly defined to allow `null` as a value (e.g., `type: [object, 'null']`). This indicates that a client can send `{\"description\": null}` in the request body.\n\n**Summary:** \nSeveral optional fields in the local `LineItem` schema are explicitly defined to allow `null` as a value (e.g., `type: [object, 'null']`). This indicates that a client can send `{\"description\": null}` in the request body.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `LineItem` schema in the local specification.\n2. Observe that fields like `metadata`, `description`, `gradingPeriod`, `resultValueMin`, `resultValueMax`, and `learningObjectiveSet` are defined with a type that includes `'null'` (e.g., `type: [object, 'null']`).\n3. Compare this to the upstream JSON and HTML specifications, which define these fields as optional (multiplicity `[0..1]`) but do not explicitly state they can be `null`.\n\nCurl Command (conceptual):\nA client compliant with the local spec could send `null` for an optional field, which may cause issues if the server doesn't expect it.\n`curl -X PUT https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/some-guid -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" -d '{\"lineItem\": {..., \"description\": null, \"resultValueMin\": null, ...}}'`\n\n**Expected:** \nThe upstream specification marks these fields as optional by setting their multiplicity to `[0..1]` or `[0..unbounded]`. This means the field can be omitted entirely from the JSON object. The spec does not mention that these fields are nullable. In standard API practice, being optional (omittable) is distinct from being nullable (present with a `null` value). The local spec deviates by explicitly allowing `null`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While some systems may treat an omitted key and a key with a `null` value similarly, they are not semantically identical and can cause issues with strongly-typed languages and ORMs. By explicitly allowing `null` where the upstream spec does not, the local implementation creates ambiguity and deviates from the standard. A compliant server might not expect to receive `null` for these fields and could throw an error, or it might interpret it in an unintended way.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T22:00:26.028Z",
    "updatedAt": "2025-07-03T18:10:31.163Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-268/multiple-properties-in-lineitem-schema-incorrectly-defined-as-nullable"
  },
  {
    "id": "d45e7077-a458-495f-8701-e1e7df453cdf",
    "identifier": "BUG-267",
    "title": "Missing 'fields' Query Parameter in GET /lineItems/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}` only documents the `sourcedId` path parameter. It does not list the `fields` query parameter as available for this endpoint.\n\n**Summary:** \nThe local specification for `GET /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}` only documents the `sourcedId` path parameter. It does not list the `fields` query parameter as available for this endpoint.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the `parameters` section for the `GET` operation on `/ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}` in the local specification.\n2. Observe that only the `sourcedId` path parameter is defined.\n3. Compare this to the upstream JSON and HTML specifications, which also define an optional `fields` query parameter.\n\nCurl Command:\nA client should be able to request a subset of fields from the LineItem object.\n`curl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/some-guid?fields=sourcedId,title,status\" -H \"Authorization: Bearer $TOKEN\"`\nThe local specification does not indicate that the `fields` parameter is supported.\n\n**Expected:** \nThe upstream specification explicitly includes an optional `fields` query parameter for this endpoint to allow clients to specify which properties of the LineItem object they want to receive, a practice known as field selection or partial response.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) for `GET /lineItems/{sourcedId}` includes this parameter:\n`{ \"name\": \"fields\", \"in\": \"query\", \"description\": \"To identify the range of fields that should be supplied in the response message.\", \"required\": false, \"type\": \"array\", \"items\": { \"type\": \"string\" }, \"collectionFormat\": \"csv\" }`\n\nThe upstream HTML documentation (section 4.6.2, \"getLineItem\" Operation, Notes) also confirms this: \"Query Parameters for the REST-based binding have been defined for this operation, namely: fields - to identify the range of fields that should be supplied in the response message.\"\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Missing the `fields` parameter is a significant deviation. This feature is crucial for API performance and efficiency, as it allows clients to reduce network traffic and JSON parsing overhead by requesting only the data they need. Failing to document or implement this standard feature degrades the API's utility and deviates from the official specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:58:57.220Z",
    "updatedAt": "2025-07-03T18:09:38.996Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-267/missing-fields-query-parameter-in-get-lineitemssourcedid"
  },
  {
    "id": "0bf70fdd-f2b9-4be6-8281-4171e81ba085",
    "identifier": "BUG-266",
    "title": "Missing OAuth2 Scopes in Security Definitions",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification applies a generic `OAuth2: []` security requirement to the operations. The empty array implies that a valid OAuth2 token is required, but it does not specify which scopes (permissions) are necessary to perform the action.\n\n**Summary:** \nThe local specification applies a generic `OAuth2: []` security requirement to the operations. The empty array implies that a valid OAuth2 token is required, but it does not specify which scopes (permissions) are necessary to perform the action.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `security` section at the path and operation level in the local specification for `/ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}`.\n2. Note that it is defined as `security: - OAuth2: []`.\n3. Compare this to the upstream JSON specification, which defines specific scopes for each operation (`GET`, `PUT`, `DELETE`).\n\nCurl Command:\nThis is a documentation and security policy bug. A `curl` command cannot directly reproduce it, but it manifests as a lack of clarity for developers on what permissions are needed. A client using a token without the correct scope should receive a 403 Forbidden error, but the local spec doesn't inform them what the correct scope is.\n\n**Expected:** \nThe upstream specification requires specific OAuth2 scopes for each operation to enforce granular access control. A client's token must contain the appropriate scope to be authorized.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) defines:\n\n* For `GET /lineItems/{sourcedId}`: `security: [ { \"OAuth2CC\": [\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly\", \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook-core.readonly\"] } ]`\n* For `PUT /lineItems/{sourcedId}`: `security: [ { \"OAuth2CC\": [\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.createput\"] } ]`\n* For `DELETE /lineItems/{sourcedId}`: `security: [ { \"OAuth2CC\": [\"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.delete\"] } ]`\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical security bug in the documentation. Omitting the required scopes prevents developers from requesting the correct permissions for their applications. It can lead to significant integration friction, with clients receiving unexpected 403 Forbidden errors. More importantly, it fails to properly document the API's security model, which is a critical piece of any API specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:57:25.938Z",
    "updatedAt": "2025-07-03T12:52:09.170Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-266/missing-oauth2-scopes-in-security-definitions"
  },
  {
    "id": "f20b9d04-8d7e-4bba-8327-6097a0c8481a",
    "identifier": "BUG-265",
    "title": "GUID Reference Objects in LineItem Schema are Missing Required `href` and `type` fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the local `LineItem` schema, GUID reference fields like `class`, `school`, and `category` are defined as objects that only contain a single required property: `sourcedId`. For example, `class` is defined as: `{ type: object, properties: { sourcedId: { type: string } }, required: [sourcedId] }`.\n\n**Summary:** \nIn the local `LineItem` schema, GUID reference fields like `class`, `school`, and `category` are defined as objects that only contain a single required property: `sourcedId`. For example, `class` is defined as: `{ type: object, properties: { sourcedId: { type: string } }, required: [sourcedId] }`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `LineItem` schema in the local specification.\n2. Look at the schema definitions for the `class`, `school`, `category`, `gradingPeriod`, `academicSession`, and `scoreScale` properties.\n3. Observe that these are defined as simple objects containing only a `sourcedId`.\n4. Compare this to the upstream JSON specification, which defines these properties as references to more complex `...GUIDRefDType` schemas.\n\nCurl Command (conceptual):\nA `GET` request to the endpoint should return a response body where objects like `class` contain three fields.\n`curl -X GET https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/some-guid -H \"Authorization: Bearer $TOKEN\"`\nExpected (based on local spec): `{\"lineItem\": {..., \"class\": {\"sourcedId\": \"some-class-id\"}, ...}}`\nCorrect (based on upstream spec): `{\"lineItem\": {..., \"class\": {\"href\": \"...\", \"sourcedId\": \"some-class-id\", \"type\": \"class\"}, ...}}`\n\n**Expected:** \nAccording to the upstream specification, these fields should conform to their respective `...GUIDRefDType` schemas, which require three properties: `href`, `sourcedId`, and `type`.\n\nFor example, the upstream JSON spec (`oneroster.gradebook.upstream.json`) defines the `class` property in `LineItemDType` as a `$ref` to `ClassGUIDRefDType`. `ClassGUIDRefDType` is defined with the following required properties:\n`\"required\": [\"href\", \"sourcedId\", \"type\"]`\n\nThe HTML documentation (e.g., section 6.1.11, \"ClassGUIDRef\") confirms that this object represents a reference and must include `href` (the URI to the referenced object), `sourcedId` (the GUID), and `type` (the object type, e.g., 'class'). This pattern is consistent for all GUID reference types.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema violation. The `href` and `type` fields are essential for a client to understand and navigate the data model. The `href` provides a direct link to the related resource, enabling discoverability (HATEOAS). The `type` field is crucial for polymorphism and correctly interpreting the reference. By omitting these, the local implementation provides an incomplete and non-compliant data structure that breaks standard client-side logic for handling OneRoster data.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:55:41.543Z",
    "updatedAt": "2025-07-03T18:04:47.239Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-265/guid-reference-objects-in-lineitem-schema-are-missing-required-href"
  },
  {
    "id": "08a89cf5-09d3-4c94-aa1d-c8b50afadf4b",
    "identifier": "BUG-264",
    "title": "Incorrect Behavior for PUT /lineItems/{sourcedId} (Update instead of Create)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `PUT /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}` defines the operation as a way to update an existing Line Item. The `operationId` is `updateLineItem`, the summary is \"Update a Line Item\", the description states \"To update an existing Line Item\", and the 201 response description is \"Line item successfully updated\".\n\n**Summary:** \nThe local specification for `PUT /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}` defines the operation as a way to update an existing Line Item. The `operationId` is `updateLineItem`, the summary is \"Update a Line Item\", the description states \"To update an existing Line Item\", and the 201 response description is \"Line item successfully updated\".\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the specification for the `PUT /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}` endpoint.\n2. Observe that the local specification describes this as an \"update\" operation.\n3. Compare this with the upstream JSON and HTML specifications, which describe it as a \"create\" operation.\n\nCurl Command (conceptual):\nThis is a semantic bug in the specification itself, not just a runtime issue. A `curl` command would be based on the intended behavior.\nTo test the documented local behavior (update):\n`curl -X PUT https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/existing-sourced-id -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" -d '{\"lineItem\": {\"title\": \"Updated Title\", ...}}'`\nTo test the upstream-specified behavior (create):\n`curl -X PUT https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/new-client-supplied-sourced-id -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" -d '{\"lineItem\": {\"title\": \"New Item\", ...}}'`\n\n**Expected:** \nAccording to the upstream specification, the `PUT` method on this endpoint is for *creating* a new Line Item where the `sourcedId` is supplied by the client. It is not for updating.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) states for `PUT /lineItems/{sourcedId}`:\n\n* `operationId`: `putLineItem`\n* `summary`: \"The REST create request message for the putLineItem() API call.\"\n* `description`: \"To create a new lineItem. The associated sourcedId for this new record is supplied by the requesting system.\"\n* The 201 response description is \"The object has been successfully stored in the Service Provider repository.\"\n\nThe upstream HTML documentation (section 4.6.4, \"putLineItem\" Operation) confirms this behavior: \"To create a new lineItem. The associated sourcedId for this new record is supplied by the requesting system.\"\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug as it represents a fundamental misunderstanding or misimplementation of the API's verb semantics. A client following the official upstream specification would attempt to use `PUT` to create new resources and would find the behavior of the locally-implemented API completely incorrect. Conversely, a developer using the local spec would incorrectly use `PUT` for updates, which violates the standard. This semantic conflict will lead to integration failures and incorrect data handling.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:53:45.142Z",
    "updatedAt": "2025-07-03T18:41:44.718Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-264/incorrect-behavior-for-put-lineitemssourcedid-update-instead-of-create"
  },
  {
    "id": "b2d17cef-a68b-4cef-b437-6fb6b9773896",
    "identifier": "BUG-263",
    "title": "LineItem Schema is Missing Required Fields `sourcedId`, `status`, and `dateLastModified`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `LineItem` schema in the local specification lists the following fields as required: `['title', 'assignDate', 'dueDate', 'class', 'school', 'category']`. The fields `sourcedId`, `status`, and `dateLastModified` are defined as properties but are not included in the `required` array, making them optional.\n\n**Summary:** \nThe `LineItem` schema in the local specification lists the following fields as required: `['title', 'assignDate', 'dueDate', 'class', 'school', 'category']`. The fields `sourcedId`, `status`, and `dateLastModified` are defined as properties but are not included in the `required` array, making them optional.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `LineItem` schema definition in the local specification under `components.schemas.LineItem`.\n2. Observe the `required` array for this schema.\n3. Compare this with the `required` array for the `LineItemDType` schema in the upstream JSON specification.\n\nCurl Command (conceptual):\nA client attempting to `PUT` a new LineItem might omit one of the required fields and expect a 422 Unprocessable Entity error, but based on the local spec, the request might be accepted.\n`curl -X PUT https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/some-guid -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" -d '{\"lineItem\": {\"title\": \"Test Item\", \"assignDate\": \"2023-10-27T10:00:00Z\", \"dueDate\": \"2023-10-28T10:00:00Z\", \"class\": {\"sourcedId\": \"class-guid\"}, \"school\": {\"sourcedId\": \"school-guid\"}, \"category\": {\"sourcedId\": \"cat-guid\"}}}'`\nThis payload is valid according to the local spec's `required` list but invalid according to the upstream spec because it's missing `sourcedId`, `status`, and `dateLastModified`.\n\n**Expected:** \nThe upstream `LineItemDType` schema, which corresponds to the local `LineItem` schema, requires `sourcedId`, `status`, and `dateLastModified` in addition to the other fields.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) defines `LineItemDType` with the `required` array:\n`\"required\": [\"sourcedId\", \"status\", \"dateLastModified\", \"title\", \"assignDate\", \"dueDate\", \"class\", \"school\", \"category\"]`\n\nThe upstream HTML documentation (section 6.1.7) defines the `Base` class from which `LineItem` inherits, and it explicitly states that `sourcedId`, `status`, and `dateLastModified` are mandatory (`[1]`) for all objects.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema violation. Omitting these fundamental fields from the `required` list can lead to the creation of invalid or incomplete data. `sourcedId` is the primary identifier, `status` is essential for lifecycle management, and `dateLastModified` is crucial for synchronization and auditing. An API client relying on the local spec could send invalid data that is either rejected or, worse, accepted in an incomplete state.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:53:44.254Z",
    "updatedAt": "2025-07-03T05:44:16.521Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-263/lineitem-schema-is-missing-required-fields-sourcedid-status-and"
  },
  {
    "id": "677f869b-4d8b-4c4f-b7e9-066ab1594d0f",
    "identifier": "BUG-262",
    "title": "OpenAPI specification for createExternalTestOut is incomplete - missing required fields",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** The API responds with a 422 Unprocessable Entity error containing the message: `{\"imsx_error_details\":[{\"path\":\"subject\",\"message\":\"Expected string, received null\"},{\"path\":\"language\",\"message\":\"Expected string, received null\"}]}`. This indicates that `subject` and `language` are required fields, but they are not documented in the OpenAPI specification and therefore not included in the generated SDK types.\n\n**Summary:** \nThe API responds with a 422 Unprocessable Entity error containing the message: `{\"imsx_error_details\":[{\"path\":\"subject\",\"message\":\"Expected string, received null\"},{\"path\":\"language\",\"message\":\"Expected string, received null\"}]}`. This indicates that `subject` and `language` are required fields, but they are not documented in the OpenAPI specification and therefore not included in the generated SDK types.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token for the PowerPath API.\n2. Create a course using the OneRoster API.\n3. Send a POST request to `/powerpath/createExternalTestOut` with the payload structure defined in the OpenAPI specification (courseId, toolProvider, vendorId, lessonType, xp).\n4. Observe the 422 validation error indicating missing required fields.\n\ncURL command:\n\n```bash\ncurl --location 'https://api.staging.alpha-1edtech.com/powerpath/createExternalTestOut' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"courseId\": \"YOUR_COURSE_ID\",\n    \"toolProvider\": \"edulastic\",\n    \"vendorId\": \"test-vendor-123\",\n    \"lessonType\": \"test-out\",\n    \"xp\": 100\n}'\n```\n\n**Expected:** \nThe API responds with a 422 Unprocessable Entity error containing the message: `{\"imsx_error_details\":[{\"path\":\"subject\",\"message\":\"Expected string, received null\"},{\"path\":\"language\",\"message\":\"Expected string, received null\"}]}`. This indicates that `subject` and `language` are required fields, but they are not documented in the OpenAPI specification and therefore not included in the generated SDK types.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/powerpath/createExternalTestOut](https://api.staging.alpha-1edtech.com/powerpath/createExternalTestOut)\nSDK: @superbuilders/powerpath (TypeScript SDK generated from OpenAPI spec)\n**Additional Notes:** This creates a mismatch between the documented API contract (OpenAPI spec) and the actual API implementation. Developers using the generated SDK cannot successfully call this endpoint without manually overriding TypeScript types with `as any` or similar workarounds. The same issue likely affects `createExternalPlacementTest` and other PowerPath creation endpoints.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:51:18.250Z",
    "updatedAt": "2025-07-01T23:22:39.150Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-262/openapi-specification-for-createexternaltestout-is-incomplete-missing"
  },
  {
    "id": "e1083c19-94b5-474d-ab0d-71757146d1fd",
    "identifier": "BUG-261",
    "title": "Optional 'scoreScale' object in Result is missing required fields 'href' and 'type'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `scoreScale` object within the `result` object is defined in the local spec as an object containing only a `sourcedId`. It is also incorrectly defined as nullable.\n\n```yaml\nscoreScale:\n  type:\n    - object\n    - 'null'\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Summary:** \nThe `scoreScale` object within the `result` object is defined in the local spec as an object containing only a `sourcedId`. It is also incorrectly defined as nullable.\n\n```yaml\nscoreScale:\n  type:\n    - object\n    - 'null'\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint that returns a result including the optional 'scoreScale' field.\n2. Examine the `scoreScale` object inside one of the `results` in the response array.\n3. Observe that it only contains a `sourcedId`.\n4. Compare this to the upstream `ScoreScaleGUIDRefDType` schema.\n\ncURL command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nWhen the optional `scoreScale` field is present, it must conform to the `ScoreScaleGUIDRefDType` definition. This definition requires three fields: `href`, `sourcedId`, and `type`.\n\nUpstream `ScoreScaleGUIDRefDType` definition:\n\n```json\n\"properties\": {\n  \"href\": { \"description\": \"...\", \"type\": \"string\", \"format\": \"uri\" },\n  \"sourcedId\": { \"description\": \"...\", \"type\": \"string\" },\n  \"type\": { \"description\": \"...\", \"type\": \"string\", \"enum\": [\"scoreScale\"] }\n},\n\"required\": [\"href\", \"sourcedId\", \"type\"]\n```\n\nEven though the `scoreScale` field itself is optional on the `Result` object, if the object is present, its internal structure must be compliant. The local implementation is missing the required `href` and `type` fields.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is another critical violation of the `GUIDRef` structure. The principle is that if an optional object is included in the payload, it must be well-formed and complete according to its schema definition. This bug breaks that principle.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:47:36.684Z",
    "updatedAt": "2025-07-02T17:28:42.301Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-261/optional-scorescale-object-in-result-is-missing-required-fields-href"
  },
  {
    "id": "746cd9d8-0ac9-48e5-a94d-1d6ffd93c245",
    "identifier": "BUG-260",
    "title": "Optional 'class' object in Result is missing required fields 'href' and 'type'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `class` object within the `result` object is defined in the local spec as an object containing only a `sourcedId`. It is also incorrectly defined as nullable.\n\n```yaml\nclass:\n  type:\n    - object\n    - 'null'\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Summary:** \nThe `class` object within the `result` object is defined in the local spec as an object containing only a `sourcedId`. It is also incorrectly defined as nullable.\n\n```yaml\nclass:\n  type:\n    - object\n    - 'null'\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint that returns a result including the optional 'class' field.\n2. Examine the `class` object inside one of the `results` in the response array.\n3. Observe that it only contains a `sourcedId`.\n4. Compare this to the upstream `ClassGUIDRefDType` schema.\n\ncURL command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nWhen the optional `class` field is present, it must conform to the `ClassGUIDRefDType` definition. This definition requires three fields: `href`, `sourcedId`, and `type`.\n\nUpstream `ClassGUIDRefDType` definition:\n\n```json\n\"properties\": {\n  \"href\": { \"description\": \"...\", \"type\": \"string\", \"format\": \"uri\" },\n  \"sourcedId\": { \"description\": \"...\", \"type\": \"string\" },\n  \"type\": { \"description\": \"...\", \"type\": \"string\", \"enum\": [\"class\"] }\n},\n\"required\": [\"href\", \"sourcedId\", \"type\"]\n```\n\nEven though the `class` field itself is optional on the `Result` object, if the object is present, its internal structure must be compliant. The local implementation is missing the required `href` and `type` fields.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is another critical violation of the `GUIDRef` structure. The principle is that if an optional object is included in the payload, it must be well-formed and complete according to its schema definition. This bug breaks that principle.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:43:18.431Z",
    "updatedAt": "2025-07-03T18:02:57.412Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-260/optional-class-object-in-result-is-missing-required-fields-href-and"
  },
  {
    "id": "20d399ae-7fe4-40ea-9352-11cfcfde05cc",
    "identifier": "BUG-259",
    "title": "Duplicate and conflicting 'Classes Management' tags in spec",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec contains two tag definitions with the same name, \"Classes Management\", but with different descriptions. The first description appears to be for the Rostering service, while the second is for the Gradebook service. This is invalid OpenAPI syntax and causes ambiguity.\n\n**Summary:** \nThe local spec contains two tag definitions with the same name, \"Classes Management\", but with different descriptions. The first description appears to be for the Rostering service, while the second is for the Gradebook service. This is invalid OpenAPI syntax and causes ambiguity.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Parse the local OpenAPI specification file.\n2. Observe the `tags` section at the root of the document.\n3. Note that there are two entries with the name \"Classes Management\".\n4. Note that their descriptions conflict.\n\n**Expected:** \nThere should be only one tag definition for \"Classes Management\". Its description should accurately reflect the scope of the operations under that tag. The upstream specification defines a single tag \"ClassesManagement\" with a description relevant to gradebook data in the context of a class.\n\nUpstream Tag Definition:\n`\"description\": \"This enables the management of Classes i.e. scheduled learning of courses, with respect to scoreScales. For this service this is the collection of operations that provide gradebook data in the context of a class identifier.\"`\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a low-severity bug but indicates a lack of quality control in the specification file. It can cause issues with documentation generation tools and create confusion for developers trying to understand the API's structure. The duplicate tag should be removed, and the remaining tag should have a correct and concise description.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:41:19.276Z",
    "updatedAt": "2025-07-03T17:40:44.283Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-259/duplicate-and-conflicting-classes-management-tags-in-spec"
  },
  {
    "id": "f37e4843-785b-4fcc-a383-0eda5ab36cc6",
    "identifier": "BUG-258",
    "title": "Non-standard query parameter 'search' is implemented",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines and accepts a non-standard query parameter named `search`.\n\n**Summary:** \nThe local specification defines and accepts a non-standard query parameter named `search`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the list of accepted query parameters for the endpoint in the local spec.\n2. Note the presence of the `search` parameter.\n3. Compare this list with the parameters defined in the upstream specification.\n\ncURL command demonstrating non-standard parameter:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results?search=somequery\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n```\n</steps_to_reproduce>\n<brief_bug_summary_what_actually_happened>\n```\n\nThe local specification defines and accepts a non-standard query parameter named `search`.\n\n**Expected:** \nThe upstream OneRoster specification for this endpoint (`getResultsForStudentForClass`) defines a specific set of query parameters: `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. It does not include a `search` parameter. Adding extra, undocumented parameters deviates from the standard and creates a proprietary version of the API.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While adding functionality can be useful, doing so with non-standard parameters breaks the promise of interoperability that a standard like OneRoster provides. Any functionality provided by `search` should ideally be achievable through the standard `filter` parameter. If it's a proprietary extension, it should be clearly documented as such in the `metadata` or extension points, not as a first-class parameter.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:39:12.306Z",
    "updatedAt": "2025-07-03T14:36:15.546Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-258/non-standard-query-parameter-search-is-implemented"
  },
  {
    "id": "57227827-78af-4b2e-bc6a-09792de1565b",
    "identifier": "BUG-257",
    "title": "Boolean-style fields in Result object are missing enum constraints",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines the fields `inProgress`, `incomplete`, `late`, and `missing` as simple strings without any constraints.\n\n```yaml\ninProgress:\n  type: string\n```\n\nThis implies any string value is valid.\n\n**Summary:** \nThe local spec defines the fields `inProgress`, `incomplete`, `late`, and `missing` as simple strings without any constraints.\n\n```yaml\ninProgress:\n  type: string\n```\n\nThis implies any string value is valid.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint.\n2. Examine the values of the `inProgress`, `incomplete`, `late`, and `missing` fields in a `result` object.\n3. Note that the local spec allows any string.\n4. Compare this to the upstream specification which restricts the values to 'true' or 'false'.\n\ncURL command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification defines these fields as strings with a required enum constraint of `['true', 'false']`. This is to represent a boolean value as a string.\n\nUpstream `ResultDType` definition for `inProgress`:\n\n```json\n\"inProgress\": {\n  \"description\": \"...\",\n  \"type\": \"string\",\n  \"enum\": [\"true\", \"false\"]\n}\n```\n\nThe HTML documentation (e.g., section 6.1.24.11) confirms this by referencing the `BooleanTrueFalseEnum` vocabulary. The local implementation fails to enforce this critical constraint, potentially allowing invalid data (e.g., \"TRUE\", \"1\", \"yes\") to be returned, which would break a strictly compliant client.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Missing enum constraints on fields that are meant to represent booleans is a critical bug. It breaks the data contract and can lead to parsing errors and incorrect logic in client applications. The server should be strictly enforcing and documenting this constraint.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:38:06.462Z",
    "updatedAt": "2025-07-03T17:35:49.712Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-257/boolean-style-fields-in-result-object-are-missing-enum-constraints"
  },
  {
    "id": "25082682-df51-440c-a926-c00f8553038c",
    "identifier": "BUG-256",
    "title": "'scoreDate' field has incorrect format 'date-time' instead of 'date'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines the `scoreDate` field with a `format` of `date-time`.\n\n```yaml\nscoreDate:\n  type: string\n  format: date-time\n```\n\n**Summary:** \nThe local spec defines the `scoreDate` field with a `format` of `date-time`.\n\n```yaml\nscoreDate:\n  type: string\n  format: date-time\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint.\n2. Examine the value of the `scoreDate` field in a `result` object.\n3. Note that it includes time information (e.g., `2023-10-27T10:00:00Z`).\n4. Compare this to the upstream specification for the `scoreDate` field.\n\ncURL command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification explicitly defines `scoreDate` as having a `format` of `date`.\n\nUpstream JSON `ResultDType` definition:\n\n```json\n\"scoreDate\": {\n  \"description\": \"...\",\n  \"type\": \"string\",\n  \"format\": \"date\"\n}\n```\n\nThe upstream HTML documentation in section `6.1.24.8 \"scoreDate\" Attribute Description` confirms this: \"The date at which the score is assigned... The format is YYYY-MM-DD as defined in \\[ISO 8601\\].\" A client expecting a `date` string (`YYYY-MM-DD`) may fail to parse a `date-time` string.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical data type mismatch. While both are strings, the format is part of the contract. A client using strict validation or a date-parsing library without time support will fail when processing the response from the local implementation. This breaks interoperability.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:35:35.908Z",
    "updatedAt": "2025-07-02T20:28:05.891Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-256/scoredate-field-has-incorrect-format-date-time-instead-of-date"
  },
  {
    "id": "0c87f8f5-7512-41ba-8788-995fde365a24",
    "identifier": "BUG-255",
    "title": "'student' object in Result is missing required fields 'href' and 'type'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `student` object within the `result` object is defined in the local spec as an object containing only a `sourcedId`.\n\n```yaml\nstudent:\n  type: object\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Summary:** \nThe `student` object within the `result` object is defined in the local spec as an object containing only a `sourcedId`.\n\n```yaml\nstudent:\n  type: object\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint.\n2. Examine the `student` object inside one of the `results` in the response array.\n3. Observe that it only contains a `sourcedId`.\n4. Compare this to the upstream `UserGUIDRefDType` schema.\n\ncURL command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `student` object should conform to the `UserGUIDRefDType` definition in the upstream spec. This definition requires three fields: `href`, `sourcedId`, and `type`.\n\nUpstream `UserGUIDRefDType` definition:\n\n```json\n\"properties\": {\n  \"href\": { \"description\": \"...\", \"type\": \"string\", \"format\": \"uri\" },\n  \"sourcedId\": { \"description\": \"...\", \"type\": \"string\" },\n  \"type\": { \"description\": \"...\", \"type\": \"string\", \"enum\": [\"user\"] }\n},\n\"required\": [\"href\", \"sourcedId\", \"type\"]\n```\n\nThe local implementation is missing the required `href` and `type` fields, making it non-compliant.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug for the same reasons as the `lineItem` field. The `GUIDRef` structure is fundamental. Omitting these required fields breaks the data model and cripples the client's ability to navigate the API as intended.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:34:12.004Z",
    "updatedAt": "2025-07-03T17:08:09.118Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-255/student-object-in-result-is-missing-required-fields-href-and-type"
  },
  {
    "id": "79bce23d-362d-4509-a9a6-574b30fbc582",
    "identifier": "BUG-254",
    "title": "POST /powerpath/finalStudentAssessmentResponse returns 500 error for a predictable client error",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** When a client incorrectly tries to finalize an *external* test lesson using this endpoint, the server responds with a `500 Internal Server Error`. The error message in the HTML response correctly states that this action is not permitted for external tests.\n\n**Summary:** \nWhen a client incorrectly tries to finalize an *external* test lesson using this endpoint, the server responds with a `500 Internal Server Error`. The error message in the HTML response correctly states that this action is not permitted for external tests.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token.\n2. Create a student, course, and an \"external test-out\" lesson.\n3. Attempt to finalize the assessment for this external lesson using the `/powerpath/finalStudentAssessmentResponse` endpoint.\n4. Observe the 500 error response.\n\ncURL command:\n\n```bash\n# NOTE: This requires creating a student and an external test-out lesson first to get a valid lesson ID.\ncurl --location 'https://api.staging.alpha-1edtech.com/powerpath/finalStudentAssessmentResponse' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"student\": \"YOUR_STUDENT_ID\",\n    \"lesson\": \"YOUR_EXTERNAL_LESSON_ID\"\n}'\n```\n\n**Expected:** \nThis is a client error, not a server failure. The API should respond with a `4xx` status code, such as `400 Bad Request` or `409 Conflict`, to indicate that the request is invalid for the given resource's state. The response body should be a structured JSON error object, not an HTML page with a stack trace.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/powerpath/finalStudentAssessmentResponse](https://api.staging.alpha-1edtech.com/powerpath/finalStudentAssessmentResponse)\n**Additional Notes:** Misusing HTTP status codes makes it difficult for clients to distinguish between their own errors and actual server failures. This, combined with the HTML response, violates API best practices and the spec.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:09:05.144Z",
    "updatedAt": "2025-07-03T16:54:53.718Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-254/post-powerpathfinalstudentassessmentresponse-returns-500-error-for-a"
  },
  {
    "id": "55e7cb41-b7e2-4d1b-926f-fb4406fd7f3d",
    "identifier": "BUG-253",
    "title": "'lineItem' object in Result is missing required fields 'href' and 'type'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `lineItem` object within the `result` object is defined in the local spec as an object containing only a `sourcedId`.\n\n```yaml\nlineItem:\n  type: object\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Summary:** \nThe `lineItem` object within the `result` object is defined in the local spec as an object containing only a `sourcedId`.\n\n```yaml\nlineItem:\n  type: object\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint.\n2. Examine the `lineItem` object inside one of the `results` in the response array.\n3. Observe that it only contains a `sourcedId`.\n4. Compare this to the upstream `LineItemGUIDRefDType` schema.\n\ncURL command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `lineItem` object should conform to the `LineItemGUIDRefDType` definition in the upstream spec. This definition requires three fields: `href`, `sourcedId`, and `type`.\n\nUpstream `LineItemGUIDRefDType` definition:\n\n```json\n\"properties\": {\n  \"href\": { \"description\": \"...\", \"type\": \"string\", \"format\": \"uri\" },\n  \"sourcedId\": { \"description\": \"...\", \"type\": \"string\" },\n  \"type\": { \"description\": \"...\", \"type\": \"string\", \"enum\": [\"lineItem\"] }\n},\n\"required\": [\"href\", \"sourcedId\", \"type\"]\n```\n\nThe local implementation is missing the required `href` and `type` fields, making it non-compliant.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug. The `GUIDRef` object structure is a fundamental part of the OneRoster specification, providing necessary context (`type`) and a direct link (`href`) to the referenced resource. Omitting these required fields breaks the data model and cripples the client's ability to navigate the API as intended.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:05:43.419Z",
    "updatedAt": "2025-07-03T17:07:24.297Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-253/lineitem-object-in-result-is-missing-required-fields-href-and-type"
  },
  {
    "id": "a671f532-421c-425f-86aa-08d6d3ab128c",
    "identifier": "BUG-252",
    "title": "POST /powerpath/lessonPlans returns an inconsistent and non-deterministic response body",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** The `createLessonPlan` endpoint returns one of two different successful response schemas. Sometimes it returns `{\"lessonPlan\": {\"id\": \"...\"}}`, and other times it returns a nested version: `{\"lessonPlan\": {\"lessonPlan\": {\"id\": \"...\"}}}`. The client test script (`power-path-lesson-plans.ts`) has to include a workaround to check for both possible structures.\n\n**Summary:** \nThe `createLessonPlan` endpoint returns one of two different successful response schemas. Sometimes it returns `{\"lessonPlan\": {\"id\": \"...\"}}`, and other times it returns a nested version: `{\"lessonPlan\": {\"lessonPlan\": {\"id\": \"...\"}}}`. The client test script (`power-path-lesson-plans.ts`) has to include a workaround to check for both possible structures.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token.\n2. Create a student and a course via the OneRoster API.\n3. Send a POST request to `/powerpath/lessonPlans/` with the student and course IDs.\n4. Repeat the process multiple times and observe the variance in the response JSON structure.\n\ncURL command:\n\n```bash\n# This requires a valid student and course ID to be created first.\ncurl --location 'https://api.staging.alpha-1edtech.com/powerpath/lessonPlans/' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"userId\": \"YOUR_STUDENT_ID\",\n    \"courseId\": \"YOUR_COURSE_ID\"\n}'\n```\n\n**Expected:** \nAn API endpoint must always return a consistent, deterministic response schema for a successful operation as defined in its OpenAPI specification. A client should not have to guess which of two possible valid structures it will receive. The API should be fixed to return only one of these structures consistently.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/powerpath/lessonPlans/](https://api.staging.alpha-1edtech.com/powerpath/lessonPlans/)\n**Additional Notes:** This is a direct violation of the OpenAPI specification principle of a consistent contract. It makes client-side implementation fragile and error-prone.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:04:16.202Z",
    "updatedAt": "2025-07-01T23:20:37.428Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-252/post-powerpathlessonplans-returns-an-inconsistent-and-non"
  },
  {
    "id": "d0616a68-250d-425a-b38b-b860e4bdeb2b",
    "identifier": "BUG-251",
    "title": "'Result' object in response is missing required fields 'sourcedId' and 'dateLastModified'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `required` properties for a `result` object as `['status', 'lineItem', 'student', 'scoreStatus', 'scoreDate']`. It omits `sourcedId` and `dateLastModified`.\n\n**Summary:** \nThe local specification defines the `required` properties for a `result` object as `['status', 'lineItem', 'student', 'scoreStatus', 'scoreDate']`. It omits `sourcedId` and `dateLastModified`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint.\n2. Examine the `results` array in the response.\n3. Check which fields are guaranteed to be present in each `result` object.\n4. Compare this against the `required` list for the `ResultDType` in the upstream spec.\n\ncURL command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification's `ResultDType` clearly marks `sourcedId` and `dateLastModified` as required fields. They are inherited from the `Base` class, which states they MUST be present.\n\nUpstream `ResultDType` `required` list:\n`\"required\": [\"sourcedId\", \"status\", \"dateLastModified\", \"lineItem\", \"student\", \"scoreStatus\", \"scoreDate\"]`\n\nThe HTML documentation (Section 6.1.7, \"Base\" Class Description) confirms for `sourcedId`: \"All objects MUST be identified by a Source Identifier.\" and for `dateLastModified`: \"All objects MUST be annotated with the dateTime upon which they were last modified.\" The local implementation violates this critical requirement.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** The `sourcedId` is the primary key for the object. Making it optional is a severe violation of the OneRoster data model and breaks the ability for clients to reliably identify and reference objects. Similarly, `dateLastModified` is essential for synchronization and filtering, and its omission from `required` fields is a critical flaw.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:02:55.116Z",
    "updatedAt": "2025-07-03T12:32:42.777Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-251/result-object-in-response-is-missing-required-fields-sourcedid-and"
  },
  {
    "id": "86e38ed3-5e4d-4041-93c5-00eca5fcbca3",
    "identifier": "BUG-250",
    "title": "Incorrect data type for 'fields' query parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `fields` query parameter as a single `string`.\n\n```yaml\n- in: query\n  name: fields\n  description: Comma-separated list of fields to include in the response\n  schema:\n    type: string\n```\n\n**Summary:** \nThe local specification defines the `fields` query parameter as a single `string`.\n\n```yaml\n- in: query\n  name: fields\n  description: Comma-separated list of fields to include in the response\n  schema:\n    type: string\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the definition of the `fields` query parameter in the local OpenAPI spec.\n2. Compare it with the definition in the upstream OneRoster spec.\n\ncURL command demonstrating intended upstream usage:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results?fields=sourcedId,status\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification defines the `fields` query parameter as an `array` of `string` with a `collectionFormat` of `csv`. This is the correct way to model a comma-separated list of values for a query parameter in OpenAPI 2.0. While the local spec is OpenAPI 3.1, translating this correctly would involve using `style: form` and `explode: false` with a type of `array`. Defining it as a single `string` is an incorrect and less descriptive representation.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`):\n\n```json\n{\n  \"name\": \"fields\",\n  \"in\": \"query\",\n  \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  },\n  \"collectionFormat\": \"csv\",\n  \"allowEmptyValue\": false\n}\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Incorrectly defining the type of the `fields` parameter can lead to issues with client generation, validation, and documentation. The upstream specification is clear about the type being an array, which allows for better tooling and validation support. The local implementation oversimplifies this to a primitive string, losing valuable schema information.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T21:00:07.565Z",
    "updatedAt": "2025-07-03T17:05:41.533Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-250/incorrect-data-type-for-fields-query-parameter"
  },
  {
    "id": "bbea901d-dcfa-4f5e-9de2-e2203e4a31ce",
    "identifier": "BUG-249",
    "title": "POST /powerpath/makeExternalTestAssignment is extremely slow and results in a 500 error",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** The API call to `makeExternalTestAssignment` takes approximately 35 seconds to respond, as seen in the logs (request at 15:31:59, response at 15:32:34). After this long delay, it fails with a `500 Internal Server Error`. This indicates a severe performance issue, likely a downstream timeout. The feature is unusable.\n\n**Summary:** \nThe API call to `makeExternalTestAssignment` takes approximately 35 seconds to respond, as seen in the logs (request at 15:31:59, response at 15:32:34). After this long delay, it fails with a `500 Internal Server Error`. This indicates a severe performance issue, likely a downstream timeout. The feature is unusable.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token.\n2. Create a student and a course using the OneRoster API.\n3. Create an external placement test lesson for the course using `createExternalPlacementTest`.\n4. Using the returned `lessonId`, call `makeExternalTestAssignment`.\n5. Observe the extremely long response time and the resulting 500 error.\n\ncURL command (sequential):\nThis is difficult to reproduce with simple cURL commands due to the required setup sequence. The logic is present in the `power-path-course-mastery.ts` test script. The final failing call is:\n\n```bash\n# Note: lessonId must be a valid ID from a newly created external test.\ncurl --location 'https://api.staging.alpha-1edtech.com/powerpath/makeExternalTestAssignment' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"student\": \"YOUR_CREATED_STUDENT_ID\",\n    \"lesson\": \"YOUR_CREATED_LESSON_ID\"\n}'\n```\n\n**Expected:** \nThe API endpoint should respond within a reasonable timeframe (e.g., under 2 seconds). If there is a failure with a downstream service, it should fail fast and return a relevant error code (e.g., `502 Bad Gateway` or `504 Gateway Timeout`) with a proper JSON error body, not a generic 500 error after a long wait.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/powerpath/makeExternalTestAssignment](https://api.staging.alpha-1edtech.com/powerpath/makeExternalTestAssignment)\nAs observed in logs from 2025/06/30.\n**Additional Notes:** This performance issue is explicitly in-scope for the bug bounty. The error message \"Error: Failed to setup session\" suggests the problem lies in the integration with the Edulastic API service.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:58:34.212Z",
    "updatedAt": "2025-07-03T16:56:43.179Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-249/post-powerpathmakeexternaltestassignment-is-extremely-slow-and-results"
  },
  {
    "id": "6a9eaf94-a8f3-4b13-b706-e344b81a5ac9",
    "identifier": "BUG-248",
    "title": "PowerPath endpoints return HTML error pages with stack traces instead of JSON",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** PowerPath API\n**Bug Type:** Multiple PowerPath endpoints, when they encounter a server-side error, respond with an HTTP `500 Internal Server Error` status. The body of the response is an HTML document containing a formatted error message and a JavaSript stack trace. The `Content-Type` header is `text/html; charset=utf-8`.\n\n**Summary:** \nMultiple PowerPath endpoints, when they encounter a server-side error, respond with an HTTP `500 Internal Server Error` status. The body of the response is an HTML document containing a formatted error message and a JavaSript stack trace. The `Content-Type` header is `text/html; charset=utf-8`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain a valid Bearer token for the PowerPath API.\n2. Send a POST request to an endpoint with invalid data that would cause a server error, for example, calling `createNewAttempt` with a non-existent lesson ID.\n3. Observe the `Content-Type` and body of the 500 error response.\n\ncURL command:\n\n```bash\ncurl --location 'https://api.staging.alpha-1edtech.com/powerpath/createNewAttempt' \\\n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"student\": \"any-student-id\",\n    \"lesson\": \"invalid-lesson-id\"\n}'\n```\n\n**Expected:** \nAn API should consistently return JSON responses, including for errors. The server should respond with a structured JSON error object (like the `imsxError` format used for 404s) and a `Content-Type` of `application/json`. Returning an HTML page with a stack trace is a serious issue, as it breaks automated error handling for clients and leaks internal implementation details.\n\n**Environment:** API Endpoints:\n\n* [https://api.staging.alpha-1edtech.com/powerpath/createNewAttempt](https://api.staging.alpha-1edtech.com/powerpath/createNewAttempt)\n* [https://api.staging.alpha-1edtech.com/powerpath/updateStudentQuestionResponse](https://api.staging.alpha-1edtech.com/powerpath/updateStudentQuestionResponse)\n* [https://api.staging.alpha-1edtech.com/powerpath/finalStudentAssessmentResponse](https://api.staging.alpha-1edtech.com/powerpath/finalStudentAssessmentResponse)\n* [https://api.staging.alpha-1edtech.com/powerpath/makeExternalTestAssignment](https://api.staging.alpha-1edtech.com/powerpath/makeExternalTestAssignment)\n  **Additional Notes:** This behavior is observed across multiple endpoints, indicating a systemic issue in the error handling middleware for the PowerPath API. Exposing stack traces is a security vulnerability.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T20:56:13.287Z",
    "updatedAt": "2025-07-03T18:17:32.403Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-248/powerpath-endpoints-return-html-error-pages-with-stack-traces-instead"
  },
  {
    "id": "c66a06cb-f4d6-46e4-9118-93596ecdce4a",
    "identifier": "BUG-247",
    "title": "LOW: Duplicate tag definition in the root of the specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec contains two separate definitions for the `Classes Management` tag, each with a different description.\n\n```yaml\ntags:\n  - name: Classes Management\n    description: This enables the management of classes i.e. scheduled learning of courses, with respect to academic sessions.\n  - name: Classes Management\n    description: This enables the management of Classes i.e. scheduled learning of courses, with respect to scoreScales. For this service this is the collection of operations that provide gradebook data in the context of a class identifier.\n```\n\n**Summary:** \nThe local spec contains two separate definitions for the `Classes Management` tag, each with a different description.\n\n```yaml\ntags:\n  - name: Classes Management\n    description: This enables the management of classes i.e. scheduled learning of courses, with respect to academic sessions.\n  - name: Classes Management\n    description: This enables the management of Classes i.e. scheduled learning of courses, with respect to scoreScales. For this service this is the collection of operations that provide gradebook data in the context of a class identifier.\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `tags` array at the root of the local OpenAPI specification file.\n2. Observe that the tag \"Classes Management\" is defined twice.\n\n**Expected:** \nhere should be only one definition for each tag name. The upstream specification defines a single `ClassesManagement` tag.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`):\n\n```json\n\"tags\": [\n  ...\n  {\n    \"name\": \"ClassesManagement\",\n    \"description\": \"This enables the management of Classes i.e. scheduled learning of courses, with respect to scoreScales. For this service this is the collection of operations that provide gradebook data in the context of a class identifier.\"\n  },\n  ...\n]\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Duplicate tag definitions are invalid according to the OpenAPI specification and can cause issues with tooling and documentation generators. This indicates a quality control issue in the local specification file. The second description more closely matches the upstream description.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:54:29.303Z",
    "updatedAt": "2025-07-03T16:42:36.903Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-247/low-duplicate-tag-definition-in-the-root-of-the-specification"
  },
  {
    "id": "a87afab0-b302-4654-af8b-ea889b7f779c",
    "identifier": "BUG-246",
    "title": "Incorrect Response Schema for 200 OK (Collection)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns a custom pagination envelope for the 200 OK response. The body includes top-level keys such as `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` alongside the `results` array.\n\n**Summary:** \nThe local implementation returns a custom pagination envelope for the 200 OK response. The body includes top-level keys such as `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` alongside the `results` array.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful GET request to the endpoint `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results`.\n2. Observe the JSON response body structure.\n3. Compare the structure to the official OneRoster specification.\n\ncURL command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/students/someStudentId/results\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification, the 200 OK response body should be an object containing only a `results` array. Specifically, it should conform to the `ResultSetDType` definition. Pagination information, such as the total count of records, should be returned in the `X-Total-Count` HTTP header, not in the JSON body.\n\nThe upstream JSON spec defines the 200 OK response as:\n\n```json\n\"200\": {\n  \"description\": \"The request was successfully completed...\",\n  \"schema\": {\n    \"$ref\": \"#/definitions/ResultSetDType\"\n  },\n  \"headers\": {\n    \"X-Total-Count\": {\n      \"description\": \"The total number of resources that are available to be returned\",\n      \"type\": \"integer\"\n    }\n  }\n}\n```\n\nAnd `ResultSetDType` is defined as:\n\n```json\n\"ResultSetDType\": {\n  \"properties\": {\n    \"results\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/ResultDType\"\n      }\n    }\n  }\n}\n```\n\nThis shows the body should only contain the `results` object.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/students/{studentSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This deviation from the standard response structure is a critical bug. It breaks compatibility with any client built strictly against the official OneRoster specification. Clients would not expect pagination data in the body and would expect it in the `X-Total-Count` header instead. This makes the local implementation non-compliant.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:54:28.480Z",
    "updatedAt": "2025-07-03T13:02:58.410Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-246/incorrect-response-schema-for-200-ok-collection"
  },
  {
    "id": "8dc4a341-52d2-49ba-b2f7-e1d2c105f9ae",
    "identifier": "BUG-245",
    "title": "LOW: Operation summary deviates from the official specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec has a `summary` of: `Create Line Items for a Class`.\n\n**Summary:** \nThe local spec has a `summary` of: `Create Line Items for a Class`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Read the `summary` field for the `POST /.../lineItems` operation in the local OpenAPI spec.\n2. Compare it to the `summary` field for the same operation in the upstream JSON spec.\n\n**Expected:** \nThe upstream specification provides a different summary for this operation. While the local summary is more human-friendly, it is a deviation.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`):\n\n```json\n\"summary\": \"The REST createbp request message for the postLineItemsForClass() API call.\"\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a low-severity documentation issue. It does not affect functionality but represents an inconsistency with the official specification. Maintaining alignment on descriptive text helps ensure that documentation and generated client code are consistent with the upstream standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:50:40.183Z",
    "updatedAt": "2025-07-01T23:19:10.837Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-245/low-operation-summary-deviates-from-the-official-specification"
  },
  {
    "id": "3c410095-bd90-405a-a83a-8fdcaf8e74b7",
    "identifier": "BUG-244",
    "title": "HIGH: Operation is missing required OAuth2 security scope",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification applies a generic `OAuth2` security requirement to the endpoint but fails to specify the required scope. The `security` block is ` - OAuth2: []`.\n\n**Summary:** \nThe local specification applies a generic `OAuth2` security requirement to the endpoint but fails to specify the required scope. The `security` block is ` - OAuth2: []`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the security requirements for the `POST /.../lineItems` endpoint in the local spec.\n2. Note that it only specifies `OAuth2: []` without any specific scopes.\n3. A client could potentially call this endpoint with a valid token that does not have the `gradebook.createpost` scope, and it may be incorrectly authorized.\n\nCurl command (conceptual):\n\n```bash\n# A token without the gradebook.createpost scope should be rejected\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/lineItems' \\\n-H 'Authorization: Bearer $TOKEN_WITHOUT_REQUIRED_SCOPE' \\\n-H 'Content-Type: application/json' \\\n-d '...'\n```\n\n**Expected:** \nThe upstream specification explicitly requires the `https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.createpost` scope for this operation. The security definition in the local spec should reflect this requirement for correct authorization and documentation.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`):\n\n```json\n\"post\": {\n  ...\n  \"security\": [\n    {\n      \"OAuth2CC\": [\n        \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.createpost\"\n      ]\n    }\n  ],\n  ...\n}\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Missing security scope information is a high-severity issue. It can lead to improper access control where a client with a valid token but insufficient permissions might be granted access to create resources. It also provides incorrect documentation to developers, who will not know which scopes to request for their applications.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:49:40.318Z",
    "updatedAt": "2025-07-03T12:51:35.294Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-244/high-operation-is-missing-required-oauth2-security-scope"
  },
  {
    "id": "8fd7fde6-21e0-4754-8058-378449bb17f5",
    "identifier": "BUG-243",
    "title": "CRITICAL: 201 Created response body returns a single object instead of an array",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the 201 response as an object containing a single `sourcedIdPairs` object.\n\n**Summary:** \nThe local specification defines the 201 response as an object containing a single `sourcedIdPairs` object.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Successfully create a line item via a POST request to `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems`.\n2. Observe the 201 Created response body.\n3. According to the local spec, the response will be a JSON object containing a single key `sourcedIdPairs` which is an object, not an array.\n\nExample response based on local spec:\n\n```json\n{\n  \"sourcedIdPairs\": {\n    \"suppliedSourcedId\": \"client-temp-id-123\",\n    \"allocatedSourcedId\": \"server-new-id-abc\"\n  }\n}\n```\n\n**Expected:** \nThe upstream specification requires the 201 response schema to be a `GUIDPairSetDType`. This schema defines a body with a single key `sourcedIdPairs` (plural) which holds an **array** of `GUIDPairDType` objects.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`):\n\n```json\n\"GUIDPairSetDType\": {\n  \"properties\": {\n    \"sourcedIdPairs\": {\n      \"type\": \"array\",\n      \"minItems\": 0,\n      \"items\": {\n        \"$ref\": \"#/definitions/GUIDPairDType\"\n      }\n    }\n  }\n}\n```\n\nThis is consistent with the endpoint being a bulk creation endpoint. Even if only one item is created, it should be returned within an array.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This bug is the response-side counterpart to the incorrect request body structure. A client expecting an array of results will fail to parse the single object returned by the local implementation. This is a critical failure to comply with the specified data contract for a successful creation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:45:30.584Z",
    "updatedAt": "2025-07-03T16:41:35.746Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-243/critical-201-created-response-body-returns-a-single-object-instead-of"
  },
  {
    "id": "bcc6c8cb-1253-4d95-a301-ed7ff8f6cb51",
    "identifier": "BUG-242",
    "title": "CRITICAL: GUID Reference objects in request body are incomplete; missing required `href` and `type` fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines GUID reference objects (like `class`, `school`, `category`) as objects containing only a `sourcedId`.\n\n**Summary:** \nThe local spec defines GUID reference objects (like `class`, `school`, `category`) as objects containing only a `sourcedId`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a POST request to the `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems` endpoint.\n2. In the LineItem object, provide the `class` object with only the `sourcedId` field.\n3. According to the local spec, this is a valid request.\n\nCurl command based on local spec:\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/lineItems' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"lineItem\": {\n    \"sourcedId\": \"client-temp-id-123\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2023-10-27T09:00:00Z\",\n    \"title\": \"Item with incomplete GUIDRef\",\n    \"assignDate\": \"2023-10-27T10:00:00Z\",\n    \"dueDate\": \"2023-11-10T23:59:59Z\",\n    \"class\": { \"sourcedId\": \"someClassId\" },\n    \"school\": { \"sourcedId\": \"someSchoolId\" },\n    \"category\": { \"sourcedId\": \"someCategoryId\" }\n  }\n}'\n```\n\n**Expected:** \nThe upstream specification requires these objects to conform to the `...GUIDRefDType` schema, which includes three required fields: `href`, `sourcedId`, and `type`.\n\nFor example, the `class` field should conform to `ClassGUIDRefDType`:\n\n```json\n\"ClassGUIDRefDType\": {\n  \"properties\": {\n    \"href\": { \"type\": \"string\", \"format\": \"uri\" },\n    \"sourcedId\": { \"type\": \"string\" },\n    \"type\": { \"type\": \"string\", \"enum\": [\"class\"] }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\nThe local implementation is missing the required `href` and `type` fields for all GUID reference objects (`class`, `school`, `category`, `gradingPeriod`, etc.) in the `LineItem` schema.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema mismatch that will cause requests from a compliant client to fail validation or be misinterpreted by the server. The `type` field is essential for distinguishing between different kinds of referenced objects, and `href` provides a direct link to the resource. Omitting them breaks the data model.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:42:58.321Z",
    "updatedAt": "2025-07-03T16:30:05.139Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-242/critical-guid-reference-objects-in-request-body-are-incomplete-missing"
  },
  {
    "id": "0ba7b77a-6b6d-486e-9fd1-8c8b580538a7",
    "identifier": "BUG-241",
    "title": "CRITICAL: Request body LineItem schema is missing required fields `sourcedId`, `status`, and `dateLastModified`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec's `LineItem` schema only requires `title`, `assignDate`, `dueDate`, `class`, `school`, and `category`. The fields `sourcedId`, `status`, and `dateLastModified` are defined but not required.\n\n**Summary:** \nThe local spec's `LineItem` schema only requires `title`, `assignDate`, `dueDate`, `class`, `school`, and `category`. The fields `sourcedId`, `status`, and `dateLastModified` are defined but not required.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a POST request to the `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems` endpoint.\n2. Provide a LineItem object in the request body that omits the `sourcedId`, `status`, and `dateLastModified` fields, as they are not marked as required in the local spec.\n3. The request would be accepted by the local implementation but is invalid according to the upstream spec.\n\nCurl command based on local spec:\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/lineItems' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"lineItem\": {\n    \"title\": \"Item Missing Required Fields\",\n    \"assignDate\": \"2023-10-27T10:00:00Z\",\n    \"dueDate\": \"2023-11-10T23:59:59Z\",\n    \"class\": { \"sourcedId\": \"someClassId\" },\n    \"school\": { \"sourcedId\": \"someSchoolId\" },\n    \"category\": { \"sourcedId\": \"someCategoryId\" }\n  }\n}'\n```\n\n**Expected:** \nThe upstream `LineItemDType` schema, which inherits from the `Base` schema, mandates that `sourcedId`, `status`, and `dateLastModified` are required fields in the request.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`), `LineItemDType` definition:\n\n```json\n\"required\": [\n  \"sourcedId\",\n  \"status\",\n  \"dateLastModified\",\n  \"title\",\n  \"assignDate\",\n  \"dueDate\",\n  \"class\",\n  \"school\",\n  \"category\"\n]\n```\n\nThe HTML documentation (Section 4.5.8) also clarifies the purpose of the supplied `sourcedId`: \"This includes an initial assignment of sourcedId so that the mapping between this and the actually assigned sourcedId can be reported.\" This confirms its necessity in the request.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Omitting required fields is a critical violation of the specification. A compliant client will always send these fields, but the local documentation incorrectly suggests they are optional. More importantly, the lack of a required `sourcedId` from the client makes it impossible to map the client's temporary ID to the server-allocated ID in the response, which is a key part of this operation's flow.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:41:52.464Z",
    "updatedAt": "2025-07-03T05:44:17.561Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-241/critical-request-body-lineitem-schema-is-missing-required-fields"
  },
  {
    "id": "79aa44e6-de5a-46f4-984d-a9327f828825",
    "identifier": "BUG-240",
    "title": "CRITICAL: Request body for POST /.../lineItems accepts a single object instead of an array for bulk creation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the endpoint defines the request body as a JSON object containing a single `lineItem` object. This means the endpoint is implemented to create only one line item per API call.\n\n**Summary:** \nThe local specification for the endpoint defines the request body as a JSON object containing a single `lineItem` object. This means the endpoint is implemented to create only one line item per API call.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Construct a POST request to the `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems` endpoint.\n2. According to the local spec, the request body should be a JSON object with a single key \"lineItem\" containing one LineItem object.\n3. Send the request.\n\nCurl command based on local spec:\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/lineItems' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"lineItem\": {\n    \"title\": \"Single Item Test\",\n    \"assignDate\": \"2023-10-27T10:00:00Z\",\n    \"dueDate\": \"2023-11-10T23:59:59Z\",\n    \"class\": { \"sourcedId\": \"someClassId\" },\n    \"school\": { \"sourcedId\": \"someSchoolId\" },\n    \"category\": { \"sourcedId\": \"someCategoryId\" }\n  }\n}'\n```\n\n**Expected:** \nThe upstream specification requires the request body to be an object containing a key named `lineItems` (plural), which holds an **array** of `LineItemDType` objects. The endpoint is designed for bulk creation of line items.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`):\nThe request body parameter is named `lineItems` and its schema references `LineItemSetDType`.\n\n```json\n\"parameters\": [\n  ...\n  {\n    \"name\": \"lineItems\",\n    \"in\": \"body\",\n    \"required\": true,\n    \"schema\": {\n      \"$ref\": \"#/definitions/LineItemSetDType\"\n    }\n  }\n]\n```\n\nThe `LineItemSetDType` is defined as:\n\n```json\n\"LineItemSetDType\": {\n  \"properties\": {\n    \"lineItems\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/LineItemDType\"\n      }\n    }\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical deviation from the OneRoster specification. The endpoint is intended for creating a *set* of line items, but the local implementation only supports creating a single line item. This breaks compatibility with any client built against the official specification and fundamentally changes the endpoint's behavior from bulk to single-resource creation. The request body's top-level key is also incorrect (`lineItem` vs `lineItems`).",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:40:14.861Z",
    "updatedAt": "2025-07-01T23:18:17.007Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-240/critical-request-body-for-post-lineitems-accepts-a-single-object"
  },
  {
    "id": "f8f58302-fbd9-4a17-8eba-4e327dc30f01",
    "identifier": "BUG-239",
    "title": "Low: Multiple Optional Fields in `Result` Object Incorrectly Allow `null`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the response `Result` object, several optional fields (`metadata`, `score`, `textScore`, `comment`) are explicitly defined as being nullable (e.g., `type: [number, 'null']`).\n\n**Summary:** \nIn the response `Result` object, several optional fields (`metadata`, `score`, `textScore`, `comment`) are explicitly defined as being nullable (e.g., `type: [number, 'null']`).\n\n**Steps to Reproduce:**\n\n1. Make a successful GET request to the endpoint `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results`.\n2. Inspect the schema for the `Result` object in the local spec.\n3. Observe that the `metadata`, `score`, `textScore`, and `comment` fields are defined as a union type including `null`.\n\nLocal Spec for the `score` field:\n\n```yaml\nscore:\n  type:\n    - number\n    - 'null'\n```\n\n**Expected:** \nThe upstream specification defines these fields as optional but does not explicitly state that they can be `null`. The standard practice for optional fields in JSON is to omit the key entirely if it has no value. While some systems may choose to represent this with a `null` value, it is a deviation from the stricter interpretation of the spec.\n\nFor example, the upstream spec defines `score` as:\n\n```json\n\"score\": {\n  \"description\": \"...\",\n  \"type\": \"number\",\n  \"format\": \"float\"\n}\n```\n\nIt is not included in the `required` array, making it optional. There is no mention of allowing a `null` value. A strictly-typed client might not expect a `null` value and could encounter an error if it attempts to process a field that it expects to either be a number or not exist at all.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a low-severity bug because many JSON parsers handle `null` gracefully. However, it is a semantic deviation from the spec. The expected behavior for an optional field is its absence, not its presence with a `null` value. This adds unnecessary data to the payload and can cause issues with strongly-typed clients or data processing pipelines that do not anticipate `null` values for these primitive types.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:38:40.187Z",
    "updatedAt": "2025-07-03T14:39:01.252Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-239/low-multiple-optional-fields-in-result-object-incorrectly-allow-null"
  },
  {
    "id": "2a4a49fe-5ee4-43f2-bbb8-c5c802090956",
    "identifier": "BUG-238",
    "title": "Medium: Unspecified `maximum` Constraint on `limit` Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation imposes a `maximum` value of 3000 on the `limit` query parameter.\n\n**Summary:** \nThe local implementation imposes a `maximum` value of 3000 on the `limit` query parameter.\n\n**Steps to Reproduce:**\n\n1. Review the definition for the `limit` query parameter in the local spec.\n2. Compare its constraints to the definition in the upstream spec.\n\nLocal Spec `limit` parameter:\n\n```yaml\nschema:\n  type: integer\n  minimum: 1\n  maximum: 3000\n  default: 100\n```\n\n**Expected:** \nThe upstream OneRoster specification for the `limit` parameter defines a `minimum` of 1 and a `default` of 100, but it does not specify a `maximum` value. By adding a `maximum`, the local implementation introduces a non-standard restriction. While having a maximum is a good practice for performance and DoS prevention, the value itself is arbitrary and not part of the standard. A client attempting to request more than 3000 records (assuming it was allowed by the server) would receive an unexpected error based on this undocumented constraint.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a deviation that could break client assumptions about data retrieval. While the upstream spec is silent on a maximum, any imposed limit should be considered a proprietary constraint. The issue is that the local spec documents a behavior that is not guaranteed or defined by the standard it claims to implement. This can lead to interoperability problems if a client expects to be able to retrieve larger data sets and is unexpectedly throttled.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:36:39.678Z",
    "updatedAt": "2025-07-03T05:45:04.412Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-238/medium-unspecified-maximum-constraint-on-limit-query-parameter"
  },
  {
    "id": "89cbf3ee-0d55-4423-b901-c4378e407da6",
    "identifier": "BUG-237",
    "title": "High: Missing Required OAuth2 Security Scopes for Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification defines the security requirement as a generic `OAuth2` scheme with an empty scope array (`[]`).\n\n**Summary:** \nThe local API specification defines the security requirement as a generic `OAuth2` scheme with an empty scope array (`[]`).\n\n**Steps to Reproduce:**\n\n1. Review the `security` section for the GET operation in the local spec.\n2. Compare this to the `security` section for the same operation in the upstream JSON spec.\n\nLocal Spec:\n\n```yaml\nsecurity:\n  - OAuth2: []\n```\n\nUpstream Spec:\n\n```json\n\"security\": [\n  {\n    \"OAuth2CC\": [\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly\"\n    ]\n  }\n]\n```\n\n**Expected:** \nThe upstream OneRoster specification requires the specific OAuth 2.0 scope `https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly` for this operation. The use of a generic scheme without specifying the required scope is a security risk. It implies that any valid token, regardless of its granted permissions, could potentially access this endpoint. This violates the principle of least privilege.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Failure to enforce granular scopes is a common API security vulnerability. The specification clearly defines scopes to ensure that clients only have access to the data and operations they are explicitly authorized for. The current local spec does not reflect this requirement, which could lead to an authorization bypass where a client with a token for a different, less-sensitive scope could access gradebook data.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:31:31.808Z",
    "updatedAt": "2025-07-03T12:50:36.019Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-237/high-missing-required-oauth2-security-scopes-for-endpoint"
  },
  {
    "id": "71fb7bfd-9606-4025-85e0-f5b96f7ce0f0",
    "identifier": "BUG-236",
    "title": "High: Endpoint Exposes Undocumented and Unsupported `search` Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API implementation for this endpoint includes a `search` query parameter.\n\n**Summary:** \nThe local API implementation for this endpoint includes a `search` query parameter.\n\n**Steps to Reproduce:**\n\n1. Review the defined parameters for the GET operation in the local spec.\n2. Compare the list of parameters to the upstream JSON and HTML specifications.\n\nLocal Spec:\n\n```yaml\n- in: query\n  name: search\n  description: The search query to apply to the response\n  schema:\n    type: string\n```\n\n**Expected:** \nThe upstream OneRoster specification does not define a `search` parameter for this endpoint. The standard parameters for filtering and querying collections are `filter`, `sort`, `orderBy`, `limit`, `offset`, and `fields`. Introducing a non-standard `search` parameter creates a proprietary extension that is not part of the official specification.\n\nThe upstream JSON spec for this endpoint lists only `classSourcedId`, `lineItemSourcedId`, `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. There is no `search` parameter. The HTML documentation (Section 4.5.3) also makes no mention of a `search` parameter.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Exposing non-standard parameters can lead to security vulnerabilities and client confusion. It increases the attack surface of the API by adding undocumented logic. A malicious actor could probe this parameter for vulnerabilities like SQL injection or other injection attacks, especially since its behavior is not publicly defined. It also deviates from the goal of interoperability by creating a custom feature that compliant clients will not know how to use.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:30:25.780Z",
    "updatedAt": "2025-07-03T14:36:15.604Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-236/high-endpoint-exposes-undocumented-and-unsupported-search-query"
  },
  {
    "id": "08b817de-9a61-4220-b8c9-07512b480e22",
    "identifier": "BUG-235",
    "title": "Critical: Missing Required Fields `sourcedId` and `dateLastModified` in `Result` Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Result` objects returned in the `results` array are only required to have `status`, `lineItem`, `student`, `scoreStatus`, and `scoreDate`. The `sourcedId` and `dateLastModified` fields are treated as optional.\n\n**Summary:** \nThe `Result` objects returned in the `results` array are only required to have `status`, `lineItem`, `student`, `scoreStatus`, and `scoreDate`. The `sourcedId` and `dateLastModified` fields are treated as optional.\n\n**Steps to Reproduce:**\n\n1. Make a successful GET request to the endpoint `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results`.\n2. Inspect the `required` array for the `Result` item schema in the local specification.\n3. Compare this to the upstream specification for the `BaseDType` from which `ResultDType` inherits.\n\nLocal spec:\n\n```yaml\n# paths/.../200/content/application/json/schema/properties/results/items:\nrequired:\n  - status\n  - lineItem\n  - student\n  - scoreStatus\n  - scoreDate\n```\n\n**Expected:** \nThe upstream `ResultDType` inherits from `BaseDType`. The `BaseDType` definition in the upstream JSON spec explicitly marks `sourcedId`, `status`, and `dateLastModified` as required. Therefore, any `Result` object must contain these fields.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`), from the `ResultDType` and `BaseDType` definitions:\n\n```json\n// ResultDType inherits from BaseDType, which has:\n\"required\": [\"sourcedId\", \"status\", \"dateLastModified\"]\n// ResultDType itself has:\n\"required\": [\"sourcedId\", \"status\", \"dateLastModified\", \"lineItem\", \"student\", \"scoreStatus\", \"scoreDate\"]\n```\n\nThe local implementation is missing `sourcedId` and `dateLastModified` from its list of required fields for a `Result`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Omitting required fields from the response is a critical violation of the API contract. The `sourcedId` is the primary key for the object, and its absence makes the returned `Result` object impossible to uniquely identify or reference in subsequent API calls. The `dateLastModified` field is crucial for clients that perform incremental synchronization. A client built to the specification will fail when these required fields are not present.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:28:52.537Z",
    "updatedAt": "2025-07-03T14:39:00.706Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-235/critical-missing-required-fields-sourcedid-and-datelastmodified-in"
  },
  {
    "id": "2290d4a9-6b7a-4789-adcf-55f979644d10",
    "identifier": "BUG-234",
    "title": "Incorrect Endpoint Metadata (Tags, Summary, Description)",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification provides simplified and inconsistent metadata for the endpoint:\n\n* `tags`: Uses `CASE - Learning Standards` instead of the official `PackagesManager`.\n* `summary`: `Get CASE Package by ID` instead of the more formal `The REST read request message for the getCFPackage() API call.`\n* `description`: `Returns a complete CASE package for the specified sourcedId` instead of the more detailed upstream description which includes behavior for not found objects.\n\n**Summary:** \nThe local specification provides simplified and inconsistent metadata for the endpoint:\n\n* `tags`: Uses `CASE - Learning Standards` instead of the official `PackagesManager`.\n* `summary`: `Get CASE Package by ID` instead of the more formal `The REST read request message for the getCFPackage() API call.`\n* `description`: `Returns a complete CASE package for the specified sourcedId` instead of the more detailed upstream description which includes behavior for not found objects.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the metadata for the `getCFPackage` operation in the local spec.\n2. Compare the `tags`, `summary`, and `description` fields with the corresponding operation in the upstream JSON spec.\n\n**Expected:** \nThe endpoint metadata should align with the upstream specification to provide consistent documentation and tooling experiences (e.g., for generating client SDKs).\n\n* `tags`: Should be `[ \"PackagesManager\" ]`.\n* `summary`: Should be `The REST read request message for the getCFPackage() API call.`\n* `description`: Should be `This is a request to the service provider to provide the information for the specific Competency Framework Package. If the identified record cannot be found then the 'unknownobject' status code must be reported.`\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** While not a critical failure that breaks parsing, incorrect metadata is a significant documentation and usability bug. It can confuse developers using the API and leads to inaccurate generated documentation. The discrepancy in the description, which omits the required error handling behavior for unknown objects, is particularly problematic as it hides a key requirement from the developer.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:28:23.841Z",
    "updatedAt": "2025-07-01T23:17:04.328Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-234/incorrect-endpoint-metadata-tags-summary-description"
  },
  {
    "id": "0d59da80-f388-434e-913f-6d02554c8ee3",
    "identifier": "BUG-233",
    "title": "Critical: Incorrect Data Types and Formats for Multiple Fields in `Result` Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Result` object in the response contains multiple fields with incorrect types and formats:\n\n1. `scoreDate` is defined with `format: date-time`.\n2. `inProgress`, `incomplete`, `late`, and `missing` are defined as generic `type: string` without any enum constraints.\n\n**Summary:** \nThe `Result` object in the response contains multiple fields with incorrect types and formats:\n\n1. `scoreDate` is defined with `format: date-time`.\n2. `inProgress`, `incomplete`, `late`, and `missing` are defined as generic `type: string` without any enum constraints.\n\n**Steps to Reproduce:**\n\n1. Make a successful GET request to the endpoint `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results`.\n2. Inspect the objects inside the `results` array.\n3. Observe the format of the `scoreDate` field.\n4. Observe the data type of the `inProgress`, `incomplete`, `late`, and `missing` fields.\n\n```bash\n# Note: Replace {classSourcedId} and {lineItemSourcedId} with valid IDs.\ncurl -X GET \\\n  'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification defines these fields with specific types and formats:\n\n1. `scoreDate` should have `type: string` and `format: date`. The HTML documentation (Section 6.1.24.8) explicitly states: \"The format is YYYY-MM-DD as defined in \\[ISO 8601\\]\".\n2. `inProgress`, `incomplete`, `late`, and `missing` should all be `type: string` with an `enum: [\"true\", \"false\"]`. The HTML documentation (e.g., Section 6.1.24.11) confirms this structure, and the upstream JSON spec (`ResultDType` definition) shows the enum.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** These are critical data integrity issues. An incorrect date format for `scoreDate` will cause parsing errors in compliant clients. The lack of an enum for the boolean-like string fields (`inProgress`, etc.) allows for arbitrary string values, which completely undermines the purpose of these status flags. A client expecting `\"true\"` or `\"false\"` might receive `\"in_progress\"` or some other undefined value, leading to unpredictable application behavior.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:27:12.670Z",
    "updatedAt": "2025-07-02T20:28:16.147Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-233/critical-incorrect-data-types-and-formats-for-multiple-fields-in"
  },
  {
    "id": "1b50b8b7-c75e-4b4e-87c2-29bc5f3a8227",
    "identifier": "BUG-232",
    "title": "Inconsistent Error Response Schema",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines error responses with a custom schema that has two main deviations from the standard:\n\n1. The minor code object is named `imsx_CodeMinor` (PascalCase) instead of `imsx_codeMinor` (camelCase).\n2. An extra, non-standard field `imsx_error_details` is included in the response.\n\n**Summary:** \nThe local specification defines error responses with a custom schema that has two main deviations from the standard:\n\n1. The minor code object is named `imsx_CodeMinor` (PascalCase) instead of `imsx_codeMinor` (camelCase).\n2. An extra, non-standard field `imsx_error_details` is included in the response.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Trigger an error, for example by requesting a non-existent `sourcedId` to get a 404 Not Found.\n2. Inspect the JSON body of the error response.\n3. Compare the fields with the `imsx_StatusInfo.Type` definition in the upstream JSON spec.\n\nCurl command (to trigger a 404):\n\n```bash\ncurl -i -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/00000000-0000-0000-0000-000000000000 -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAll error responses (4xx, 5xx) should conform to the `imsx_StatusInfo.Type` schema defined in the upstream specification. This schema's properties are `imsx_codeMajor`, `imsx_severity`, `imsx_description`, and `imsx_codeMinor`. It does not contain an `imsx_error_details` field, and the minor code field is spelled `imsx_codeMinor`. The local implementation must match this schema exactly for compliant error handling.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Consistent and predictable error handling is crucial for robust client integrations. Deviating from the specified error schema, even by casing or adding extra fields, can break automated error parsing and handling logic in conformant clients. This impacts all error scenarios, making it a high-severity issue.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:26:29.456Z",
    "updatedAt": "2025-07-03T14:29:31.369Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-232/inconsistent-error-response-schema"
  },
  {
    "id": "f98ef147-6ad1-4a61-a204-d12723eb4005",
    "identifier": "BUG-231",
    "title": "Critical: Malformed GUID Reference Objects in `Result` Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `lineItem`, `student`, `class`, and `scoreScale` objects within each `Result` in the response array only contain a `sourcedId` field. They are missing the required `href` and `type` fields.\n\n**Summary:** \nThe `lineItem`, `student`, `class`, and `scoreScale` objects within each `Result` in the response array only contain a `sourcedId` field. They are missing the required `href` and `type` fields.\n\n**Steps to Reproduce:**\n\n1. Make a successful GET request to the endpoint `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results`.\n2. Inspect the objects inside the `results` array.\n3. Observe the structure of the `lineItem`, `student`, `class`, and `scoreScale` fields.\n\n```bash\n# Note: Replace {classSourcedId} and {lineItemSourcedId} with valid IDs.\ncurl -X GET \\\n  'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nAccording to the upstream specification, these fields must be GUID Reference objects (`...GUIDRefDType`). All GUID Reference objects are required to have three fields: `href`, `sourcedId`, and `type`.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`), definition of `GUIDRefDType`:\n\n```json\n\"GUIDRefDType\": {\n  \"description\": \"This is the container for reference to a OneRoster object that has a sourcedId (GUID).\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"href\": { ... },\n    \"sourcedId\": { ... },\n    \"type\": { ... }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\nThe `ResultDType` uses `LineItemGUIDRefDType`, `UserGUIDRefDType`, `ClassGUIDRefDType`, and `ScoreScaleGUIDRefDType`, all of which inherit from and must conform to `GUIDRefDType`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical data modeling error. By omitting the `href` and `type` fields, the response prevents clients from being able to identify the type of the referenced object or have a direct link to retrieve it. This breaks a core feature of the HATEOAS-like design of the OneRoster specification and makes the response data incomplete and difficult to use for any automated system. The local implementation incorrectly simplifies these complex objects into simple objects with just an ID.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:25:59.222Z",
    "updatedAt": "2025-07-03T14:18:31.461Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-231/critical-malformed-guid-reference-objects-in-result-object-response"
  },
  {
    "id": "87644ef6-cd2d-4767-8f76-a81c6c7062fc",
    "identifier": "BUG-230",
    "title": "Critical: Incorrect 200 OK Response Body Structure and Non-Compliant Pagination",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returns a JSON object with a custom pagination envelope. The response body contains top-level keys such as `results`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`. The actual data is nested inside the `results` array.\n\n**Summary:** \nThe API returns a JSON object with a custom pagination envelope. The response body contains top-level keys such as `results`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`. The actual data is nested inside the `results` array.\n\n**Steps to Reproduce:**\n\n1. Make a successful GET request to the endpoint `/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results`.\n2. Observe the JSON response body.\n3. Observe the response headers.\n\n```bash\n# Note: Replace {classSourcedId} and {lineItemSourcedId} with valid IDs.\ncurl -X GET \\\n  'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results' \\\n  -H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nAccording to the upstream specification, the response body for a successful GET request should be a `ResultSetDType` object. This object contains only one key: `results`, which is an array of `ResultDType` objects.\n\nPagination metadata should not be in the response body. The total number of records should be returned in the `X-Total-Count` HTTP header.\n\nUpstream JSON Spec (`oneroster.gradebook.upstream.json`):\nThe `200` response schema is `{\"$ref\": \"#/definitions/ResultSetDType\"}`.\nThe `ResultSetDType` is defined as:\n\n```json\n\"ResultSetDType\": {\n  \"properties\": {\n    \"results\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/ResultDType\"\n      }\n    }\n  }\n}\n```\n\nIt also defines a response header:\n\n```json\n\"headers\": {\n  \"X-Total-Count\": {\n    \"description\": \"The total number of resources that are available to be returned\",\n    \"type\": \"integer\"\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/lineItems/{lineItemSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical deviation from the OneRoster specification. The entire response structure is incorrect, which will break any client implementation that correctly follows the upstream standard. The local implementation has created a proprietary pagination scheme within the JSON body, whereas the standard explicitly defines pagination metadata to be delivered via the `X-Total-Count` header. This is further confirmed by the API-wide `Pagination` documentation in the local spec's `info` block, which describes a non-compliant, custom pagination model that is applied across the API. This fundamental misunderstanding of the specification's structure for collection endpoints is a major bug.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:24:30.547Z",
    "updatedAt": "2025-07-03T13:02:58.406Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-230/critical-incorrect-200-ok-response-body-structure-and-non-compliant"
  },
  {
    "id": "589407b6-5081-4cb5-8ba8-6c134ec66cc7",
    "identifier": "BUG-229",
    "title": "Incorrect Schema for Link-Type Objects in CFAssociation",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local spec defines `originNodeURI` and `destinationNodeURI` as objects with properties `{ sourcedId, title, uri }`, where `sourcedId` is a UUID.\n\n**Summary:** \nThe local spec defines `originNodeURI` and `destinationNodeURI` as objects with properties `{ sourcedId, title, uri }`, where `sourcedId` is a UUID.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the local schema for the `originNodeURI` and `destinationNodeURI` fields within a `CFAssociations` item.\n2. Compare this schema to the `LinkGenURI.Type` definition in the upstream spec, which is the correct type for these fields.\n\nCurl command:\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream spec defines these fields using `LinkGenURI.Type`. The properties of `LinkGenURI.Type` are `{ title, identifier, uri }`. Crucially, the `identifier` field in `LinkGenURI.Type` is defined as a generic `string` (`NormalizedString`), NOT a UUID. The local implementation uses the wrong field name (`sourcedId` instead of `identifier`) and the wrong data type for that identifier (UUID instead of string).\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a subtle but critical schema violation. The `LinkGenURI.Type` is intentionally different from `LinkURI.Type` (which uses a UUID for its identifier) to allow linking to nodes that may not be full-fledged, UUID-identified objects. By forcing a UUID, the local implementation breaks this flexibility and violates the specified data model, potentially causing data loss or inability to represent certain valid associations.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:21:52.581Z",
    "updatedAt": "2025-07-02T19:47:01.472Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-229/incorrect-schema-for-link-type-objects-in-cfassociation"
  },
  {
    "id": "f26fe2b2-f19c-4c66-8d7e-1d1aa6cc8863",
    "identifier": "BUG-228",
    "title": "Incorrect Summary and Description for Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification has a different `summary` from the upstream spec. The `description` also differs in how it describes the error case: it specifies a 404 with a specific message ('Class or academic session not found.'), whereas the upstream spec refers to a generic 'unknown' error code.\n\n**Summary:** \nThe local specification has a different `summary` from the upstream spec. The `description` also differs in how it describes the error case: it specifies a 404 with a specific message ('Class or academic session not found.'), whereas the upstream spec refers to a generic 'unknown' error code.\n\n**Steps to Reproduce:**\n\n1. Review the `summary` and `description` for the `POST` operation in the local specification.\n2. Compare these texts with the corresponding `summary` and `description` in the upstream JSON and HTML specifications.\n3. Note the discrepancies in content.\n\n**Expected:** \nThe summary and description should match the upstream official specifications to ensure clarity and consistency for developers.\n\n**Summary:**\n\n* Local: `Create Results for an Academic Session for a Class`\n* Upstream JSON: `The REST createbp request message for the postResultsForAcademicSessionForClass() API call.`\n\n**Description of error handling:**\n\n* Local: `If the corresponding record cannot be located, the api will return a 404 error code and message 'Class or academic session not found.'`\n* Upstream JSON/HTML: `If the corresponding class or academic session cannot be located then an 'unknown' error code is returned.`\n\nThe 'unknown' error code is defined in the spec (`imsx_CodeMinorValueEnum`) as `unknownobject` and is typically associated with a 404 status. The local spec is making an assumption about the exact error message text, which is not guaranteed by the standard.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a low-severity documentation bug. While it does not break the functionality in the same way a schema mismatch does, it can cause confusion for developers integrating with the API. The summary should be aligned for consistency, and the description should not promise a specific error message string that is not mandated by the upstream specification.",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T20:20:42.745Z",
    "updatedAt": "2025-07-03T20:04:39.121Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-228/incorrect-summary-and-description-for-endpoint"
  },
  {
    "id": "58283c17-fdc7-433b-8216-834c42391f32",
    "identifier": "BUG-227",
    "title": "Missing 'enum' constraint on CFAssociation.associationType field",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The `associationType` field in the local `CFAssociations` item schema is defined simply as a `string`, with no enumeration constraint.\n\n**Summary:** \nThe `associationType` field in the local `CFAssociations` item schema is defined simply as a `string`, with no enumeration constraint.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schema for the `associationType` field within the `CFAssociations` item schema in the local spec.\n2. Note that it is only defined as `type: string`.\n3. Compare this to the definition in `CFPckgAssociation.Type` in the upstream JSON spec.\n\nCurl command:\nA GET request may return a valid value by chance, but the lack of schema validation means the server could also produce invalid values.\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream `CFPckgAssociation.Type` model defines the `associationType` field with a strict enumeration of allowed values: `[ \"isChildOf\",\"isPeerOf\",\"isPartOf\",\"exactMatchOf\",\"precedes\",\"isRelatedTo\",\"replacedBy\",\"exemplar\",\"hasSkillLevel\" ]`. The local implementation must enforce and document this enum to be compliant. Omitting it allows for invalid data to be sent, breaking the semantic contract of the association.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** The `associationType` is fundamental to understanding the relationship between two competency items. Without a strict, enforced vocabulary (enum), the meaning of the data is lost and interoperability is impossible. A consumer cannot reliably interpret an association if the type can be any arbitrary string. This is a critical data integrity bug.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:19:18.477Z",
    "updatedAt": "2025-07-03T14:07:06.361Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-227/missing-enum-constraint-on-cfassociationassociationtype-field"
  },
  {
    "id": "4a21c86e-f5fc-46bd-b9e9-3974081bd880",
    "identifier": "BUG-226",
    "title": "'scoreStatus' Field in Result Schema is Overly Restrictive",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `Result.scoreStatus` field uses a strict `enum`, which prevents the use of proprietary extensions.\n\n**Summary:** \nThe local specification for the `Result.scoreStatus` field uses a strict `enum`, which prevents the use of proprietary extensions.\n\n**Steps to Reproduce:**\n\n1. Examine the `scoreStatus` property within the `Result` schema in the local spec.\n2. It is defined as a strict enum with a fixed set of values: `[exempt, \"fully graded\", \"not submitted\", \"partially graded\", submitted]`.\n3. Attempt to send a request with a valid proprietary extension value, e.g., `\"ext:teacher_override\"`.\n4. The request will fail validation against the local spec, even though the upstream specification allows for such extensions.\n\n**Expected:** \nThe upstream specification defines `scoreStatus` as an extensible vocabulary. This means that while there is a base set of values, implementations are allowed to use their own proprietary values, prefixed with \"ext:\". The local schema should define `scoreStatus` as `type: string` without a strict `enum` to allow for this extensibility.\n\nThe upstream HTML documentation (Section 6.4.1) defines this as a `ScoreStatusExtEnum`, a union of the base `ScoreStatusEnum` and a string pattern for extensions:\n\n* **ScoreStatusEnum:** `exempt`, `fully graded`, `not submitted`, `partially graded`, `submitted`\n* **ScoreStatusExtString:** A string pattern allowing extensions.\n\nBy using a strict enum, the local implementation violates the extensibility requirement of the specification.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This bug prevents a key feature of the OneRoster specification: extensibility. While it may not break base-level functionality, it prevents interoperability with systems that use valid, specification-compliant extensions for `scoreStatus`. The schema should be relaxed to `type: string` to be fully compliant.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:19:17.490Z",
    "updatedAt": "2025-07-03T13:42:28.314Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-226/scorestatus-field-in-result-schema-is-overly-restrictive"
  },
  {
    "id": "af12ff60-c05a-462d-a908-8af523ee6bed",
    "identifier": "BUG-225",
    "title": "Missing 'minItems' Validation on learningObjectiveResults",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `learningObjectiveResults` array within the `Result` schema is missing the `minItems: 1` validation constraint. This allows for the submission of an empty set of learning objective results, which is invalid.\n\n**Summary:** \nThe `learningObjectiveResults` array within the `Result` schema is missing the `minItems: 1` validation constraint. This allows for the submission of an empty set of learning objective results, which is invalid.\n\n**Steps to Reproduce:**\n\n1. Examine the `learningObjectiveSet` property within the `Result` schema in the local spec.\n2. The nested `learningObjectiveResults` property is defined as `type: array` with no `minItems` constraint.\n3. This would allow an empty array `[]` to be sent for this property.\n4. The upstream specification requires this array to contain at least one item if the parent `learningObjectiveSet` is present.\n\n**Expected:** \nThe upstream `LearningObjectiveScoreSetDType` schema, which is the type for each item in the `learningObjectiveSet` array, specifies that its `learningObjectiveResults` property must have at least one item.\n\nUpstream `LearningObjectiveScoreSetDType` schema:\n\n```json\n\"LearningObjectiveScoreSetDType\": {\n    \"properties\": {\n        \"learningObjectiveResults\": {\n            \"type\": \"array\",\n            \"minItems\": 1,\n            \"items\": { ... }\n        }\n        ...\n    },\n    \"required\": [\"source\", \"learningObjectiveResults\"]\n}\n```\n\nThe local specification should be updated to include `minItems: 1` on the `learningObjectiveResults` array to match the upstream specification and prevent the submission of meaningless empty data structures.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While not as critical as a structural schema mismatch, this is a high-severity bug because it fails to enforce a data integrity rule from the specification. Allowing empty arrays where they are explicitly forbidden can lead to downstream processing errors or unexpected behavior in systems that assume the array will always contain at least one element.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:18:19.795Z",
    "updatedAt": "2025-07-01T23:15:23.950Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-225/missing-minitems-validation-on-learningobjectiveresults"
  },
  {
    "id": "26ab334b-7008-4a26-963d-b7294b0d6615",
    "identifier": "BUG-224",
    "title": "Incorrect Type for Boolean-like Flags in Result Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the flag fields `inProgress`, `incomplete`, `late`, and `missing` as free-form strings, allowing any value.\n\n**Summary:** \nThe local specification defines the flag fields `inProgress`, `incomplete`, `late`, and `missing` as free-form strings, allowing any value.\n\n**Steps to Reproduce:**\n\n1. Examine the `Result` schema in the local specification.\n2. The properties `inProgress`, `incomplete`, `late`, and `missing` are all defined with `type: string` and no `enum`.\n3. This allows any string value to be sent, e.g., `\"yes\"`, `\"no\"`, `\"maybe\"`.\n4. The upstream specification restricts these fields to only two possible string values: `\"true\"` or `\"false\"`.\n\n**Expected:** \nThe upstream specification defines these fields as string-based enumerations, restricted to the values `\"true\"` or `\"false\"`.\n\nUpstream JSON spec (`definitions.ResultDType.properties.late`):\n\n```json\n\"late\": {\n  \"description\": \"This is used to indicate that the student's work product is either past due or it has been submitted past the due date...\",\n  \"type\": \"string\",\n  \"enum\": [ \"true\", \"false\" ]\n}\n```\n\nThe local specification for these four fields should also include `enum: [\"true\", \"false\"]` to enforce the correct values.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug as it breaks the contract for these fields and allows for ambiguous or invalid data. A compliant consuming system would only check for `\"true\"` or `\"false\"` and would likely misinterpret any other string value. The local implementation fails to enforce the strict vocabulary required by the standard.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:16:53.537Z",
    "updatedAt": "2025-07-03T13:22:26.718Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-224/incorrect-type-for-boolean-like-flags-in-result-schema"
  },
  {
    "id": "c09041a5-d2b7-45d4-a67d-93536ac101a8",
    "identifier": "BUG-223",
    "title": "Incomplete Schema for GUID Reference Objects in Result Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Result` schema defines linked objects like `lineItem` and `student` as `{ \"properties\": { \"sourcedId\": \"string\" }, \"required\": [\"sourcedId\"] }`. This is missing the required `href` and `type` fields.\n\n**Summary:** \nThe local `Result` schema defines linked objects like `lineItem` and `student` as `{ \"properties\": { \"sourcedId\": \"string\" }, \"required\": [\"sourcedId\"] }`. This is missing the required `href` and `type` fields.\n\n**Steps to Reproduce:**\n\n1. Examine the `Result` schema in the local specification.\n2. The properties `lineItem`, `student`, `class`, and `scoreScale` are defined as simple objects containing only a `sourcedId`.\n3. Compare this to the upstream specification, which defines these as complex `GUIDRefDType` objects.\n4. The local implementation is missing the required `href` and `type` fields for all of these reference objects.\n\n**Expected:** \nThe upstream specification (`oneroster.gradebook.upstream.json`) defines these fields as references to `GUIDRef` types (e.g., `LineItemGUIDRefDType`). All `GUIDRef` objects are required to have three properties: `href`, `sourcedId`, and `type`.\n\nUpstream `GUIDRefDType` schema (`definitions.GUIDRefDType`):\n\n```json\n\"GUIDRefDType\": {\n  \"description\": \"This is the container for reference to a OneRoster object that has a sourcedId (GUID).\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"href\": {\n      \"description\": \"Model Primitive Datatype = AnyURI. The URI for the type of object being referenced.\",\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"sourcedId\": {\n      \"description\": \"Model Primitive Datatype = String. The globally unique identifier of the object being referenced.\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"description\": \"The type of object being referenced...\",\n      \"type\": \"string\",\n      \"enum\": [\"...\"]\n    }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\nTherefore, the local schema for `lineItem` should be:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"href\": { \"type\": \"string\", \"format\": \"uri\" },\n    \"sourcedId\": { \"type\": \"string\" },\n    \"type\": { \"type\": \"string\", \"enum\": [\"lineItem\"] }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\nThis same structure applies to `student`, `class`, and `scoreScale`, with their respective `type` enums.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema violation. The `href` and `type` fields are mandatory for all GUID references in the OneRoster specification. They provide essential context and discoverability for the linked resources. By omitting them, the local implementation creates data that is non-compliant and difficult for other systems to process correctly.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:15:26.914Z",
    "updatedAt": "2025-07-02T17:28:34.672Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-223/incomplete-schema-for-guid-reference-objects-in-result-schema"
  },
  {
    "id": "a4344532-50c8-4722-b1bc-f48d1bdd86ea",
    "identifier": "BUG-222",
    "title": "Schema Violation in CFAssociations Object: extra 'CFDocumentURI' and 'notes' fields",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The `CFAssociations` objects in the local implementation's response incorrectly include `CFDocumentURI` and `notes` fields.\n\n**Summary:** \nThe `CFAssociations` objects in the local implementation's response incorrectly include `CFDocumentURI` and `notes` fields.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Call the `getCFPackage` endpoint.\n2. Inspect a `CFAssociations` object within the response.\n3. Observe the presence of the `CFDocumentURI` and `notes` fields.\n4. Compare with the official properties listed in `CFPckgAssociation.Type` in the upstream spec.\n\nCurl command:\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream definition for a packaged association, `CFPckgAssociation.Type`, does not contain `CFDocumentURI` or `notes` fields. Similar to the issue with `CFItems`, `CFDocumentURI` belongs to the non-packaged `CFAssociation.Type` model. The `notes` field does not exist in the packaged association model at all. These additions violate the `additionalProperties: false` constraint of the official model.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This bug is another instance of incorrect model mixing and adding non-standard fields. It violates the schema contract and can cause parsing failures or data misinterpretation by compliant clients.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:15:25.678Z",
    "updatedAt": "2025-07-02T20:33:46.500Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-222/schema-violation-in-cfassociations-object-extra-cfdocumenturi-and"
  },
  {
    "id": "d41fba55-8027-4101-b0bb-8c648abecccb",
    "identifier": "BUG-221",
    "title": "Missing Required Fields in Result Schema",
    "description": "**Reporter:** Bjorn Pagne (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Result` schema in the local specification is missing `sourcedId` and `dateLastModified` from its list of required fields.\n    </brief_bug_summary_what_actually_happened>\n    <what_should_happen>\nThe `ResultDType` in the upstream specification explicitly lists `sourcedId` and `dateLastModified` as required fields.\n\nUpstream JSON spec (`definitions.ResultDType.required`):\n\n```json\n\"required\": [\n  \"sourcedId\",\n  \"status\",\n  \"dateLastModified\",\n  \"lineItem\",\n  \"student\",\n  \"scoreStatus\",\n  \"scoreDate\"\n]\n```\n\nThe local specification's `required` array for the `Result` schema should include `sourcedId` and `dateLastModified`.\n\n**Summary:** \nThe `Result` schema in the local specification is missing `sourcedId` and `dateLastModified` from its list of required fields.\n    </brief_bug_summary_what_actually_happened>\n    <what_should_happen>\nThe `ResultDType` in the upstream specification explicitly lists `sourcedId` and `dateLastModified` as required fields.\n\nUpstream JSON spec (`definitions.ResultDType.required`):\n\n```json\n\"required\": [\n  \"sourcedId\",\n  \"status\",\n  \"dateLastModified\",\n  \"lineItem\",\n  \"student\",\n  \"scoreStatus\",\n  \"scoreDate\"\n]\n```\n\nThe local specification's `required` array for the `Result` schema should include `sourcedId` and `dateLastModified`.\n\n**Steps to Reproduce:**\n\n1. Examine the `required` array for the `Result` schema in the local specification.\n2. The `required` array is `[status, lineItem, student, scoreStatus, scoreDate]`.\n3. Compare this to the `required` array in the upstream specification for `ResultDType`.\n4. The upstream specification requires additional fields `sourcedId` and `dateLastModified`.\n5. A request that omits these fields would be considered valid by the local spec but is invalid according to the official spec.\n\n```bash\n# This request is considered VALID by the local spec, but INVALID by the upstream spec\ncurl -X POST https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/academicSessions/someSessionId/results \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"results\": [\n    {\n      \"status\": \"active\",\n      \"lineItem\": { \"sourcedId\": \"lineitem-123\" },\n      \"student\": { \"sourcedId\": \"student-456\" },\n      \"scoreStatus\": \"fully graded\",\n      \"scoreDate\": \"2023-10-27\"\n    }\n  ]\n}'\n```\n\n**Expected:** \nAPI Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical violation of the specification. Omitting required fields can lead to incomplete data and processing errors in compliant systems. The `sourcedId` is the primary key for the object, and `dateLastModified` is essential for synchronization and data auditing. Failing to require them breaks fundamental aspects of the OneRoster standard. The HTML documentation (Section 6.1.7) also confirms these are mandatory base attributes.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:14:12.823Z",
    "updatedAt": "2025-07-03T12:32:42.897Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-221/missing-required-fields-in-result-schema"
  },
  {
    "id": "0832a19b-5fb2-463a-a122-655bbde6bd73",
    "identifier": "BUG-220",
    "title": "Schema Violation in CFItems Object: extra 'CFDocumentURI' field and incorrect required properties",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The `CFItems` objects in the local implementation's response incorrectly include a `CFDocumentURI` field. Additionally, the list of required properties is incorrect: the local spec requires `CFItemType`, which is optional in the upstream spec.\n\n**Summary:** \nThe `CFItems` objects in the local implementation's response incorrectly include a `CFDocumentURI` field. Additionally, the list of required properties is incorrect: the local spec requires `CFItemType`, which is optional in the upstream spec.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Call the `getCFPackage` endpoint.\n2. Inspect a `CFItems` object within the response.\n3. Observe the presence of the `CFDocumentURI` field.\n4. Compare the object's required properties with the upstream spec.\n\nCurl command:\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream definition for a packaged item, `CFPckgItem.Type`, does not contain a `CFDocumentURI` field. This field belongs to the non-packaged `CFItem.Type` model, used for retrieving a single item out of context. Including it in the package response is incorrect model mixing. The required properties for `CFPckgItem.Type` are `[ \"identifier\",\"fullStatement\",\"uri\",\"lastChangeDateTime\" ]`. The local implementation incorrectly adds `CFItemType` to this list.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This bug demonstrates a misunderstanding of the different data models within the CASE spec (packaged vs. non-packaged). Adding `CFDocumentURI` is a violation of `additionalProperties: false` and provides redundant, incorrect information within the context of a package. Incorrectly marking optional fields as required can cause validation failures for providers that correctly omit them.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:13:43.399Z",
    "updatedAt": "2025-07-01T23:14:37.823Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-220/schema-violation-in-cfitems-object-extra-cfdocumenturi-field-and"
  },
  {
    "id": "c29ec865-77b0-473f-abb8-af877f71205a",
    "identifier": "BUG-219",
    "title": "Non-standard 'extensions' field present in data models where prohibited",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification adds a non-standard `extensions` field to the `CFDocument`, `CFItems`, and `CFAssociations` objects. This field is defined as a nullable object.\n\n**Summary:** \nThe local specification adds a non-standard `extensions` field to the `CFDocument`, `CFItems`, and `CFAssociations` objects. This field is defined as a nullable object.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schemas for `CFDocument`, `CFItems`, and `CFAssociations` in the local specification.\n2. Note the presence of an `extensions` property.\n3. Compare this to the corresponding definitions in the upstream JSON spec (`CFPckgDocument.Type`, `CFPckgItem.Type`, `CFPckgAssociation.Type`), which all contain `additionalProperties: false`.\n\nCurl command:\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification explicitly forbids unknown or additional properties in its data models. The definitions for `CFPckgDocument.Type`, `CFPckgItem.Type`, and `CFPckgAssociation.Type` all include the constraint `additionalProperties: false`. This means that adding an `extensions` field is a direct violation of the schema contract. The specification does not provide for an extension mechanism in this manner.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Violating the `additionalProperties: false` constraint is a critical issue. It can cause deserialization failures in strictly-validating clients and represents a significant, unapproved modification of the standard data models. This can lead to interoperability failures and data integrity problems.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:13:13.228Z",
    "updatedAt": "2025-07-02T20:34:05.885Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-219/non-standard-extensions-field-present-in-data-models-where-prohibited"
  },
  {
    "id": "814dd6b2-0739-4104-bc6d-caab0f2d474d",
    "identifier": "BUG-218",
    "title": "Incorrect Schema for 201 Success Response Body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the 201 response defines the `sourcedIdPairs` property as a single JSON object.\n\n**Summary:** \nThe local specification for the 201 response defines the `sourcedIdPairs` property as a single JSON object.\n\n**Steps to Reproduce:**\n\n1. Review the schema for the 201 response of the `POST /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results` endpoint.\n2. The local spec defines the `sourcedIdPairs` property as a single object.\n3. According to the upstream specification, `sourcedIdPairs` should be an array of objects.\n\nExample of local spec's incorrect response structure:\n\n```json\n{\n  \"sourcedIdPairs\": {\n    \"suppliedSourcedId\": \"temp-guid-1\",\n    \"allocatedSourcedId\": \"real-guid-1\"\n  }\n}\n```\n\nThis will fail validation against any client built to the official specification.\n\n**Expected:** \nAccording to the upstream specification (`oneroster.gradebook.upstream.json`), the 201 response schema should reference `GUIDPairSetDType`. The `GUIDPairSetDType` defines `sourcedIdPairs` as an array of `GUIDPairDType` objects. The response body should be a JSON object containing an array named `sourcedIdPairs`.\n\nUpstream `GUIDPairSetDType` schema:\n\n```json\n\"GUIDPairSetDType\": {\n  \"description\": \"The container for the set of sourcedId pairs...\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"sourcedIdPairs\": {\n      \"description\": \"The set of sourcedId pairs...\",\n      \"type\": \"array\",\n      \"minItems\": 0,\n      \"items\": {\n        \"$ref\": \"#/definitions/GUIDPairDType\"\n      }\n    }\n  }\n}\n```\n\nThe correct response structure should be:\n\n```json\n{\n  \"sourcedIdPairs\": [\n    {\n      \"suppliedSourcedId\": \"temp-guid-1\",\n      \"allocatedSourcedId\": \"real-guid-1\"\n    },\n    {\n      \"suppliedSourcedId\": \"temp-guid-2\",\n      \"allocatedSourcedId\": \"real-guid-2\"\n    }\n  ]\n}\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug because the data structure of the success response is fundamentally incorrect. The local implementation returns an object where an array is expected, which will cause deserialization errors and break any client that correctly implements the OneRoster specification. The upstream JSON spec at `paths.\"/classes/{...}/results\".post.responses.\"201\".schema` points to `GUIDPairSetDType`, which clearly defines `sourcedIdPairs` as a `type: array`.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:13:12.895Z",
    "updatedAt": "2025-07-03T13:19:21.308Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-218/incorrect-schema-for-201-success-response-body"
  },
  {
    "id": "767d59ae-cd8f-43b4-be00-407ac634ab5a",
    "identifier": "BUG-217",
    "title": "Incorrect Data Format for 'scoreDate' in Result Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the request body's `Result` schema, the `scoreDate` field is specified as having a `date-time` format.\n\n**Summary:** \nIn the request body's `Result` schema, the `scoreDate` field is specified as having a `date-time` format.\n\n**Steps to Reproduce:**\n\n1. Examine the `Result` schema in the local specification's `components.schemas` section.\n2. The `scoreDate` property is defined with `type: string` and `format: date-time`.\n3. Send a POST request to the endpoint with a `Result` object in the body.\n\n```bash\ncurl -X POST https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/classes/someClassId/academicSessions/someSessionId/results \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"results\": [\n    {\n      \"status\": \"active\",\n      \"lineItem\": { \"sourcedId\": \"lineitem-123\" },\n      \"student\": { \"sourcedId\": \"student-456\" },\n      \"scoreStatus\": \"fully graded\",\n      \"scoreDate\": \"2023-10-27T10:00:00Z\"\n    }\n  ]\n}'\n```\n\n4. According to the local spec, this request is valid. However, it violates the upstream specification.\n\n**Expected:** \nThe upstream JSON and HTML specifications both mandate that `scoreDate` should be a `date` format, not `date-time`.\n\nUpstream JSON spec (`definitions.ResultDType.properties.scoreDate`):\n\n```json\n\"scoreDate\": {\n  \"description\": \"The date at which the score is assigned... The format is YYYY-MM-DD as defined in [ISO 8601].\",\n  \"type\": \"string\",\n  \"format\": \"date\"\n}\n```\n\nUpstream HTML documentation (Section 6.1.24.8):\n\"The date at which the score is assigned or there is an update to the result e.g. change in the 'scoreStatus'.. The format is YYYY-MM-DD as defined in \\[ISO 8601\\].\"\n\nThe field should be `type: string` with `format: date`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results\nLocal Spec: ims/oneroster/gradebook/v1p2/classes/{classSourcedId}/academicSessions/{academicSessionSourcedId}/results.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical data type mismatch. The local implementation expects a full timestamp with time and timezone information, whereas the specification requires only the date part (YYYY-MM-DD). This will lead to data corruption or validation failures when interoperating with compliant systems. A system providing a `date-time` may have its data truncated or rejected by a compliant consumer, and a compliant provider's `date` value would fail validation against the local spec.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:13:11.607Z",
    "updatedAt": "2025-07-02T20:28:20.223Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-217/incorrect-data-format-for-scoredate-in-result-schema"
  },
  {
    "id": "8e0e7c31-dc82-4549-8923-ac31dc05839b",
    "identifier": "BUG-216",
    "title": "Schema Violation in CFDocument Object: extra 'caseVersion' and 'frameworkType' fields",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The `CFDocument` object in the local implementation contains two extra, non-standard fields: `caseVersion` (with an enum of `['1.1', null]`) and `frameworkType`.\n\n**Summary:** \nThe `CFDocument` object in the local implementation contains two extra, non-standard fields: `caseVersion` (with an enum of `['1.1', null]`) and `frameworkType`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Call the `getCFPackage` endpoint.\n2. Inspect the `CFDocument` object within the response.\n3. Observe the presence of the `caseVersion` and `frameworkType` fields.\n4. Compare with the official properties listed in `CFPckgDocument.Type` in the upstream spec.\n\nCurl command:\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream `CFPckgDocument.Type` definition does not include the `caseVersion` or `frameworkType` fields. These are custom additions that violate the specification. The upstream spec explicitly sets `additionalProperties: false` on this model, making the addition of these fields a direct violation.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Adding custom fields to a standardized data model breaks interoperability. These fields are not defined in the CASE 1.0 standard. `caseVersion` is especially confusing as the API version is meant to be in the URL, not the payload. This is a critical violation of `additionalProperties: false`.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:13:10.622Z",
    "updatedAt": "2025-07-03T06:04:01.275Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-216/schema-violation-in-cfdocument-object-extra-caseversion-and"
  },
  {
    "id": "9f3840b6-eb8d-4ef8-9c08-92302f8e17e5",
    "identifier": "BUG-215",
    "title": "Undocumented POST /categories Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `POST /ims/oneroster/gradebook/v1p2/categories/` endpoint to create new categories.\n\n**Summary:** \nThe local specification defines a `POST /ims/oneroster/gradebook/v1p2/categories/` endpoint to create new categories.\n\n**Steps to Reproduce:**\n\n1. Review the `paths` object in the local spec and observe the `post` method under `/ims/oneroster/gradebook/v1p2/categories/`.\n2. Review the `paths` object for `/categories` in the upstream JSON spec and the \"CategoriesManagement\" interface description (Section 4.4) in the upstream HTML spec.\n3. Note that neither upstream source defines a `POST` method on this path.\n\nExample cURL command demonstrating the undocumented endpoint:\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\"category\": {\"status\": \"active\", \"title\": \"New Category\"}}'\n```\n\n**Expected:** \nThe official OneRoster Gradebook v1.2 specification does not include a `POST` method for the `/categories` resource. The standard method for creating a new category is `PUT /categories/{sourcedId}`, where the client provides the unique identifier. The presence of a `POST` method is a non-standard, undocumented extension. While the spec supports `POST` for creation on other endpoints, it is explicitly not defined for `/categories`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** An undocumented endpoint represents a significant deviation from the specification and can be a security risk. It increases the attack surface of the API, and since it is not part of the official specification, it may not have undergone the same level of scrutiny and testing. It also breaks interoperability for clients expecting to adhere strictly to the standard. The upstream HTML documentation in Section 4.4, \"CategoriesManagementInterface Description\", only lists `getAllCategories`, `getCategory`, `deleteCategory`, and `putCategory`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:08:14.846Z",
    "updatedAt": "2025-07-01T23:13:45.839Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-215/undocumented-post-categories-endpoint"
  },
  {
    "id": "9168d291-1628-4113-a598-af888b7efe5e",
    "identifier": "BUG-214",
    "title": "Missing Required OAuth2 Scopes for API Endpoints",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the security requirement for the endpoints with an empty scope list (`[]`), indicating that no specific OAuth2 scopes are enforced.\n\n**Summary:** \nThe local specification defines the security requirement for the endpoints with an empty scope list (`[]`), indicating that no specific OAuth2 scopes are enforced.\n\n**Steps to Reproduce:**\n\n1. Review the `security` section for the `GET /categories` operation in the local spec. It is `security: - OAuth2: []`.\n2. Review the `security` section for the `getAllCategories` operation in the upstream JSON spec. It lists required scopes.\n3. Attempt to access the endpoint with a valid token that does not have the required scopes.\n\ncURL command (assuming a token with insufficient scope):\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/' \\\n-H 'Authorization: Bearer $TOKEN_WITHOUT_GRADEBOOK_SCOPE'\n```\n\n**Expected:** \nThe upstream `oneroster.gradebook.upstream.json` specification requires specific OAuth2 scopes for authorization. For `getAllCategories`, the token must possess one of the following scopes: `https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly` or `https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook-core.readonly`. The API should reject requests from clients whose tokens lack the necessary scopes with a `403 Forbidden` error.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Failure to enforce scopes is a serious security vulnerability. It can lead to an authorization bypass, where a client with a token intended for a different, less-privileged service could potentially access or manipulate gradebook data. The API must validate the scopes present in the JWT access token against the scopes required by the specification for each operation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:07:07.033Z",
    "updatedAt": "2025-07-03T12:52:15.719Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-214/missing-required-oauth2-scopes-for-api-endpoints"
  },
  {
    "id": "d8b47a61-531d-408c-b97b-239f3bf95e98",
    "identifier": "BUG-213",
    "title": "Category Object in GET /categories Response is Missing Required Fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `Category` object schema in the local specification's response only marks `status` and `title` as required fields.\n\n**Summary:** \nThe `Category` object schema in the local specification's response only marks `status` and `title` as required fields.\n\n**Steps to Reproduce:**\n\n1. Review the response schema for the `Category` object inside the `categories` array for `GET /categories` in the local spec.\n2. Note the `required` array lists only `status` and `title`.\n3. Review the `CategoryDType` definition in the upstream JSON spec.\n4. Note the `required` array lists `sourcedId`, `status`, `dateLastModified`, and `title`.\n\ncURL command to verify (inspect objects within the 'categories' array):\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream `oneroster.gradebook.upstream.json` specification's `CategoryDType` definition explicitly marks `sourcedId`, `status`, `dateLastModified`, and `title` as required fields. The local implementation incorrectly omits `sourcedId` and `dateLastModified` from the required list. This implies that the API might return Category objects without these critical fields.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug. The `sourcedId` is the globally unique identifier for the object and is essential for any further interaction with that resource. The `dateLastModified` field is mandatory for clients to perform synchronization and query for updated records. Returning objects without these fields violates the core principles of the OneRoster specification and breaks fundamental client-side logic for data management.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:05:15.241Z",
    "updatedAt": "2025-07-03T13:03:53.973Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-213/category-object-in-get-categories-response-is-missing-required-fields"
  },
  {
    "id": "aed82872-f37f-4be7-a5ae-a05decf85289",
    "identifier": "BUG-212",
    "title": "Missing 'CFDefinitions' and 'CFRubrics' properties from CFPackage response",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The `CFPackage` object defined in the local spec is missing two properties: `CFDefinitions` and `CFRubrics`. The local implementation only includes `sourcedId`, `CFDocument`, `CFItems`, and `CFAssociations`.\n\n**Summary:** \nThe `CFPackage` object defined in the local spec is missing two properties: `CFDefinitions` and `CFRubrics`. The local implementation only includes `sourcedId`, `CFDocument`, `CFItems`, and `CFAssociations`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the properties of the `CFPackage` object in the local spec's 200 OK response schema.\n2. Compare these properties against the `CFPackage.Type` definition in the upstream JSON spec.\n\nCurl command:\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream `CFPackage.Type` definition clearly includes `CFDefinitions` and `CFRubrics` as properties of the package.\n`CFPackage.Type` properties are: `CFDocument`, `CFItems`, `CFAssociations`, `CFDefinitions`, `CFRubrics`.\nAlthough some are optional arrays, they are part of the official model and must be present in the schema. The HTML documentation (Section 3.3) states that for conformance, providers \"must be capable of supplying all of the optional data fields in the JSON payloads\". Omitting them from the schema entirely is a major violation.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Missing these properties from the response schema means the implementation cannot deliver a complete CASE package. `CFDefinitions` is particularly critical as it contains the definitions for subjects, concepts, licenses, etc., that give context to the framework. `CFRubrics` is also a key part of the standard. This omission renders the returned package incomplete and non-compliant.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:05:15.062Z",
    "updatedAt": "2025-07-01T23:13:11.213Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-212/missing-cfdefinitions-and-cfrubrics-properties-from-cfpackage-response"
  },
  {
    "id": "c6ecae52-1d9f-48c5-8c2b-f392564f512d",
    "identifier": "BUG-211",
    "title": "Systematic Renaming of 'identifier' to 'sourcedId' in Response Body Objects",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local implementation consistently uses `sourcedId` as the name for the unique identifier field within the data objects (e.g., `CFDocument`, `CFItems`, `CFAssociations`, and nested URI link objects).\n\n**Summary:** \nThe local implementation consistently uses `sourcedId` as the name for the unique identifier field within the data objects (e.g., `CFDocument`, `CFItems`, `CFAssociations`, and nested URI link objects).\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Call the `getCFPackage` endpoint.\n2. Inspect the JSON response, specifically the objects within `CFDocument`, `CFItems`, and `CFAssociations`.\n3. Note the name of the primary identifier field in these objects.\n\nCurl command:\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification uses `identifier` as the name for the primary unique identifier in all data model objects. For example, `CFPckgDocument.Type`, `CFPckgItem.Type`, and `CFPckgAssociation.Type` all define a required property named `identifier` which references `UUID.Type`. The field `sourcedId` is used for path parameters, but not for identifiers within the object models themselves. This change must be reverted to `identifier` to be compliant.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical data modeling error. Renaming a required field breaks client-side parsing and data mapping for any consumer adhering to the official CASE data models. This deviation is present in nearly every object within the `CFPackage` response, indicating a systemic implementation flaw.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:03:26.745Z",
    "updatedAt": "2025-07-02T19:47:01.471Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-211/systematic-renaming-of-identifier-to-sourcedid-in-response-body"
  },
  {
    "id": "c1f47430-3480-4ae1-8c0a-b2043d830af7",
    "identifier": "BUG-210",
    "title": "Incorrect Response Body Schema for GET /categories",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `200 OK` response body in the local spec contains a custom pagination structure with fields like `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` at the top level, alongside the `categories` array.\n\n**Summary:** \nThe `200 OK` response body in the local spec contains a custom pagination structure with fields like `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` at the top level, alongside the `categories` array.\n\n**Steps to Reproduce:**\n\n1. Review the `200` response schema for `GET /categories` in the local spec.\n2. Note the presence of top-level fields: `categories`, `totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`.\n3. Review the `200` response schema for `getAllCategories` in the upstream JSON spec, which points to `CategoriesSetDType`.\n4. The `CategoriesSetDType` definition only contains a single property, `categories`.\n\ncURL command to verify:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream specification (`oneroster.gradebook.upstream.json`) defines the `200 OK` response schema as `CategoriesSetDType`. This type has only one property: `categories`, which is an array of `CategoryDType` objects. The specification's method for communicating the total number of records is via the `X-Total-Count` response header, not via fields in the response body. The local implementation's response body is non-compliant.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema violation. It completely changes the structure of the response body compared to the specification. Any client built to the official OneRoster specification will fail to parse this response, as it expects a root object containing only a `categories` key. This custom pagination implementation breaks interoperability.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:03:24.403Z",
    "updatedAt": "2025-07-03T13:02:58.469Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-210/incorrect-response-body-schema-for-get-categories"
  },
  {
    "id": "9f737202-fa72-4b1d-9a68-3f6536a80b02",
    "identifier": "BUG-209",
    "title": "Missing `X-Total-Count` Header in Response for GET /categories",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `200 OK` response of `GET /categories` does not include the `X-Total-Count` header.\n\n**Summary:** \nThe local specification for the `200 OK` response of `GET /categories` does not include the `X-Total-Count` header.\n\n**Steps to Reproduce:**\n\n1. Review the `200` response definition for `GET /categories` in the local spec.\n2. Note the absence of any defined headers.\n3. Review the `200` response definition for `getAllCategories` in the upstream JSON spec.\n4. Note the required `X-Total-Count` header.\n\ncURL command to verify (check headers in response):\n\n```bash\ncurl -v -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream `oneroster.gradebook.upstream.json` specification explicitly requires the `X-Total-Count` header in the `200` response for paginated collections. This header is essential for clients to understand the total number of available records and correctly implement pagination. The upstream spec defines it as: `\"headers\": { \"X-Total-Count\": { \"description\": \"The total number of resources that are available to be returned\", \"type\": \"integer\" } }`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** The absence of this header breaks the standard pagination mechanism defined by the OneRoster specification. Clients that are built to be compliant with the official spec will fail to paginate correctly because they will be looking for this header to determine the total size of the dataset. The local implementation appears to have moved this information into the response body, which is a separate critical bug.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T20:00:42.736Z",
    "updatedAt": "2025-07-02T13:50:10.761Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-209/missing-x-total-count-header-in-response-for-get-categories"
  },
  {
    "id": "33616924-7235-4525-b2b8-d707bea2c5b6",
    "identifier": "BUG-208",
    "title": "Non-standard Top-Level Response Wrapper Object",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local implementation wraps the entire 200 OK response body in a top-level object with a single key, `CFPackage`. The actual package data is nested inside this key.\n\n**Summary:** \nThe local implementation wraps the entire 200 OK response body in a top-level object with a single key, `CFPackage`. The actual package data is nested inside this key.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Call the `getCFPackage` endpoint.\n2. Observe the structure of the JSON response.\n3. Compare the response structure to the schema defined in `#/definitions/CFPackage.Type` in the upstream JSON spec.\n\nCurl command:\n\n```bash\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification for `getCFPackage` defines the response schema as a direct reference to `#/definitions/CFPackage.Type`. The properties of `CFPackage.Type` are `CFDocument`, `CFItems`, `CFAssociations`, etc. The response body should start directly with these keys, not be nested inside another object. The root of the response JSON should be the `CFPackage` object itself, not an object containing it.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This structural deviation makes the API response completely incompatible with any client that correctly implements the upstream specification. It's a critical parsing error that prevents access to any data in the response. The local spec schema confirms this non-standard wrapper: `schema: { type: object, properties: { CFPackage: { ... } }, required: [ 'CFPackage' ] }`.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:59:06.865Z",
    "updatedAt": "2025-07-01T23:12:29.644Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-208/non-standard-top-level-response-wrapper-object"
  },
  {
    "id": "a9b14a5f-dd2d-42ab-b460-47f2e51792d8",
    "identifier": "BUG-207",
    "title": "Incorrect Data Type for `fields` Query Parameter in GET /categories",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `fields` query parameter is defined with `type: string` in the local specification.\n\n**Summary:** \nThe `fields` query parameter is defined with `type: string` in the local specification.\n\n**Steps to Reproduce:**\n\n1. Review the `fields` parameter definition for `GET /categories` in the local spec. It is defined as `type: string`.\n2. Review the `fields` parameter definition for `getAllCategories` in the upstream JSON spec. It is defined as `type: array`.\n\nExample cURL command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/?fields=sourcedId,title' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe upstream `oneroster.gradebook.upstream.json` specification clearly defines the `fields` parameter as an array of strings, intended to be sent in CSV format. The correct definition in OpenAPI 2.0 is: `\"type\": \"array\", \"items\": { \"type\": \"string\" }, \"collectionFormat\": \"csv\"`. In OpenAPI 3.x, this would be represented as an array with specific styling. Defining it as a simple string is incorrect and a violation of the specification.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This incorrect type definition misrepresents the parameter's expected format (a comma-separated list of values). This can break automated client generation tools that rely on the OpenAPI specification to create correctly typed client-side code. While the server might parse the string correctly, the specification itself is inaccurate.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:59:06.325Z",
    "updatedAt": "2025-07-03T12:58:29.335Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-207/incorrect-data-type-for-fields-query-parameter-in-get-categories"
  },
  {
    "id": "2a9e1e69-a7ea-450c-b1ef-bec18cb0637a",
    "identifier": "BUG-206",
    "title": "Undocumented `search` Query Parameter in GET /categories",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification for `GET /ims/oneroster/gradebook/v1p2/categories/` includes a query parameter named `search`.\n\n**Summary:** \nThe local API specification for `GET /ims/oneroster/gradebook/v1p2/categories/` includes a query parameter named `search`.\n\n**Steps to Reproduce:**\n\n1. Review the parameters for the `GET /ims/oneroster/gradebook/v1p2/categories/` endpoint in the local spec.\n2. Note the presence of the `search` query parameter.\n3. Review the parameters for the `getAllCategories` operation in both the upstream JSON and HTML specifications.\n4. Note the absence of the `search` parameter.\n\nExample cURL command demonstrating the undocumented parameter:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/?search=somequery' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe official upstream specifications do not define a `search` parameter for the `getAllCategories` operation. The only defined query parameters are `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. Any other parameter is a non-standard extension and should be documented as such, but in its current state, it represents a deviation from the core specification.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** The presence of an undocumented parameter deviates from the upstream specification. This can lead to confusion for developers and may represent a potential security risk if the parameter is not properly validated, potentially leading to injection vulnerabilities (e.g., SQL injection) if it's used in backend database queries.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:57:37.572Z",
    "updatedAt": "2025-07-03T14:36:14.928Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-206/undocumented-search-query-parameter-in-get-categories"
  },
  {
    "id": "138e0eec-f0e0-4d60-8f53-11e744895cb2",
    "identifier": "BUG-205",
    "title": "Incorrect API Path Versioning",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines the API route at `/ims/case/v1p1/CFPackages/{sourcedId}`.\n\n**Summary:** \nThe local specification defines the API route at `/ims/case/v1p1/CFPackages/{sourcedId}`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the path defined in the local specification for the `getCFPackage` route.\n2. Compare this path with the `basePath` and endpoint path defined in the upstream JSON specification and the HTML documentation.\n\nCurl command (conceptual):\nThis is a path-level issue, not a request-body issue. The local spec defines the endpoint at the wrong path.\nAn attempt to call the correct upstream path on the local implementation would fail.\n\n```bash\n# According to the upstream spec, the path should be /ims/case/v1p0/CFPackages/{sourcedId}\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p0/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n\n# The local implementation incorrectly uses v1p1\ncurl -X GET https://api.alpha-1edtech.com/ims/case/v1p1/CFPackages/some-uuid -H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe official upstream specification defines the version as `v1p0`. The upstream JSON spec clearly states a `basePath` of `/ims/case/v1p0`. The HTML documentation (Table 3.1) confirms this, stating: \"For a CASE Service 1.0 implementation the 'Endpoint' value should be appended to the string '/ims/case/v1p0/'\". The correct path should be `/ims/case/v1p0/CFPackages/{sourcedId}`.\n\n**Environment:** API Route: /ims/case/v1p1/CFPackages/{sourcedId}\nLocal Spec: ims/case/v1p1/CFPackages/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a high-severity deviation from the specification. Using an incorrect version in the path breaks client compatibility and violates the fundamental contract defined by the upstream standard. Any conformant client built against the official spec will fail to communicate with this implementation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:57:03.540Z",
    "updatedAt": "2025-07-02T18:21:45.769Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-205/incorrect-api-path-versioning"
  },
  {
    "id": "5eb12860-58d6-4d52-82fc-e8a4dce3ef67",
    "identifier": "BUG-204",
    "title": "Path Mismatch Due to Trailing Slash on Categories Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the route is `/ims/oneroster/gradebook/v1p2/categories/`, which includes a trailing slash.\n\n**Summary:** \nThe local specification for the route is `/ims/oneroster/gradebook/v1p2/categories/`, which includes a trailing slash.\n\n**Steps to Reproduce:**\n\n1. Review the path definition in the local OpenAPI spec.\n2. Review the `basePath` and path definition in the upstream `oneroster.gradebook.upstream.json` spec.\n3. Compare the two paths.\n\nThe local spec defines the path as `/ims/oneroster/gradebook/v1p2/categories/`.\nThe upstream spec defines a `basePath` of `/ims/oneroster/gradebook/v1p2` and a path object of `/categories`, resulting in a full path of `/ims/oneroster/gradebook/v1p2/categories`. The local implementation has an extra trailing slash.\n\n**Expected:** \nAccording to the upstream `oneroster.gradebook.upstream.json` specification, the `basePath` is `/ims/oneroster/gradebook/v1p2` and the path for this resource is `/categories`. The combined, correct path should be `/ims/oneroster/gradebook/v1p2/categories` without a trailing slash.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While many web frameworks and routers treat paths with and without a trailing slash as equivalent, it is a deviation from the official specification. This can cause unexpected behavior with strict HTTP clients, routing configurations, or client code generators that rely on an exact path match. The implementation should adhere to the exact path defined in the upstream specification to ensure maximum compatibility.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:54:11.545Z",
    "updatedAt": "2025-07-02T18:08:35.490Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-204/path-mismatch-due-to-trailing-slash-on-categories-endpoint"
  },
  {
    "id": "7dc880c9-588e-47f7-a39c-3df9fcef4e39",
    "identifier": "BUG-203",
    "title": "`Category` Schema `dateLastModified` Field is Not Required",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Category` schema defines the `dateLastModified` property but does not include it in its `required` array, making it optional.\n\n**Summary:** \nThe local `Category` schema defines the `dateLastModified` property but does not include it in its `required` array, making it optional.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a `GET` request to `/ims/oneroster/gradebook/v1p2/categories/{sourcedId}`.\n2. According to the local specification, the `dateLastModified` field is optional in the response.\n3. This violates the upstream specification which mandates its presence.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# A valid response according to the upstream spec MUST contain the dateLastModified field.\n# A response without it would be considered valid by the local spec, but invalid by the upstream spec.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `dateLastModified` field must be required in the `Category` schema. This field is essential for clients to perform incremental synchronization by querying for objects modified since their last check.\n\nThe upstream `CategoryDType` inherits from `BaseDType`. The `BaseDType` definition in the HTML spec (Section 6.1.7) and the JSON spec (`definitions.BaseDType`) clearly show that `dateLastModified` is a required attribute. The `required` list for `CategoryDType` in the JSON spec is `[\"sourcedId\", \"status\", \"dateLastModified\", \"title\"]`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** The `dateLastModified` field is critical for efficient data synchronization, a key use case for OneRoster. Without this field being guaranteed, clients cannot reliably check for updates and may be forced to perform full data dumps, which is highly inefficient and resource-intensive. Making this field optional breaks a core feature of the specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:52:43.025Z",
    "updatedAt": "2025-07-03T13:03:48.346Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-203/category-schema-datelastmodified-field-is-not-required"
  },
  {
    "id": "7f2c1d2f-c8d9-494c-9aff-ba75f4b3ce98",
    "identifier": "BUG-202",
    "title": "`Category` Schema is Missing Required `sourcedId` Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `Category` schema is missing the `sourcedId` property entirely. The `required` array in the local schema is `[status, title]`.\n\n**Summary:** \nThe local `Category` schema is missing the `sourcedId` property entirely. The `required` array in the local schema is `[status, title]`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a `GET` request to `/ims/oneroster/gradebook/v1p2/categories/{sourcedId}`.\n2. According to the local specification, the returned `category` object does not contain a `sourcedId` field.\n3. This violates the upstream specification.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# The object inside \"category\" in the response is missing the \"sourcedId\" field\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `Category` schema must include the `sourcedId` field, and it must be marked as required. The `sourcedId` is the primary identifier for the object and is fundamental to the OneRoster model.\n\nThe upstream `CategoryDType` inherits from `BaseDType`. The `BaseDType` definition in the HTML spec (Section 6.1.7) and the JSON spec (`definitions.BaseDType`) clearly show that `sourcedId` is a required attribute for all first-class data structures. The `required` list for `CategoryDType` in the JSON spec is `[\"sourcedId\", \"status\", \"dateLastModified\", \"title\"]`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Omitting the primary key (`sourcedId`) from the data object schema is a critical flaw. Clients will be unable to identify the resource they have received or correlate it with other data. This makes the response from `getCategory` practically useless for any client that needs to reference the object later.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:51:29.807Z",
    "updatedAt": "2025-07-03T13:03:53.973Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-202/category-schema-is-missing-required-sourcedid-field"
  },
  {
    "id": "e8fbc989-ae42-4009-bcb0-8176d1b742cb",
    "identifier": "BUG-201",
    "title": "Missing Required OAuth2 Scope for `DELETE /categories/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's security requirement for the `deleteCategory` operation is an empty array (`OAuth2: []`), implying that any valid token is sufficient to access the endpoint, regardless of its granted scopes.\n\n**Summary:** \nThe local specification's security requirement for the `deleteCategory` operation is an empty array (`OAuth2: []`), implying that any valid token is sufficient to access the endpoint, regardless of its granted scopes.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain an OAuth2 token that does not have the `gradebook.delete` scope.\n2. Attempt to call the `DELETE /ims/oneroster/gradebook/v1p2/categories/{sourcedId}` endpoint with this token.\n3. Based on the local spec, this request might succeed. Based on the upstream spec, it must fail with a 401 or 403 error.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# This request should be denied if the token lacks the proper scope\ncurl -X DELETE \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/some-id-to-delete\" \\\n-H \"Authorization: Bearer $TOKEN_WITHOUT_REQUIRED_SCOPES\"\n```\n\n**Expected:** \nThe endpoint must be protected by the `gradebook.delete` scope as defined in the upstream specification.\n\nThe upstream JSON specification requires the following scope:\n\n```json\n\"security\": [\n  {\n    \"OAuth2CC\": [\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.delete\"\n    ]\n  }\n]\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical security vulnerability. It allows any authenticated client to delete data, even if it was only granted read-only or creation permissions. This violates the principle of least privilege and could lead to unauthorized and destructive data loss.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:49:53.031Z",
    "updatedAt": "2025-07-03T12:51:53.427Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-201/missing-required-oauth2-scope-for-delete-categoriessourcedid"
  },
  {
    "id": "7654e4b0-2f8e-4fc4-a152-904a5e688883",
    "identifier": "BUG-200",
    "title": "Inconsistent Description for `DELETE /categories/{sourcedId}` Operation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's description for the DELETE operation is: \"Perform a soft delete on a specific Category on the service provider. This operation changes the status of the Category to 'tobedeleted'.\"\n\n**Summary:** \nThe local specification's description for the DELETE operation is: \"Perform a soft delete on a specific Category on the service provider. This operation changes the status of the Category to 'tobedeleted'.\"\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Read the `description` for the `DELETE /ims/oneroster/gradebook/v1p2/categories/{sourcedId}` endpoint in the local spec.\n2. Note that it describes a \"soft delete\" and a status change.\n3. Compare this to the upstream JSON and HTML documentation which describe a \"delete\".\n\nCurl command is not applicable, as this is a documentation and behavioral bug.\n\n**Expected:** \nThe description should match the upstream specification, which is more general.\n\nThe upstream JSON spec description is: \"Delete a specific lineItem category on the service provider. If the corresponding record cannot be located then an 'unknown' error code is returned.\"\n\nWhile a \"soft delete\" is a valid implementation mechanism according to the `Base` data model (Section 6.1.7.2 in the HTML spec), the operation's description in the local spec is a deviation from the official operation description. It exposes an implementation detail that is not present in the upstream endpoint definition.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a minor documentation inconsistency. The local description is arguably more helpful, but it is still a deviation from the official specification's text. Maintaining consistency with the upstream source is important to prevent confusion for developers who are familiar with the official OneRoster documentation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:48:52.629Z",
    "updatedAt": "2025-07-03T11:50:01.055Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-200/inconsistent-description-for-delete-categoriessourcedid-operation"
  },
  {
    "id": "63da43df-c31f-4668-b75d-00e5c05de587",
    "identifier": "BUG-199",
    "title": "Missing Required OAuth2 Scope for `PUT /categories/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's security requirement for the `putCategory` operation is an empty array (`OAuth2: []`), implying that any valid token is sufficient to access the endpoint, regardless of its granted scopes.\n\n**Summary:** \nThe local specification's security requirement for the `putCategory` operation is an empty array (`OAuth2: []`), implying that any valid token is sufficient to access the endpoint, regardless of its granted scopes.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain an OAuth2 token that does not have the `gradebook.createput` scope.\n2. Attempt to call the `PUT /ims/oneroster/gradebook/v1p2/categories/{sourcedId}` endpoint with this token.\n3. Based on the local spec, this request might succeed. Based on the upstream spec, it must fail with a 401 or 403 error.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# This request should be denied if the token lacks the proper scope\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/some-new-id\" \\\n-H \"Authorization: Bearer $TOKEN_WITHOUT_REQUIRED_SCOPES\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"category\":{\"status\":\"active\",\"title\":\"New Category\"}}'\n```\n\n**Expected:** \nThe endpoint must be protected by the `gradebook.createput` scope as defined in the upstream specification.\n\nThe upstream JSON specification requires the following scope:\n\n```json\n\"security\": [\n  {\n    \"OAuth2CC\": [\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.createput\"\n    ]\n  }\n]\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical security vulnerability. It allows any authenticated client to create data, even if it was only granted read-only permissions. This violates the principle of least privilege and could lead to unauthorized data creation or modification in the system.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:47:20.645Z",
    "updatedAt": "2025-07-03T12:52:20.953Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-199/missing-required-oauth2-scope-for-put-categoriessourcedid"
  },
  {
    "id": "960e208f-fb1a-4590-b0b6-aa0f0056e6f5",
    "identifier": "BUG-198",
    "title": "Incorrect Success Response Body for `PUT /categories/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines that a successful `PUT` request will return a `200 OK` response with a body containing the created category object.\n\n**Summary:** \nThe local specification defines that a successful `PUT` request will return a `200 OK` response with a body containing the created category object.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful `PUT` request to create a new category with a client-supplied `sourcedId`.\n2. Observe the response body.\n3. According to the local spec, the server will return the full category object that was created.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# This command should return an empty body, not a JSON object.\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/new-category-id-456\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"category\":{\"status\":\"active\",\"title\":\"Another New Category\"}}'\n```\n\n**Expected:** \nThe upstream specification mandates that a successful `PUT` request returns a `201 Created` status with an empty response body.\n\nThe upstream JSON specification for the `201` response is:\n\n```json\n\"201\": {\n  \"description\": \"The object has been successfully stored in the Service Provider repository.\"\n}\n```\n\nThere is no `schema` defined for the 201 response, indicating an empty body.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While returning the created object can be a convenient pattern, it is a deviation from the official specification in this case. Compliant clients will not expect a response body and may either ignore it or throw an error if they perform strict parsing. The specification is clear that the response should be empty.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:45:48.014Z",
    "updatedAt": "2025-07-02T00:09:21.272Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-198/incorrect-success-response-body-for-put-categoriessourcedid"
  },
  {
    "id": "4c515c7a-86df-4920-9401-c3fa31b23bf4",
    "identifier": "BUG-197",
    "title": "Incorrect Success Status Code for `PUT /categories/{sourcedId}` (200 OK vs 201 Created)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the success response for the `PUT` operation as `200 OK`.\n\n**Summary:** \nThe local specification defines the success response for the `PUT` operation as `200 OK`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a successful `PUT` request to create a new category with a client-supplied `sourcedId`.\n2. Observe the HTTP status code of the response.\n3. According to the local spec, the server will return `200 OK`.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# This command should return a 201 status code, not 200.\ncurl -v -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/new-category-id-123\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"category\":{\"status\":\"active\",\"title\":\"New Category\"}}'\n```\n\n**Expected:** \nThe upstream specification correctly mandates a `201 Created` status code for this operation, as it is creating a new resource.\n\nThe upstream JSON specification defines the success response as:\n\n```json\n\"201\": {\n  \"description\": \"The object has been successfully stored in the Service Provider repository.\"\n}\n```\n\nThis aligns with RESTful conventions for resource creation.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Using `200 OK` for a creation operation is a violation of both the specific OneRoster spec and general HTTP/REST standards. A `200 OK` from a PUT typically implies an existing resource was updated. A `201 Created` unambiguously signals that a new resource was created. This incorrect status code will break compliant clients that check for a `201` status to confirm creation.",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T19:44:15.591Z",
    "updatedAt": "2025-07-03T18:21:38.188Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-197/incorrect-success-status-code-for-put-categoriessourcedid-200-ok-vs"
  },
  {
    "id": "bc93f4a1-4739-4f10-bfa4-a13558aad626",
    "identifier": "BUG-196",
    "title": "Misleading `PUT /categories/{sourcedId}` Description (Update vs. Create)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's summary and description for the PUT operation incorrectly state that it is used to \"Update a Category\". This implies that the operation modifies an existing resource.\n\n**Summary:** \nThe local specification's summary and description for the PUT operation incorrectly state that it is used to \"Update a Category\". This implies that the operation modifies an existing resource.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Read the `summary` and `description` for the `PUT /ims/oneroster/gradebook/v1p2/categories/{sourcedId}` endpoint in the local spec.\n2. Note that it describes the operation as \"Update a Category\".\n3. Compare this to the upstream JSON and HTML documentation.\n\nCurl command is not applicable, as this is a documentation and behavioral bug.\n\n**Expected:** \nThe summary and description should accurately reflect that this operation is for creating a new resource, where the client provides the resource's unique identifier (`sourcedId`).\n\nThe upstream JSON spec description is: \"To create a new lineItem category. The associated sourcedId for this new record is supplied by the requesting system.\"\nThe upstream HTML documentation (Section 4.4.4) for the `putCategory` operation states: \"To create a new lineItem category. The associated sourcedId for this new record is supplied by the requesting system.\"\n\nThis is a client-side identifier creation pattern, not an update. An update would typically be handled by a PATCH request or a PUT request on an existing resource, but the semantics here are explicitly for creation.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a significant behavioral discrepancy. If the implementation actually performs an update, it is non-compliant. If it performs a create but is documented as an update, it will mislead developers and cause incorrect client implementations. The distinction between creating a resource with a client-supplied ID (idempotent PUT) and updating an existing resource is fundamental in REST API design.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:43:03.751Z",
    "updatedAt": "2025-07-03T18:41:44.729Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-196/misleading-put-categoriessourcedid-description-update-vs-create"
  },
  {
    "id": "4d753c50-98f9-408d-8ee2-48dbf5e7f19e",
    "identifier": "BUG-195",
    "title": "Incorrect `operationId` for `PUT /categories/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the PUT operation uses `operationId: updateCategory`.\n\n**Summary:** \nThe local specification for the PUT operation uses `operationId: updateCategory`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the local OpenAPI specification for the `PUT /ims/oneroster/gradebook/v1p2/categories/{sourcedId}` endpoint.\n2. Note that the `operationId` is `updateCategory`.\n3. Compare with the upstream specification, which uses `putCategory`.\n\n**Expected:** \nThe `operationId` should match the upstream specification, which is `putCategory`. This is important for consistency and for code generation tools that rely on `operationId`.\n\nUpstream JSON spec: `paths.\"/categories/{sourcedId}\".put.operationId: \"putCategory\"`\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While this deviation has a low direct impact on runtime behavior, it indicates a lack of attention to detail and can cause issues with client and server code generation, documentation tools, and general maintainability. It also correlates with the more severe behavioral bug where the operation is misinterpreted as an update instead of a create.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:39:41.395Z",
    "updatedAt": "2025-07-03T11:48:16.344Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-195/incorrect-operationid-for-put-categoriessourcedid"
  },
  {
    "id": "7a8ed9e9-68cc-49b9-810d-6eec6cda527b",
    "identifier": "BUG-194",
    "title": "Missing Required OAuth2 Scopes for `GET /categories/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's security requirement for the `getCategory` operation is an empty array (`OAuth2: []`), implying that any valid token is sufficient to access the endpoint, regardless of its granted scopes.\n\n**Summary:** \nThe local specification's security requirement for the `getCategory` operation is an empty array (`OAuth2: []`), implying that any valid token is sufficient to access the endpoint, regardless of its granted scopes.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Obtain an OAuth2 token that does not have the `gradebook.readonly` or `gradebook-core.readonly` scopes.\n2. Attempt to call the `GET /ims/oneroster/gradebook/v1p2/categories/{sourcedId}` endpoint with this token.\n3. Based on the local spec, this request might succeed. Based on the upstream spec, it must fail with a 401 or 403 error.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# This request should be denied if the token lacks the proper scopes\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/some-sourced-id\" \\\n-H \"Authorization: Bearer $TOKEN_WITHOUT_REQUIRED_SCOPES\"\n```\n\n**Expected:** \nThe endpoint must be protected by the scopes defined in the upstream specification. Access should be denied if the provided token does not contain one of the required scopes.\n\nThe upstream JSON specification requires one of two scopes:\n\n```json\n\"security\": [\n  {\n    \"OAuth2CC\": [\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook.readonly\",\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/gradebook-core.readonly\"\n    ]\n  }\n]\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical security vulnerability. The lack of scope enforcement allows any authenticated client to access data it may not be authorized to read, breaking the principle of least privilege. A client intended for read-only rostering information could potentially access sensitive gradebook data.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:38:04.312Z",
    "updatedAt": "2025-07-03T12:52:25.937Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-194/missing-required-oauth2-scopes-for-get-categoriessourcedid"
  },
  {
    "id": "2e46dde6-dd10-4093-a02e-876c246ecae4",
    "identifier": "BUG-193",
    "title": "Incorrect Error Schema Structure (Multiple Specific Schemas vs. One Generic Schema)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a separate, distinct schema for each HTTP error code. For example, a 404 error is documented to return a `NotFoundResponse` object, while a 401 error returns an `UnauthorizedRequestResponse` object.\n\n**Summary:** \nThe local specification defines a separate, distinct schema for each HTTP error code. For example, a 404 error is documented to return a `NotFoundResponse` object, while a 401 error returns an `UnauthorizedRequestResponse` object.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the `responses` section for any operation in the local specification.\n2. Note that each HTTP error status code (400, 401, 403, 404, etc.) references a different, uniquely named schema (`BadRequestResponse`, `UnauthorizedRequestResponse`, etc.).\n3. Compare this with the upstream specification.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# This request would trigger a 401 and should return an imsx_StatusInfoDType payload\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/some-id\"\n\n# This request would trigger a 404 and should return the SAME imsx_StatusInfoDType payload structure\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/non-existent-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification mandates that ALL error responses (4xx, 5xx) MUST use the single, generic `imsx_StatusInfoDType` schema. The specific nature of the error (e.g., 'not found' vs 'unauthorized') is communicated via the `imsx_codeMinorFieldValue` inside this object, not by using different schema structures.\n\nFor example, in the upstream spec for `GET /categories/{sourcedId}`, all error responses point to the same schema:\n\n```json\n\"400\": { \"schema\": { \"$ref\": \"#/definitions/imsx_StatusInfoDType\" } },\n\"401\": { \"schema\": { \"$ref\": \"#/definitions/imsx_StatusInfoDType\" } },\n\"403\": { \"schema\": { \"$ref\": \"#/definitions/imsx_StatusInfoDType\" } },\n\"404\": { \"schema\": { \"$ref\": \"#/definitions/imsx_StatusInfoDType\" } }\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a major structural deviation from the specification. It complicates client-side error handling, as the client must be prepared to parse multiple different object structures for errors instead of a single, consistent one. It violates the upstream contract and demonstrates a fundamental misunderstanding of the OneRoster error handling mechanism.",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T19:37:08.632Z",
    "updatedAt": "2025-07-03T18:47:27.995Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-193/incorrect-error-schema-structure-multiple-specific-schemas-vs-one"
  },
  {
    "id": "6ede7630-ec6b-4bdf-931a-f4ddd81f3252",
    "identifier": "BUG-192",
    "title": "Extraneous `imsx_error_details` Field in Error Response Schemas",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local error response schemas (e.g., `BadRequestResponse`, `NotFoundResponse`) all define an extra field `imsx_error_details` which is an array of objects.\n\n**Summary:** \nThe local error response schemas (e.g., `BadRequestResponse`, `NotFoundResponse`) all define an extra field `imsx_error_details` which is an array of objects.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Trigger an error condition, for example, by requesting a `sourcedId` that does not exist.\n2. Observe the structure of the returned error payload.\n3. According to the local spec, the payload will contain a field named `imsx_error_details`.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# Trigger a 404 Not Found error\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/non-existent-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nError responses should strictly conform to the `imsx_StatusInfoDType` schema defined in the upstream specification. This schema does not include an `imsx_error_details` field.\n\nThe upstream `imsx_StatusInfoDType` is defined as:\n\n```json\n\"imsx_StatusInfoDType\": {\n  \"properties\": {\n    \"imsx_codeMajor\": { ... },\n    \"imsx_severity\": { ... },\n    \"imsx_description\": { ... },\n    \"imsx_CodeMinor\": { ... }\n  },\n  \"required\": [\"imsx_codeMajor\", \"imsx_severity\"],\n  \"additionalProperties\": false\n}\n```\n\nThe `additionalProperties: false` flag in the upstream schema for `imsx_StatusInfoDType` and its children makes the inclusion of `imsx_error_details` a direct violation of the spec.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Adding non-standard fields to a specified schema breaks contract-based clients that perform strict validation on response payloads. While this field might be intended to provide extra debugging information, it should be added under the official extension point (`metadata` field), not at the top level of the error object.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:35:30.295Z",
    "updatedAt": "2025-07-03T18:45:36.195Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-192/extraneous-imsx-error-details-field-in-error-response-schemas"
  },
  {
    "id": "d270cb34-5b50-4554-afde-9c4554bf6cfb",
    "identifier": "BUG-191",
    "title": "Missing `fields` Query Parameter in `GET /ims/oneroster/gradebook/v1p2/categories/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `getCategory` operation omits the optional `fields` query parameter. This parameter is used to request a subset of fields in the response, reducing payload size and allowing clients to fetch only the data they need.\n\n**Summary:** \nThe local specification for the `getCategory` operation omits the optional `fields` query parameter. This parameter is used to request a subset of fields in the response, reducing payload size and allowing clients to fetch only the data they need.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the local OpenAPI specification for the `GET /ims/oneroster/gradebook/v1p2/categories/{sourcedId}` endpoint.\n2. Note that the only defined parameter is `sourcedId` in the path.\n3. Cross-reference with the official OneRoster specification.\n4. Observe that the official specification includes an optional query parameter named `fields`.\n\nCurl command to demonstrate discrepancy (conceptual):\n\n```bash\n# According to the local spec, this is an invalid parameter\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/some-sourced-id?fields=title,status\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe implementation should support the `fields` query parameter as defined in the upstream specification.\n\nThe upstream JSON specification for `GET /categories/{sourcedId}` includes the following parameter definition:\n\n```json\n{\n  \"name\": \"fields\",\n  \"in\": \"query\",\n  \"description\": \"To identify the range of fields that should be supplied in the response message.\",\n  \"required\": false,\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\"\n  },\n  \"collectionFormat\": \"csv\",\n  \"allowEmptyValue\": false\n}\n```\n\nThe upstream HTML documentation also confirms this in Section 4.4.2 (\"getCategory\" Operation) under \"Notes\".\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/categories/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/categories/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Failure to implement standard parameters like `fields` violates the principle of feature parity with the official specification. This forces clients to receive the full, potentially large, object every time, leading to inefficient data transfer. It also breaks clients that are built to the official specification and expect this feature to be available.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:33:49.047Z",
    "updatedAt": "2025-07-03T19:24:53.243Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-191/missing-fields-query-parameter-in-get"
  },
  {
    "id": "52b5b8b7-af51-4a88-91f3-d303b286542c",
    "identifier": "BUG-190",
    "title": "Unsupported `search` query parameter on GET /assessmentResults/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local API specification for `GET /assessmentResults/` includes a non-standard query parameter called `search`.\n\n**Summary:** \nThe local API specification for `GET /assessmentResults/` includes a non-standard query parameter called `search`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the `parameters` section for the `GET` method in the local specification.\n2. Observe the presence of a query parameter named `search`.\n3. Review the `parameters` section for the `getAllAssessmentResults` operation in the upstream JSON and HTML specifications (Section 4.3.1).\n4. Note that the standard parameters are `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`. There is no `search` parameter defined.\n\nCurl command:\n\n```bash\n# This curl command uses the non-standard parameter.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/?search=somequery\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe API should only support the query parameters defined in the 1EdTech OneRoster specification. The `search` parameter is not part of this specification. The standardized method for querying data is the `filter` parameter.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Introducing proprietary parameters like `search` that duplicate the functionality of standardized parameters like `filter` leads to confusion and non-compliance. While it may not break clients that don't use it, it creates a fork of the API and requires custom implementation for any client that wishes to use this non-standard feature. This should be removed in favor of exclusive use of the `filter` parameter.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:32:08.478Z",
    "updatedAt": "2025-07-03T14:36:14.973Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-190/unsupported-search-query-parameter-on-get-assessmentresults"
  },
  {
    "id": "ac191e8d-985f-445c-8de1-71c022809549",
    "identifier": "BUG-189",
    "title": "The API path for `/assessmentResults/` contains a trailing slash, which is inconsistent with the upstream specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the collection path with a trailing slash: `/ims/oneroster/gradebook/v1p2/assessmentResults/`.\n\n**Summary:** \nThe local specification defines the collection path with a trailing slash: `/ims/oneroster/gradebook/v1p2/assessmentResults/`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the path defined in the local specification: `/ims/oneroster/gradebook/v1p2/assessmentResults/`. Note the trailing slash.\n2. Review the upstream JSON specification. Note the `basePath` is `/ims/oneroster/gradebook/v1p2` and the relevant path key is `/assessmentResults`.\n3. The combination of the upstream `basePath` and path key is `/ims/oneroster/gradebook/v1p2/assessmentResults`, with no trailing slash.\n\nCurl command:\n\n```bash\n# This command uses the locally specified path with a trailing slash.\n# While many web servers treat paths with and without a trailing slash identically, it is a technical inconsistency.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification for collection endpoints does not use a trailing slash. The path should be `/ims/oneroster/gradebook/v1p2/assessmentResults`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While many servers are configured to handle paths with or without a trailing slash interchangeably (often via a 301/308 redirect), they are technically distinct URLs. A strict client or gateway might treat them differently. Adhering to the exact path structure of the specification is crucial for maximum compatibility and to avoid unnecessary redirects or potential 404 errors in strict environments.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:30:50.764Z",
    "updatedAt": "2025-07-02T18:10:27.827Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-189/the-api-path-for-assessmentresults-contains-a-trailing-slash-which-is"
  },
  {
    "id": "97bbcc7b-7636-4321-a253-e007bdb74b7a",
    "identifier": "BUG-188",
    "title": "Descriptive Text for Endpoint Mismatches Upstream Specification",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification has the following descriptive text:\n\n* `summary`: \"Get All CASE Documents\"\n* `description`: \"Returns a collection of all CASE documents in the system\"\n* `tags`: `[\"CASE - Learning Standards\"]`\n\n**Summary:** \nThe local specification has the following descriptive text:\n\n* `summary`: \"Get All CASE Documents\"\n* `description`: \"Returns a collection of all CASE documents in the system\"\n* `tags`: `[\"CASE - Learning Standards\"]`\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Compare the `summary`, `description`, and `tags` for the `GET` operation in the local spec.\n2. Cross-reference them with the corresponding fields in the upstream JSON spec.\n\n**Expected:** \nThe upstream specification provides different descriptive text that should be used for consistency.\n\n* `summary`: \"The REST read request message for the getAllCFDocuments() API call.\"\n* `description`: \"This is a request to the Service Provider to provide all of the Competency Framework Documents.\"\n* `tags`: `[\"DocumentsManager\"]`\n\nWhile some interpretation is allowed, the complete change in `tags` and the less formal tone of the summary/description is a deviation. The tags are particularly important as they group related endpoints.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** While not a functional bug, inconsistent documentation can lead to confusion for developers using the API. Using the official tags and descriptions helps maintain alignment with the standard's documentation and intent. The `DocumentsManager` tag specifically groups all document-related operations, a semantic grouping which is lost in the local spec.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:29:04.339Z",
    "updatedAt": "2025-07-01T23:08:58.579Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-188/descriptive-text-for-endpoint-mismatches-upstream-specification"
  },
  {
    "id": "ecad4107-fd4a-442d-b347-a2b51fabda0f",
    "identifier": "BUG-187",
    "title": "`scoreStatus` field uses a restrictive enum, preventing spec-compliant vocabulary extensions",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines `scoreStatus` as a strict enumeration, allowing only the five predefined values. This prevents the API from returning any extended, proprietary status values.\n\n**Summary:** \nThe local specification defines `scoreStatus` as a strict enumeration, allowing only the five predefined values. This prevents the API from returning any extended, proprietary status values.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local OpenAPI specification for the `assessmentResult` schema.\n2. Observe that the `scoreStatus` field is defined with a hard-coded `enum` of `[exempt, 'fully graded', 'not submitted', 'partially graded', 'submitted']`.\n3. Review the upstream HTML documentation, Section 6.1.5.8, which describes the `scoreStatus` attribute.\n4. Note that its data type is `ScoreStatusExtEnum`.\n5. Review Section 6.4.1 for `ScoreStatusExtEnum`, which shows it is a `Union` of `ScoreStatusEnum` and `ScoreStatusExtString`.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification defines `scoreStatus` as an extensible vocabulary. While it defines a base set of values, it explicitly allows for proprietary extensions.\n\nThe upstream HTML doc (Section 6.4.1) defines `ScoreStatusExtEnum` as a union of the base enum and `ScoreStatusExtString`. Section 8.1.3 (\"Proprietary Vocabulary Terms\") further clarifies: \"...ONLY the 'ScoreStatusEnum' and 'SourceEnum' vocabularies MAY be extended. Each proprietary term must start with the characters 'ext:'.\"\n\nThe local implementation should not use a restrictive `enum`, but rather define the field as a `string` and document the base vocabulary values and the extension mechanism in the description.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While the base enum values are correct, enforcing a strict enum violates the specification's explicit provision for extensibility. If this service needs to interoperate with another system that uses extended vocabulary for `scoreStatus`, this implementation would either fail to represent that data or be forced to map it to a less accurate standard value, leading to a loss of information.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:26:31.858Z",
    "updatedAt": "2025-07-03T13:42:28.314Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-187/scorestatus-field-uses-a-restrictive-enum-preventing-spec-compliant"
  },
  {
    "id": "32d5aafd-5250-43cc-be91-8ed1d8d2684d",
    "identifier": "BUG-186",
    "title": "Query Parameters are Undocumented at the Operation Level",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification fails to define the supported query parameters (`limit`, `offset`, `filter`, `sort`, `orderBy`) in the `parameters` section of the `get` operation. They are only described in a generic, non-machine-readable block at the top of the file.\n\n**Summary:** \nThe local specification fails to define the supported query parameters (`limit`, `offset`, `filter`, `sort`, `orderBy`) in the `parameters` section of the `get` operation. They are only described in a generic, non-machine-readable block at the top of the file.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the OpenAPI definition for the `GET /ims/case/v1p1/CFDocuments` operation in the local spec.\n2. Observe that there is no `parameters` array defined for this operation.\n3. Note that standard parameters like `limit`, `offset`, `filter`, `sort`, and `orderBy` are only mentioned in the global `info.description` block.\n\nCurl command:\nThis is a documentation issue. A curl command can show the parameters work, but cannot prove they are missing from the spec.\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments?limit=10&offset=0&sort=title&orderBy=asc\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to OpenAPI best practices and the upstream specification, all parameters for an operation must be explicitly defined in the `parameters` array of that operation. This makes the API self-describing and allows tooling (e.g., code generators, API explorers) to function correctly.\n\nThe upstream spec correctly defines all these parameters for the `GET /CFDocuments` operation. For example, `limit`:\n\n```json\n\"parameters\" : [\n    {\n        \"name\" : \"limit\",\n        \"in\" : \"query\",\n        \"description\" : \"...\",\n        \"required\" : false,\n        \"type\" : \"integer\",\n        ...\n    },\n    ...\n]\n```\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a significant documentation and discoverability issue. By omitting the parameters from the operation definition, we prevent automated tools and developers from understanding how to properly use the endpoint's pagination, filtering, and sorting features. The API is effectively undocumented at a machine-readable level.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:26:30.942Z",
    "updatedAt": "2025-07-01T23:08:47.882Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-186/query-parameters-are-undocumented-at-the-operation-level"
  },
  {
    "id": "60c33e0f-487c-492a-ba11-0e192a90af84",
    "identifier": "BUG-185",
    "title": "Endpoint Defines Non-Standard HTTP 422 Status Code",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines a response for the `422 Unprocessable Entity` status code, intended for validation errors.\n\n**Summary:** \nThe local specification defines a response for the `422 Unprocessable Entity` status code, intended for validation errors.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `responses` section for the `GET /ims/case/v1p1/CFDocuments` endpoint in the local specification.\n2. Note the presence of a response defined for the `422 Unprocessable Entity` status code.\n3. Compare this with the `responses` section for `GET /CFDocuments` in the upstream JSON specification.\n\nCurl command:\nThis is a documentation bug; no curl command can directly prove the presence of an extra definition.\n\n**Expected:** \nThe upstream specification does not define a `422` response. For invalid data or filter parameters, it specifies that a `400 Bad Request` should be returned.\n\nFrom `case.upstream.json`, `responses` for `GET /CFDocuments`:\n\n```json\n\"400\" : {\n    \"description\" : \"An invalid selection field was supplied and data filtering on the selection criteria was not possible i.e. 'invalid_selection_field'. This is accompanied by the 'codeMajor/severity' values of 'failure/error'.\",\n    \"schema\" : {\n        \"$ref\" : \"#/definitions/imsx_StatusInfo.Type\"\n    }\n}\n```\n\nThe implementation should use the `400` status code for invalid data or parameters, not `422`.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** While using 422 for validation errors is a common pattern in some web frameworks, it deviates from the official CASE specification. A compliant client will not be programmed to handle a 422 status code from this endpoint and may misinterpret the error. The implementation should adhere to the specified error codes for interoperability.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:24:44.875Z",
    "updatedAt": "2025-07-02T18:41:12.283Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-185/endpoint-defines-non-standard-http-422-status-code"
  },
  {
    "id": "7d4a6cb4-8a42-4469-885a-6f885cdd85a3",
    "identifier": "BUG-184",
    "title": "Error Response Schema Contains Non-Standard 'imsx_error_details' Field",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification adds a non-standard field, `imsx_error_details`, to all defined error response schemas.\n\n**Summary:** \nThe local specification adds a non-standard field, `imsx_error_details`, to all defined error response schemas.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Trigger an error from the endpoint.\n2. Inspect the JSON error response payload.\n3. Observe the presence of the `imsx_error_details` field.\n\nCurl command (conceptual):\n\n```bash\n# This request with an invalid filter should trigger a 4xx error.\ncurl -v -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments?filter=invalidfield=='bar'\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream JSON specification defines the standard error response object as `imsx_StatusInfo.Type`. This object does not contain an `imsx_error_details` field. The upstream schema is defined as having no additional properties.\n\nFrom `case.upstream.json`, definition `imsx_StatusInfo.Type`:\n\n```json\n\"properties\" : {\n    \"imsx_codeMajor\" : { ... },\n    \"imsx_severity\" : { ... },\n    \"imsx_description\" : { ... },\n    \"imsx_codeMinor\" : { ... }\n},\n\"required\" : [ \"imsx_codeMajor\",\"imsx_severity\" ],\n\"additionalProperties\" : false\n```\n\nThe error response should not contain the `imsx_error_details` field.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Adding extra fields to the error payload violates the `additionalProperties: false` constraint on the upstream schema definition. This can cause deserialization errors in strictly-validating clients and represents a deviation from the standard error reporting mechanism.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:24:42.717Z",
    "updatedAt": "2025-07-02T20:33:18.245Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-184/error-response-schema-contains-non-standard-imsx-error-details-field"
  },
  {
    "id": "5d5584a4-9e2a-4772-84cb-4a674b232b10",
    "identifier": "BUG-183",
    "title": "Incorrect type and missing enums for boolean-like fields in GET response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `inProgress`, `incomplete`, `late`, and `missing` fields as nullable strings with no enumerated values. This allows for arbitrary strings or null, but does not enforce the boolean-like string values.\n\n**Summary:** \nThe local specification defines the `inProgress`, `incomplete`, `late`, and `missing` fields as nullable strings with no enumerated values. This allows for arbitrary strings or null, but does not enforce the boolean-like string values.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local OpenAPI specification for the `assessmentResult` schema in the `GET /assessmentResults/` response.\n2. Observe the definitions for the fields `inProgress`, `incomplete`, `late`, and `missing`. They are all defined as `type: - string - 'null'`.\n3. Cross-reference this with the upstream JSON specification for `AssessmentResultDType`.\n4. Observe that these fields are defined as `type: string` with an `enum: [\"true\", \"false\"]`.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThese fields should be defined as strings restricted to the values `\"true\"` or `\"false\"`. They are not nullable in the upstream specification.\n\nThe upstream JSON spec defines these fields with a clear enum. For example, `late`:\n\n```json\n\"late\": {\n  \"description\": \"...\",\n  \"type\": \"string\",\n  \"enum\": [\"true\", \"false\"]\n}\n```\n\nThe upstream HTML documentation (Section 6.3.4, `BooleanTrueFalseEnum`) confirms the vocabulary is `{ true | false }`. The local implementation's use of a nullable, free-form string is incorrect.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a significant data type mismatch. The specification intends for these to be used as boolean flags represented by specific strings. Allowing arbitrary strings or `null` can lead to ambiguity and logic errors in client applications. A client expecting `\"true\"` or `\"false\"` will not know how to handle other string values or `null`, leading to unpredictable behavior.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:21:46.959Z",
    "updatedAt": "2025-07-02T20:32:06.781Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-183/incorrect-type-and-missing-enums-for-boolean-like-fields-in-get"
  },
  {
    "id": "cb8c3ee1-8bd9-41bb-a85e-b7613acb469a",
    "identifier": "BUG-182",
    "title": "Error Response Schema Uses Incorrect Case for 'imsx_CodeMinor' Key",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines the error response schema with a key `imsx_CodeMinor`, using camel case with a capital 'C'.\n\n**Summary:** \nThe local specification defines the error response schema with a key `imsx_CodeMinor`, using camel case with a capital 'C'.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Trigger an error from the endpoint, for example by providing an invalid filter parameter.\n2. Inspect the JSON error response payload.\n3. Observe the key `imsx_CodeMinor` (with a capital C).\n\nCurl command (conceptual):\n\n```bash\n# This request with an invalid filter should trigger a 4xx error.\ncurl -v -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments?filter=invalidfield=='bar'\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream JSON specification for `imsx_StatusInfo.Type` clearly defines this key as `imsx_codeMinor` (all lowercase 'c'). JSON keys are case-sensitive.\n\nFrom `case.upstream.json`, definition `imsx_StatusInfo.Type`:\n\n```json\n\"properties\" : {\n    \"imsx_codeMajor\" : { ... },\n    \"imsx_severity\" : { ... },\n    \"imsx_description\" : { ... },\n    \"imsx_codeMinor\" : {\n        \"$ref\" : \"#/definitions/imsx_CodeMinor.Type\"\n    }\n},\n\"required\" : [ \"imsx_codeMajor\",\"imsx_severity\" ]\n```\n\nThe key must be `imsx_codeMinor`.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** A case mismatch in a required key is a critical bug. It will cause any correctly implemented client's parser to fail when trying to read error details, as it will be looking for `imsx_codeMinor` and find `imsx_CodeMinor` instead. This breaks standardized error handling.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:21:43.148Z",
    "updatedAt": "2025-07-02T20:30:24.486Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-182/error-response-schema-uses-incorrect-case-for-imsx-codeminor-key"
  },
  {
    "id": "ffbafb46-2355-4521-b740-6ddd9bdc6ee2",
    "identifier": "BUG-181",
    "title": "Incorrect format for `scoreDate` field in GET response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `scoreDate` field as having a `date-time` format, which implies a full timestamp with time and timezone information (e.g., `2023-10-27T10:00:00Z`).\n\n**Summary:** \nThe local specification defines the `scoreDate` field as having a `date-time` format, which implies a full timestamp with time and timezone information (e.g., `2023-10-27T10:00:00Z`).\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local OpenAPI specification for the `assessmentResult` schema in the `GET /assessmentResults/` response.\n2. Observe the definition for the `scoreDate` property. It is defined as `type: string` with `format: date-time`.\n3. Cross-reference this with the upstream JSON specification for the `AssessmentResultDType`.\n4. The `scoreDate` property is defined as `type: string` with `format: date`.\n5. Cross-reference with the upstream HTML documentation (Section 6.1.5.5).\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification requires the `scoreDate` field to have a `date` format.\n\nThe upstream JSON spec for `AssessmentResultDType` defines `scoreDate` as:\n\n```json\n\"scoreDate\": {\n  \"description\": \"...\",\n  \"type\": \"string\",\n  \"format\": \"date\"\n}\n```\n\nThe upstream HTML documentation (Section 6.1.5.5) confirms this, stating: \"The format is YYYY-MM-DD as defined in \\[ISO 8601\\]\". This corresponds to the OpenAPI `date` format, not `date-time`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Using `date-time` instead of `date` can cause data corruption or parsing errors in client applications that are strictly typed. A client expecting `YYYY-MM-DD` might fail to parse a full `date-time` string. This is a clear deviation from the specification that will impact data integrity and client compatibility.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:20:22.710Z",
    "updatedAt": "2025-07-02T20:27:18.537Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-181/incorrect-format-for-scoredate-field-in-get-response"
  },
  {
    "id": "2457c810-adaf-413b-9061-914802910bb0",
    "identifier": "BUG-180",
    "title": "GUID Reference objects in GET response are non-compliant, missing required `href` and `type` fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the `GET /assessmentResults/` response, the fields `assessmentLineItem`, `student`, and `scoreScale` are modeled as simple objects containing only a `sourcedId`. For example, `student` is `{\"properties\": {\"sourcedId\": {\"type\": \"string\"}}, \"required\": [\"sourcedId\"]}`.\n\n**Summary:** \nIn the `GET /assessmentResults/` response, the fields `assessmentLineItem`, `student`, and `scoreScale` are modeled as simple objects containing only a `sourcedId`. For example, `student` is `{\"properties\": {\"sourcedId\": {\"type\": \"string\"}}, \"required\": [\"sourcedId\"]}`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local OpenAPI specification for the `assessmentResult` schema in the `GET /assessmentResults/` response.\n2. Observe the schemas for the `assessmentLineItem`, `student`, and `scoreScale` fields. They are defined as simple objects containing only a `sourcedId` string.\n3. Cross-reference this with the upstream JSON specification. These fields should conform to `AssessmentLineItemGUIDRefDType`, `UserGUIDRefDType`, and `ScoreScaleGUIDRefDType` respectively.\n4. Note that all `GUIDRef` types in the upstream spec require three fields: `href`, `sourcedId`, and `type`.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThese fields should be compliant `GUIDRef` objects. According to the upstream specification (e.g., `UserGUIDRefDType`), these objects MUST contain three properties: `href`, `sourcedId`, and `type`.\n\nAn example from the upstream JSON for `UserGUIDRefDType` shows the correct structure:\n\n```json\n\"UserGUIDRefDType\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"href\": { \"type\": \"string\", \"format\": \"uri\" },\n    \"sourcedId\": { \"type\": \"string\" },\n    \"type\": { \"type\": \"string\", \"enum\": [\"user\"] }\n  },\n  \"required\": [\"href\", \"sourcedId\", \"type\"]\n}\n```\n\nThe local implementation is missing the mandatory `href` and `type` fields for all GUID reference objects.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical violation of the OneRoster data model. The `GUIDRef` structure is a standard way to link to other resources within the API ecosystem. The `href` provides the direct URL to the related resource, and the `type` confirms the resource type, which is crucial for client-side polymorphic processing. By only including `sourcedId`, the local implementation forces the client to manually construct URLs and guess the resource type, defeating the purpose of the `GUIDRef` object and breaking compliance.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:19:07.346Z",
    "updatedAt": "2025-07-02T20:25:01.286Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-180/guid-reference-objects-in-get-response-are-non-compliant-missing"
  },
  {
    "id": "ef14ec7b-648e-4fbd-bf8f-69c7f7bca44a",
    "identifier": "BUG-179",
    "title": "Endpoint is Missing the Standard 'fields' Query Parameter",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification does not define the `fields` query parameter for the `GET /CFDocuments` endpoint. The top-level documentation section on filtering/sorting also fails to mention it.\n\n**Summary:** \nThe local specification does not define the `fields` query parameter for the `GET /CFDocuments` endpoint. The top-level documentation section on filtering/sorting also fails to mention it.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the parameters section for the `GET /ims/case/v1p1/CFDocuments` endpoint in the local specification.\n2. Observe that the `fields` parameter is not defined.\n3. Try to use the `fields` parameter in a request to see if it is implemented but undocumented.\n\nCurl command:\n\n```bash\n# This curl command attempts to use the 'fields' parameter which should be supported.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments?fields=sourcedId,title\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification defines `fields` as a standard, optional query parameter for selecting which fields to return in the response. This is a core feature for optimizing payloads.\n\nFrom `case.upstream.json`, `parameters` for `GET /CFDocuments`:\n\n```json\n{\n    \"name\" : \"fields\",\n    \"in\" : \"query\",\n    \"description\" : \"This is used as part of the field selection mechanism...\",\n    \"required\" : false,\n    \"type\" : \"array\",\n    \"items\" : {\n        \"type\" : \"string\"\n    },\n    \"collectionFormat\" : \"csv\",\n    \"allowEmptyValue\" : false\n}\n```\n\nThe upstream HTML documentation (Section 3.3) also lists \"field selection\" as an optional but standard capability for service providers. The local implementation should support this parameter.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Omitting the `fields` parameter is a significant feature gap. This forces clients to always receive the full, potentially large, CFDocument object. This increases payload size, consumes more bandwidth, and can slow down client-side processing. While listed as optional to support in the HTML, its complete absence from the local spec is a major deviation from the full upstream spec.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:19:06.618Z",
    "updatedAt": "2025-07-02T20:23:17.751Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-179/endpoint-is-missing-the-standard-fields-query-parameter"
  },
  {
    "id": "b3224f2a-c74c-4d07-8c7e-14059279f526",
    "identifier": "BUG-178",
    "title": "All error response schemas are non-compliant with the upstream `imsx_StatusInfoDType` model",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation defines custom error response schemas (e.g., `BadRequestResponse`, `NotFoundResponse`) that deviate from the official `imsx_StatusInfoDType`. Specifically, they add an extra `imsx_error_details` field and incorrectly model the `imsx_CodeMinor` field.\n\n**Summary:** \nThe local implementation defines custom error response schemas (e.g., `BadRequestResponse`, `NotFoundResponse`) that deviate from the official `imsx_StatusInfoDType`. Specifically, they add an extra `imsx_error_details` field and incorrectly model the `imsx_CodeMinor` field.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local OpenAPI specification in the `components/schemas` section for any error response, for example `BadRequestResponse`.\n2. Observe its structure, which includes `imsx_codeMajor`, `imsx_severity`, `imsx_description`, `imsx_CodeMinor`, and `imsx_error_details`.\n3. Cross-reference this with the upstream JSON specification for `imsx_StatusInfoDType` in the `definitions` section.\n4. Note that the upstream `imsx_StatusInfoDType` does not contain an `imsx_error_details` field.\n5. Also, note the structure of `imsx_CodeMinor` in the local spec is different from the upstream `imsx_CodeMinorDType`.\n\nCurl command (to trigger a 400 Bad Request):\n\n```bash\n# This command with an invalid filter should trigger a 400 error.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/?filter=invalid-field\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAll error responses for this API should conform to the `imsx_StatusInfoDType` object defined in the upstream specification.\n\nThe upstream `imsx_StatusInfoDType` is defined as:\n\n```json\n\"imsx_StatusInfoDType\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"imsx_codeMajor\": { ... },\n    \"imsx_severity\": { ... },\n    \"imsx_description\": { ... },\n    \"imsx_CodeMinor\": {\n      \"$ref\": \"#/definitions/imsx_CodeMinorDType\"\n    }\n  },\n  \"required\": [\"imsx_codeMajor\", \"imsx_severity\"]\n}\n```\n\nThere is no `imsx_error_details` field. The `imsx_CodeMinor` field should also match the upstream structure. The local schemas are non-compliant proprietary versions.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Standardized error handling is crucial for robust API integrations. By deviating from the specified `imsx_StatusInfoDType`, the local implementation forces every client to write custom error handling logic, breaking the promise of interoperability. A compliant client would not know how to parse the extra `imsx_error_details` field and may fail to correctly interpret error conditions. This is a critical failure of compliance.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:19:06.522Z",
    "updatedAt": "2025-07-03T18:45:36.181Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-178/all-error-response-schemas-are-non-compliant-with-the-upstream-imsx"
  },
  {
    "id": "e12dd8c0-a7d3-4d2c-bc3f-ff23a38912c5",
    "identifier": "BUG-177",
    "title": "Response Body Contains Non-Standard Extension Fields in Violation of Conformance Rules",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification adds three non-standard fields to the CFDocument response object: `frameworkType`, `caseVersion`, and `extensions`.\n\n**Summary:** \nThe local specification adds three non-standard fields to the CFDocument response object: `frameworkType`, `caseVersion`, and `extensions`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Call the `GET /ims/case/v1p1/CFDocuments` endpoint.\n2. Inspect the JSON response payload for a single CFDocument object.\n3. Observe the presence of the `frameworkType`, `caseVersion`, and `extensions` fields.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification does not define these fields. More importantly, the upstream HTML documentation explicitly forbids adding extension fields to be compliant.\n\nFrom `case.upstream.html`, Section 3.3 \"Service Provider Compliance\":\n\"The functional capabilities of such systems are: \\[...\\] They must not provide extension data fields in the JSON payloads;\"\n\nThe response should only contain fields defined in the `CFPckgDocument.Type` and `CFDocument.Type` schemas in `case.upstream.json`.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical conformance violation. The HTML documentation explicitly states that compliant providers \"must not provide extension data fields\". Adding extra fields can break strictly-validating clients and goes directly against the interoperability goals of the standard. This implementation is not compliant with the CASE Service 1.0 specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:17:08.898Z",
    "updatedAt": "2025-07-03T06:03:58.390Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-177/response-body-contains-non-standard-extension-fields-in-violation-of"
  },
  {
    "id": "80684aa4-502b-4f44-990b-033e8a6bde9c",
    "identifier": "BUG-176",
    "title": "`assessmentResult` objects in GET response are missing required fields `sourcedId` and `dateLastModified`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for an `assessmentResult` object in the response of `GET /assessmentResults/` does not list `sourcedId` or `dateLastModified` as required fields. They are defined as optional properties.\n\n**Summary:** \nThe local specification for an `assessmentResult` object in the response of `GET /assessmentResults/` does not list `sourcedId` or `dateLastModified` as required fields. They are defined as optional properties.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local OpenAPI specification for the `GET /ims/oneroster/gradebook/v1p2/assessmentResults/` endpoint.\n2. Examine the schema for the items within the `assessmentResults` array.\n3. Look at the `required` array for this item schema. It lists: `status`, `assessmentLineItem`, `student`, `scoreDate`, `scoreStatus`.\n4. Cross-reference this with the upstream JSON specification for `AssessmentResultDType`.\n5. Observe that the upstream `required` array is: `sourcedId`, `status`, `dateLastModified`, `assessmentLineItem`, `student`, `scoreDate`, `scoreStatus`.\n\nCurl command:\n\n```bash\n# This command would request an assessment result.\n# A compliant server MUST return `sourcedId` and `dateLastModified` in the response.\n# The local spec implies these fields are optional.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `AssessmentResultDType` in the upstream specification explicitly lists `sourcedId` and `dateLastModified` as required fields. A compliant API response MUST always include these fields for every assessment result object.\n\nThe upstream JSON spec for `AssessmentResultDType` states:\n\n```json\n\"required\": [\n  \"sourcedId\",\n  \"status\",\n  \"dateLastModified\",\n  \"assessmentLineItem\",\n  \"student\",\n  \"scoreDate\",\n  \"scoreStatus\"\n],\n```\n\nThe HTML documentation (Section 6.1.7, `Base` class) reinforces this: \"All objects MUST be identified by a Source Identifier.\" (`sourcedId`) and \"All objects MUST be annotated with the dateTime upon which they were last modified.\" (`dateLastModified`).\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug. The `sourcedId` is the primary key for the object and is essential for any further interaction with it (e.g., updating or deleting via `.../{sourcedId}`). `dateLastModified` is crucial for clients to perform incremental synchronization. Omitting these from the `required` list violates a core principle of the OneRoster data model and will break client applications that rely on these fields being present.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:16:05.501Z",
    "updatedAt": "2025-07-02T19:52:37.834Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-176/assessmentresult-objects-in-get-response-are-missing-required-fields"
  },
  {
    "id": "27222ad8-3294-475e-9a63-197a1e456825",
    "identifier": "BUG-175",
    "title": "GUID Reference Schemas are Incomplete and Missing `href` and `type` Fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** In the local `AssessmentResult` schema, the objects for `assessmentLineItem`, `student`, and `scoreScale` are defined to only contain a `sourcedId`. For example, `assessmentLineItem` is `type: object, properties: { sourcedId: { type: string } }, required: ['sourcedId']`.\n\n**Summary:** \nIn the local `AssessmentResult` schema, the objects for `assessmentLineItem`, `student`, and `scoreScale` are defined to only contain a `sourcedId`. For example, `assessmentLineItem` is `type: object, properties: { sourcedId: { type: string } }, required: ['sourcedId']`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the local `AssessmentResult` schema for the fields `assessmentLineItem`, `student`, and `scoreScale`.\n2. Observe that their schemas only contain a `sourcedId` property.\n3. Inspect the upstream `AssessmentResultDType` definition. Note that these fields reference `...GUIDRefDType` objects.\n4. For example, check the definition for `AssessmentLineItemGUIDRefDType` in the upstream JSON spec or HTML spec (Table 6.1.3). Observe that it requires `href`, `sourcedId`, and `type`.\n\n**Expected:** \nThese fields should conform to the upstream `GUIDRef` object structure. For example, the `assessmentLineItem` field should match the `AssessmentLineItemGUIDRefDType` schema, which requires three properties:\n\n1. `href`: A URI to the referenced resource.\n2. `sourcedId`: The GUID of the referenced resource.\n3. `type`: A string from an enum, e.g., `'assessmentLineItem'`.\n   The local schema is missing the mandatory `href` and `type` fields for all three reference objects (`assessmentLineItem`, `student`, and `scoreScale`).\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical data model violation. The `GUIDRef` pattern is fundamental to how OneRoster links resources. By omitting the `href` and `type` fields, the local implementation breaks this pattern. Clients will be unable to discover the full URI of the related resource or validate its type, severely hindering their ability to navigate the API and leading to application failures.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:15:31.110Z",
    "updatedAt": "2025-07-02T17:28:28.577Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-175/guid-reference-schemas-are-incomplete-and-missing-href-and-type-fields"
  },
  {
    "id": "5d24951a-4b03-4ae5-9fb7-5e0c8af7be3b",
    "identifier": "BUG-174",
    "title": "Non-compliant `POST /assessmentResults/` endpoint defined, which does not exist in the upstream specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `POST` method on the `/ims/oneroster/gradebook/v1p2/assessmentResults/` endpoint for creating an assessment result. The request body is defined as `{\"assessmentResult\": { ... }}` and the success response is `201 Created` with a `sourcedIdPairs` body.\n\n**Summary:** \nThe local specification defines a `POST` method on the `/ims/oneroster/gradebook/v1p2/assessmentResults/` endpoint for creating an assessment result. The request body is defined as `{\"assessmentResult\": { ... }}` and the success response is `201 Created` with a `sourcedIdPairs` body.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local OpenAPI specification for the path `/ims/oneroster/gradebook/v1p2/assessmentResults/`.\n2. Observe that a `POST` method is defined on this path.\n3. Cross-reference this with the upstream JSON specification (`oneroster.gradebook.upstream.json`) for the `/assessmentResults` path.\n4. Note that the upstream specification does not define a `POST` method. It defines `GET` on the collection and `GET`, `DELETE`, and `PUT` on the single-item path (`/assessmentResults/{sourcedId}`).\n5. Cross-reference with the upstream HTML documentation (Section 4.3, \"AssessmentResultsManagement\"). It also omits any `POST` operation for this endpoint.\n\nCurl command (conceptual, as the endpoint should not exist):\n\n```bash\n# This curl command attempts to use the non-compliant endpoint.\n# The server's behavior is undefined by the spec, but the spec itself is incorrect.\ncurl -X POST \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"assessmentResult\": {\n    \"status\": \"active\",\n    \"assessmentLineItem\": {\n      \"sourcedId\": \"some-lineitem-id\"\n    },\n    \"student\": {\n      \"sourcedId\": \"some-student-id\"\n    },\n    \"scoreDate\": \"2023-10-27\",\n    \"scoreStatus\": \"submitted\"\n  }\n}'\n```\n\n**Expected:** \nThe upstream specification does not define a `POST` method for the `/assessmentResults` collection endpoint. The creation of a single `assessmentResult` is handled via `PUT /assessmentResults/{sourcedId}`, where the client supplies the `sourcedId` in the path.\n\nThe upstream HTML documentation (Section 4.3, Table 4.3) lists the valid operations for \"AssessmentResultsManagement\" as:\n\n* `getAllAssessmentResults`\n* `getAssessmentResult`\n* `deleteAssessmentResult`\n* `putAssessmentResult`\n\nA `POST` operation on the collection endpoint is not among the specified operations.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical deviation from the 1EdTech OneRoster specification. The local implementation has invented an endpoint (`POST /assessmentResults/`) that does not exist in the standard. This breaks compliance and will cause interoperability failures with any client built strictly against the official specification. Furthermore, the local POST operation's request and response bodies are contradictory: the request implies a single object creation while the response schema (`sourcedIdPairs`) is for bulk creation where the server allocates IDs. This internal inconsistency suggests a fundamental misunderstanding of the upstream specification's creation patterns.",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:15:31.012Z",
    "updatedAt": "2025-07-03T16:27:41.727Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-174/non-compliant-post-assessmentresults-endpoint-defined-which-does-not"
  },
  {
    "id": "3623c232-b1fc-4d80-a468-769e56df90d4",
    "identifier": "BUG-173",
    "title": "Response Body is Missing the Required 'CFPackageURI' Field",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification for an item in the `CFDocuments` array does not include the `CFPackageURI` field.\n\n**Summary:** \nThe local specification for an item in the `CFDocuments` array does not include the `CFPackageURI` field.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Call the `GET /ims/case/v1p1/CFDocuments` endpoint.\n2. Inspect the JSON response payload for a single CFDocument object within the `CFDocuments` array.\n3. Observe that the `CFPackageURI` field is missing.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream JSON specification for `CFDocument.Type` explicitly requires the `CFPackageURI` field. This field is a `LinkURI.Type` object that points to the full package containing the document.\n\nFrom `case.upstream.json`, definition `CFDocument.Type`:\n\n```json\n\"allOf\" : [\n    {\n        \"$ref\" : \"#/definitions/CFPckgDocument.Type\"\n    },\n    {\n        \"type\" : \"object\",\n        \"properties\" : {\n            \"CFPackageURI\" : {\n                \"$ref\" : \"#/definitions/LinkURI.Type\"\n            }\n        },\n        \"required\" : [ \"CFPackageURI\" ],\n        \"additionalProperties\" : false\n    }\n]\n```\n\nThe `CFPackageURI` field must be present in every CFDocument object in the response.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Missing a required field is a critical violation of the specification. The `CFPackageURI` provides a crucial link back to the complete `CFPackage`, which includes all associated items and definitions. Without this field, a client cannot discover the full context of the document, severely limiting the utility of the endpoint.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:15:30.637Z",
    "updatedAt": "2025-07-02T19:48:56.485Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-173/response-body-is-missing-the-required-cfpackageuri-field"
  },
  {
    "id": "4a5e7de9-a57e-43ba-a4bf-ae24012ee2d1",
    "identifier": "BUG-172",
    "title": "Incorrect pagination implementation in `GET /assessmentResults/` response body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) as top-level fields within the JSON response body for a `200 OK` response.\n\n**Summary:** \nThe local implementation returns pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) as top-level fields within the JSON response body for a `200 OK` response.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local OpenAPI specification for the `GET /ims/oneroster/gradebook/v1p2/assessmentResults/` endpoint.\n2. Observe the `200 OK` response schema. It is a complex object containing pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly in the JSON body, alongside the `assessmentResults` array.\n3. Cross-reference this with the upstream JSON specification for `GET /assessmentResults`.\n4. Note that the upstream `200` response schema is `AssessmentResultSetDType`, which only contains a single property: `assessmentResults` (an array).\n5. Note that the upstream specification defines a response header, `X-Total-Count`, for returning the total number of available resources.\n\nCurl command:\n\n```bash\n# This command would demonstrate receiving the incorrect response structure.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/?limit=2\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification, the response body for a successful `GET` request to a collection should conform to the `AssessmentResultSetDType`. This type defines a single root property, `assessmentResults`, containing the array of result objects.\n\nThe upstream JSON spec for `GET /assessmentResults` defines the response schema as:\n\n```json\n\"schema\": {\n  \"$ref\": \"#/definitions/AssessmentResultSetDType\"\n}\n```\n\nAnd `AssessmentResultSetDType` is defined as:\n\n```json\n\"AssessmentResultSetDType\": {\n  \"properties\": {\n    \"assessmentResults\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/AssessmentResultDType\"\n      }\n    }\n  }\n}\n```\n\nPagination information, specifically the total count of records, should be returned in the `X-Total-Count` response header, as specified in the `headers` section of the upstream `200` response. The local implementation ignores this and uses a non-compliant response body structure.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This deviation represents a fundamental break from the OneRoster API's design for handling paginated collections. A client built to the specification would fail to parse the response body correctly, as it expects a simple object with an `assessmentResults` key, not a complex object with multiple pagination keys. The client would also look for the `X-Total-Count` header, which is presumably missing in the local implementation, preventing it from understanding the total size of the dataset. This is a critical interoperability failure.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:15:29.754Z",
    "updatedAt": "2025-07-03T13:02:57.888Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-172/incorrect-pagination-implementation-in-get-assessmentresults-response"
  },
  {
    "id": "fc065919-3ce3-4e18-9b20-e0c00f594e81",
    "identifier": "BUG-171",
    "title": "Incorrect Type for Boolean-like Fields in `AssessmentResult` Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `inProgress`, `incomplete`, `late`, and `missing` fields in the local `AssessmentResult` schema are defined as nullable free-form strings (`type: ['string', 'null']`).\n\n**Summary:** \nThe `inProgress`, `incomplete`, `late`, and `missing` fields in the local `AssessmentResult` schema are defined as nullable free-form strings (`type: ['string', 'null']`).\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the local `AssessmentResult` schema for the fields `inProgress`, `incomplete`, `late`, and `missing`.\n2. Observe they are all defined as `type: ['string', 'null']`.\n3. Inspect the upstream `AssessmentResultDType` definition in the JSON spec.\n4. Observe these same fields are defined as `type: string` with an `enum: [\"true\", \"false\"]`.\n\n**Expected:** \nAccording to the upstream specification, these fields must be strings with an enumerated value set of `\"true\"` or `\"false\"`. The local schema should be defined as `type: string`, `enum: ['true', 'false']` and can be nullable. By defining it as a generic string, the local implementation incorrectly allows any string value (e.g., \"yes\", \"no\", \"pending\"), which violates the upstream spec's constraints. A compliant schema would enforce the enum.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical schema violation. It removes the strict validation required by the upstream spec, potentially allowing invalid data into the system and causing interoperability failures with compliant clients who expect only `\"true\"` or `\"false\"`. The schema must be corrected to include the enum constraint.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:08:35.451Z",
    "updatedAt": "2025-07-02T20:28:53.399Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-171/incorrect-type-for-boolean-like-fields-in-assessmentresult-schema"
  },
  {
    "id": "243958ef-afe7-4aeb-8c74-374cbb58705f",
    "identifier": "BUG-170",
    "title": "Response Schema Incorrectly Renames 'identifier' Field to 'sourcedId'",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines the primary key for a CFDocument as `sourcedId`. It also uses `sourcedId` inside the `subjectURI` and `licenseURI` link objects.\n\n**Summary:** \nThe local specification defines the primary key for a CFDocument as `sourcedId`. It also uses `sourcedId` inside the `subjectURI` and `licenseURI` link objects.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Call the `GET /ims/case/v1p1/CFDocuments` endpoint.\n2. Inspect the JSON response payload for a single CFDocument.\n3. Observe that the primary identifier field is named `sourcedId`.\n4. Observe that nested link objects (e.g., in `subjectURI` and `licenseURI`) also use `sourcedId` instead of `identifier`.\n\nCurl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream JSON specification, the primary key for a `CFPckgDocument` and the identifier within a `LinkURI.Type` object must be named `identifier`.\n\nFrom `case.upstream.json`, definition `CFPckgDocument.Type`:\n\n```json\n\"properties\" : {\n    \"identifier\" : {\n        \"$ref\" : \"#/definitions/UUID.Type\"\n    },\n...\n},\n\"required\" : [ \"identifier\",\"uri\",\"creator\",\"title\",\"lastChangeDateTime\" ]\n```\n\nAnd definition `LinkURI.Type`:\n\n```json\n\"properties\" : {\n    \"title\" : { ... },\n    \"identifier\" : {\n        \"$ref\" : \"#/definitions/UUID.Type\"\n    },\n    \"uri\" : { ... }\n},\n\"required\" : [ \"title\",\"identifier\",\"uri\" ]\n```\n\nThe field must be `identifier` everywhere, not `sourcedId`.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical data modeling bug. Renaming a required primary key breaks any client that is correctly implemented against the official specification. The client will be unable to parse the response correctly as it will be looking for an `identifier` field that does not exist. This issue occurs at the top level of the document object and in all nested link objects.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:07:52.122Z",
    "updatedAt": "2025-07-02T19:47:01.491Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-170/response-schema-incorrectly-renames-identifier-field-to-sourcedid"
  },
  {
    "id": "f6282d87-39bb-4657-ab08-79a3916d22a7",
    "identifier": "BUG-169",
    "title": "Incorrect API Version in Endpoint Path",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines the endpoint path as `/ims/case/v1p1/CFDocuments`, indicating version `v1p1`.\n\n**Summary:** \nThe local specification defines the endpoint path as `/ims/case/v1p1/CFDocuments`, indicating version `v1p1`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the path for the endpoint in the local specification.\n2. Compare it to the `basePath` defined in the upstream JSON specification and the path information in the upstream HTML documentation.\n\nCurl command (conceptual):\nThis is a documentation/pathing bug, not reproducible with a single curl command, but the implemented endpoint path is incorrect.\nIncorrect Path: /ims/case/v1p1/CFDocuments\nCorrect Path: /ims/case/v1p0/CFDocuments\n\n**Expected:** \nThe upstream specification explicitly defines the base path for the API as `/ims/case/v1p0`. All endpoints should be under this version. The upstream HTML documentation (Table 3.1) confirms that endpoints should be appended to `/ims/case/v1p0/`.\n\nFrom `case.upstream.json`:\n`\"basePath\" : \"/ims/case/v1p0\"`\n\nFrom `case.upstream.html`:\n\"For a CASE Service 1.0 implementation the 'Endpoint' value should be appended to the string '/ims/case/v1p0/';\"\n\nThe correct path should be `/ims/case/v1p0/CFDocuments`.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments\nLocal Spec: ims/case/v1p1/CFDocuments.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Using an incorrect version number in the API path is a critical deviation. It breaks compatibility with standard clients built against the official specification and causes confusion regarding which version of the CASE specification is being implemented. The local spec's `caseVersion` field in the response body states '1.1', but the official spec is for 1.0. This further compounds the versioning confusion.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:06:54.989Z",
    "updatedAt": "2025-07-02T18:21:41.525Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-169/incorrect-api-version-in-endpoint-path"
  },
  {
    "id": "25b7ee25-a615-4b08-894f-74281b372c7e",
    "identifier": "BUG-168",
    "title": "Incorrect Format for 'scoreDate' in `AssessmentResult` Schema (date-time vs. date)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `scoreDate` field within the `AssessmentResult` schema as a string with `format: date-time`.\n\n**Summary:** \nThe local specification defines the `scoreDate` field within the `AssessmentResult` schema as a string with `format: date-time`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the `AssessmentResult` schema in the local spec.\n2. Find the `scoreDate` property and observe its format is `date-time`.\n3. Inspect the `AssessmentResultDType` definition in the upstream JSON spec (or Table 6.1.5.5 in the HTML spec).\n4. Observe that the required format for `scoreDate` is `date`.\n\n**Expected:** \nThe upstream specification requires the `scoreDate` field to have a `format: date`. The HTML documentation in Table 6.1.5.5 explicitly states: \"The date at which the score is assigned... The format is YYYY-MM-DD as defined in \\[ISO 8601\\].\". A `date-time` format would include time and timezone information (e.g., `2024-01-01T12:00:00Z`), which is incorrect. The field should only contain the date part (e.g., `2024-01-01`).\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical data type mismatch. Clients built against the official specification will expect a `date` string and may fail to parse a `date-time` string, or may parse it incorrectly, leading to data corruption or application errors. The schema must be corrected to `type: string` with `format: date`.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T19:06:54.177Z",
    "updatedAt": "2025-07-03T18:50:43.732Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-168/incorrect-format-for-scoredate-in-assessmentresult-schema-date-time-vs"
  },
  {
    "id": "39d4ca74-f1ea-448e-928b-98d484fb6f85",
    "identifier": "BUG-167",
    "title": "Incomplete Endpoint Summary and Description",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local spec has a very brief summary (`Get CASE Document by ID`) and description (`Returns a specific CASE Document identified by its sourcedId`).\n\n**Summary:** \nThe local spec has a very brief summary (`Get CASE Document by ID`) and description (`Returns a specific CASE Document identified by its sourcedId`).\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Read the `summary` and `description` for the `getCFDocument` endpoint in the local spec.\n2. Compare these texts to the corresponding fields in the upstream JSON spec.\n3. Note the missing contextual information in the local spec.\n\ncURL command:\nN/A - This is a documentation bug.\n\n**Expected:** \nThe upstream spec provides more meaningful and context-rich text. The summary is `The REST read request message for the getCFDocument() API call.` The description is `This is a request to the service provider to provide the information for the specific Competency Framework Document. If the identified record cannot be found then the 'unknownobject' status code must be reported.` The local description omits the critical instruction about reporting 'unknownobject' for a 404 error.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments/{sourcedId}\nLocal Spec: ims/case/v1p1/CFDocuments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Losing this descriptive context makes it harder for developers to correctly implement a client. The requirement to use the 'unknownobject' code minor value is an important piece of semantic information that should not be omitted from the endpoint's documentation.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:05:52.633Z",
    "updatedAt": "2025-07-01T23:06:02.341Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-167/incomplete-endpoint-summary-and-description"
  },
  {
    "id": "3c90d3ed-10e1-4ffe-9917-cf329a08faa6",
    "identifier": "BUG-166",
    "title": "`AssessmentResult` Schema is Missing Required Fields 'sourcedId' and 'dateLastModified'",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `required` property of the local `AssessmentResult` schema is missing `sourcedId` and `dateLastModified`. This implies that these fields are optional in the response body.\n\n**Summary:** \nThe `required` property of the local `AssessmentResult` schema is missing `sourcedId` and `dateLastModified`. This implies that these fields are optional in the response body.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the `AssessmentResult` schema definition in the `components/schemas` section of the local spec.\n2. Observe the `required` array, which lists: `status`, `assessmentLineItem`, `student`, `scoreDate`, `scoreStatus`.\n3. Compare this with the upstream specification. The `Base` class (Table 6.1.7 in the HTML spec), from which `AssessmentResult` is derived, specifies `sourcedId` and `dateLastModified` as having a multiplicity of `[1]`, making them mandatory.\n4. The `AssessmentResultDType` (Table 6.1.5) adds its own required fields. The complete list of required fields should be the union of both.\n\n**Expected:** \nThe `AssessmentResult` object should always include `sourcedId` and `dateLastModified` as they are mandatory base fields. The upstream specification's `AssessmentResultDType` inherits from `Base`, which mandates both `sourcedId` and `dateLastModified` with a multiplicity of `[1]` (see HTML spec Table 6.1.7). Therefore, the `required` array in the local schema should be: `['sourcedId', 'status', 'dateLastModified', 'assessmentLineItem', 'student', 'scoreDate', 'scoreStatus']`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug. The `sourcedId` is the primary identifier for a resource and its absence breaks the ability for a client to uniquely identify and reference it. The `dateLastModified` field is crucial for any sort of synchronization logic. Failing to mark these as required in the schema is a major violation of the upstream data model and can lead to client-side errors when parsing responses that are assumed to contain these fields.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:05:51.321Z",
    "updatedAt": "2025-07-02T19:32:38.275Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-166/assessmentresult-schema-is-missing-required-fields-sourcedid-and"
  },
  {
    "id": "b2c17f77-663f-47fd-95c9-e581835d20de",
    "identifier": "BUG-165",
    "title": "Extraneous `422 Unprocessable Entity` Response Code",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local API specification defines a response for the `422 Unprocessable Entity` HTTP status code.\n\n**Summary:** \nThe local API specification defines a response for the `422 Unprocessable Entity` HTTP status code.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `responses` section for the `getCFDocument` endpoint in the local specification.\n2. Note the presence of a definition for the `422` HTTP status code.\n3. Compare this with the `responses` section for the same endpoint in the upstream JSON specification.\n\ncURL command:\nN/A - This is a documentation/spec bug, not a runtime bug.\n\n**Expected:** \nThe upstream specification for the `getCFDocument` endpoint does not include a `422` status code. The defined error codes are 400, 401, 403, 404, 429, and 500. Adding non-standard response codes deviates from the specification. The upstream spec uses `400 Bad Request` for invalid data scenarios.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments/{sourcedId}\nLocal Spec: ims/case/v1p1/CFDocuments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** While adding an extra error code might not break existing clients (as they wouldn't know to handle it), it represents a deviation from the agreed-upon contract of the API. It could confuse developers trying to build a client against our documented spec, as they would be implementing handling for an error that a truly compliant server would not send.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:04:38.384Z",
    "updatedAt": "2025-07-02T18:41:03.218Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-165/extraneous-422-unprocessable-entity-response-code"
  },
  {
    "id": "b0842adf-9f45-4dcd-9854-5b1af14324f6",
    "identifier": "BUG-164",
    "title": "Field Name Case Mismatch in Error Response: `imsx_CodeMinor` vs `imsx_codeMinor`",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines the error response schemas with a field named `imsx_CodeMinor` (PascalCase).\n\n**Summary:** \nThe local specification defines the error response schemas with a field named `imsx_CodeMinor` (PascalCase).\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Trigger an error condition, for example by requesting a non-existent object to get a 404 response.\n2. Observe the field names in the JSON error response body.\n3. Compare the casing of the `imsx_CodeMinor` field to the upstream `imsx_StatusInfo.Type` definition.\n\ncURL command (illustrative):\n\n# Requesting a fake ID to trigger a 404 Not Found error\n\ncurl -i -X GET '[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/non-existent-id](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/non-existent-id)' -H 'Authorization: Bearer $TOKEN'\n\n**Expected:** \nThe upstream `imsx_StatusInfo.Type` model, which defines the standard error response structure, specifies this field as `imsx_codeMinor` (camelCase). JSON is case-sensitive, so this represents an incorrect implementation.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments/{sourcedId}\nLocal Spec: ims/case/v1p1/CFDocuments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical bug as it breaks automated error handling for any client adhering to the specification. A client looking for `imsx_codeMinor` will not find it and may misinterpret the error response.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:02:43.179Z",
    "updatedAt": "2025-07-02T18:43:55.898Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-164/field-name-case-mismatch-in-error-response-imsx-codeminor-vs-imsx"
  },
  {
    "id": "0d7fbfd3-3b56-4b91-b664-1be991d8bef1",
    "identifier": "BUG-163",
    "title": "Missing 'fields' Query Parameter on GET /assessmentResults/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `GET /assessmentResults/{sourcedId}` endpoint does not define the optional `fields` query parameter.\n\n**Summary:** \nThe local specification for the `GET /assessmentResults/{sourcedId}` endpoint does not define the optional `fields` query parameter.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the parameters for the `GET /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}` endpoint in the local specification.\n2. Note that only the `sourcedId` path parameter is defined.\n3. Examine the parameters for the same endpoint in the upstream JSON specification.\n4. Note that it defines both the `sourcedId` path parameter and a `fields` query parameter.\n\nExample cURL demonstrating expected functionality:\n\n```bash\n# This request should return only the sourcedId and status fields for the specified assessment result.\n# The local spec does not indicate that this functionality is supported.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/some-assessment-result-id?fields=sourcedId,status\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream OneRoster JSON specification explicitly defines a `fields` query parameter for this endpoint. Its description is: \"To identify the range of fields that should be supplied in the response message.\". This is a standard OneRoster feature for controlling the size of the response payload by requesting a subset of resource fields. The local implementation should support and document this parameter to be compliant.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Omitting the `fields` parameter is a deviation from the specification that removes functionality expected by compliant clients. Clients may wish to reduce payload size for performance reasons, and the inability to do so forces them to retrieve and parse the entire object, which can be inefficient.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:01:34.649Z",
    "updatedAt": "2025-07-02T20:23:13.905Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-163/missing-fields-query-parameter-on-get-assessmentresultssourcedid"
  },
  {
    "id": "1503f9f1-51a9-4d7e-b3ad-51e50d64aa95",
    "identifier": "BUG-162",
    "title": "Extraneous Fields in `CFDocument` Response Violate Conformance Rules",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification's `CFDocument` object includes three fields that are not part of the official specification: `frameworkType`, `caseVersion`, and `extensions`.\n\n**Summary:** \nThe local specification's `CFDocument` object includes three fields that are not part of the official specification: `frameworkType`, `caseVersion`, and `extensions`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/case/v1p1/CFDocuments/{sourcedId}` endpoint.\n2. Inspect the fields of the returned `CFDocument` object.\n3. Note the presence of the fields `frameworkType`, `caseVersion`, and `extensions`.\n4. Cross-reference these fields with the `CFPckgDocument.Type` definition in the upstream spec and the conformance rules in the HTML spec.\n\ncURL command:\ncurl -X GET '[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/{some_sourcedId}](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/%7Bsome_sourcedId%7D)' -H 'Authorization: Bearer $TOKEN' -H 'Accept: application/json'\n\n**Expected:** \nThe response should only contain fields defined in the upstream `CFPckgDocument.Type` and `CFDocument.Type` models. The upstream models are defined with `\"additionalProperties\" : false`, which prohibits extra fields. Furthermore, the HTML documentation in Section 3.3 (\"Service Provider Compliance\") explicitly states: \"They must not provide extension data fields in the JSON payloads;\". These extraneous fields are a direct violation of this conformance rule.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments/{sourcedId}\nLocal Spec: ims/case/v1p1/CFDocuments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical violation of the IMS certification and conformance requirements. While some clients might ignore extra fields, strict clients will fail to parse the response. The presence of these fields signals a misunderstanding of the specification's strictness and could cause our implementation to fail official conformance testing. The `extensions` field is particularly problematic as it goes against the explicit design of the upstream models.",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T19:01:33.649Z",
    "updatedAt": "2025-07-03T12:07:06.378Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-162/extraneous-fields-in-cfdocument-response-violate-conformance-rules"
  },
  {
    "id": "31ca0ef9-9b69-4898-9702-ba3ba0035ec1",
    "identifier": "BUG-161",
    "title": "Missing Required Field `CFPackageURI` in `CFDocument` Response",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The `CFDocument` object defined in the local specification does not include the `CFPackageURI` field.\n\n**Summary:** \nThe `CFDocument` object defined in the local specification does not include the `CFPackageURI` field.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/case/v1p1/CFDocuments/{sourcedId}` endpoint.\n2. Inspect the fields of the returned `CFDocument` object in the JSON response.\n3. Check for the presence of the `CFPackageURI` field.\n\ncURL command:\ncurl -X GET '[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/{some_sourcedId}](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/%7Bsome_sourcedId%7D)' -H 'Authorization: Bearer $TOKEN' -H 'Accept: application/json'\n\n**Expected:** \nThe upstream `CFDocument.Type` definition explicitly requires the `CFPackageURI` field. The upstream JSON states: `\"required\" : [ \"CFPackageURI\" ]`. This field, which is of type `LinkURI.Type`, must be present in the response object.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments/{sourcedId}\nLocal Spec: ims/case/v1p1/CFDocuments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Failure to include a required field is a critical violation of the specification. Clients expecting this field for navigation or data correlation will fail or handle the data incorrectly. This field links the document to its full package representation, and its absence cripples a key feature of the CASE data model.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T19:00:36.920Z",
    "updatedAt": "2025-07-02T19:49:05.525Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-161/missing-required-field-cfpackageuri-in-cfdocument-response"
  },
  {
    "id": "608dbcdb-036f-474f-b75d-de4747ceaf6e",
    "identifier": "BUG-160",
    "title": "DELETE /assessmentResults/{sourcedId} Implements Non-standard Soft Delete",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's description for the `DELETE` operation states: \"Perform a soft delete on a specific Assessment Result on the service provider. This operation changes the status of the Assessment Result to 'tobedeleted'.\" This means the resource is not actually deleted but merely flagged.\n\n**Summary:** \nThe local specification's description for the `DELETE` operation states: \"Perform a soft delete on a specific Assessment Result on the service provider. This operation changes the status of the Assessment Result to 'tobedeleted'.\" This means the resource is not actually deleted but merely flagged.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the description for the DELETE method in the local specification.\n2. It states that the operation is a \"soft delete\" that changes the resource's status to 'tobedeleted'.\n3. Compare this to the upstream JSON and HTML specifications, which describe a standard delete operation without mentioning a \"soft delete\" mechanism.\n\nExample cURL (conceptual):\n\n```bash\n# According to the local spec, this should change the status of the resource to 'tobedeleted'.\n# A subsequent GET should still find the resource but with the new status.\n# A compliant API should make the resource inaccessible via GET after this call.\ncurl -X DELETE \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/some-assessment-result-id\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification describes a standard DELETE operation. The HTML documentation (Section 4.3.3 \"deleteAssessmentResult\" Operation) states: \"Delete a specific Assessment Result on the service provider. If the corresponding record cannot be located then an 'unknown' error code is returned.\". The upstream JSON spec defines a `204` response, which indicates success with no content, typical for a resource that has been successfully deleted and is no longer available. While the OneRoster spec as a whole supports a `tobedeleted` status, the HTTP `DELETE` verb should result in the resource being deleted (i.e., a subsequent `GET` to that resource's URI should return a `404 Not Found`). The local implementation's behavior is a non-standard interpretation that deviates from both REST conventions and the upstream specification's description of the DELETE verb's function.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This deviation in behavior can cause significant issues for API clients. A client performing a DELETE operation will expect the resource to be gone. Instead, the resource persists, which could lead to unexpected data being processed, UI inconsistencies, and failure to comply with data retention or deletion policies. While a `tobedeleted` status is valid on the model, hijacking the `DELETE` verb to set it is a violation of the principle of least astonishment.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T19:00:06.066Z",
    "updatedAt": "2025-07-03T11:50:44.069Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-160/delete-assessmentresultssourcedid-implements-non-standard-soft-delete"
  },
  {
    "id": "2b957ee8-9a04-4281-9a72-a75e4d9e281b",
    "identifier": "BUG-159",
    "title": "Field Name Mismatch in Response Body: `sourcedId` vs `identifier`",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification's `CFDocument` response object uses the field name `sourcedId` for the unique identifier.\n\n**Summary:** \nThe local specification's `CFDocument` response object uses the field name `sourcedId` for the unique identifier.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/case/v1p1/CFDocuments/{sourcedId}` endpoint.\n2. Inspect the fields of the returned `CFDocument` object in the JSON response.\n3. Note the name of the primary identifier field.\n4. Compare this field name to the one specified in the upstream `CFPckgDocument.Type` model.\n\ncURL command:\ncurl -X GET '[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/{some_sourcedId}](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/%7Bsome_sourcedId%7D)' -H 'Authorization: Bearer $TOKEN' -H 'Accept: application/json'\n\n**Expected:** \nThe upstream specification defines the `CFPckgDocument.Type` model with a required primary identifier field named `identifier`. The local implementation should use `identifier` to conform to the spec.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments/{sourcedId}\nLocal Spec: ims/case/v1p1/CFDocuments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical data modeling error. `sourcedId` is a common term in the OneRoster specification, but the CASE specification uses `identifier` for its GUIDs. This incorrect mapping breaks data interchange and client compatibility. The same error is repeated in nested objects like `subjectURI` and `licenseURI`, where `sourcedId` is used instead of `identifier`.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:59:10.866Z",
    "updatedAt": "2025-07-02T19:46:53.086Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-159/field-name-mismatch-in-response-body-sourcedid-vs-identifier"
  },
  {
    "id": "f749cc9b-f621-4224-a9d6-c5e7e9cafec3",
    "identifier": "BUG-158",
    "title": "PUT /assessmentResults/{sourcedId} Uses Incorrect Success Code and Behavior (200/Update instead of 201/Create)",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `PUT /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}` states that this method is used to \"Update an Assessment Result\" and returns a `200 OK` status on success.\n\n**Summary:** \nThe local specification for `PUT /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}` states that this method is used to \"Update an Assessment Result\" and returns a `200 OK` status on success.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the local and upstream specifications for the PUT method on the /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId} endpoint.\n2. Observe that the local spec defines the operation as an \"update\" that returns HTTP 200 OK.\n3. Observe that the upstream spec defines the operation as a \"create\" that returns HTTP 201 Created.\n\nTo reproduce, one would theoretically send a PUT request to create a new resource.\nExample cURL (conceptual):\n\n```bash\n# This command is conceptual. It attempts to create a new resource with a specified sourcedId.\n# The local implementation would incorrectly treat this as an update and return HTTP 200.\n# The correct implementation should create the resource and return HTTP 201.\ncurl -X PUT \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/new-assessment-result-id\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"assessmentResult\": {\n    \"status\": \"active\",\n    \"assessmentLineItem\": {\n      \"sourcedId\": \"some-lineitem-id\"\n    },\n    \"student\": {\n      \"sourcedId\": \"some-student-id\"\n    },\n    \"scoreDate\": \"2024-01-01\",\n    \"scoreStatus\": \"fully graded\"\n  }\n}'\n```\n\n**Expected:** \nAccording to the upstream specification, this method should be used to create a new resource, not update an existing one. The upstream JSON spec summary for this operation is \"The REST create request message for the putAssessmentResult() API call.\" and its description is \"To create a new Assessment Result. The associated sourcedId for this new record is supplied by the requesting system.\". Consequently, the correct success response code should be `201 Created`, not `200 OK`, as explicitly defined in the upstream JSON spec responses section for this method.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentResults/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug because it represents a fundamental misunderstanding or misrepresentation of the API's behavior. The local spec describes an idempotent update operation (PUT), while the upstream spec explicitly defines it as a create operation (though PUT can be used for creation, the response code and documentation are inconsistent). The correct response code for a successful creation via PUT is `201 Created`. The mismatch in documented behavior (update vs. create) and the incorrect response code violates REST conventions and the official OneRoster specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:58:32.379Z",
    "updatedAt": "2025-07-03T18:41:44.722Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-158/put-assessmentresultssourcedid-uses-incorrect-success-code-and"
  },
  {
    "id": "7d2c65c6-a32d-4cf5-93cd-04eb9275d6fe",
    "identifier": "BUG-157",
    "title": "Incorrect Response Body Structure: Response is Unexpectedly Nested",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification indicates that the 200 OK response body is a JSON object with a single top-level key, `CFDocument`, which contains the actual document object. The structure is `{\"CFDocument\": {...}}`.\n\n**Summary:** \nThe local specification indicates that the 200 OK response body is a JSON object with a single top-level key, `CFDocument`, which contains the actual document object. The structure is `{\"CFDocument\": {...}}`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Make a GET request to the `/ims/case/v1p1/CFDocuments/{sourcedId}` endpoint.\n2. Observe the structure of the JSON response body.\n3. Compare the response structure to the schema defined in the upstream specification.\n\ncURL command:\ncurl -X GET '[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/{some_sourcedId}](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/%7Bsome_sourcedId%7D)' -H 'Authorization: Bearer $TOKEN' -H 'Accept: application/json'\n\n**Expected:** \nAccording to the upstream JSON specification, the 200 OK response schema is a direct reference to `#/definitions/CFDocument.Type`. This means the `CFDocument` object itself should be the root of the JSON response body, not nested inside another object. The expected structure is `{ \"identifier\": \"...\", \"uri\": \"...\", ... }`.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments/{sourcedId}\nLocal Spec: ims/case/v1p1/CFDocuments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical bug because it makes the API response completely unparsable for any client that correctly implements the upstream specification. The client expects the document's fields at the root of the JSON object and will fail to find them inside the non-standard `CFDocument` wrapper object.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:56:11.866Z",
    "updatedAt": "2025-07-02T18:22:52.957Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-157/incorrect-response-body-structure-response-is-unexpectedly-nested"
  },
  {
    "id": "a08dd440-0108-45ed-bd39-579141a717cd",
    "identifier": "BUG-156",
    "title": "Incorrect API Version in Path for getCFDocument",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local API specification defines the route path as `/ims/case/v1p1/CFDocuments/{sourcedId}`, using the version identifier `v1p1`.\n\n**Summary:** \nThe local API specification defines the route path as `/ims/case/v1p1/CFDocuments/{sourcedId}`, using the version identifier `v1p1`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the path defined for the getCFDocument route in the local specification.\n2. Compare this path to the base path and endpoint path defined in the upstream JSON and HTML specifications.\n3. Note the discrepancy in the version number segment of the path.\n\ncURL command (illustrative):\n\n# Incorrect local path structure\n\ncurl -X GET '[https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/{some_sourcedId}](https://api.alpha-1edtech.com/ims/case/v1p1/CFDocuments/%7Bsome_sourcedId%7D)' -H 'Authorization: Bearer $TOKEN'\n\n# Expected upstream path structure\n\ncurl -X GET '[https://api.alpha-1edtech.com/ims/case/v1p0/CFDocuments/{some_sourcedId}](https://api.alpha-1edtech.com/ims/case/v1p0/CFDocuments/%7Bsome_sourcedId%7D)' -H 'Authorization: Bearer $TOKEN'\n\n**Expected:** \nThe route path should conform to the upstream specification, which indicates version `v1p0`. The upstream JSON spec defines `basePath: \"/ims/case/v1p0\"`, and the HTML documentation explicitly states in section 3.1: \"For a CASE Service 1.0 implementation the 'Endpoint' value should be appended to the string '/ims/case/v1p0/'\". The final path should be `/ims/case/v1p0/CFDocuments/{sourcedId}`.\n\n**Environment:** API Route: /ims/case/v1p1/CFDocuments/{sourcedId}\nLocal Spec: ims/case/v1p1/CFDocuments/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a high-severity deviation because it alters the fundamental base path for the API endpoint. Clients built strictly against the official specification will fail to contact our server due to the incorrect version in the URL. This breaks compatibility and interoperability.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:55:12.621Z",
    "updatedAt": "2025-07-02T18:21:37.509Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-156/incorrect-api-version-in-path-for-getcfdocument"
  },
  {
    "id": "a3a25280-b282-4cea-a099-b402ef7a8846",
    "identifier": "BUG-155",
    "title": "Medium: Deviations in Error Handling and Response Schemas",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** There are three distinct deviations in the local implementation's error handling:\n\n1. **Extra Status Code:** The local spec defines a `422 Unprocessable Entity` response, which is not specified for this endpoint in the upstream spec.\n2. **Invalid Minor Code:** The error schema780s for `400 Bad Request` and `422 Unprocessable Entity` use `invaliddata` for the `imsx_codeMinorFieldValue`.\n3. **Extra Error Field:** All error responses include a non-standard `imsx_error_details` array field.\n\n**Summary:** \nThere are three distinct deviations in the local implementation's error handling:\n\n1. **Extra Status Code:** The local spec defines a `422 Unprocessable Entity` response, which is not specified for this endpoint in the upstream spec.\n2. **Invalid Minor Code:** The error schemas for `400 Bad Request` and `422 Unprocessable Entity` use `invaliddata` for the `imsx_codeMinorFieldValue`.\n3. **Extra Error Field:** All error responses include a non-standard `imsx_error_details` array field.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the error responses (4xx, 5xx) in the local spec.\n2. Note the inclusion of the `422` status code.\n3. Note the use of `invaliddata` for the `imsx_codeMinorFieldValue` in the `400` response.\n4. Note the presence of the `imsx_error_details` field in all error responses.\n5. Compare these against the defined error responses and the `imsx_StatusInfo.Type` schema in the upstream spec.\n\nCurl Command:\n\n```bash\n# A request that triggers a 400 Bad Request error.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p0/CFAssociations/{bad-uuid}\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nError handling should conform to the upstream specification.\n\n1. **Status Codes:** Only the status codes defined in the upstream spec should be used (200, 400, 401, 403, 404, 429, 500, default). A `422` code is not compliant.\n2. **Minor Code:** The `imsx_codeMinorFieldValue` must be one of the values from the enum defined in `imsx_CodeMinorField.Type`. The value `invaliddata` is not in this enum. For a 400 error, `invalid_selection_field` or `invaliduuid` are more likely to be appropriate.\n3. **Error Schema:** The error response body should strictly conform to the `imsx_StatusInfo.Type` schema, which does not include an `imsx_error_details` field.\n\n**Environment:** API Route: /ims/case/v1p1/CFAssociations/{sourcedId}\nLocal Spec: ims/case/v1p1/CFAssociations/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** These deviations create an inconsistent error handling experience for developers. A client built to the spec would not handle a `422` response, would not recognize the `invaliddata` minor code, and would not know what to do with the `imsx_error_details` field. This complicates error handling logic and reduces the predictability of the API.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:53:36.873Z",
    "updatedAt": "2025-07-03T18:45:36.204Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-155/medium-deviations-in-error-handling-and-response-schemas"
  },
  {
    "id": "b332e77b-8a48-4008-a7a7-5c4cec4b1f81",
    "identifier": "BUG-154",
    "title": "High: Extraneous Fields in `CFAssociation` Response",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The `CFAssociation` object in the local specification includes two fields that are not part of the official specification:\n\n1. `notes`: (type: string | null)\n2. `extensions`: (type: object | null)\n\n**Summary:** \nThe `CFAssociation` object in the local specification includes two fields that are not part of the official specification:\n\n1. `notes`: (type: string | null)\n2. `extensions`: (type: object | null)\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Inspect the properties of the `CFAssociation` object in the local spec.\n2. Cross-reference this list of properties with the fields defined in the upstream `CFAssociation.Type` object.\n\nCurl Command:\n\n```bash\n# The response body will contain extra, non-compliant fields.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p0/CFAssociations/{sourcedId}\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe response object should only contain fields defined in the upstream specification. The `CFAssociation.Type` is a combination of `CFPckgAssociation.Type` and `CFDocumentURI`. Neither of these definitions, nor their constituent parts, includes a `notes` or `extensions` field.\n\nFurthermore, many of the upstream object definitions include `\"additionalProperties\": false`, explicitly forbidding the inclusion of extra fields. While not present on all of them, the spirit of the specification is to adhere to the defined data model.\n\n**Environment:** API Route: /ims/case/v1p1/CFAssociations/{sourcedId}\nLocal Spec: ims/case/v1p1/CFAssociations/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** Including extraneous fields pollutes the data model and can cause issues with strictly-validating clients. While some clients may ignore extra fields, others may fail to parse the response. This deviation from the official data model undermines the goal of interoperability.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:51:43.996Z",
    "updatedAt": "2025-07-02T20:17:57.591Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-154/high-extraneous-fields-in-cfassociation-response"
  },
  {
    "id": "231937e2-5f6f-4e1f-9954-f997d9ba62d1",
    "identifier": "BUG-153",
    "title": "CRITICAL: Missing `associationType` Enumeration",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines the `associationType` field as a generic `string`, allowing any value.\n\n```yaml\nassociationType:\n  type: string\n```\n\n**Summary:** \nThe local specification defines the `associationType` field as a generic `string`, allowing any value.\n\n```yaml\nassociationType:\n  type: string\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the schema for the `associationType` field within the `CFAssociation` object in the local spec.\n2. Compare this to the schema for the same field in the upstream `CFPckgAssociation.Type` definition.\n\nCurl Command:\n\n```bash\n# The server could potentially return an invalid, non-enum string for associationType.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p0/CFAssociations/{sourcedId}\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream `CFPckgAssociation.Type` definition requires `associationType` to be a string from a specific, controlled vocabulary (an enum).\n\nFrom the upstream JSON spec:\n\n```json\n\"associationType\": {\n    \"type\": \"string\",\n    \"enum\": [\n        \"isChildOf\",\n        \"isPeerOf\",\n        \"isPartOf\",\n        \"exactMatchOf\",\n        \"precedes\",\n        \"isRelatedTo\",\n        \"replacedBy\",\n        \"exemplar\",\n        \"hasSkillLevel\"\n    ]\n}\n```\n\nFailing to enforce this enum allows for the creation of non-standard, semantically invalid association types, breaking the core purpose of the standard.\n\n**Environment:** API Route: /ims/case/v1p1/CFAssociations/{sourcedId}\nLocal Spec: ims/case/v1p1/CFAssociations/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** The `associationType` conveys the semantic meaning of the relationship between two framework nodes. By defining it as a free-form string instead of the required enum, our implementation allows for data that is invalid and cannot be correctly interpreted by compliant consumer systems. This is a critical violation of the data model.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:50:27.971Z",
    "updatedAt": "2025-07-03T14:07:06.361Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-153/critical-missing-associationtype-enumeration"
  },
  {
    "id": "da565234-bdde-46e0-a5f9-e0d269684972",
    "identifier": "BUG-152",
    "title": "Incorrect endpoint path with trailing slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the endpoint path with a trailing slash: `/ims/oneroster/gradebook/v1p2/assessmentLineItems/`.\n\n**Summary:** \nThe local specification defines the endpoint path with a trailing slash: `/ims/oneroster/gradebook/v1p2/assessmentLineItems/`.\n\n**Steps to Reproduce:**\n\n1. Observe the path defined in the local spec: `/ims/oneroster/gradebook/v1p2/assessmentLineItems/`.\n2. Compare this to the path constructed from the upstream specification.\n\n**Expected:** \nThe endpoint path should not have a trailing slash. The upstream specification defines a `basePath` of `/ims/oneroster/gradebook/v1p2` and a path for this collection of `/assessmentLineItems`. The combined, correct path is `/ims/oneroster/gradebook/v1p2/assessmentLineItems`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While many web frameworks and clients handle trailing slashes gracefully, it is a deviation from the official specification. Strict clients or routing layers may fail to match the route, leading to 404 Not Found errors. The specification should be followed precisely to ensure maximum compatibility.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:48:20.398Z",
    "updatedAt": "2025-07-02T18:08:25.931Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-152/incorrect-endpoint-path-with-trailing-slash"
  },
  {
    "id": "2750eb1b-c4ef-4df1-8765-c4527d52a953",
    "identifier": "BUG-151",
    "title": "CRITICAL: Incorrect Naming and Schema for Identifier Fields",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local implementation consistently uses the field name `sourcedId` where the upstream specification requires `identifier`. This occurs in multiple places:\n\n1. The root object's primary key is `sourcedId` (type: uuid).\n2. The nested `originNodeURI` and `destinationNodeURI` objects have a `sourcedId` field (type: uuid).\n3. The nested `CFAssociationGroupingURI` and `CFDocumentURI` objects have a `sourcedId` field (type: uuid).\n\n**Summary:** \nThe local implementation consistently uses the field name `sourcedId` where the upstream specification requires `identifier`. This occurs in multiple places:\n\n1. The root object's primary key is `sourcedId` (type: uuid).\n2. The nested `originNodeURI` and `destinationNodeURI` objects have a `sourcedId` field (type: uuid).\n3. The nested `CFAssociationGroupingURI` and `CFDocumentURI` objects have a `sourcedId` field (type: uuid).\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Examine the `CFAssociation` object schema in the local spec.\n2. Note the use of `sourcedId` as the primary identifier field.\n3. Note the use of `sourcedId` within nested objects like `originNodeURI` and `destinationNodeURI`.\n4. Compare these field names and types to their equivalents (`identifier`) in the upstream `CFAssociation.Type`, `LinkGenURI.Type`, and `LinkURI.Type` definitions.\n\nCurl Command:\n\n```bash\n# The response will contain non-compliant field names.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p0/CFAssociations/{sourcedId}\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification strictly mandates the use of the field name `identifier`.\n\n1. In `CFAssociation.Type` (via `CFPckgAssociation.Type`), the primary key is `identifier` of type `UUID.Type`.\n2. In `LinkGenURI.Type` (used for `originNodeURI` and `destinationNodeURI`), the field is `identifier` of type `string` (not a UUID). The local implementation incorrectly uses `sourcedId` and incorrectly types it as a `uuid`.\n3. In `LinkURI.Type` (used for `CFAssociationGroupingURI` and `CFDocumentURI`), the field is `identifier` of type `UUID.Type`. The local implementation uses the wrong name (`sourcedId`).\n\nThis represents a multi-level violation of field naming conventions and, in the case of `LinkGenURI.Type`, a data type violation as well.\n\n**Environment:** API Route: /ims/case/v1p1/CFAssociations/{sourcedId}\nLocal Spec: ims/case/v1p1/CFAssociations/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical data modeling error. Renaming a fundamental field like `identifier` makes the implementation incompatible with any standard client. A client looking for the `identifier` field will not find it and will fail to parse the object's identity. The additional type mismatch for `originNodeURI` and `destinationNodeURI` identifiers is also a severe bug.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:48:18.245Z",
    "updatedAt": "2025-07-02T19:47:17.991Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-151/critical-incorrect-naming-and-schema-for-identifier-fields"
  },
  {
    "id": "07b1b602-90e1-449b-af30-763b3275436f",
    "identifier": "BUG-150",
    "title": "Missing specific OAuth2 Scopes in security requirement for GET /assessmentLineItems/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's security requirement for the GET operation is generic (`OAuth2: []`) and does not specify any required scopes.\n\n**Summary:** \nThe local specification's security requirement for the GET operation is generic (`OAuth2: []`) and does not specify any required scopes.\n\n**Steps to Reproduce:**\n\n1. Examine the `security` section of the `GET /ims/oneroster/gradebook/v1p2/assessmentLineItems/` operation in the local spec.\n2. Note that it specifies `OAuth2: []`, indicating that any valid OAuth2 token is accepted, without regard to its scopes.\n3. Compare this with the security requirements in the upstream specification.\n\n**Expected:** \nThe operation should require the specific OAuth2 scope `https://purl.imsglobal.org/spec/or/v1p2/scope/assessment.readonly`.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) for `GET /assessmentLineItems` clearly defines the required security scope:\n\n```json\n\"security\": [\n  {\n    \"OAuth2CC\": [\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/assessment.readonly\"\n    ]\n  }\n]\n```\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a significant security-related discrepancy. By not documenting the required scope, the local spec fails to communicate a critical authorization requirement. If the backend does not enforce this scope, it could lead to an authorization bypass where a token with insufficient permissions could access the endpoint. If the backend *does* enforce it, the local documentation is incorrect and will mislead developers.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:47:10.675Z",
    "updatedAt": "2025-07-03T12:52:32.653Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-150/missing-specific-oauth2-scopes-in-security-requirement-for-get"
  },
  {
    "id": "6fe0e51f-933f-4497-adbc-f6c7879cb6c3",
    "identifier": "BUG-149",
    "title": "CRITICAL: Incorrect Response Body Structure",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification indicates that a successful response is a JSON object with a single top-level key, `CFAssociation`, which then contains the actual association data object.\n\n```yaml\n'200':\n  description: CASE Association\n  content:\n    application/json:\n      schema:\n        type: object\n        properties:\n          CFAssociation:\n            # ... object properties\n        required:\n          - CFAssociation\n```\n\n**Summary:** \nThe local specification indicates that a successful response is a JSON object with a single top-level key, `CFAssociation`, which then contains the actual association data object.\n\n```yaml\n'200':\n  description: CASE Association\n  content:\n    application/json:\n      schema:\n        type: object\n        properties:\n          CFAssociation:\n            # ... object properties\n        required:\n          - CFAssociation\n```\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Review the `200` OK response schema for `getCFAssociation` in the local spec.\n2. Compare it to the `200` OK response schema in the upstream JSON spec.\n\nCurl Command:\n\n```bash\n# Assuming the correct v1p0 path, the response structure is still wrong.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p0/CFAssociations/{sourcedId}\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification, the response body itself should be the `CFAssociation` object, not nested inside another object.\n\nThe upstream JSON spec for the `200` response directly references the `CFAssociation.Type` definition:\n\n```json\n\"200\": {\n    \"description\": \"This is the response when the request has been completed successfully. It is the CFAssociation from the service provider.\",\n    \"schema\": {\n        \"$ref\": \"#/definitions/CFAssociation.Type\"\n    }\n}\n```\n\nThis means the root of the response body should be the fields of the association (`identifier`, `associationType`, etc.), not an object containing them.\n\n**Environment:** API Route: /ims/case/v1p1/CFAssociations/{sourcedId}\nLocal Spec: ims/case/v1p1/CFAssociations/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This structural discrepancy will cause parsing errors for any compliant client. The client will expect the association data at the root of the JSON response and will instead find an unexpected wrapper object, leading to a complete failure to process the response.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:45:25.705Z",
    "updatedAt": "2025-07-02T20:30:23.709Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-149/critical-incorrect-response-body-structure"
  },
  {
    "id": "db030f2e-2327-44f3-b766-46896c148e4f",
    "identifier": "BUG-148",
    "title": "Non-standard 'search' query parameter on GET /assessmentLineItems/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification includes a `search` query parameter for the `GET /assessmentLineItems/` endpoint.\n\n**Summary:** \nThe local specification includes a `search` query parameter for the `GET /assessmentLineItems/` endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the query parameters defined for the `GET /ims/oneroster/gradebook/v1p2/assessmentLineItems/` operation in the local spec.\n2. Note the inclusion of a `search` parameter.\n3. Compare the parameter list with the upstream JSON and HTML specifications.\n\n```bash\n# This curl demonstrates the use of a non-standard parameter\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/?search=myquery' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe `search` parameter should not exist. The official specification defines standard parameters for filtering and field selection, but `search` is not one of them.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) lists the parameters for `GET /assessmentLineItems` as: `limit`, `offset`, `sort`, `orderBy`, `filter`, and `fields`.\n\nThe upstream HTML documentation (Section 4.2.1) confirms these query parameters and makes no mention of a `search` parameter.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Introducing a non-standard query parameter like `search` without it being part of the official specification is a significant deviation. Standard clients will not know to use this parameter, and its behavior is undefined by the standard. This hinders interoperability and represents an undocumented, proprietary extension.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:44:22.024Z",
    "updatedAt": "2025-07-03T18:15:11.419Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-148/non-standard-search-query-parameter-on-get-assessmentlineitems"
  },
  {
    "id": "897de8c3-11f8-4f4d-8659-f60aa48aba17",
    "identifier": "BUG-147",
    "title": "CRITICAL: Incorrect API Path Version",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The local specification defines the route path as `/ims/case/v1p1/CFAssociations/{sourcedId}`, using version `v1p1`.\n\n**Summary:** \nThe local specification defines the route path as `/ims/case/v1p1/CFAssociations/{sourcedId}`, using version `v1p1`.\n\n**Steps to Reproduce:**\nHuman-readable steps:\n\n1. Observe the path defined in the local OpenAPI specification for the `getCFAssociation` route.\n2. Compare this path with the combination of `basePath` and the endpoint path from the upstream JSON specification and the HTML documentation.\n\nCurl Command:\nThis is a documentation bug in the path definition itself. A curl command against the documented path is:\n\n```bash\n# This command reflects the incorrect path documented in the local spec.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/case/v1p1/CFAssociations/{sourcedId}\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe API path should be versioned as `v1p0` according to the official upstream specifications.\n\nThe upstream JSON spec defines `basePath` as `/ims/case/v1p0`.\nThe upstream HTML documentation (Section 3.1) explicitly states: \"For a CASE Service 1.0 implementation the 'Endpoint' value should be appended to the string '/ims/case/v1p0/'\".\nTherefore, the correct and compliant path should be `/ims/case/v1p0/CFAssociations/{sourcedId}`.\n\n**Environment:** API Route: /ims/case/v1p1/CFAssociations/{sourcedId}\nLocal Spec: ims/case/v1p1/CFAssociations/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): case.upstream.json\nUpstream Spec (HTML): case.upstream.html\n**Additional Notes:** This is a critical deviation as it breaks the base contract of the API endpoint URI. Any client built strictly against the official specification will fail to connect to our implementation due to the path mismatch. This fundamentally impacts interoperability.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:42:45.811Z",
    "updatedAt": "2025-07-02T18:21:52.783Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-147/critical-incorrect-api-path-version"
  },
  {
    "id": "31b8eb3b-dab6-47b5-ac52-68292d25eaa6",
    "identifier": "BUG-146",
    "title": "Missing required fields 'sourcedId' and 'dateLastModified' in AssessmentLineItem schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `AssessmentLineItem` object only marks `status` and `title` as required fields.\n\n**Summary:** \nThe local specification for the `AssessmentLineItem` object only marks `status` and `title` as required fields.\n\n**Steps to Reproduce:**\n\n1. Review the local specification for the `AssessmentLineItem` component schema.\n2. Observe the `required` array for the `AssessmentLineItem` object. It lists `status` and `title`.\n3. Compare this to the `required` array in the upstream specification for the `AssessmentLineItemDType` object.\n\n**Expected:** \nThe `sourcedId` and `dateLastModified` fields should also be marked as required. The upstream specification mandates that these fields must be present.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) for `AssessmentLineItemDType` explicitly states:\n`\"required\": [\"sourcedId\", \"status\", \"dateLastModified\", \"title\"]`\n\nThe upstream HTML documentation (Table 6.1.2) also shows the multiplicity for `sourcedId`, `status`, `dateLastModified`, and `title` as `[1]`, indicating they are mandatory.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical bug. The local implementation incorrectly suggests that `sourcedId` and `dateLastModified` are optional. This could lead to clients receiving invalid data (objects missing mandatory identifiers or modification dates) or sending invalid data (in the case of the non-standard `POST`). A compliant system must enforce the presence of all required fields.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:35:50.208Z",
    "updatedAt": "2025-07-02T16:54:29.861Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-146/missing-required-fields-sourcedid-and-datelastmodified-in"
  },
  {
    "id": "04d9b108-5720-415e-afae-fd3d636a2e2b",
    "identifier": "BUG-145",
    "title": "Incomplete schema for GUID Reference Objects in AssessmentLineItem",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines GUID reference objects (like `class`, `parentAssessmentLineItem`, `scoreScale`) as simple objects containing only a required `sourcedId` field.\n\n**Summary:** \nThe local specification defines GUID reference objects (like `class`, `parentAssessmentLineItem`, `scoreScale`) as simple objects containing only a required `sourcedId` field.\n\n**Steps to Reproduce:**\n\n1. Examine the schema for the `class`, `parentAssessmentLineItem`, and `scoreScale` fields within the `AssessmentLineItem` object in the local spec.\n2. Note that they are defined as objects containing only a `sourcedId`.\n\n```yaml\nclass:\n  type:\n    - object\n    - 'null'\n  properties:\n    sourcedId:\n      type: string\n  required:\n    - sourcedId\n```\n\n3. Compare this to the definition of `ClassGUIDRefDType` and other `GUIDRef` types in the upstream specification.\n\n**Expected:** \nThese reference objects must also include the `href` and `type` fields, both of which are mandatory.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) defines all GUID references (e.g., `ClassGUIDRefDType`) as inheriting from `GUIDRef`, which requires `href`, `sourcedId`, and `type`. For `ClassGUIDRefDType`, the properties are:\n\n```json\n\"properties\": {\n  \"href\": { \"type\": \"string\", \"format\": \"uri\" },\n  \"sourcedId\": { \"type\": \"string\" },\n  \"type\": { \"type\": \"string\", \"enum\": [\"class\"] }\n},\n\"required\": [\"href\", \"sourcedId\", \"type\"]\n```\n\nThis structure applies to `parentAssessmentLineItem` and `scoreScale` as well, with their respective `type` enum values.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** The local implementation is missing two mandatory fields (`href` and `type`) from all GUID reference objects. The `href` provides the direct link to the referenced resource, and `type` provides essential context for polymorphism. Omitting them breaks the data model and violates the specification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:35:49.261Z",
    "updatedAt": "2025-07-02T17:27:03.987Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-145/incomplete-schema-for-guid-reference-objects-in-assessmentlineitem"
  },
  {
    "id": "0d708a20-938c-4d53-9963-8431041f21b9",
    "identifier": "BUG-144",
    "title": "Extra, non-standard fields 'component' and 'componentResource' in AssessmentLineItem schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `AssessmentLineItem` object schema in the local implementation includes two extra fields: `component` and `componentResource`.\n\n**Summary:** \nThe `AssessmentLineItem` object schema in the local implementation includes two extra fields: `component` and `componentResource`.\n\n**Steps to Reproduce:**\n\n1. Perform a GET request to retrieve a collection of assessment line items.\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n2. Inspect the objects within the `assessmentLineItems` array in the response.\n3. Note the presence of the `component` and `componentResource` fields.\n4. Cross-reference these fields with the upstream specifications.\n\n**Expected:** \nThese fields should not be present. The official `AssessmentLineItem` data model does not include them.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) defines the `AssessmentLineItemDType` with the following properties: `sourcedId`, `status`, `dateLastModified`, `metadata`, `title`, `description`, `class`, `parentAssessmentLineItem`, `scoreScale`, `resultValueMin`, `resultValueMax`, and `learningObjectiveSet`.\n\nThe upstream HTML documentation (Section 6.1.2) confirms this list of attributes for the `AssessmentLineItem` class. Neither `component` nor `componentResource` are part of the standard.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Adding non-standard fields to a specified data model is a critical violation of the standard. While extensions are sometimes possible via a `metadata` object, adding top-level properties like this pollutes the standard namespace and will break strictly-validating clients. These appear to be proprietary extensions that have been incorrectly implemented as standard fields.",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:31:26.779Z",
    "updatedAt": "2025-07-03T06:03:45.866Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-144/extra-non-standard-fields-component-and-componentresource-in"
  },
  {
    "id": "493ea2cb-53e4-4b35-a7f4-6540ed450881",
    "identifier": "BUG-143",
    "title": "Incorrect pagination information in GET /assessmentLineItems/ response body",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation returns pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly within the 200 OK response body for a collection GET request.\n\n**Summary:** \nThe local implementation returns pagination metadata (`totalCount`, `pageCount`, `pageNumber`, `offset`, `limit`) directly within the 200 OK response body for a collection GET request.\n\n**Steps to Reproduce:**\n\n1. Perform a GET request to the `/assessmentLineItems/` endpoint.\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/?limit=5' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n2. Observe the JSON response body.\n3. Note the presence of `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit` fields in the body.\n4. Check the upstream specification for the correct way to handle pagination metadata.\n\n**Expected:** \nThis is a critical deviation from the specification's method for handling pagination. A client built to the standard will look for the `X-Total-Count` header and will not expect pagination fields in the response body. This will cause compliant clients to fail when trying to paginate through results from this implementation.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical deviation from the specification's method for handling pagination. A client built to the standard will look for the `X-Total-Count` header and will not expect pagination fields in the response body. This will cause compliant clients to fail when trying to paginate through results from this implementation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:29:29.561Z",
    "updatedAt": "2025-07-03T05:48:00.260Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-143/incorrect-pagination-information-in-get-assessmentlineitems-response"
  },
  {
    "id": "75c6d2b4-58a1-4151-bc45-00d3303b617e",
    "identifier": "BUG-142",
    "title": "Incorrect 404 Response Description",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's description for a 404 Not Found response is a generic message: \"Assessment line item not found\".\n\n**Summary:** \nThe local specification's description for a 404 Not Found response is a generic message: \"Assessment line item not found\".\n\n**Steps to Reproduce:**\n\n1. Review the `404` response definition for any of the operations in the local spec.\n2. Note the description is \"Assessment line item not found\".\n3. Review the `404` response definition in the upstream JSON spec for the same operations.\n4. Note the description specifies what information should be returned.\n\n**Expected:** \nThe description for the 404 response should align with the upstream specification, which provides more detail and mandates a specific statement be presented to the user.\n\nUpstream JSON spec for a 404 response states: \"Either the supplied identifier is unknown in the Service Provider and so the object could not be changed or an invalid GUID has been supplied. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'. The statement 'Unknown Object' should also be presented.\"\n\nThe local description is missing this nuance and the requirement to present the \"Unknown Object\" statement.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a documentation and user experience bug. While the response schema itself may be technically compliant with the `imsx_StatusInfoDType`, the human-readable description in the specification is incorrect and does not mention the requirement to present the \"Unknown Object\" message, which could lead to inconsistent error messages across different OneRoster implementations.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:28:23.868Z",
    "updatedAt": "2025-07-01T23:03:30.723Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-142/incorrect-404-response-description"
  },
  {
    "id": "1672345a-bd4f-4c6b-88d7-aa517f15b44c",
    "identifier": "BUG-141",
    "title": "Unsupported POST method on /assessmentLineItems/ endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines a `POST` method at `/ims/oneroster/gradebook/v1p2/assessmentLineItems/` to create a new Assessment Line Item.\n\n**Summary:** \nThe local spec defines a `POST` method at `/ims/oneroster/gradebook/v1p2/assessmentLineItems/` to create a new Assessment Line Item.\n\n**Steps to Reproduce:**\n\n1. Review the available methods for the `/assessmentLineItems` path in the upstream specification.\n2. Note that the official specification defines a `PUT` method on `/assessmentLineItems/{sourcedId}` for creating a new item, but no `POST` method on `/assessmentLineItems`.\n3. Observe that the local implementation incorrectly provides a `POST` method on `/ims/oneroster/gradebook/v1p2/assessmentLineItems/`.\n\nA curl command demonstrating this non-standard method would be:\n\n```bash\n# This operation does not exist in the official specification.\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"assessmentLineItem\": {\n    \"status\": \"active\",\n    \"title\": \"New Assessment via POST\"\n  }\n}'\n\n**Expected:** \nThe upstream specification does not define a `POST` method for this endpoint. Instead, it specifies a `PUT` method on the path `/assessmentLineItems/{sourcedId}` for creating a new Assessment Line Item where the client supplies the `sourcedId`.\n\nThe upstream JSON spec (`oneroster.gradebook.upstream.json`) shows the path definition:\n`\"/assessmentLineItems/{sourcedId}\": { \"put\": { \"operationId\": \"putAssessmentLineItem\", ... } }`\n\nThe upstream HTML documentation (Section 4.2, Table 4.2) confirms the available operations for \"AssessmentLineItemsManagement\" are `getAllAssessmentLineItems`, `getAssessmentLineItem`, `deleteAssessmentLineItem`, and `putAssessmentLineItem`. There is no `POST` operation listed.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** The local implementation has created a non-standard, proprietary `POST` endpoint that deviates significantly from the official specification. Standard-compliant clients will not be aware of this endpoint and will expect to use `PUT /assessmentLineItems/{sourcedId}` for creation. This fundamentally breaks interoperability. Furthermore, the response for this non-standard POST (`sourcedIdPairs`) mimics bulk-creation endpoints from other parts of the spec, which is incorrect for creating a single object according to the `putAssessmentLineItem` definition (which expects a 201 with no body).\n```",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:28:22.773Z",
    "updatedAt": "2025-07-03T05:34:36.925Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-141/unsupported-post-method-on-assessmentlineitems-endpoint"
  },
  {
    "id": "fafc0a73-8ac8-421e-b3a8-564b7aace939",
    "identifier": "BUG-140",
    "title": "Incorrect `operationId` for PUT /assessmentLineItems/{sourcedId}",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification uses the `operationId` `updateAssessmentLineItem` for the PUT method.\n\n**Summary:** \nThe local specification uses the `operationId` `updateAssessmentLineItem` for the PUT method.\n\n**Steps to Reproduce:**\n\n1. Review the `put` operation for `/ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}` in the local spec.\n2. Observe the `operationId` is `updateAssessmentLineItem`.\n3. Review the `put` operation for `/assessmentLineItems/{sourcedId}` in the upstream JSON spec.\n4. Observe the `operationId` is `putAssessmentLineItem`.\n\n**Expected:** \nThe `operationId` should match the one defined in the upstream specification, which is `putAssessmentLineItem`. The `operationId` is intended to be a stable, machine-readable identifier for an operation.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While this does not affect runtime behavior for manually written clients, it can break automated client SDK generation, which relies on `operationId` to name methods. The mismatch also reflects the deeper semantic misunderstanding of the PUT endpoint as an update rather than a create operation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:21:26.754Z",
    "updatedAt": "2025-07-02T16:57:59.798Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-140/incorrect-operationid-for-put-assessmentlineitemssourcedid"
  },
  {
    "id": "6b888325-85cf-4669-b6ea-62e661958a46",
    "identifier": "BUG-139",
    "title": "Ambiguous Minor Error Code for 400 Bad Request Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilder.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation uses the same minor error code, `invaliddata`, for both `400 Bad Request` and `422 Unprocessable Entity` responses.\n\n**Summary:** \nThe local implementation uses the same minor error code, `invaliddata`, for both `400 Bad Request` and `422 Unprocessable Entity` responses.\n\n**Steps to Reproduce:**\n\n1. Review the `BadRequestResponse` schema in the local spec, which is used for 400 errors.\n2. Note that the `imsx_codeMinorFieldValue` is a constant set to `invaliddata`.\n3. Review the `UnprocessableEntityResponse` schema for 422 errors, and note it also uses `invaliddata`.\n4. Review the upstream JSON spec for the `GET /assessmentLineItems/{sourcedId}` endpoint's 400 response.\n5. The description for the 400 error states: \"An invalid selection field was supplied and data filtering on the selection criteria was not possible i.e. 'invalid_selection_field'.\"\n\n**Expected:** \nThe API should use more specific minor error codes to help clients distinguish between different types of errors. The upstream specification's description for a 400 error strongly suggests using the `invalid_selection_field` minor code. The `invaliddata` code is more appropriate for a 422 error where the request body is well-formed but semantically incorrect. Using distinct codes provides clearer feedback to API consumers.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** While the upstream `imsx_CodeMinorValueEnum` allows for some flexibility, the local implementation misses an opportunity to provide more granular and useful error messages as suggested by the upstream descriptions. This ambiguity can make it more difficult for developers to debug their integrations.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:19:53.227Z",
    "updatedAt": "2025-07-03T18:49:38.228Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-139/ambiguous-minor-error-code-for-400-bad-request-response"
  },
  {
    "id": "3b0524c3-32a5-424c-b7ad-bbde8ff6a557",
    "identifier": "BUG-138",
    "title": "LOW: Incorrect and Duplicated Tag Definition",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines two tags, both with the name `Classes Management`. The second tag has a description that seems to relate to gradebook data, which is out of place.\n\n**Summary:** \nThe local specification defines two tags, both with the name `Classes Management`. The second tag has a description that seems to relate to gradebook data, which is out of place.\n\n**Steps to Reproduce:**\n\n1. Review the `tags` section at the top level of the local specification.\n2. Compare the tag names and descriptions with the `tags` section in the upstream JSON specification.\n\n**Expected:** \nThere should be a single tag named `ClassesManagement` (no space), with the description: \"This enables the management of Classes i.e. scheduled learning of courses.\" This is the definition provided in the upstream JSON specification.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This inconsistency affects API documentation generation and client tool UIs, which use tags to group operations. The duplicated tag and incorrect name/description cause confusion and make the documentation look unprofessional and untrustworthy.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:16:45.008Z",
    "updatedAt": "2025-07-03T17:40:44.283Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-138/low-incorrect-and-duplicated-tag-definition"
  },
  {
    "id": "d7b037eb-4561-49e9-b632-f64976c909b5",
    "identifier": "BUG-137",
    "title": "Incorrect Success Response for `PUT /assessmentLineItems/{sourcedId}`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the success response for the `PUT` operation as a `200 OK` with a response body containing the created/updated `assessmentLineItem`.\n\n**Summary:** \nThe local specification defines the success response for the `PUT` operation as a `200 OK` with a response body containing the created/updated `assessmentLineItem`.\n\n**Steps to Reproduce:**\n\n1. Review the `responses` section for the `PUT /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}` endpoint in the local spec.\n2. Note that the success response is a `200 OK` which returns the `assessmentLineItem` object in the body.\n3. Review the `responses` section for the same endpoint in the upstream JSON spec.\n4. Note that the success response should be a `201 Created` with no response body.\n\nExample `curl` showing the expected response headers and empty body:\n\n```bash\n# REQUEST\ncurl -i -X PUT https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/some-new-sourced-id \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"assessmentLineItem\": {...}}'\n\n# EXPECTED RESPONSE\nHTTP/1.1 201 Created\n[...other headers...]\n\n# (empty body)\n```\n\n**Expected:** \nAccording to the upstream specification, a successful `PUT` (create) operation must return a `201 Created` status code with an empty response body.\n\nThe upstream JSON spec explicitly defines a `'201'` response with the description: \"The object has been successfully stored in the Service Provider repository.\" There is no schema defined for the 201 response, indicating an empty body. The local spec's `200` response is completely non-compliant.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** REST conventions for this type of operation. A client expecting a `201` will fail to recognize a successful creation, and a client trying to parse a body when none is expected may crash.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:16:44.075Z",
    "updatedAt": "2025-07-03T13:19:21.224Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-137/incorrect-success-response-for-put-assessmentlineitemssourcedid"
  },
  {
    "id": "63a45373-49be-4c2c-b2ea-b977f374207a",
    "identifier": "BUG-136",
    "title": "Incorrect `PUT` Semantics: `PUT /assessmentLineItems/{sourcedId}` Implemented as Update Instead of Create",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `PUT /assessmentLineItems/{sourcedId}` incorrectly describes and implements the endpoint as an UPDATE operation for an existing resource. The summary is \"Update an Assessment Line Item\" and the description is \"To update an existing Assessment Line Item.\"\n\n**Summary:** \nThe local specification for `PUT /assessmentLineItems/{sourcedId}` incorrectly describes and implements the endpoint as an UPDATE operation for an existing resource. The summary is \"Update an Assessment Line Item\" and the description is \"To update an existing Assessment Line Item.\"\n\n**Steps to Reproduce:**\n\n1. Review the local OpenAPI specification for the `PUT /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}` endpoint.\n2. Observe that the `summary` and `description` define the operation as an \"update\".\n3. Review the upstream OpenAPI JSON specification and HTML documentation for the same endpoint.\n4. Observe that the upstream specifications define this `PUT` operation as a \"create\" operation.\n\nExample `curl` for the expected CREATE operation:\n\n```bash\ncurl -X PUT https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/some-new-sourced-id \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"some-new-sourced-id\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2024-01-01T12:00:00Z\",\n    \"title\": \"New Assessment\"\n  }\n}'\n```\n\n**Expected:** \nThe `PUT` operation at this path should be for CREATING a new resource with a client-supplied `sourcedId`. This is a common pattern for \"upsert\" where the client dictates the resource ID.\n\nThe upstream JSON spec summary is: \"The REST create request message for the putAssessmentLineItem() API call.\"\nThe upstream JSON spec description is: \"To create a new Assessment LineItem. The associated sourcedId for this new record is supplied by the requesting system.\"\n\nThe upstream HTML documentation (Section 4.2.4) corroborates this: \"To create a new Assessment LineItem. The associated sourcedId for this new record is supplied by the requesting system.\"\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical behavioral deviation from the official specification. It fundamentally changes the nature of the `PUT` method from creation to update, which will cause major integration issues and data mismatches for any client following the official OneRoster specification. The local `operationId` (`updateAssessmentLineItem` vs `putAssessmentLineItem`) also reflects this incorrect understanding of the endpoint's purpose.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:16:43.720Z",
    "updatedAt": "2025-07-03T18:41:44.725Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-136/incorrect-put-semantics-put-assessmentlineitemssourcedid-implemented"
  },
  {
    "id": "07a23750-405c-47f2-8f36-9783f3f212f2",
    "identifier": "BUG-135",
    "title": "`AssessmentLineItem` Schema Contains Non-Standard Fields Outside of `metadata`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `AssessmentLineItem` schema includes two fields, `component` and `componentResource`, that are not defined in the upstream OneRoster 1.2 specification.\n\n**Summary:** \nThe local `AssessmentLineItem` schema includes two fields, `component` and `componentResource`, that are not defined in the upstream OneRoster 1.2 specification.\n\n**Steps to Reproduce:**\n\n1. Review the `AssessmentLineItem` schema definition within `components.schemas` in the local spec.\n2. Observe the presence of the `component` and `componentResource` fields.\n3. Review the `AssessmentLineItemDType` definition in the upstream JSON spec and the \"AssessmentLineItem\" Class Description (Section 6.1.2) in the upstream HTML documentation.\n4. Note that `component` and `componentResource` are not part of the official specification.\n\n**Expected:** \nThe `AssessmentLineItem` object should only contain fields defined in the official specification. Any proprietary extensions or custom data must be placed inside the `metadata` object.\n\nThe upstream HTML documentation (Section 8.1.2 \"Proprietary Data Elements\") states: \"Extensions are ONLY permitted using the 'metadata' attribute within the 'Base' class\".\n\nThe local implementation violates this by adding custom fields at the root level of the `AssessmentLineItem` object.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Adding top-level fields that are not part of the official specification is a major violation. This will cause parsing errors and data loss for any compliant client, as they will not know to look for these fields and may reject the entire payload due to unexpected properties. All custom extensions must be nested within the provided `metadata` object to ensure interoperability.",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:16:41.152Z",
    "updatedAt": "2025-07-03T06:03:47.499Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-135/assessmentlineitem-schema-contains-non-standard-fields-outside-of"
  },
  {
    "id": "184e3562-9aaa-4c31-b9ee-d36f9f40bf34",
    "identifier": "BUG-134",
    "title": "`AssessmentLineItem` Schema Missing Required Fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local `AssessmentLineItem` schema is only requiring the `status` and `title` fields.\n\n**Summary:** \nThe local `AssessmentLineItem` schema is only requiring the `status` and `title` fields.\n\n**Steps to Reproduce:**\n\n1. Review the `AssessmentLineItem` schema definition in the local spec.\n2. Observe the `required` array, which contains `['status', 'title']`.\n3. Compare this to the `AssessmentLineItemDType` definition in the upstream JSON spec.\n4. Observe that the `required` array in the upstream spec is `[\"sourcedId\", \"status\", \"dateLastModified\", \"title\"]`.\n\n**Expected:** \nThe `AssessmentLineItem` schema should require all fields mandated by the upstream specification. The `required` array should be `[\"sourcedId\", \"status\", \"dateLastModified\", \"title\"]`. The local implementation is missing `sourcedId` and `dateLastModified` from its list of required fields.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Marking required fields as optional is a critical bug. It can lead to the creation of incomplete and invalid data in the system if clients omit these fields. `sourcedId` is the primary identifier for the object, and `dateLastModified` is essential for synchronization and auditing. Their absence breaks fundamental assumptions of the OneRoster data model.",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:16:40.041Z",
    "updatedAt": "2025-07-03T14:39:00.646Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-134/assessmentlineitem-schema-missing-required-fields"
  },
  {
    "id": "34d5e3e2-39fb-40a8-89d2-68332233932f",
    "identifier": "BUG-133",
    "title": "Incorrect Schema for GUID Reference Objects in `AssessmentLineItem`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The fields `class`, `parentAssessmentLineItem`, and `scoreScale` in the local `AssessmentLineItem` schema are incorrectly defined as objects containing only a `sourcedId`.\n\n**Summary:** \nThe fields `class`, `parentAssessmentLineItem`, and `scoreScale` in the local `AssessmentLineItem` schema are incorrectly defined as objects containing only a `sourcedId`.\n\n**Steps to Reproduce:**\n\n1. Review the `AssessmentLineItem` schema in the local spec.\n2. Examine the definitions for the `class`, `parentAssessmentLineItem`, and `scoreScale` fields.\n3. Note that they are defined as simple objects containing only a `sourcedId`.\n4. Compare this to the upstream JSON spec, which defines these fields as references to `ClassGUIDRefDType`, `AssessmentLineItemGUIDRefDType`, and `ScoreScaleGUIDRefDType` respectively.\n5. Observe that these `...GUIDRefDType` objects require three fields: `href`, `sourcedId`, and `type`.\n\n**Expected:** \nThese fields should conform to the upstream `GUIDRef` object structure. For example, the `class` field should conform to `ClassGUIDRefDType`, which requires three properties:\n\n* `href` (string, format: uri)\n* `sourcedId` (string)\n* `type` (string, enum: \\['class'\\])\n\nThe local implementation is missing the `href` and `type` fields, both of which are required by the specification. This same error pattern applies to `parentAssessmentLineItem` and `scoreScale`.\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a critical data model inconsistency. Clients built against the official spec will expect `href` and `type` fields for linking to related resources. Their absence will break data parsing and prevent clients from correctly navigating the data model. The `type` field is especially important for polymorphism and identifying the resource type being referenced.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:16:39.851Z",
    "updatedAt": "2025-07-03T18:11:28.581Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-133/incorrect-schema-for-guid-reference-objects-in-assessmentlineitem"
  },
  {
    "id": "64a7cabd-01cf-4975-91a2-1ff99baabbd4",
    "identifier": "BUG-132",
    "title": "Missing Required OAuth2 Scopes on All Operations",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification does not enforce any specific OAuth2 scopes for the `GET`, `PUT`, and `DELETE` operations. The `security` requirement is defined as `OAuth2: []`.\n\n**Summary:** \nThe local specification does not enforce any specific OAuth2 scopes for the `GET`, `PUT`, and `DELETE` operations. The `security` requirement is defined as `OAuth2: []`.\n\n**Steps to Reproduce:**\n\n1. Review the `security` section for the `GET`, `PUT`, and `DELETE` operations on the `/assessmentLineItems/{sourcedId}` path in the local spec.\n2. Note that it defines a generic security requirement `OAuth2: []`, with an empty scope array.\n3. Review the `security` section for each of these operations in the upstream JSON spec.\n4. Observe that each operation requires a specific scope.\n\n**Expected:** \nThe implementation must enforce the specific OAuth2 scopes defined in the upstream OneRoster specification to ensure proper authorization and access control. A client should be required to have the correct scope to perform an action.\n\nThe required scopes are:\n\n* `GET`: `https://purl.imsglobal.org/spec/or/v1p2/scope/assessment.readonly`\n* `PUT`: `https://purl.imsglobal.org/spec/or/v1p2/scope/assessment.createput`\n* `DELETE`: `https://purl.imsglobal.org/spec/or/v1p2/scope/assessment.delete`\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** This is a significant security flaw. By not defining or enforcing scopes, the API allows any authenticated client to perform any action (read, create, delete), regardless of the permissions granted to them. This violates the principle of least privilege and could lead to unauthorized data access or modification.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:16:38.103Z",
    "updatedAt": "2025-07-03T12:51:08.370Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-132/missing-required-oauth2-scopes-on-all-operations"
  },
  {
    "id": "cf403ba3-7f83-4f0d-9c10-587b67c8c930",
    "identifier": "BUG-131",
    "title": "Missing `fields` Query Parameter for `GET /assessmentLineItems/{sourcedId}`",
    "description": "**Reporter:** Missing `fields` Query Parameter for `GET /assessmentLineItems/{sourcedId}` (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for `GET /assessmentLineItems/{sourcedId}` does not include the optional `fields` query parameter.\n\n**Summary:** \nThe local specification for `GET /assessmentLineItems/{sourcedId}` does not include the optional `fields` query parameter.\n\n**Steps to Reproduce:**\n\n1. Review the `parameters` section for the `GET /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}` endpoint in the local spec.\n2. Observe that only the `sourcedId` path parameter is defined.\n3. Review the `parameters` section for the same endpoint in the upstream JSON spec.\n4. Note that in addition to the `sourcedId` path parameter, there is an optional `fields` query parameter.\n\nExample `curl` demonstrating expected usage:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}?fields=sourcedId,title,status\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe endpoint should support the `fields` query parameter, which allows clients to request a subset of fields in the response. This is a standard feature for optimizing payloads in the OneRoster API.\n\nThe upstream JSON spec defines it as:\n`\"name\": \"fields\", \"in\": \"query\", \"description\": \"To identify the range of fields that should be supplied in the response message.\", \"required\": false, \"type\": \"array\", ...`\n\n**Environment:** API Route: /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}\nLocal Spec: ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId}.filtered.yaml\nUpstream Spec (JSON): oneroster.gradebook.upstream.json\nUpstream Spec (HTML): oneroster.gradebook.upstream.html\n**Additional Notes:** Field selection is a core feature for API performance and usability. Failing to implement the `fields` parameter means clients cannot limit the data they receive, leading to larger-than-necessary payloads and increased processing time. This is a functional deviation from the specification.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:16:36.852Z",
    "updatedAt": "2025-07-03T19:26:04.572Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-131/missing-fields-query-parameter-for-get-assessmentlineitemssourcedid"
  },
  {
    "id": "e61d804b-edb6-45bb-b609-aa93fd781b96",
    "identifier": "BUG-130",
    "title": "LOW: Unspecified 'maximum' Constraint on 'limit' Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilder.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation defines a `maximum` value of `3000` for the `limit` query parameter.\n\n**Summary:** \nThe local implementation defines a `maximum` value of `3000` for the `limit` query parameter.\n\n**Steps to Reproduce:**\n\n1. Review the definition of the `limit` query parameter in the local specification.\n2. Note the presence of a `maximum` constraint.\n3. Review the upstream specifications and note its absence.\n\nFunctional curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?limit=3001' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n(This should trigger an error if the maximum is enforced).\n\n**Expected:** \nThere should be no `maximum` value defined for the `limit` parameter, as the upstream specification does not define one. While setting an upper bound is a good practice for server protection, it is a deviation from the official specification. A client compliant with the official spec would not know about this limit and could receive unexpected `400 Bad Request` errors.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a deviation from the specification. While the intention might be good (preventing DoS attacks), it creates a non-standard behavior. Any such implementation-specific limits should be clearly communicated to API consumers outside of the formal specification, or the spec should be noted as a profiled implementation. As it stands, it's an undocumented inconsistency.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:04:13.260Z",
    "updatedAt": "2025-07-03T05:45:05.385Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-130/low-unspecified-maximum-constraint-on-limit-parameter"
  },
  {
    "id": "c1e6fbf1-af10-4d83-9ca3-985617a03ac5",
    "identifier": "BUG-129",
    "title": "HIGH: Missing OAuth 2.0 Scope Definitions in Security Scheme",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's security requirement is defined as `security: - OAuth2: []`, which fails to document the specific OAuth 2.0 scopes required to access the endpoint.\n\n**Summary:** \nThe local specification's security requirement is defined as `security: - OAuth2: []`, which fails to document the specific OAuth 2.0 scopes required to access the endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the `security` section of the local specification for the `/classes/` endpoint.\n2. Observe that it references an `OAuth2` scheme but lists no scopes.\n3. Compare this to the upstream specification which clearly defines the required scopes.\n\n**Expected:** \nThe security requirement should list the specific scopes needed to access the `GET /classes` endpoint. The upstream specification is explicit about this.\n\nThe upstream JSON specification under `paths./classes.get.security` shows:\n\n```json\n\"security\": [\n  {\n    \"OAuth2CC\": [\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/roster.readonly\",\n      \"https://purl.imsglobal.org/spec/or/v1p2/scope/roster-core.readonly\"\n    ]\n  }\n]\n```\n\nThe local specification should accurately reflect that a client needs a token with at least one of these scopes.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Missing security scope documentation is a significant issue. It prevents developers from knowing how to correctly request access tokens, leading to integration failures and support overhead. It also indicates that the API's authorization checks might be improperly implemented or missing entirely, which is a serious security concern.",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 2,
    "createdAt": "2025-06-30T18:03:24.417Z",
    "updatedAt": "2025-07-03T12:57:31.447Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-129/high-missing-oauth-20-scope-definitions-in-security-scheme"
  },
  {
    "id": "459c39fb-5ab7-4d2f-bc2d-3528cd01dd9f",
    "identifier": "BUG-128",
    "title": "MEDIUM: API Path Mismatch Due to Superfluous Trailing Slash",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the route with a trailing slash: `/ims/oneroster/rostering/v1p2/classes/`.\n\n**Summary:** \nThe local specification defines the route with a trailing slash: `/ims/oneroster/rostering/v1p2/classes/`.\n\n**Steps to Reproduce:**\n\n1. Observe the path definition in the local spec: `/ims/oneroster/rostering/v1p2/classes/`.\n2. Compare it to the path constructed from the upstream spec.\n\n**Expected:** \nThe route should be defined without a trailing slash: `/ims/oneroster/rostering/v1p2/classes`.\n\nThe upstream JSON specification defines a `basePath` of `/ims/oneroster/rostering/v1p2` and a path of `/classes`. When combined, the full path is `/ims/oneroster/rostering/v1p2/classes`. The trailing slash is a deviation.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While many web frameworks handle trailing slashes gracefully (e.g., via redirect), it is technically a different path. Strict path-based routing, client generators, or security appliances may treat these as two distinct endpoints, leading to `404 Not Found` errors or misapplied security rules. Adhering to the specified path is crucial for compatibility.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T18:03:21.512Z",
    "updatedAt": "2025-07-03T18:12:32.525Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-128/medium-api-path-mismatch-due-to-superfluous-trailing-slash"
  },
  {
    "id": "6d48929a-0390-4be5-b36d-62103d76152b",
    "identifier": "BUG-127",
    "title": "Critical API Contract Violation: DELETE endpoints return 204 No Content instead of documented 200 OK with JSON body",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Multiple `DELETE` endpoints, including `/ims/oneroster/rostering/v1p2/courses/{sourcedId}` and `/ims/oneroster/rostering/v1p2/users/{sourcedId}`, return a `204 No Content` status code upon successful deletion.\n\n**Summary:** \nMultiple `DELETE` endpoints, including `/ims/oneroster/rostering/v1p2/courses/{sourcedId}` and `/ims/oneroster/rostering/v1p2/users/{sourcedId}`, return a `204 No Content` status code upon successful deletion.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid Bearer token for the staging environment.\n2. Create a temporary course to ensure a valid resource exists for deletion.\n3. Send a `DELETE` request to `/ims/oneroster/rostering/v1p2/courses/{sourcedId}` using the ID from the previous step.\n4. Observe that the API returns a `204 No Content` status code with an empty body.\n5. Note that the `oneroster.yaml` OpenAPI specification for this endpoint's `delete` operation only defines a `200 OK` response with an `application/json` body, not a `204`. This mismatch breaks any client strictly following the specification.\n\n---\n\ncURL Command Steps:\n\n1. First, get an authentication token (replace placeholders with actual credentials):\n   `TOKEN=$(curl -s -X POST https://alpha-auth-development-idp.auth.us-west-2.amazoncognito.com/oauth2/token -H \"Content-Type: application/x-www-form-urlencoded\" -d \"grant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>\" | jq -r .access_token)`\n2. Create a temporary course and extract its `sourcedId`:\n   `COURSE_ID=$(curl -s -X POST https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/ -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" -d '{\"course\":{\"title\":\"course-to-be-deleted-'\"$(date +%s)\"'\",\"status\":\"active\",\"org\":{\"sourcedId\":\"D860C00EF2EB4E47AD1C200078E81BF2\"}}}' | jq -r '.sourcedIdPairs.allocatedSourcedId')`\n3. Send the `DELETE` request and observe the headers. The status code will be `204 No Content`.\n   `curl -i -X DELETE https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/$COURSE_ID -H \"Authorization: Bearer $TOKEN\"`\n\n**Expected:** \nAccording to the `oneroster.yaml` OpenAPI specification, a successful `DELETE` operation on these endpoints MUST return a `200 OK` status code with a corresponding `application/json` body. For example, the `deleteCourse` operation specifies a `200` response with a schema of `{ \"type\": \"object\", \"additionalProperties\": true }`. The API's actual response of `204 No Content` is a direct violation of this documented contract and will cause strict, auto-generated clients to fail.\n\n**Environment:** API Endpoint: `https://api.staging.alpha-1edtech.com`\nAPI Components: All DELETE endpoints, including `/ims/oneroster/rostering/v1p2/courses/{sourcedId}` and `/ims/oneroster/rostering/v1p2/users/{sourcedId}`.\nClient: PowerPath E2E test suite.\n**Additional Notes:** This appears to be a systemic issue across multiple DELETE endpoints in the OneRoster API. While `204 No Content` is a semantically valid response for a successful DELETE, it directly contradicts the API's own documentation. This contract violation must be resolved by either updating the API behavior to return the documented `200 OK` with a JSON body, or by correcting the OpenAPI specification and regenerating all client SDKs to expect a `204`.",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 2,
    "createdAt": "2025-06-30T18:03:21.395Z",
    "updatedAt": "2025-07-03T05:33:23.158Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-127/critical-api-contract-violation-delete-endpoints-return-204-no-content"
  },
  {
    "id": "436ae345-1619-4f6c-8a4d-4f8cf412b900",
    "identifier": "BUG-126",
    "title": "MEDIUM: 'fields' Query Parameter Type Mismatch",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `fields` query parameter with `schema: { type: string }`.\n\n**Summary:** \nThe local specification defines the `fields` query parameter with `schema: { type: string }`.\n\n**Steps to Reproduce:**\n\n1. Review the definition of the `fields` query parameter in the local specification.\n2. Compare it to the definition in the upstream JSON specification.\n\n**Expected:** \nThe `fields` parameter should be defined with `type: array` and `collectionFormat: \"csv\"`. This more accurately describes the parameter's nature as a collection of string values.\n\nThe upstream Swagger 2.0 specification defines it as:\n\n```json\n\"name\": \"fields\",\n\"in\": \"query\",\n\"type\": \"array\",\n\"items\": {\n  \"type\": \"string\"\n},\n\"collectionFormat\": \"csv\"\n```\n\nWhile the on-the-wire format is a comma-separated string, the semantic type is an array. The local OpenAPI 3.1 spec should represent this correctly, for example using `style: form, explode: false` on an array type, but at a minimum, it should identify the type as an array of strings, not a single monolithic string.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Defining the `fields` parameter as a simple string is a loss of semantic precision. It makes it harder for automated tools and client generators to understand that the parameter expects a list of values. This can lead to incorrect client implementations and validation logic.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T18:03:21.072Z",
    "updatedAt": "2025-07-02T16:25:05.551Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-126/medium-fields-query-parameter-type-mismatch"
  },
  {
    "id": "844c7642-a3f2-4690-bd9a-bbe0c29c958b",
    "identifier": "BUG-125",
    "title": "HIGH: Incorrectly Nullable Fields in GET /classes Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification allows several fields in the `Class` object to be `null`, including `course` and `school`, which are defined as required in the upstream specification. For example, the `course` field is defined as `type: [- object, - 'null']`.\n\n**Summary:** \nThe local specification allows several fields in the `Class` object to be `null`, including `course` and `school`, which are defined as required in the upstream specification. For example, the `course` field is defined as `type: [- object, - 'null']`.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the `/classes` endpoint.\n2. Find a record where one of the required linked objects (like 'course' or 'school') is missing or invalid in the source data.\n3. Observe that the API returns `null` for these fields in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?limit=1' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nFields defined as required in the upstream specification must not be nullable. The `course` and `school` fields have a multiplicity of `[1]` in the upstream HTML specification (Table 6.1.5), meaning they must always be present and cannot be null. If a field is optional (e.g., `[0..1]`), the correct behavior is to omit the field from the response, not to include it with a `null` value unless nullability is explicitly specified. The upstream spec does not specify nullability for these fields.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Allowing `null` for required fields violates the data contract. Strictly-typed clients expecting an object will fail to parse a `null` value, leading to runtime errors. This deviation indicates a potential lack of data integrity on the server side and creates unreliable behavior for clients.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T17:59:55.121Z",
    "updatedAt": "2025-07-03T18:10:30.697Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-125/high-incorrectly-nullable-fields-in-get-classes-response-object"
  },
  {
    "id": "a7a73e59-7eca-4be3-93cd-5dc78d2b71ff",
    "identifier": "BUG-124",
    "title": "CRITICAL: Non-Compliant Error Response Schema",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a custom error response schema that includes an extra field, `imsx_error_details`, which is an array of objects.\n\n**Summary:** \nThe local specification defines a custom error response schema that includes an extra field, `imsx_error_details`, which is an array of objects.\n\n**Steps to Reproduce:**\n\n1. Trigger an error, for example by providing an invalid filter parameter to the GET /classes endpoint.\n2. Observe the structure of the JSON error response body.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=invalidfield='somevalue'\" \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe error response body should conform strictly to the `imsx_StatusInfoDType` definition from the upstream specification. This definition includes `imsx_codeMajor`, `imsx_severity`, `imsx_description`, and `imsx_CodeMinor`, but it does NOT include a field named `imsx_error_details`. Any additional fields make the error response non-compliant.\n\nThe upstream JSON defines all error responses (4xx, 5xx) to use the schema `\"$ref\": \"#/definitions/imsx_StatusInfoDType\"`. This definition does not contain `imsx_error_details`.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** A non-standard error structure prevents automated clients from correctly parsing error responses and handling failures gracefully. Standardized error handling is a cornerstone of robust API integrations. This deviation breaks the contract and is a critical bug.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:54:18.381Z",
    "updatedAt": "2025-07-03T18:45:36.200Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-124/critical-non-compliant-error-response-schema"
  },
  {
    "id": "bea64621-4a08-4ab4-a01e-9472e4282d8e",
    "identifier": "BUG-123",
    "title": "HIGH: Undocumented 'search' Query Parameter in GET /classes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation of `GET /classes` accepts a query parameter named `search`, which is not defined in the official OneRoster specification.\n\n**Summary:** \nThe local implementation of `GET /classes` accepts a query parameter named `search`, which is not defined in the official OneRoster specification.\n\n**Steps to Reproduce:**\n\n1. Review the local specification for the `GET /classes/` endpoint.\n2. Note the presence of a `search` query parameter.\n3. Review the upstream specifications and note its absence.\n4. Send a request using this undocumented parameter.\n\nFunctional curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?search=chemistry' \\\n-H 'Authorization: Bearer $TOKEN'\n\n**Expected:** \nThe `search` query parameter should not be implemented. The API should only support the documented parameters for filtering and querying, which are `filter`, `sort`, `orderBy`, `limit`, `offset`, and `fields`. Any other query parameter should be ignored or result in a `400 Bad Request` error.\n\nThe upstream JSON specification's parameter list for `GET /classes` does not include `search`. The upstream HTML documentation (Section 4.3.1, \"getAllClasses\" Operation) also does not list a `search` parameter in its notes.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Supporting undocumented parameters is a security risk. It expands the attack surface of the API and can lead to vulnerabilities like SQL injection or other query-based attacks if the parameter's handling is not robustly implemented and sanitized. It also leads to non-standard behavior that can confuse clients and break integrations.\n```",
    "state": {
      "name": "Needs confirmation",
      "type": "unstarted"
    },
    "priority": 3,
    "createdAt": "2025-06-30T17:54:14.828Z",
    "updatedAt": "2025-07-03T14:36:15.188Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-123/high-undocumented-search-query-parameter-in-get-classes"
  },
  {
    "id": "275f306b-db3d-4d3c-a9e8-c51c04c1837e",
    "identifier": "BUG-122",
    "title": "CRITICAL: Incorrect 'required' Fields in GET /classes Response Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification marks the fields `classCode`, `classType`, and `location` as `required` within the class response object.\n\n**Summary:** \nThe local specification marks the fields `classCode`, `classType`, and `location` as `required` within the class response object.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the `/classes` endpoint.\n2. Examine the fields within an individual class object in the `classes` array of the response.\n3. Compare the `required` fields against the specification.\n\nFunctional curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?limit=1' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe fields `classCode`, `classType`, and `location` should be optional. According to the upstream specification, the required fields for a `ClassDType` object are `sourcedId`, `status`, `dateLastModified`, `title`, `course`, `school`, and `terms`.\n\nThe upstream JSON spec for `ClassDType` lists the required fields, and `classCode`, `classType`, and `location` are not in this list. The upstream HTML spec (Section 6.1.5) confirms their multiplicity is `[0..1]`, indicating they are optional. The local implementation incorrectly enforces their presence.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Incorrectly defining optional fields as required is a critical data contract violation. It can cause client-side validation to fail if the sending system (the service provider) omits these optional fields as permitted by the standard. This leads to data parsing errors and application failures. Additionally, the local spec has a contradiction for `classCode`, `classType`, and `location` by marking them as required but also allowing them to be `null`, which is confusing and non-standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:48:19.581Z",
    "updatedAt": "2025-07-02T00:52:36.401Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-122/critical-incorrect-required-fields-in-get-classes-response-object"
  },
  {
    "id": "3250529d-ee6c-4093-8d09-442c3443af17",
    "identifier": "BUG-121",
    "title": "CRITICAL: Incorrect Response Body Structure for GET /classes",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returns a JSON object with a custom pagination wrapper containing the fields: `classes`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Summary:** \nThe API returns a JSON object with a custom pagination wrapper containing the fields: `classes`, `totalCount`, `pageCount`, `pageNumber`, `offset`, and `limit`.\n\n**Steps to Reproduce:**\n\n1. Send a GET request to the `/classes` endpoint.\n2. Observe the structure of the JSON response body.\n\nFunctional curl command:\n\n```bash\ncurl -X GET 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?limit=1' \\\n-H 'Authorization: Bearer $TOKEN'\n```\n\n**Expected:** \nThe response body should be a JSON object with a single root property, `classes`, which contains the array of class objects. Pagination information, specifically the total count of records, should be returned in the `X-Total-Count` HTTP header.\n\nThe upstream JSON specification for the `GET /classes` `200` response defines the schema as `\"$ref\": \"#/definitions/ClassSetDType\"`. The `ClassSetDType` definition has only one property: `classes`. The spec also defines a `headers` object for the `200` response, containing `X-Total-Count`. The local implementation's response body is entirely non-compliant.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Returning a non-standard response body breaks client compatibility and violates a fundamental contract of the API specification. Clients built against the official OneRoster spec will fail to parse this response. This is a critical data contract violation.",
    "state": {
      "name": "Accepted Bug",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T17:48:19.171Z",
    "updatedAt": "2025-07-03T13:02:58.117Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-121/critical-incorrect-response-body-structure-for-get-classes"
  },
  {
    "id": "f8038f2b-3dee-45d0-b791-099bb1192666",
    "identifier": "BUG-120",
    "title": "CRITICAL: Undefined POST /classes Endpoint Exposed",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation exposes a `POST` method on the `/ims/oneroster/rostering/v1p2/classes/` endpoint, allowing for the creation of new class resources.\n\n**Summary:** \nThe local implementation exposes a `POST` method on the `/ims/oneroster/rostering/v1p2/classes/` endpoint, allowing for the creation of new class resources.\n\n**Steps to Reproduce:**\n\n1. Review the upstream specifications for the `/classes` endpoint.\n2. Note that only a GET method is defined.\n3. Review the local specification and observe that a POST method is defined and implemented.\n4. Send a POST request to the endpoint to create a new class resource.\n\nFunctional curl command:\n\n```bash\ncurl -X POST 'https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/' \\\n-H 'Authorization: Bearer $TOKEN' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"class\": {\n    \"title\": \"New Rogue Class\",\n    \"course\": {\n      \"sourcedId\": \"course-guid-123\"\n    },\n    \"org\": {\n      \"sourcedId\": \"school-guid-456\"\n    },\n    \"terms\": [\n      {\n        \"sourcedId\": \"term-guid-789\"\n      }\n    ]\n  }\n}'\n```\n\n**Expected:** \nThis endpoint should not exist. The upstream OneRoster 1.2 specification does not define a `POST` method for the `/classes` resource collection. The only defined method is `GET`. Any attempt to `POST` to this endpoint should result in a `405 Method Not Allowed` error.\n\nThe upstream JSON specification for `paths./classes` only contains a `get` operation. The upstream HTML documentation (Section 4.3, \"ClassesManagement Interface Description\") does not list any operation for creating classes, only for reading them (`getAllClasses`, `getClass`, etc.).\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/\nLocal Spec: ims/oneroster/rostering/v1p2/classes/.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Exposing an undocumented and non-standard write operation is a severe security risk. It opens up the API to unauthorized data creation and potential mass assignment vulnerabilities. Furthermore, the request body for this custom `POST` operation is also non-compliant with the standard `ClassDType` model:\n\n1. It uses a field named `org` instead of the standard `school`.\n2. The linked resources (`course`, `org`, `terms`) are represented as simplified objects with only a `sourcedId`, whereas the standard `GUIDRef` types require `href`, `sourcedId`, and `type`.\n   This entire endpoint is a dangerous deviation from the specification.",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 3,
    "createdAt": "2025-06-30T17:46:45.044Z",
    "updatedAt": "2025-07-02T16:41:11.426Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-120/critical-undefined-post-classes-endpoint-exposed"
  },
  {
    "id": "05657c3d-34c1-44d6-9933-ed18997b77e3",
    "identifier": "BUG-119",
    "title": "1. Review the documentation for the `GET /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint in the local spec. 2. Compare it to the upstream HTML documentation.",
    "description": "**Reporter:** GET Operation Description Mismatch (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification's description for the GET operation is: \"To get all students enrolled in a specific Class. If the corresponding record cannot be located, the api will return a 404 error code and message 'Class not found.'\".\n\n**Summary:** \nThe local specification's description for the GET operation is: \"To get all students enrolled in a specific Class. If the corresponding record cannot be located, the api will return a 404 error code and message 'Class not found.'\".\n\n**Steps to Reproduce:**\nThe local specification's description for the GET operation is: \"To get all students enrolled in a specific Class. If the corresponding record cannot be located, the api will return a 404 error code and message 'Class not found.'\".\n\n**Expected:** \nThe upstream specification describes the behavior differently. It specifies returning a status code of 'unknownobject' if the class cannot be found.\n\nThe upstream HTML doc (Section 4.3.3) states: \"To read, get, the collection of students associated with a specific class. If the specified class cannot be identified within the service provider then a status code of 'unknownobject' must be reported.\"\n\nWhile a 404 HTTP status is the correct RESTful mapping for 'unknownobject', the description in the local spec simplifies this and adds a custom error message (\"Class not found.\") not mentioned in the standard. The description should reflect the official language to avoid confusion about the error reporting mechanism.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This descriptive inconsistency can mislead developers about the specific error payload. The standard requires an `imsx_StatusInfoDType` payload with a `codeMinorFieldValue` of `unknownobject`, which is more specific than a generic \"Class not found\" message.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T17:40:57.772Z",
    "updatedAt": "2025-07-03T20:11:29.692Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-119/1-review-the-documentation-for-the-get"
  },
  {
    "id": "e8fa7e93-ac0c-4e8e-be93-eebe7c2d60ed",
    "identifier": "BUG-118",
    "title": "Extra Non-Compliant `search` Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines a `search` query parameter on the GET endpoint.\n\n**Summary:** \nThe local specification defines a `search` query parameter on the GET endpoint.\n\n**Steps to Reproduce:**\n\n1. Review the API documentation generated from the local spec.\n2. Note the presence of a `search` query parameter.\n\nFunctional curl command (hypothetical):\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?search=John\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream OneRoster specification does not define a `search` query parameter for this or any other endpoint. The standard mechanism for querying is the `filter` parameter. The `search` parameter is a non-compliant extension.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a non-standard query parameter deviates from the specification and can cause confusion for developers building clients against the official standard. It introduces a proprietary filtering mechanism alongside the standard `filter` parameter.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:50.775Z",
    "updatedAt": "2025-07-03T14:36:15.494Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-118/extra-non-compliant-search-query-parameter"
  },
  {
    "id": "a2f90ee4-83b8-409c-88a1-68660ab4583f",
    "identifier": "BUG-117",
    "title": "Extra `Students Management` Tag on GET Operation",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification assigns two tags to the GET operation: `[\"Classes Management\", \"Students Management\"]`.\n\n**Summary:** \nThe local specification assigns two tags to the GET operation: `[\"Classes Management\", \"Students Management\"]`.\n\n**Steps to Reproduce:**\n\n1. Review the API documentation generated from the local spec for the `GET /classes/{classSourcedId}/students` endpoint.\n2. Note the tags used to group the operation.\n\n**Expected:** \nThe upstream specification assigns only one tag to this operation: `[\"ClassesManagement\"]`. The operation is considered part of the \"ClassesManagement\" interface.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"/classes/{classSourcedId}/students\": {\n  \"get\": {\n    \"operationId\": \"getStudentsForClass\",\n    \"summary\": \"...\",\n    \"tags\": [\"ClassesManagement\"],\n    ...\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a minor documentation inconsistency. While it does not affect the runtime behavior of the API, it misrepresents the official grouping of the operation as defined in the standard. This can affect the organization of generated documentation and client code.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:49.752Z",
    "updatedAt": "2025-07-02T00:47:48.283Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-117/extra-students-management-tag-on-get-operation"
  },
  {
    "id": "cf8905c3-5b15-42d6-b3bb-d9e34122af3b",
    "identifier": "BUG-116",
    "title": "Missing `resources` Field in User Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the User object does not include the `resources` field.\n\n**Summary:** \nThe local specification for the User object does not include the `resources` field.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the fields of a user object in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `UserDType` object in the upstream specification includes an optional `resources` field. This field is an array of `ResourceGUIDRefDType` objects and is used to link resources available to the user.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"resources\": {\n  \"description\": \"The identifiers (GUIDs) for the set of resources that are to be made available to the user...\",\n  \"type\": \"array\",\n  \"minItems\": 0,\n  \"items\": {\n    \"$ref\": \"#/definitions/ResourceGUIDRefDType\"\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a specified field from the data model is a significant deviation. Clients expecting to find user-specific resource links will be unable to do so, breaking integrations that rely on this part of the OneRoster standard for resource management.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:48.788Z",
    "updatedAt": "2025-07-02T00:48:22.122Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-116/missing-resources-field-in-user-object-response"
  },
  {
    "id": "6792fb37-75bd-4348-a400-011bc4f05558",
    "identifier": "BUG-115",
    "title": "Critical API Contract Violation: POST /courses returns 201 Created instead of the documented 200 OK status on success",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API endpoint for creating a new course (`POST /ims/oneroster/rostering/v1p2/courses/`) successfully creates the course but returns a `201 Created` status code.\n\n**Summary:** \nThe API endpoint for creating a new course (`POST /ims/oneroster/rostering/v1p2/courses/`) successfully creates the course but returns a `201 Created` status code.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid Bearer token for the staging environment.\n2. Send a POST request to `https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/` with a valid JSON payload to create a new course.\n3. Observe that the API returns a `201 Created` status code.\n4. Note that the `oneroster.yaml` OpenAPI specification for this endpoint only defines a `200 OK` response for a successful creation, not a `201 Created`. This mismatch breaks any client strictly following the specification.\n\n---\n\ncURL Command Steps:\n\n1. First, get an authentication token (replace `<CLIENT_ID>` and `<CLIENT_SECRET>` with your actual credentials):\n   `TOKEN=$(curl -s -X POST https://alpha-auth-development-idp.auth.us-west-2.amazoncognito.com/oauth2/token -H \"Content-Type: application/x-www-form-urlencoded\" -d \"grant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>\" | jq -r .access_token)`\n2. Then, use the token to send the course creation request. This command will print the server's response headers, showing the `201 Created` status:\n   `curl -i -X POST https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/ \\ -H \"Authorization: Bearer $TOKEN\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"course\": {  \"title\": \"Bug Report Course '\"$(date +%s)\"'\",  \"status\": \"active\",  \"org\": {    \"sourcedId\": \"D860C00EF2EB4E47AD1C200078E81BF2\"  } } }'`\n\n**Expected:** \nAccording to the `oneroster.yaml` OpenAPI specification, a successful `POST` to this endpoint MUST return a `200 OK` status code. The specification for this operation's successful response is explicitly defined as `200`, not `201`. Any client, including the PowerPath SDK, built to follow the specification will encounter an unexpected status code error, rendering the endpoint unusable.\n\n**Environment:** API Endpoint: `https://api.staging.alpha-1edtech.com`\nAPI Component: `ims/oneroster/rostering/v1p2/courses/`\nClient: PowerPath E2E test suite running via Bun, and direct cURL commands.\n**Additional Notes:** This is a critical bug as it's a direct violation of the API's contract defined in `oneroster.yaml`. While a `201 Created` is semantically more appropriate for a resource creation POST request, the documentation explicitly states a `200 OK` is expected. This discrepancy breaks any client or SDK generated from or built strictly against the specification. The fix is to align the API's behavior with its documentation by returning a `200 OK` or, preferably, correcting the documentation to reflect the `201 Created` status and regenerating the client SDKs.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:44.596Z",
    "updatedAt": "2025-07-02T14:37:18.000Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-115/critical-api-contract-violation-post-courses-returns-201-created"
  },
  {
    "id": "6fd29399-b242-4cfc-a2c8-9ab7fc5c7a75",
    "identifier": "BUG-114",
    "title": "Incorrect Type and Format for `Role.beginDate` and `Role.endDate`",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local spec defines `beginDate` and `endDate` within the `Role` object as nullable strings (`type: [- string, 'null']`) without a specific format.\n\n**Summary:** \nThe local spec defines `beginDate` and `endDate` within the `Role` object as nullable strings (`type: [- string, 'null']`) without a specific format.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the `roles` array within a user object.\n3. Observe the `beginDate` and `endDate` fields.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?fields=roles\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n```\n</steps_to_reproduce>\n<brief_bug_summary_what_actually_happened>\n```\n\nThe local spec defines `beginDate` and `endDate` within the `Role` object as nullable strings (`type: [- string, 'null']`) without a specific format.\n\n**Expected:** \nThe upstream `RoleDType` specification defines `beginDate` and `endDate` as optional, non-nullable strings with a `format: date`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"beginDate\": {\n  \"description\": \"Model Primitive Datatype = Date. The start date on which the role becomes active (inclusive). \",\n  \"type\": \"string\",\n  \"format\": \"date\"\n},\n\"endDate\": {\n  \"description\": \"Model Primitive Datatype = Date. The end date on which the role becomes inactive (exclusive). \",\n  \"type\": \"string\",\n  \"format\": \"date\"\n}\n```\n\nThey are also not in the `required` list for `RoleDType`, making them optional, not nullable.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The local implementation has three distinct errors here: the fields are nullable, they are missing the required `date` format, and they are incorrectly marked as required. This will cause validation and deserialization errors for compliant clients. I have filed a separate bug report for the incorrect required status.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T17:40:43.486Z",
    "updatedAt": "2025-07-02T15:40:19.449Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-114/incorrect-type-and-format-for-rolebegindate-and-roleenddate"
  },
  {
    "id": "35211d8e-b7da-456f-877e-059fdba1107a",
    "identifier": "BUG-113",
    "title": "Missing `userProfiles` Field in User Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilder.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the User object does not include the `userProfiles` field.\n\n**Summary:** \nThe local specification for the User object does not include the `userProfiles` field.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the fields of a user object in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `UserDType` object in the upstream specification includes an optional `userProfiles` field, which is an array of `UserProfileDType` objects. This field is used to manage user credentials for different systems.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"userProfiles\": {\n  \"description\": \"The set of system/app/tool profiles for the user.\",\n  \"type\": \"array\",\n  \"minItems\": 0,\n  \"items\": {\n    \"$ref\": \"#/definitions/UserProfileDType\"\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Omitting a specified field from the data model is a significant deviation. Clients expecting to find user profile and credential information in this field will be unable to do so, breaking integrations that rely on this part of the OneRoster standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:43.209Z",
    "updatedAt": "2025-07-02T01:12:17.860Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-113/missing-userprofiles-field-in-user-object-response"
  },
  {
    "id": "216166d3-c4dd-4bf0-9e37-2741d3da87ac",
    "identifier": "BUG-112",
    "title": "Extra `imsx_error_details` Field in Error Responses",
    "description": "**Reporter:** Bjorn Pagetn (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines an extra field, `imsx_error_details`, in all of its error response schemas (e.g., `BadRequestResponse`, `NotFoundResponse`). This field is an array of objects.\n\n**Summary:** \nThe local specification defines an extra field, `imsx_error_details`, in all of its error response schemas (e.g., `BadRequestResponse`, `NotFoundResponse`). This field is an array of objects.\n\n**Steps to Reproduce:**\n\n1. Trigger an error condition, for example by providing an invalid parameter to generate a 400 Bad Request.\n2. Observe the JSON payload of the error response.\n\nFunctional curl command (example to trigger a 400):\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?limit=0\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe standard error response schema, `imsx_StatusInfoDType`, does not include an `imsx_error_details` field. The upstream spec defines the error response payload as containing only `imsx_codeMajor`, `imsx_severity`, `imsx_description`, and `imsx_CodeMinor`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"imsx_StatusInfoDType\": {\n  ...\n  \"properties\": {\n    \"imsx_codeMajor\": { ... },\n    \"imsx_severity\": { ... },\n    \"imsx_description\": { ... },\n    \"imsx_CodeMinor\": { ... }\n  },\n  \"required\": [\"imsx_codeMajor\", \"imsx_severity\"],\n  \"additionalProperties\": false\n}\n```\n\nThe `additionalProperties: false` confirms that no other properties should be present.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a non-standard field to error responses is a deviation from the specification. While it may not break clients that ignore unknown fields, it makes the implementation non-compliant and could cause issues with clients that perform strict validation on error payloads.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:41.585Z",
    "updatedAt": "2025-07-03T18:49:38.987Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-112/extra-imsx-error-details-field-in-error-responses"
  },
  {
    "id": "9acaafda-54e4-4a14-96a6-4eb9e7cb4990",
    "identifier": "BUG-111",
    "title": "Non-compliant `demographics` Field in User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification includes a `demographics` field within the User object schema. This field contains a nested `Demographics` object.\n\n**Summary:** \nThe local specification includes a `demographics` field within the User object schema. This field contains a nested `Demographics` object.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Observe the fields within a user object in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?fields=demographics\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `demographics` object is not part of the `UserDType` in the upstream OneRoster specification. Demographics information is a separate top-level object model, linked to a user by a common `sourcedId`, and is intended to be fetched via the `/demographics/{sourcedId}` endpoint. Nesting it inside the User object is a major structural deviation. The upstream `UserDType` definition in the JSON spec does not contain a `demographics` property.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This implementation fundamentally changes the data model of the OneRoster specification by nesting a top-level object within another. This breaks the specified data architecture and will cause parsing and data modeling errors for any compliant client.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:39.628Z",
    "updatedAt": "2025-07-02T01:12:05.272Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-111/non-compliant-demographics-field-in-user-object"
  },
  {
    "id": "24d487e0-e6b0-448b-b963-14c1863efb3a",
    "identifier": "BUG-110",
    "title": "Extra `format: email` Constraint on `email` Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `email` field in the User object with `type: string` and `format: email`.\n\n**Summary:** \nThe local specification defines the `email` field in the User object with `type: string` and `format: email`.\n\n**Steps to Reproduce:**\n\n1. Attempt to create or update a User with an email address that is valid as a string but not a standard email format (e.g., \"jdoe_at_school\").\n2. The local API might reject this value, while a compliant API should accept it.\n\n**Expected:** \nThe upstream `UserDType` specification defines the `email` field as an optional `string` with no specified format. The local implementation is therefore stricter than the standard.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"email\": {\n  \"description\": \"Model Primitive Datatype = NormalizedString. The email address for the user.\",\n  \"type\": \"string\"\n}\n```\n\nNo `format` is specified.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a format validator makes the implementation non-compliant by being more restrictive. While this may seem like a good practice, it can lead to interoperability issues if a source system provides a string that is a valid identifier for them but does not conform to the strict `email` format.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:31.545Z",
    "updatedAt": "2025-07-02T00:48:12.472Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-110/extra-format-email-constraint-on-email-field"
  },
  {
    "id": "ff5fc006-c162-416c-9973-5134596d7145",
    "identifier": "BUG-109",
    "title": "Incorrect Type for `Role.userProfile` Field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `userProfile` field inside the `Role` object as a simple `type: string`.\n\n**Summary:** \nThe local specification defines the `userProfile` field inside the `Role` object as a simple `type: string`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to retrieve users and inspect their `roles`.\n2. Provide a non-URI string for `userProfile` in the source data.\n3. The API would accept and return this data without validation against the URI format.\n\n**Expected:** \nThe upstream `RoleDType` specification defines `userProfile` as a string with a specific format. It must be a URI.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"userProfile\": {\n  \"description\": \"Model Primitive Datatype = AnyURI. The identifier for the system/tool/app access account...\",\n  \"type\": \"string\",\n  \"format\": \"uri\"\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The lack of `format: uri` means the local implementation will not validate that the `userProfile` field is a correctly formatted URI, as required by the standard. This can lead to invalid data being stored and returned to clients.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:28.096Z",
    "updatedAt": "2025-07-02T00:47:19.691Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-109/incorrect-type-for-roleuserprofile-field"
  },
  {
    "id": "bd03ef47-49dd-4684-b4a3-4d3ce290f0cf",
    "identifier": "BUG-108",
    "title": "Non-Compliant POST /classes/{classSourcedId}/students Endpoint",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilder.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local implementation exposes a `POST` method on the `/classes/{classSourcedId}/students` path to add a student to a class.\n\n**Summary:** \nThe local implementation exposes a `POST` method on the `/classes/{classSourcedId}/students` path to add a student to a class.\n\n**Steps to Reproduce:**\n\n1. Attempt to make a POST request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. The local spec indicates this will succeed with a 201 status if valid data is provided.\n\nFunctional curl command:\n\n```bash\ncurl -X POST \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"enrollment\":{\"user\":{\"sourcedId\":\"some-student-id\"}}}'\n```\n\n**Expected:** \nThis endpoint should not exist. According to the official OneRoster v1.2 specification, the `/classes/{classSourcedId}/students` path only supports the `GET` method for reading the list of students. There is no `POST` method defined for this path in either the upstream JSON spec or the HTML documentation. Roster modifications are not handled by this endpoint in the standard.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`), the path definition is:\n\n```json\n\"/classes/{classSourcedId}/students\": {\n  \"get\": { ... }\n}\n```\n\nThere is no `post` key. The HTML documentation for the `ClassesManagement` interface (Section 4.3) only lists read operations.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Adding a non-standard write operation is a major deviation from the specification. It poses a potential security risk by allowing data modification through an undocumented and non-compliant vector. Clients built to the specification will be unaware of this functionality.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:27.842Z",
    "updatedAt": "2025-07-02T01:02:15.162Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-108/non-compliant-post-classesclasssourcedidstudents-endpoint"
  },
  {
    "id": "33c14742-8913-4011-bbbf-88ce9db438f9",
    "identifier": "BUG-107",
    "title": "Missing `identifier` Field in User Object Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the User object does not include the `identifier` field.\n\n**Summary:** \nThe local specification for the User object does not include the `identifier` field.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the fields of a user object in the response.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe `UserDType` object in the upstream specification includes an optional `identifier` field. Although it is noted as being for backwards compatibility with OneRoster v1.0/1.1, it is still part of the v1.2 specification. A compliant implementation should be able to return it if present in the source data.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"identifier\": {\n  \"description\": \"Model Primitive Datatype = String. An identifier for the user. NOTE - This characteristic is kept for backwards compatibility with OneRoster 1.1/1.0. The 'userIds' characteristic SHOULD be used instead.\",\n  \"type\": \"string\"\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While the field is deprecated in favor of `userIds`, omitting it entirely from the specification is a deviation. Compliant clients, especially those that need to support older data sources, might expect this field to be present.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:25.075Z",
    "updatedAt": "2025-07-02T01:13:28.038Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-107/missing-identifier-field-in-user-object-response"
  },
  {
    "id": "b017e21d-2de4-4673-9247-f70a873c7e12",
    "identifier": "BUG-106",
    "title": "Extra `maximum` Constraint on `limit` Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification imposes a `maximum: 3000` constraint on the `limit` query parameter.\n\n**Summary:** \nThe local specification imposes a `maximum: 3000` constraint on the `limit` query parameter.\n\n**Steps to Reproduce:**\n\n1. Attempt to make a GET request with `limit` set to a value greater than 3000.\n2. The server should reject the request, whereas a fully compliant server might accept it.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?limit=3001\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream specification for the `limit` parameter defines a `minimum: 1` and a `default: 100`, but does not specify a maximum value. By adding a maximum, the local implementation is more restrictive than the standard.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"name\": \"limit\",\n\"in\": \"query\",\n\"description\": \"...\",\n\"required\": false,\n\"type\": \"integer\",\n\"format\": \"int32\",\n\"default\": 100,\n\"minimum\": 1,\n\"allowEmptyValue\": false\n```\n\nNo `maximum` is defined.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** While service providers are often free to set their own reasonable limits, defining this constraint in the specification makes the local spec non-compliant with the upstream spec. A client built against the official spec would not be aware of this upper bound and could make requests that are valid according to the standard but rejected by this implementation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:24.317Z",
    "updatedAt": "2025-07-03T05:45:08.079Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-106/extra-maximum-constraint-on-limit-query-parameter"
  },
  {
    "id": "8d801e8c-02cd-4be8-ac6a-0fcf6d9de898",
    "identifier": "BUG-105",
    "title": "Incorrect Required Fields in `Role` Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilder.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification incorrectly makes `beginDate` and `endDate` required fields within the `Role` object. The `required` list is `[roleType, role, org, beginDate, endDate]`.\n\n**Summary:** \nThe local specification incorrectly makes `beginDate` and `endDate` required fields within the `Role` object. The `required` list is `[roleType, role, org, beginDate, endDate]`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students`.\n2. Inspect the `roles` array within a user object.\n3. Note that `beginDate` and `endDate` are always present.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?fields=roles\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe upstream `RoleDType` specification defines `beginDate` and `endDate` as optional fields. The `required` list should only contain `roleType`, `role`, and `org`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"RoleDType\": {\n  ...\n  \"required\": [\"roleType\", \"role\", \"org\"],\n  \"additionalProperties\": false\n}\n```\n\nThis means compliant data sources may omit `beginDate` and `endDate`, but the local implementation would reject such data as invalid.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** By making optional fields required, the local implementation is overly strict and will fail to process valid OneRoster data. This breaks interoperability with systems that correctly treat these fields as optional.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:12.022Z",
    "updatedAt": "2025-07-02T15:15:23.616Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-105/incorrect-required-fields-in-role-object"
  },
  {
    "id": "8e4374ad-a5f0-4bec-b379-dcd08099235d",
    "identifier": "BUG-104",
    "title": "Missing `X-Total-Count` Header in 200 OK Response",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification for the `200` response does not define the `X-Total-Count` header.\n\n**Summary:** \nThe local specification for the `200` response does not define the `X-Total-Count` header.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. Inspect the response headers.\n\nFunctional curl command (with -i to show headers):\n\n```bash\ncurl -i -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nThe OneRoster v1.2 specification explicitly requires the `X-Total-Count` header to be returned on successful paginated collection requests. This header is the standard way to inform the client of the total number of available records.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"200\": {\n  \"description\": \"...\",\n  \"schema\": { ... },\n  \"headers\": {\n    \"X-Total-Count\": {\n      \"description\": \"The total number of resources that are available to be returned\",\n      \"type\": \"integer\"\n    }\n  }\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The absence of the `X-Total-Count` header breaks the standard pagination mechanism defined by OneRoster. Clients will be unable to determine the total number of pages or records, hindering their ability to properly paginate through the result set.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:05.641Z",
    "updatedAt": "2025-07-02T13:49:45.348Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-104/missing-x-total-count-header-in-200-ok-response"
  },
  {
    "id": "1dee6e66-b5e6-4496-a84b-c984c0b993fd",
    "identifier": "BUG-103",
    "title": "Incorrect Type for `fields` Query Parameter",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `fields` query parameter with `schema: { type: string }`.\n\n**Summary:** \nThe local specification defines the `fields` query parameter with `schema: { type: string }`.\n\n**Steps to Reproduce:**\n\n1. Attempt to make a GET request using the `fields` parameter according to client libraries generated from the upstream spec.\n2. The client library would likely format the request for an array type, which might be parsed incorrectly by the server.\n\nFunctional curl command (showing both styles):\n\n```bash\n# Correct representation (array)\n# GET /.../?fields=sourcedId,status\n# Incorrectly defined in local spec as a single string, could cause validation issues.\n```\n\n**Expected:** \nThe upstream OpenAPI 2.0 specification defines the `fields` parameter as an array of strings that should be serialized as a comma-separated value.\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"name\": \"fields\",\n\"in\": \"query\",\n\"description\": \"To identify the range of fields that should be supplied in the response message.\",\n\"required\": false,\n\"type\": \"array\",\n\"items\": {\n  \"type\": \"string\"\n},\n\"collectionFormat\": \"csv\",\n\"allowEmptyValue\": false\n```\n\nThe correct OpenAPI 3.1 representation would be `schema: { type: array, items: { type: string } }, style: form, explode: false`. Defining it as a simple `string` loses critical type information.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** Incorrectly typing the `fields` parameter as a simple string instead of an array of strings can cause issues with server-side validation, request parsing, and client/SDK generation. It is a deviation from the specified data type.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:03.285Z",
    "updatedAt": "2025-07-03T17:05:41.190Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-103/incorrect-type-for-fields-query-parameter"
  },
  {
    "id": "336dfc9d-0330-40f0-be72-60863ed85368",
    "identifier": "BUG-102",
    "title": "Critical API Contract Violation: POST /users returns `sourcedIdPairs` instead of the documented `user` object on success",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API endpoint for creating a new user (`POST /ims/oneroster/rostering/v1p2/users/`) successfully creates the user and returns a `201 Created` status. However, the JSON response body is `{\"sourcedIdPairs\":{...}}`, which does not match the API's own documentation.\n\n**Summary:** \nThe API endpoint for creating a new user (`POST /ims/oneroster/rostering/v1p2/users/`) successfully creates the user and returns a `201 Created` status. However, the JSON response body is `{\"sourcedIdPairs\":{...}}`, which does not match the API's own documentation.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\t\t\t1. Obtain a valid Bearer token for the staging environment.\n\t\t\t2. Send a POST request to `https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/users/` with a valid JSON payload to create a new user.\n\t\t\t3. Observe that the API returns a `201 Created` status code, indicating success.\n\t\t\t4. Inspect the JSON response body. Notice that it contains a `sourcedIdPairs` object, not the `user` object that the API documentation requires.\n\n```\n\t\t---\n\n\t\tcURL Command Steps:\n\t\t1. First, get an authentication token (replace `<CLIENT_ID>` and `<CLIENT_SECRET>` with your actual credentials):\n\t\t`TOKEN=$(curl -s -X POST https://alpha-auth-development-idp.auth.us-west-2.amazoncognito.com/oauth2/token -H \"Content-Type: application/x-www-form-urlencoded\" -d \"grant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>\" | jq -r .access_token)`\n\n\t\t2. Then, use the token to send the user creation request. This command attempts to create a new user and prints the server's response:\n\t\t`curl -i -X POST https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/users/ \\\n\t\t-H \"Authorization: Bearer $TOKEN\" \\\n\t\t-H \"Content-Type: application/json\" \\\n\t\t-d '{\n\t\t  \"user\": {\n\t\t    \"sourcedId\": \"bug-report-user-'\"$(date +%s)\"'\",\n\t\t    \"status\": \"active\",\n\t\t    \"enabledUser\": true,\n\t\t    \"givenName\": \"Bug\",\n\t\t    \"familyName\": \"Reporter\",\n\t\t    \"username\": \"bug.reporter.'\"$(date +%s)\"'\",\n\t\t    \"email\": \"bug.reporter.'\"$(date +%s)\"'@test.com\",\n\t\t    \"roles\": [\n\t\t      {\n\t\t        \"role\": \"student\",\n\t\t        \"roleType\": \"primary\",\n\t\t        \"org\": {\n\t\t          \"sourcedId\": \"D860C00EF2EB4E47AD1C200078E81BF2\"\n\t\t        }\n\t\t      }\n\t\t    ]\n\t\t  }\n\t\t}'`\n```\n\n**Expected:** \nAccording to the `oneroster.yaml` OpenAPI specification, a successful `201 Created` response for this endpoint MUST return a JSON object containing a `user` object as the top-level key: `{\"user\":{...}}`. The full, newly created user object should be returned, as this is standard practice for POST endpoints that create resources and is explicitly defined in the schema for this operation's 201 response.\n\n**Environment:** API Endpoint: `https://api.staging.alpha-1edtech.com`\nAPI Component: `ims/oneroster/rostering/v1p2/users/`\nClient: PowerPath E2E test suite running via Bun, and direct cURL commands.\n**Additional Notes:** This is a critical bug because it represents a direct and complete violation of the API's own contract as defined in `oneroster.yaml`. Any client, including our own SDK, built to correctly follow the specification will fail to parse the response, rendering the endpoint unusable. The logs show this exact scenario, where our test suite's `createTestStudent` helper fails with a validation error: `expected: \"object\", received: \"undefined\", path: [ \"user\" ]`. This single issue is the root cause of all five test script failures. Other `create` endpoints in the API correctly document and return a `sourcedIdPairs` object, which suggests this is a specific implementation error in the `/users` POST route handler.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T17:40:03.017Z",
    "updatedAt": "2025-07-02T14:38:58.831Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-102/critical-api-contract-violation-post-users-returns-sourcedidpairs"
  },
  {
    "id": "dc6e54ae-95a2-4370-9638-6deea0840a57",
    "identifier": "BUG-101",
    "title": "CRITICAL Security Vulnerability: SQL Injection in 'sort' parameter on list endpoints allows arbitrary code execution.",
    "description": "**Reporter:** Aiden Zepp (aiden.zepp@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `sort` parameter on list endpoints is not being properly sanitized or validated against an allow-list. It is possible to inject arbitrary SQL, including commands that cause a time-based delay (`pg_sleep`). The server's delayed response confirms that the injected SQL was executed by the database. This vulnerability was confirmed using the `script/oneroster-tests/sql-poc.ts` script found in the codebase, which contains numerous payloads to prove this issue.\n\n**Summary:** \nThe `sort` parameter on list endpoints is not being properly sanitized or validated against an allow-list. It is possible to inject arbitrary SQL, including commands that cause a time-based delay (`pg_sleep`). The server's delayed response confirms that the injected SQL was executed by the database. This vulnerability was confirmed using the `script/oneroster-tests/sql-poc.ts` script found in the codebase, which contains numerous payloads to prove this issue.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid Bearer token for the staging environment.\n2. Send a GET request to any list endpoint that supports sorting, such as `/ims/oneroster/rostering/v1p2/academicSessions/`.\n3. Set the `sort` query parameter to a malicious SQL payload designed to cause a time-delay, for example: `'||(sElEcT+pg_sleep(5))--`\n4. Observe the API response time. The server will take approximately 5 seconds longer than usual to respond, confirming that the `pg_sleep(5)` command was executed by the database.\n\n---\n\ncURL Command Steps:\n\n1. First, get an authentication token (replace `<CLIENT_ID>` and `<CLIENT_SECRET>` with your actual credentials):\n   `TOKEN=$(curl -s -X POST https://alpha-auth-development-idp.auth.us-west-2.amazoncognito.com/oauth2/token -H \"Content-Type: application/x-www-form-urlencoded\" -d \"grant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>\" | jq -r .access_token)`\n2. Then, use the token to send the time-based SQL injection attack. This command will print the total time taken for the request:\n   `curl -i -o /dev/null -s -w \"Total time: %{time_total}\\n\" -H \"Authorization: Bearer $TOKEN\" \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?sort='||(sElEcT+pg_sleep(5))--\"`\n\n**Expected:** \nThe API should strictly validate the `sort` parameter against a predefined, hardcoded allow-list of valid column names. Any value for `sort` that is not on this list should be rejected immediately with a `400 Bad Request` error. Under no circumstances should user-provided input for a sort key be directly concatenated or interpolated into a SQL query.\n\n**Environment:** API Endpoint: `https://api.staging.alpha-1edtech.com`\nAPI Component: All list endpoints with a `sort` parameter, e.g., `/ims/oneroster/rostering/v1p2/academicSessions/`.\nClient: cURL, and the PoC script `script/oneroster-tests/sql-poc.ts`.\n**Additional Notes:** This is a data integrity bug. While it does not crash the system, it provides malformed data for a specific record that violates the API's own schema. This can lead to client-side deserialization errors and incorrect data processing. It suggests a potential lack of input validation or data sanitization when this course record was created or last modified, and there may be other records with similar data integrity issues.",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 1,
    "createdAt": "2025-06-30T17:39:50.751Z",
    "updatedAt": "2025-07-03T05:41:03.271Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-101/critical-security-vulnerability-sql-injection-in-sort-parameter-on"
  },
  {
    "id": "e7f27f7a-b144-48c1-bc32-7b4927ce2e28",
    "identifier": "BUG-100",
    "title": "Incorrect Cardinality for `roles` Field in User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that the `roles` field in the User object is optional and can be an empty array. It specifies `default: []`.\n\n**Summary:** \nThe local specification indicates that the `roles` field in the User object is optional and can be an empty array. It specifies `default: []`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to retrieve a user who has no roles.\n2. Observe that the API returns the user object with an empty `roles` array.\n\nFunctional curl command:\n\n```bash\n# This is conceptual; a specific user without roles would need to be identified first.\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream `UserDType` specification, the `roles` field is **required** and **must contain at least one item**.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"roles\": {\n  \"description\": \"The set of roles for each of the orgs to which the user is affilliated...\",\n  \"type\": \"array\",\n  \"minItems\": 1,\n  \"items\": {\n    \"$ref\": \"#/definitions/RoleDType\"\n  }\n},\n...\n\"required\": [ ..., \"roles\"]\n```\n\nThe HTML spec (Section 6.1.30.12) confirms the multiplicity is `[1.. unbounded]`, meaning it is required and cannot be empty.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** The local implementation violates a mandatory constraint of the OneRoster specification. A compliant User object must always have at least one role. Returning a user with an empty `roles` array is invalid data according to the standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T16:32:12.048Z",
    "updatedAt": "2025-07-02T01:22:12.440Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-100/incorrect-cardinality-for-roles-field-in-user-object"
  },
  {
    "id": "4c4f5b03-5b66-4bef-8774-7ca679d63478",
    "identifier": "BUG-99",
    "title": "Incorrect Data Type for `enabledUser` Field in User Object",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification defines the `enabledUser` field as a `boolean` type. For example, it would return `true` or `false`.\n\n**Summary:** \nThe local specification defines the `enabledUser` field as a `boolean` type. For example, it would return `true` or `false`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. Observe the data type of the `enabledUser` field for any user object in the `students` array.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students?fields=enabledUser\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification (`UserDType`), the `enabledUser` field must be a `string` type, with an enumerated value of either `\"true\"` or `\"false\"`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`):\n\n```json\n\"enabledUser\": {\n  \"description\": \"This is used to determine whether or not the record is active in the local system. 'false' denotes that the record is active but system access is curtailed according to the local administration rules.\",\n  \"type\": \"string\",\n  \"enum\": [\"true\", \"false\"]\n}\n```\n\nThe HTML spec (Section 6.1.30.4) confirms this.\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical data type mismatch. A JSON boolean `true` is fundamentally different from a JSON string `\"true\"`. Any strictly-typed client built against the official specification will fail to deserialize the response from this endpoint due to this incorrect data type.",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 2,
    "createdAt": "2025-06-30T16:29:43.561Z",
    "updatedAt": "2025-07-03T16:38:59.462Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-99/incorrect-data-type-for-enableduser-field-in-user-object"
  },
  {
    "id": "45b8f005-2ff5-42c4-ae35-03ceae1d3f12",
    "identifier": "BUG-98",
    "title": "Incorrect Response Body Wrapper for GET /classes/{classSourcedId}/students",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The local specification indicates that the list of students is returned inside a JSON object under the key `students`. The full response body is a custom wrapper: `{ \"students\": [...], \"totalCount\": ..., ... }`.\n\n**Summary:** \nThe local specification indicates that the list of students is returned inside a JSON object under the key `students`. The full response body is a custom wrapper: `{ \"students\": [...], \"totalCount\": ..., ... }`.\n\n**Steps to Reproduce:**\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students` endpoint.\n2. Observe the JSON response structure.\n\nFunctional curl command:\n\n```bash\ncurl -X GET \"https://api.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/some-class-id/students\" \\\n-H \"Authorization: Bearer $TOKEN\"\n```\n\n**Expected:** \nAccording to the upstream specification, the response schema should be a `UserSetDType` object. This object contains a single key, `users`, which holds the array of user objects. The key should be `users`, not `students`.\n\nFrom the upstream JSON spec (`oneroster.rostering.upstream.json`), the response schema is `UserSetDType`:\n\n```json\n\"200\": {\n  \"description\": \"...\",\n  \"schema\": {\n    \"$ref\": \"#/definitions/UserSetDType\"\n  },\n...\n}\n```\n\nAnd `UserSetDType` is defined as:\n\n```json\n\"UserSetDType\": {\n  \"description\": \"...\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"users\": {\n      \"description\": \"The collection of user instances...\",\n      \"type\": \"array\",\n      \"minItems\": 0,\n      \"items\": {\n        \"$ref\": \"#/definitions/UserDType\"\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n**Environment:** API Route: /ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students\nLocal Spec: ims/oneroster/rostering/v1p2/classes/{classSourcedId}/students.filtered.yaml\nUpstream Spec (JSON): oneroster.rostering.upstream.json\nUpstream Spec (HTML): oneroster.rostering.upstream.html\n**Additional Notes:** This is a critical breaking change. A client built to the official specification will look for the `users` key and will fail to parse the response from the local implementation, which uses the `students` key instead. This fundamentally breaks compatibility with the OneRoster standard.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-30T16:27:48.630Z",
    "updatedAt": "2025-07-02T01:21:43.315Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-98/incorrect-response-body-wrapper-for-get-classesclasssourcedidstudents"
  },
  {
    "id": "98f45627-200b-43a3-a8ed-5734d27bb6d1",
    "identifier": "BUG-97",
    "title": "OpenBadge-Discovery",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The 1EdTech OpenBadge V3.0 specifications include the discovery endpoint. However, the TimeBack OpenBadge API endpoints do not include the discovery endpoint.\n\n**Summary:** \nThe 1EdTech OpenBadge V3.0 specifications include the discovery endpoint. However, the TimeBack OpenBadge API endpoints do not include the discovery endpoint.\n\n**Steps to Reproduce:**\nThe 1EdTech OpenBadge V3.0 specifications Discovery endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack OpenBadge API may include implementation associated with the discovery endpoint.\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T04:24:13.075Z",
    "updatedAt": "2025-07-03T14:46:44.866Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-97/openbadge-discovery"
  },
  {
    "id": "85ec0a26-8e1f-42d0-9a16-ecf36f4bae4a",
    "identifier": "BUG-96",
    "title": "OpenBadge-Profile",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The 1EdTech OpenBadge V3.0 specifications include the profile endpoint. However, the TimeBack OpenBadge API endpoints do not include the profile endpoint.\n\n**Summary:** \nThe 1EdTech OpenBadge V3.0 specifications include the profile endpoint. However, the TimeBack OpenBadge API endpoints do not include the profile endpoint.\n\n**Steps to Reproduce:**\nThe 1EdTech OpenBadge V3.0 specifications Profile endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack OpenBadge API may include implementation associated with the profile endpoint.\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T04:23:01.425Z",
    "updatedAt": "2025-07-02T13:59:33.480Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-96/openbadge-profile"
  },
  {
    "id": "c9e5e2fe-82f5-45a8-b04c-059b52b17f35",
    "identifier": "BUG-95",
    "title": "OpenBadge-Credentials",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The 1EdTech OpenBadge V3.0 specifications include the credentials endpoint. However, the TimeBack OpenBadge API endpoints do not include the credentials endpoint.\n\n**Summary:** \nThe 1EdTech OpenBadge V3.0 specifications include the credentials endpoint. However, the TimeBack OpenBadge API endpoints do not include the credentials endpoint.\n\n**Steps to Reproduce:**\nThe 1EdTech OpenBadge V3.0 specifications Credentials endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack OpenBadge API may include implementation associated with the credentials endpoint.\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T04:21:32.196Z",
    "updatedAt": "2025-07-03T14:46:48.499Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-95/openbadge-credentials"
  },
  {
    "id": "a0c62866-09d9-474b-8619-24ad5258ebb3",
    "identifier": "BUG-94",
    "title": "OpenBadge-IssueBadge",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OpenBadge API\n**Bug Type:** The TimeBack OpenBadge V1.0.0 OpenAPI specifications include the following endpoints. However, the endpoints may have not been implemented.\n/ims/ob/v3p0/issue-badge/\n/ims/ob/v3p0/issue-badge/verify\n\n**Summary:** \nThe TimeBack OpenBadge V1.0.0 OpenAPI specifications include the following endpoints. However, the endpoints may have not been implemented.\n/ims/ob/v3p0/issue-badge/\n/ims/ob/v3p0/issue-badge/verify\n\n**Steps to Reproduce:**\nThe TimeBack OpenBadge V1.0.0 OpenAPI specifications include endpoints associated with 'issue-badge'. However, the endpoints may have not been implemented.\n\n**Expected:** \nThe TimeBack OpenBadge API endpoint implementation may include the following endpoints.\n/ims/ob/v3p0/issue-badge/\n/ims/ob/v3p0/issue-badge/verify\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T04:16:38.601Z",
    "updatedAt": "2025-07-03T14:47:06.746Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-94/openbadge-issuebadge"
  },
  {
    "id": "91c6fff4-315f-4528-ba74-0187ed68fd06",
    "identifier": "BUG-93",
    "title": "CLR-Discovery",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The 1EdTech Comprehensive Learner Record Standard V2.0 include the Discovery endpoint. However, the TimeBack API endpoints do not include the Discovery endpoint.\n\n**Summary:** \nThe 1EdTech Comprehensive Learner Record Standard V2.0 include the Discovery endpoint. However, the TimeBack API endpoints do not include the Discovery endpoint.\n\n**Steps to Reproduce:**\nThe 1EdTech Comprehensive Learner Record Standard V2.0 Discovery endpoints may have not been implemented.\n\n**Expected:** \nThe TimeBack CLR API may include implementation associated with the discovery endpoint.\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T03:21:15.795Z",
    "updatedAt": "2025-07-03T14:47:15.214Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-93/clr-discovery"
  },
  {
    "id": "4578d180-e317-4ce0-ad03-c39e04c12841",
    "identifier": "BUG-92",
    "title": "CLR-Profile",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CLR API\n**Bug Type:** The 1EdTech Comprehensive Learner Record Standard V2.0 include the profile endpoint. However, the TimeBack API CLR endpoints do not include the profile endpoint.\n\n**Summary:** \nThe 1EdTech Comprehensive Learner Record Standard V2.0 include the profile endpoint. However, the TimeBack API CLR endpoints do not include the profile endpoint.\n\n**Steps to Reproduce:**\nThe 1EdTech Comprehensive Learner Record Standard V2.0 Profile endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack CLR API may include implementation associated with the profile endpoint.\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T03:19:56.969Z",
    "updatedAt": "2025-07-03T14:47:23.306Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-92/clr-profile"
  },
  {
    "id": "e38e8aa4-c82d-49d3-ab73-f563ced0e60f",
    "identifier": "BUG-91",
    "title": "CASE-CFSubjects",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\u2028\n/ims/case/v1p1/CFSubjects/{sourcedId}\n\n**Summary:** \nThe 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\u2028\n/ims/case/v1p1/CFSubjects/{sourcedId}\n\n**Steps to Reproduce:**\nThe 1EdTech CASE V1.1 CFSubjects endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack CASE API may include implementation associated with the following endpoint.\n/ims/case/v1p1/CFSubjects/{sourcedId}\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T03:05:09.997Z",
    "updatedAt": "2025-07-01T22:59:01.812Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-91/case-cfsubjects"
  },
  {
    "id": "951efe41-178a-4c60-921e-fe9c45c9ad08",
    "identifier": "BUG-90",
    "title": "CASE-CFRubrics",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\u2028\n/ims/case/v1p1/CFRubrics/{sourcedId}\n\n**Summary:** \nThe 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\u2028\n/ims/case/v1p1/CFRubrics/{sourcedId}\n\n**Steps to Reproduce:**\nThe 1EdTech CASE V1.1 CFRubrics endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack CASE API may include implementation associated with the following endpoint.\n/ims/case/v1p1/CFRubrics/{sourcedId}\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T03:03:58.195Z",
    "updatedAt": "2025-07-01T22:58:57.797Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-90/case-cfrubrics"
  },
  {
    "id": "ebffbb1c-fb93-4970-b294-28dd8cb3a64b",
    "identifier": "BUG-89",
    "title": "CASE-CFLicenses",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\u2028\n/ims/case/v1p1/CFLicenses/{sourcedId}\n\n**Summary:** \nThe 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\u2028\n/ims/case/v1p1/CFLicenses/{sourcedId}\n\n**Steps to Reproduce:**\nThe 1EdTech CASE V1.1 CFLicenses endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack CASE API may include implementation associated with the following endpoint.\n/ims/case/v1p1/CFLicenses/{sourcedId}\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T03:02:22.191Z",
    "updatedAt": "2025-07-01T22:58:53.451Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-89/case-cflicenses"
  },
  {
    "id": "cd466d7a-fbfb-4a7f-b687-72bbaf62639e",
    "identifier": "BUG-88",
    "title": "CASE-CFItemTypes",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\u2028/ims/case/v1p1/CFItemTypes/{sourcedId}\n\n**Summary:** \nThe 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\u2028/ims/case/v1p1/CFItemTypes/{sourcedId}\n\n**Steps to Reproduce:**\nThe 1EdTech CASE V1.1 CFItemTypes endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack CASE API may include implementation associated with the following endpoint.\n/ims/case/v1p1/CFItemTypes/{sourcedId}\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T03:00:24.899Z",
    "updatedAt": "2025-07-01T22:58:48.503Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-88/case-cfitemtypes"
  },
  {
    "id": "3ac10c6f-7209-4267-9ee1-34a53709c846",
    "identifier": "BUG-87",
    "title": "CASE-CFItemAssociations",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\n/ims/case/v1p1/CFItemAssociations/{sourcedId}\n\n**Summary:** \nThe 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\n/ims/case/v1p1/CFItemAssociations/{sourcedId}\n\n**Steps to Reproduce:**\n\n* The 1EdTech CASE V1.1 CFItemAssociations endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack CASE API may include implementation associated with the following endpoint.\n/ims/case/v1p1/CFItemAssociations/{sourcedId}\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T02:58:00.595Z",
    "updatedAt": "2025-07-01T22:58:45.993Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-87/case-cfitemassociations"
  },
  {
    "id": "8079f602-f271-4459-a670-a9410379b999",
    "identifier": "BUG-86",
    "title": "CASE-CFConcepts",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\n/ims/case/v1p1/CFConcepts/{sourcedId}\n\n**Summary:** \nThe 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\n/ims/case/v1p1/CFConcepts/{sourcedId}\n\n**Steps to Reproduce:**\n\n* The 1EdTech CASE V1.1 CFConcepts endpoint may have not been implemented.\n\n**Expected:**\n\n* The TimeBack CASE API may include implementation associated with the following endpoint.\n  /ims/case/v1p1/CFConcepts/{sourcedId}\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-30T02:55:09.273Z",
    "updatedAt": "2025-07-01T22:58:42.674Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-86/case-cfconcepts"
  },
  {
    "id": "139aac92-f3e5-4609-992b-ddd7b59139f5",
    "identifier": "BUG-85",
    "title": "CASE-CFAssociationGroupings",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** CASE API\n**Bug Type:** The 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\n/ims/case/v1p1/CFassociationGroupings/{sourcedId}\n\n**Summary:** \nThe 1EdTech CASE V1.1 specifications include the following endpoint. However, the TimeBack API CASE endpoints do not include the following endpoint.\n/ims/case/v1p1/CFassociationGroupings/{sourcedId}\n\n**Steps to Reproduce:**\nThe 1EdTech CASE V1.1 CFAssociationGroupings endpoint may have not been implemented.\n\n**Expected:** \nThe TimeBack CASE API may include implementation associated with the following endpoint.\n/ims/case/v1p1/CFassociationGroupings/{sourcedId}\n\n**Environment:** Staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-30T02:53:13.539Z",
    "updatedAt": "2025-07-01T22:58:40.509Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-85/case-cfassociationgroupings"
  },
  {
    "id": "c4ff40fa-3675-4cad-89dd-2074e5fd1ad5",
    "identifier": "BUG-84",
    "title": "Critical SQL Injection in 'sort' Parameter of GET /ims/oneroster/rostering/v1p2/academicSessions/",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The sort parameter in the getAllAcademicSessions endpoint is critically vulnerable to SQL injection. While some basic patterns are blocked (returning a 400 error), many evasion techniques are successful. The provided logs show that payloads using mixed-case keywords (e.g., sElEcT), URL encoding, and different whitespace characters (tabs, newlines) successfully bypass the input validation. This results in a 500 Internal Server Error containing a raw PostgreSQL error message like \"unterminated quoted string\" or \"syntax error at or near 'WHERE'\". This proves that the user-supplied input is being executed or parsed by the database, allowing for arbitrary SQL execution.\n\n**Summary:** \nThe sort parameter in the getAllAcademicSessions endpoint is critically vulnerable to SQL injection. While some basic patterns are blocked (returning a 400 error), many evasion techniques are successful. The provided logs show that payloads using mixed-case keywords (e.g., sElEcT), URL encoding, and different whitespace characters (tabs, newlines) successfully bypass the input validation. This results in a 500 Internal Server Error containing a raw PostgreSQL error message like \"unterminated quoted string\" or \"syntax error at or near 'WHERE'\". This proves that the user-supplied input is being executed or parsed by the database, allowing for arbitrary SQL execution.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid bearer token for the API.\n2. Make a GET request to the `/ims/oneroster/rostering/v1p2/academicSessions/` endpoint.\n3. Set the `sort` query parameter to a SQL injection payload that is known to bypass the partial validation, such as one using a case-variant keyword or different whitespace. The logs confirm multiple such payloads are effective.\n4. Observe that the server returns a 500 Internal Server Error with a raw PostgreSQL error message in the response body, confirming the injected SQL was processed by the database.\n\n---\n\ncURL Command to Reproduce:\n(This command uses a payload with mixed-case keywords, which the logs show bypasses the validator and causes a 500 error. Replace `YOUR_BEARER_TOKEN` with a valid token.)\n\n```bash\ncurl -i -X GET \\\n\"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?limit=1&offset=0&sort=%27%20AnD%20(sElEcT%20pG_cAtAlOg.pG_sLeEp(5))%20iS%20nUlL--\" \\\n-H \"Authorization: Bearer YOUR_BEARER_TOKEN\" \\\n-H \"Accept: application/json\"\n\n\n**Expected:** \nThe sort parameter's value must be treated as untrusted user input. It should be validated against a strict, case-insensitive allow-list of known, safe column names (e.g., 'sourcedId', 'status', 'title', 'startDate', 'endDate', 'type', 'schoolYear'). Any value not in this allow-list should be rejected.\n\nIf an invalid value is provided, the server must consistently return a 400 Bad Request or 422 Unprocessable Entity error, with a structured JSON body as defined in the OpenAPI specification (BadRequestResponse or UnprocessableEntityResponse). The server must never pass un-validated input to the database layer.\n\n\n**Environment:** The bug was discovered using a custom TypeScript test script against the staging environment: https://api.staging.alpha-1edtech.com. The logs from 2025/06/28 22:38:59 confirm this vulnerability.\n\n**Additional Notes:** This is a classic, severe vulnerability. The fact that numerous evasion techniques succeed indicates the current input validation is based on a flawed blacklist approach. This must be replaced with a strict allow-list validation strategy. This vulnerability could be exploited to exfiltrate, modify, or destroy data, or to perform denial-of-service attacks against the database.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T03:43:14.099Z",
    "updatedAt": "2025-07-03T05:41:02.382Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-84/critical-sql-injection-in-sort-parameter-of-get"
  },
  {
    "id": "72c24eb8-8647-4e07-ab3c-54c672a50504",
    "identifier": "BUG-83",
    "title": "OneRoster-AssessmentLineItems-delete-idempotency",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**BUG-56: OneRoster-AcademicSessions-DELETE**](https://linear.app/ae-studio/issue/BUG-56/oneroster-academicsessions-delete) - Similarity: 100% - Same DELETE idempotency issue pattern. Human review needed.\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The assessment line item delete endpoint returns HTTP status code 204 for subsequent deletion of an assessment line item.\n\n**Summary:** \nThe assessment line item delete endpoint returns HTTP status code 204 for subsequent deletion of an assessment line item.\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/123](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/123) \n--request DELETE\n\n**Expected:** \nSubsequent deletion requests may be associated with the following server response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"assessmentLineItems with sourcedId 123 not found\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"unknownobject\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Environment:** The staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T03:11:24.138Z",
    "updatedAt": "2025-07-02T19:39:10.521Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-83/oneroster-assessmentlineitems-delete-idempotency"
  },
  {
    "id": "79ed9259-3b46-43e7-9e24-15605cb72782",
    "identifier": "BUG-82",
    "title": "OneRoster-AssessmentLineItems-GET-filter-title",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter assessment line items by title returns assessment line items that may not adhere to the filter parameter. The server returns the following.\n<response>\n{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"1234\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"123\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"c254aac5-fc7d-4689-8eae-5ca92209e3df\"\n    },\n\\[truncated\\]\n</response>\n\n**Summary:** \nAttempting to filter assessment line items by title returns assessment line items that may not adhere to the filter parameter. The server returns the following.\n<response>\n{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"1234\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"123\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"c254aac5-fc7d-4689-8eae-5ca92209e3df\"\n    },\n\\[truncated\\]\n</response>\n\n**Steps to Reproduce:**\ncurl '[https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/1234?filter=title%3D'active'](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/1234?filter=title%3D'active')'\n\n**Expected:** \nThe assessment line items may adhere to the filter parameter. Therefore, the server response may include assessment line items associated with titles that adhere to the filter parameter.\n\n**Environment:** The staging environment.\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T03:04:33.066Z",
    "updatedAt": "2025-07-01T22:58:27.320Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-82/oneroster-assessmentlineitems-get-filter-title"
  },
  {
    "id": "981da5f3-56aa-43c0-a1db-760aaee65ac7",
    "identifier": "BUG-81",
    "title": "OneRoster-AssessmentLineItems-POST-redundancy-learningobjectiveset",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Assessment line item creation endpoint accepts duplicate learning objective set sources. The server response indicates successful assessment line item creation.\n\n**Summary:** \nAssessment line item creation endpoint accepts duplicate learning objective set sources. The server response indicates successful assessment line item creation.\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"2123456\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"123\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"c254aac5-fc7d-4689-8eae-5ca92209e3df\"\n    },\n    \"resultValueMin\": 123,\n    \"resultValueMax\": 10,\n    \"resultValueMax\": 11,\n    \"componentResource\": {\n      \"sourcedId\": \"TEKSHI-Q1\"\n    },\n    \"learningObjectiveSet\": \\[\n      {\n        \"source\": \"common core\",\n        \"source\": \"common core\",\n        \"learningObjectiveIds\": \\[\n          \"\"\n        \\]\n      }\n    \\]\n  }\n}'\n\n**Expected:** \nDuplicate objective set sources may be rejected by the server. The server response may include appropriate HTTP status codes.\n\n**Environment:** Staging environment\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T02:59:14.342Z",
    "updatedAt": "2025-07-02T13:57:14.663Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-81/oneroster-assessmentlineitems-post-redundancy-learningobjectiveset"
  },
  {
    "id": "019105a9-9dc5-4a21-b6b2-daf1635c4094",
    "identifier": "BUG-80",
    "title": "OneRoster-AssessmentLineItems-POST-redundancy",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Assessment line item creation endpoints accept assessment line item creation associated with duplicate fields including the 'resultValueMax' field.\n\n**Summary:** \nAssessment line item creation endpoints accept assessment line item creation associated with duplicate fields including the 'resultValueMax' field.\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"212345\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"123\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"c254aac5-fc7d-4689-8eae-5ca92209e3df\"\n    },\n    \"resultValueMin\": 123,\n    \"resultValueMax\": 10,\n    \"resultValueMax\": 11,\n    \"componentResource\": {\n      \"sourcedId\": \"TEKSHI-Q1\"\n    },\n    \"learningObjectiveSet\": \\[\n      {\n        \"source\": \"common core\",\n        \"learningObjectiveIds\": \\[\n          \"\"\n        \\]\n      }\n    \\]\n  }\n}'\n\n**Expected:** \nDuplicate and redundant fields in the assessment line item creation JSON body may be rejected. The server response may include appropriate HTTP status codes.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T02:55:25.020Z",
    "updatedAt": "2025-07-02T13:57:08.699Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-80/oneroster-assessmentlineitems-post-redundancy"
  },
  {
    "id": "2c77177e-a6e3-4873-badd-056abc522bb9",
    "identifier": "BUG-79",
    "title": "Critical API Contract Violation: getAllTeachers Endpoint Returns Incomplete 'roles' Objects Missing Required Fields",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**BUG-78: Critical Schema Violation - getAllStudents**](https://linear.app/ae-studio/issue/BUG-78/critical-schema-violation-getallstudents-endpoint-returns-malformed)\n*AI Similarity Score: 85% - Same API contract violation affecting 'roles' objects. Human review needed.*\n\n---\n\n**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilder.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `getAllTeachers` API endpoint (`/ims/oneroster/rostering/v1p2/teachers/`) returns a `200 OK` status, but the response body is malformed and violates the API contract. Several user objects in the response's `users` array contain a `roles` array, where the role objects are missing the `beginDate` and/or `endDate` fields. This causes a `ResponseValidationError` on any client that validates the response against the OpenAPI specification, as these fields are explicitly marked as `required`. The provided logs confirm this failure.\n\n**Summary:** \nThe `getAllTeachers` API endpoint (`/ims/oneroster/rostering/v1p2/teachers/`) returns a `200 OK` status, but the response body is malformed and violates the API contract. Several user objects in the response's `users` array contain a `roles` array, where the role objects are missing the `beginDate` and/or `endDate` fields. This causes a `ResponseValidationError` on any client that validates the response against the OpenAPI specification, as these fields are explicitly marked as `required`. The provided logs confirm this failure.\n\n**Steps to Reproduce:**\nThe following steps will consistently reproduce the bug:\n\nObtain a valid bearer token for the staging environment with a scope that allows reading rosters (e.g., [https://purl.imsglobal.org/spec/or/v1p1/scope/roster.readonly](https://purl.imsglobal.org/spec/or/v1p1/scope/roster.readonly)).\n\nExecute the cURL command below to make a GET request to the /ims/oneroster/rostering/v1p2/teachers/ endpoint.\n\nObserve the JSON response body.\n\nInspect the users array and the nested roles array for each user object returned.\n\nNotice that objects within the roles array are missing the beginDate and/or endDate fields. For example, in the provided logs, the third user returned has a role object with neither beginDate nor endDate. This directly violates the API's OpenAPI specification.\n\ncURL Command:\n\nGenerated bash\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/teachers/?filter=status%3D'active'&limit=3&offset=0](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/teachers/?filter=status%3D%27active%27&limit=3&offset=0)' \n-H 'Accept: application/json' \n-H 'Authorization: Bearer <YOUR_VALID_TOKEN_HERE>'\n\n**Expected:** \nAccording to the OpenAPI specification for the `getAllTeachers` endpoint, every object within the `users.roles`...",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T02:43:37.022Z",
    "updatedAt": "2025-07-02T14:33:18.865Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-79/critical-api-contract-violation-getallteachers-endpoint-returns"
  },
  {
    "id": "1b15e76d-16c5-4398-9add-3bde058eefe4",
    "identifier": "BUG-78",
    "title": "Critical Schema Violation: getAllStudents endpoint returns malformed 'roles' objects missing required fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The /ims/oneroster/rostering/v1p2/students/ endpoint returns a list of users where objects within the nested roles array are missing the required beginDate and/or endDate fields. This is a direct violation of the API's specified contract. As shown in the provided logs, this causes client-side SDKs that perform response validation against the OpenAPI schema to throw a ResponseValidationError and fail, breaking the integration.\n\n**Summary:** \nThe /ims/oneroster/rostering/v1p2/students/ endpoint returns a list of users where objects within the nested roles array are missing the required beginDate and/or endDate fields. This is a direct violation of the API's specified contract. As shown in the provided logs, this causes client-side SDKs that perform response validation against the OpenAPI schema to throw a ResponseValidationError and fail, breaking the integration.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid OAuth2 bearer token with the necessary scopes to read roster data.\n2. Make a GET request to the `getAllStudents` endpoint, for example, using pagination and filtering for active students.\n3. Observe the JSON response.\n4. Inspect the `users` array in the response. For multiple user objects, inspect their nested `roles` array.\n5. Notice that the objects inside the `roles` array are missing the `beginDate` and/or `endDate` fields, which are marked as required in the API's OpenAPI specification.\n\ncURL Request to Reproduce:\n(Note: Replace `<YOUR_VALID_TOKEN>` with a valid Bearer token.)\n\n```bash\ncurl -X GET 'https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/students/?filter=status%3D%27active%27&limit=3&offset=0&orderBy=asc&sort=familyName' \\\n-H 'Authorization: Bearer <YOUR_VALID_TOKEN>' \\\n-H 'Accept: application/json'\n\n\n**Expected:** \nAccording to the OpenAPI specification for the getAllStudents endpoint, every object within the users.roles array must contain both a beginDate and an endDate key. The schema defines these fields as required. If a date is not applicable for a given role, the API should return the key with a null value (e.g., \"endDate\": null). The key itself must not be omitted from the response object.\n\n\n**Environment:** API Endpoint: https://api.staging.alpha-1edtech.com\nUser-Agent from logs: speakeasy-sdk/typescript 0.7.0 2.640.2 1.0.0 @superbuilders/oneroster\nThe bug was observed consistently on 2025/06/28.\n**Additional Notes:** This is a critical bug as it represents a server-side violation of the documented API contract, which prevents client applications from reliably processing the data. The bug is confirmed by the ResponseValidationError in the logs.\n\nThe OpenAPI spec for the roles object inside a user clearly marks beginDate and endDate as required:\n\nGenerated yaml\nroles:\n  type: array\n  items:\n    type: object\n    properties:\n      # ... other properties\n      beginDate:\n        type:\n          - string\n          - 'null'\n      endDate:\n        type:\n          - string\n          - 'null'\n    required:\n      - roleType\n      - role\n      - org\n      - beginDate\n      - endDate\n\nThe response from the server omits these keys entirely for some or all roles, as seen in the log's http response body. For example, the third user's role object is {\"roleType\":\"primary\",\"role\":\"student\",\"org\":{...}}, which is missing both beginDate and endDate.\n```",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-29T02:33:07.034Z",
    "updatedAt": "2025-07-02T15:15:23.517Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-78/critical-schema-violation-getallstudents-endpoint-returns-malformed"
  },
  {
    "id": "1ce4f46f-6216-445a-a326-f78979d1d316",
    "identifier": "BUG-77",
    "title": "API returns incorrect data types for multiple fields within the 'scoreScaleValue' object, violating the OpenAPI specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returns number types for fields that are explicitly defined as string types in the OpenAPI specification. Specifically, within the scoreScaleValue array of a ScoreScale object, the fields itemValueLHS, itemValueRHS, and value are incorrectly typed.\n\nFor example, a response from the logs (requestId=2af1tc) shows: {\"itemValueLHS\":93,\"itemValueRHS\":100,\"value\":4.0,\"description\":\"A\"}. Here, itemValueLHS, itemValueRHS, and value are all numbers. This issue is present in both the getAllScoreScales list view and the getScoreScale/{sourcedId} detail view.\n\n**Summary:** \nThe API returns number types for fields that are explicitly defined as string types in the OpenAPI specification. Specifically, within the scoreScaleValue array of a ScoreScale object, the fields itemValueLHS, itemValueRHS, and value are incorrectly typed.\n\nFor example, a response from the logs (requestId=2af1tc) shows: {\"itemValueLHS\":93,\"itemValueRHS\":100,\"value\":4.0,\"description\":\"A\"}. Here, itemValueLHS, itemValueRHS, and value are all numbers. This issue is present in both the getAllScoreScales list view and the getScoreScale/{sourcedId} detail view.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid OAuth2 bearer token for the staging environment.\n2. Make a GET request to the `getAllScoreScales` endpoint (e.g., `https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/`).\n3. Inspect the JSON response body.\n4. Observe any `scoreScale` object in the `scoreScales` array. Inside its `scoreScaleValue` array, observe the objects.\n5. Notice that the fields `itemValueLHS`, `itemValueRHS`, and `value` are returned as JSON `number` types instead of the specified `string` type.\n\ncURL Command:\n(Note: Replace `<YOUR_TOKEN_HERE>` with a valid bearer token)\n\n```bash\ncurl -X GET 'https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/' \\\n-H 'Authorization: Bearer <YOUR_TOKEN_HERE>' \\\n-H 'Accept: application/json'\n\n**Expected:** \nThe API response must strictly adhere to the data types defined in the OpenAPI specification. The fields itemValueLHS, itemValueRHS, and value should always be returned as JSON string types.\n\nThe example response from the logs should have been: {\"itemValueLHS\":\"93\",\"itemValueRHS\":\"100\",\"value\":\"4.0\",\"description\":\"A\"}.\n\nThis is a direct violation of the provided OpenAPI spec for the scoreScaleValue object:\n\nGenerated yaml\nscoreScaleValue:\n  type: array\n  items:\n    type: object\n    properties:\n      itemValueLHS:\n        type: string\n      itemValueRHS:\n        type: string\n      value:\n        type: string\n      description:\n        type: string\n\n\n**Environment:** API Endpoint: https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/\nAPI Endpoint: https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/scoreScales/{sourcedId}\nClient: speakeasy-sdk/typescript 0.7.0 2.640.2 1.0.0 @superbuilders/oneroster\nEnvironment: Staging\nTime of test: 2025/06/28 21:20:06\n**Additional Notes:** This is a critical bug because it represents a direct violation of the API contract defined in the OpenAPI specification. Client applications built against the spec will fail to parse these responses correctly, leading to runtime errors and unpredictable behavior. The issue is reproducible on every score scale that uses numeric values.\n```",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-29T02:25:52.505Z",
    "updatedAt": "2025-07-02T13:52:38.720Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-77/api-returns-incorrect-data-types-for-multiple-fields-within-the"
  },
  {
    "id": "63ab09b9-bc98-4f5f-8659-fc6f80ee5dcf",
    "identifier": "BUG-76",
    "title": "OneRoster-AssessmentLineItems-POST-resultValueMin",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Assessment line item creation endpoint accepts the creation of assessment line items associated with resultValueMin that contains value that may be greater than the resultValueMax.\n\n**Summary:** \nAssessment line item creation endpoint accepts the creation of assessment line items associated with resultValueMin that contains value that may be greater than the resultValueMax.\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"2123\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"123\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"c254aac5-fc7d-4689-8eae-5ca92209e3df\"\n    },\n    \"resultValueMin\": 123,\n    \"resultValueMax\": 0,\n    \"componentResource\": {\n      \"sourcedId\": \"TEKSHI-Q1\"\n    },\n    \"learningObjectiveSet\": \\[\n      {\n        \"source\": \"common core\",\n        \"learningObjectiveIds\": \\[\n          \"\"\n        \\]\n      }\n    \\]\n  }\n}'\n\n**Expected:** \nAssessment line creation endpoint validation may reject requests associated with resultValueMin greater than resultValueMax.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-29T02:20:22.375Z",
    "updatedAt": "2025-07-01T22:53:47.503Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-76/oneroster-assessmentlineitems-post-resultvaluemin"
  },
  {
    "id": "bb09b95a-d8dc-457d-bd59-31457e8e0cd0",
    "identifier": "BUG-75",
    "title": "The OpenAPI specification for the `deleteSchool` operation is invalid. It defines a response body for the HTTP `204 No Content` status code. Specifically, under the `204` response, there is a `content` key with an `application/json` schema. This is a direct violation of the HTTP/1.1 specification (RFC 7231, Section 6.3.5), which explicitly states that a 204 response \"MUST NOT\" include a message-body.",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The OpenAPI specification for the `deleteSchool` operation is invalid. It defines a response body for the HTTP `204 No Content` status code. Specifically, under the `204` response, there is a `content` key with an `application/json` schema. This is a direct violation of the HTTP/1.1 specification (RFC 7231, Section 6.3.5), which explicitly states that a 204 response \"MUST NOT\" include a message-body.\n\n**Summary:** \nThe OpenAPI specification for the `deleteSchool` operation is invalid. It defines a response body for the HTTP `204 No Content` status code. Specifically, under the `204` response, there is a `content` key with an `application/json` schema. This is a direct violation of the HTTP/1.1 specification (RFC 7231, Section 6.3.5), which explicitly states that a 204 response \"MUST NOT\" include a message-body.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Open the OpenAPI specification file provided.\n2. Navigate to the path definition for `DELETE /ims/oneroster/rostering/v1p2/schools/{sourcedId}`.\n3. Examine the `responses` section for the `204` status code.\n4. Observe that it has a `content` section defining a JSON body, which violates the HTTP standard for a 204 response.\n\ncURL Command:\nN/A - This is a bug in the static OpenAPI specification file, not in a runtime behavior that can be triggered by a curl command.\n\n**Expected:** \nThe OpenAPI specification should be corrected to comply with the HTTP standard. The `content` section for the `204` response in the `deleteSchool` operation definition must be removed entirely. A `204` response only consists of headers and a status line; it has no body.\n\n**Environment:** This bug is located in the static OpenAPI specification file for the OneRoster API.\n\n**Additional Notes:** While this might not cause a runtime error in all clients, it is semantically incorrect and will cause issues with strict OpenAPI validation tools and code generators. It reflects a misunderstanding of the HTTP protocol and should be corrected to maintain the integrity and usability of the API documentation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T02:17:16.848Z",
    "updatedAt": "2025-07-03T05:33:23.940Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-75/the-openapi-specification-for-the-deleteschool-operation-is-invalid-it"
  },
  {
    "id": "e18722b2-933f-4760-985e-47175b746626",
    "identifier": "BUG-74",
    "title": "getAllSchools endpoint has broken pagination, returning duplicate and missing records when sorting",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**BUG-66: Unstable Sorting on getAllResources Endpoint**](https://linear.app/ae-studio/issue/BUG-66/unstable-sorting-on-getallresources-endpoint-when-paginating) - Similarity: 95% - Same pagination instability issue affecting different getAll endpoints. Human review needed.\n\n---\n\n**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilder.school)\n**API/Component:** OneRoster API\n**Bug Type:** When using offset-based pagination on the GET /ims/oneroster/rostering/v1p2/schools/ endpoint with the `sort=name` parameter, the pagination is unstable and returns incorrect results. The logs clearly show that the same school records are returned on different pages. For example, school `38b92089-03b4-4c48-86aa-934efd069c27` appears on both page 1 (offset=0) and page 2 (offset=3). This makes it impossible to reliably iterate through the full set of schools, as many records will be returned multiple times while others are likely skipped entirely.\n\n**Summary:** \nWhen using offset-based pagination on the GET /ims/oneroster/rostering/v1p2/schools/ endpoint with the `sort=name` parameter, the pagination is unstable and returns incorrect results. The logs clearly show that the same school records are returned on different pages. For example, school `38b92089-03b4-4c48-86aa-934efd069c27` appears on both page 1 (offset=0) and page 2 (offset=3). This makes it impossible to reliably iterate through the full set of schools, as many records will be returned multiple times while others are likely skipped entirely.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid Bearer token for the staging environment.\n2. Make a GET request to the /schools endpoint with `limit=3`, `offset=0`, and `sort=name`. Note the IDs of the returned schools.\n3. Make a second GET request to the /schools endpoint with `limit=3`, `offset=3`, and `sort=name`.\n4. Compare the `sourcedId`s from the second response with the first. You will observe that records from the first page are duplicated on the second page.\n\ncURL Commands (run sequentially):\n\n1. curl -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/?filter=status%3D'active'&limit=3&offset=0&orderBy=asc&sort=name](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/?filter=status%3D'active'&limit=3&offset=0&orderBy=asc&sort=name)' -H 'Authorization: Bearer <YOUR_VALID_TOKEN>'\n2. curl -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/?filter=status%3D'active'&limit=3&offset=3&orderBy=asc&sort=name](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/?filter=status%3D'active'&limit=3&offset=3&orderBy=asc&sort=name)' -H 'Authorization: Bearer <YOUR_VALID_TOKEN>'\n\n**Expected:** \nPagination should be stable...",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 4,
    "createdAt": "2025-06-29T02:14:44.359Z",
    "updatedAt": "2025-07-02T13:36:08.807Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-74/getallschools-endpoint-has-broken-pagination-returning-duplicate-and"
  },
  {
    "id": "6104a01a-4c50-4324-ac2a-8a1cd4b504e1",
    "identifier": "BUG-73",
    "title": "createSchool endpoint returns a response body that does not match the OpenAPI specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The POST /ims/oneroster/rostering/v1p2/schools/ endpoint (createSchool) returns a 201 Created status, but the response body is `{\"sourcedIdPairs\":{\"suppliedSourcedId\":\"...\",\"allocatedSourcedId\":\"...\"}}`. This directly contradicts the OpenAPI specification, which mandates that the response body for a 201 Created status must be a full 'Org' object. The provided logs confirm this violation, as the client-side SDK fails validation immediately after this call with the error \"Response validation failed\" due to all required 'Org' fields being absent.\n\n**Summary:** \nThe POST /ims/oneroster/rostering/v1p2/schools/ endpoint (createSchool) returns a 201 Created status, but the response body is `{\"sourcedIdPairs\":{\"suppliedSourcedId\":\"...\",\"allocatedSourcedId\":\"...\"}}`. This directly contradicts the OpenAPI specification, which mandates that the response body for a 201 Created status must be a full 'Org' object. The provided logs confirm this violation, as the client-side SDK fails validation immediately after this call with the error \"Response validation failed\" due to all required 'Org' fields being absent.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Obtain a valid Bearer token for the staging environment.\n2. Send a POST request to the /ims/oneroster/rostering/v1p2/schools/ endpoint with a valid JSON body to create a new school.\n3. Observe the response body. It will be a 'sourcedIdPairs' object, not the 'Org' object defined in the API specification.\n\ncURL Command:\ncurl -X POST \n'[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/)' \n-H 'Authorization: Bearer <YOUR_VALID_TOKEN>' \n-H 'Content-Type: application/json' \n-d '{\"org\": {\"name\": \"test-school-violation-1\", \"type\": \"school\", \"status\": \"active\"}}'\n\n**Expected:** \nAccording to the OpenAPI specification for the 'createSchool' operation, a successful 201 Created response must return a JSON body that conforms to the 'Org' schema. This means the response should be a complete JSON object representing the newly created school, including fields like 'sourcedId', 'status', 'dateLastModified', 'name', 'type', 'identifier', etc.\n\nExample of expected response body structure:\n{\n\"sourcedId\": \"e86d4df7-0d11-4cad-982c-c622dfc956d9\",\n\"status\": \"active\",\n\"dateLastModified\": \"2025-06-28T21:03:38.000Z\",\n\"name\": \"test-school-violation-1\",\n\"type\": \"school\",\n\"identifier\": \"\",\n\"children\": \\[\\]\n}\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/)\nSDK: speakeasy-sdk/typescript 0.7.0 2.640.2 1.0.0 @superbuilders/oneroster\nTimestamp of logged event: 2025/06/28 21:03:38\n\n**Additional Notes:** This is a critical bug because it breaks any client implementation that strictly follows the OpenAPI specification. The client cannot get the 'sourcedId' or other properties of the newly created resource from the response as documented, leading to application failure. The provided logs clearly show our own SDK failing because of this discrepancy.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-29T02:13:04.219Z",
    "updatedAt": "2025-07-03T18:23:27.920Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-73/createschool-endpoint-returns-a-response-body-that-does-not-match-the"
  },
  {
    "id": "8492bfd2-030c-49fb-9e86-99a34963e925",
    "identifier": "BUG-72",
    "title": "OneRoster-AssessmentLineItems-POST",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The assessment line item creation endpoint inappropriately accepts creation requests with redundant fields\n\n**Summary:** \nThe assessment line item creation endpoint inappropriately accepts creation requests with redundant fields\n\n**Steps to Reproduce:**\n{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"1235\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"123\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"c254aac5-fc7d-4689-8eae-5ca92209e3df3\",\n      \"sourcedId\": \"c254aac5-fc7d-4689-8eae-5ca92209e3df\"\n    },\n    \"resultValueMin\": null,\n    \"resultValueMax\": null,\n    \"componentResource\": {\n      \"sourcedId\": \"TEKSHI-Q1\"\n    },\n    \"learningObjectiveSet\": \\[\n      {\n        \"source\": \"common core\",\n        \"learningObjectiveIds\": \\[\n          \"\"\n        \\]\n      }\n    \\]\n  }\n}\n\n**Expected:** \nAppropriate endpoint body request schema validators may reject the aforementioned request and return appropriate HTTP status codes.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-29T02:12:39.051Z",
    "updatedAt": "2025-07-02T13:57:26.485Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-72/oneroster-assessmentlineitems-post"
  },
  {
    "id": "ed871e3c-1765-46dd-90c7-76684c4acee8",
    "identifier": "BUG-71",
    "title": "OneRoster-AssessmentLineItems-POST",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to create assessment line item and setting the parent assessment line item equal to the assessment line item sourcedId inappropriately succeeds. The server returns the following response.\n<response>\n{\n  \"sourcedIdPairs\": {\n    \"suppliedSourcedId\": \"123\",\n    \"allocatedSourcedId\": \"123\"\n  }\n}\n</response>\n\n**Summary:** \nAttempting to create assessment line item and setting the parent assessment line item equal to the assessment line item sourcedId inappropriately succeeds. The server returns the following response.\n<response>\n{\n  \"sourcedIdPairs\": {\n    \"suppliedSourcedId\": \"123\",\n    \"allocatedSourcedId\": \"123\"\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"123\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"c254aac5-fc7d-4689-8eae-5ca92209e3df\"\n    },\n    \"resultValueMin\": null,\n    \"resultValueMax\": null,\n    \"componentResource\": {\n      \"sourcedId\": \"TEKSHI-Q1\"\n    },\n    \"learningObjectiveSet\": \\[\n      {\n        \"source\": \"common core\",\n        \"learningObjectiveIds\": \\[\n          \"\"\n        \\]\n      }\n    \\]\n  }\n}'\n\n**Expected:** \nThe parent assessment line item sourcedId may be validated. The aforementioned request may be associated with an appropriate resource creation failure HTTP code.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-29T02:02:28.305Z",
    "updatedAt": "2025-07-02T13:56:46.168Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "OneRoster"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-71/oneroster-assessmentlineitems-post"
  },
  {
    "id": "3e325d84-2357-4d76-a0ba-e5c96043e6de",
    "identifier": "BUG-70",
    "title": "API Incorrectly Uses HTTP 422 Status Code for a Server-Side Data Integrity Error",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**BUG-69: getAllResults Endpoint Fails with 422 Error**](https://linear.app/ae-studio/issue/BUG-69/getallresults-endpoint-fails-with-422-error-on-pagination) - Similarity: 100% - Same pattern of incorrect 422 error handling for server-side data integrity issues. Human review needed.\n\n---\n\n**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returns an HTTP 422 Unprocessable Entity status code when it fails to process a request due to an internal, server-side data integrity issue. The error message in the logs indicates a data type mismatch for a field in a database record. A 422 status code implies that the server understands the request but cannot process it due to semantic errors in the request itself. In this case, the request is valid, and the error lies within the server's data.\n\n**Summary:** \nThe API returns an HTTP 422 Unprocessable Entity status code when it fails to process a request due to an internal, server-side data integrity issue. The error message in the logs indicates a data type mismatch for a field in a database record. A 422 status code implies that the server understands the request but cannot process it due to semantic errors in the request itself. In this case, the request is valid, and the error lies within the server's data.\n\n**Steps to Reproduce:**\nThis bug is reproduced with the same steps as the previous report, as it is a different interpretation of the same failed request.\n\nHuman-Friendly Steps:\n\nMake a GET request to the getAllResults endpoint with parameters that would cause the server to process a known corrupt record (e.g., offset=114).\n\nObserve the HTTP status code in the response.\n\ncURL Steps:\n\ncurl -v -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/?filter=status%3D'active'&limit=3&offset=114](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/?filter=status%3D'active'&limit=3&offset=114)' \n-H 'accept: application/json' \n-H 'authorization: Bearer \\[YOUR_TOKEN_HERE\\]'\n\nObserve that the response status line is HTTP/2 422 Unprocessable Entity.\n\n**Expected:** \nThe API should use HTTP status codes correctly according to their definitions in the HTTP/REST specifications.\n\n4xx-class status codes (e.g., 422) are for client errors. The request from the client is syntactically and semantically correct, as proven by the fact that requests with different offset values succeed.\n\n5xx-class status codes (e.g., 500) are for server errors. The server encountered an unexpected condition (corrupt internal data) that prevented it from fulfilling a valid request.\n\nTherefore, the API should have returned a 500 Internal Server Error. This would correctly inform the client that the fault...",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T01:59:10.969Z",
    "updatedAt": "2025-07-03T05:25:36.232Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-70/api-incorrectly-uses-http-422-status-code-for-a-server-side-data"
  },
  {
    "id": "0d3b2b38-667f-46c9-ae15-09dffc00e514",
    "identifier": "BUG-69",
    "title": "getAllResults Endpoint Fails with 422 Error on Pagination Due to a Single Malformed Record",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** A valid paginated request to the getAllResults endpoint fails with a 422 Unprocessable Entity error when the server encounters a single record with malformed data in its database. The error details state: {\"path\": \"learningObjectiveSet\", \"message\": \"Expected array, received object\"}. This indicates a server-side data integrity problem is causing a valid client request to fail, effectively breaking the endpoint's core pagination functionality and preventing access to the full dataset.\n\n**Summary:** \nA valid paginated request to the getAllResults endpoint fails with a 422 Unprocessable Entity error when the server encounters a single record with malformed data in its database. The error details state: {\"path\": \"learningObjectiveSet\", \"message\": \"Expected array, received object\"}. This indicates a server-side data integrity problem is causing a valid client request to fail, effectively breaking the endpoint's core pagination functionality and preventing access to the full dataset.\n\n**Steps to Reproduce:**\nTo reproduce this bug, you must paginate through the `getAllResults` endpoint. Initial requests with lower offsets succeed, but a request with `offset=114` fails due to a single corrupt record in the database that would have been part of that page's result set. This makes it impossible to retrieve all records.\n\n**Human-Friendly Steps:**\n\n1. Begin paginating through the `getAllResults` endpoint with a `limit` of 3.\n2. Observe that initial requests (e.g., `offset=0`, `offset=3`, etc.) succeed with a 200 OK status.\n3. Make a request with `offset=114`.\n4. Observe that the request fails with a `422 Unprocessable Entity` error, blocking any further pagination.\n\n**cURL Steps:**\n\nFirst, run a command that succeeds to show the API is generally working:\n\n```bash\ncurl -X GET 'https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/?filter=status%3D%27active%27&limit=3&offset=111' \\\n-H 'accept: application/json' \\\n-H 'authorization: Bearer [YOUR_TOKEN_HERE]'\n\n\nThis will return a 200 OK with 3 results.\n\nNext, run the command that fails by simply incrementing the offset:\n\nGenerated bash\ncurl -X GET 'https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/?filter=status%3D%27active%27&limit=3&offset=114' \\\n-H 'accept: application/json' \\\n-H 'authorization: Bearer [YOUR_TOKEN_HERE]'\n\nThis will return a 422 Unprocessable Entity error.\n\n**Expected:** \nThe API must be resilient to its own data corruption. A valid client request should not fail because of a malformed record in the database. The API should handle this server-side issue gracefully.\n\nThe OpenAPI specification for the learningObjectiveSet field is:\n\nGenerated yaml\nlearningObjectiveSet:\n  type:\n    - array\n    - 'null'\n\nThe error message Expected array, received object confirms a record in the database violates this spec.\n\nThe correct behavior should be one of the following:\n\n(Ideal): The server should skip the single malformed record and return the other valid records for that page.\n\n(Acceptable): The server should return a 500 Internal Server Error. This would correctly attribute the failure to the server, not the client, as the client's request is perfectly valid.\n\n(Less Ideal): The server could return the malformed record but with the learningObjectiveSet field coerced to null to conform to the spec.\n\nUnder no circumstances should a valid client request result in a 422 Unprocessable Entity error due to a server-side data problem.\n\n\n**Environment:** API Endpoint: https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/results/\nUser-Agent from logs: speakeasy-sdk/typescript 0.7.0 2.640.2 1.0.0 @superbuilders/oneroster\nThe issue was observed during a standard pagination test as shown in the provided logs.\n**Additional Notes:** This bug is critical because it breaks a fundamental function of the API: the ability to retrieve all resources of a given type. Any client attempting to sync or process all results will fail and be unable to proceed. It also indicates a lack of defensive programming and error handling on the server, as it's not resilient to its own data integrity issues. The API is violating its own contract as defined in the OpenAPI spec by failing to handle a record that does not conform to the specified schema.\n```",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-29T01:57:01.541Z",
    "updatedAt": "2025-07-03T16:45:57.400Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-69/getallresults-endpoint-fails-with-422-error-on-pagination-due-to-a"
  },
  {
    "id": "78283563-4b5e-4f81-a211-fafa57789d0c",
    "identifier": "BUG-68",
    "title": "OneRoster-AcademicSessions-POST",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**BUG-65: OneRoster-AcademicSessions-POST**](https://linear.app/ae-studio/issue/BUG-65/oneroster-academicsessions-post) - Similarity: 90% - Same foreign key constraint violation pattern for assessment_line_items class_sourced_id. Human review needed.\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to create assessment line item associated with nonexistent component sourcedId returns the following error.\n<e>\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"\"\n    },\n    \"resultValueMin\": null,\n    \"resultValueMax\": null,\n    \"component\": {\n      \"sourcedId\": \"\"\n    },\n    \"componentResource\": {\n      \"sourcedId\": \"\"\n    },\n    \"learningObjectiveSet\": \\[\n      {\n        \"source\": \"\",\n        \"learningObjectiveIds\": \\[\n          \"\"\n        \\]\n      }\n    \\]\n  }\n}'\n</e>\n\n**Summary:** \nAttempting to create assessment line item associated with nonexistent component sourcedId returns the following error.\n<e>\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"1273-ap-world-history-modern-pp100-class-id\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"\"\n    },\n    \"resultValueMin\": null,\n    \"resultValueMax\": null,\n    \"component\": {\n      \"sourcedId\": \"\"\n    },\n    \"componentResource\": {\n      \"sourcedId\": \"\"\n    },\n    \"learningObjectiveSet\": \\[\n      {\n        \"source\": \"\",\n        \"learningObjectiveIds\": \\[\n          \"\"\n        \\]\n      }\n    \\]\n  }\n}'\n</e>\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/)...",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-29T01:50:39.798Z",
    "updatedAt": "2025-07-01T22:52:28.363Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-68/oneroster-academicsessions-post"
  },
  {
    "id": "5b3be5bd-ae8a-46bb-ab67-934b7ce49382",
    "identifier": "BUG-67",
    "title": "[Critical] `PUT /resources/{id}` Request Body Schema is Incorrectly Validated",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The server rejected a valid, spec-compliant `PUT` request with a `422 Unprocessable Entity` error. The error message indicates it expects the request payload to be wrapped in a `resource` object, which is the schema for the `POST` endpoint, not the `PUT` endpoint.\n\n**Summary:** \nThe server rejected a valid, spec-compliant `PUT` request with a `422 Unprocessable Entity` error. The error message indicates it expects the request payload to be wrapped in a `resource` object, which is the schema for the `POST` endpoint, not the `PUT` endpoint.\n\n**Steps to Reproduce:**\nHuman-Readable Steps:\n\n1. First, create a resource to obtain a valid `sourcedId` by sending a `POST` request.\n2. Next, send a `PUT` request to the endpoint `https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/{sourcedId}`, using the `sourcedId` from step 1.\n3. The body of the `PUT` request should be a flat JSON object as defined in the OpenAPI spec, for example: `{ \"title\": \"new-title\" }`.\n4. Observe that the server returns a 422 Unprocessable Entity error. The error message `path: \"body.resource\", message: \"Required\"` demonstrates that the server is incorrectly expecting the request body to be nested within a \"resource\" object, like `{ \"resource\": { \"title\": \"new-title\" } }`. This contradicts the OpenAPI specification for the PUT method and appears to be mistakenly using the validation schema from the POST method.\n\n---\n\ncURL Steps:\n\n# Step 1: Create a resource to get a sourcedId. Note the `allocatedSourcedId` in the response.\n\ncurl --location --request POST '[https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/](https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/)' \n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \n--header 'Content-Type: application/json' \n--data '{\n    \"resource\": {\n        \"status\": \"active\",\n        \"title\": \"resource-for-put-test\",\n        \"vendorResourceId\": \"vendor-resource-for-put-test\"\n    }\n}'\n\n# Step 2: Attempt to update the resource using a spec-compliant flat request body.\n\n# Replace {YOUR_SOURCED_ID} with the ID from Step 1.\n\ncurl --location --request PUT '[https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/{YOUR_SOURCED_ID}](https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/%7BYOUR_SOURCED_ID%7D)' \n--header 'Authorization: Bearer YOUR_BEARER_TOKEN' \n--header 'Content-Type: application/json' \n--data '{\n    \"title\": \"updated-title\"\n}'\n\n**Expected:** \nAccording to the OpenAPI specification for `PUT /ims/oneroster/resources/v1p2/resources/{sourcedId}`, the request body is a flat object containing the fields to be updated. The server should accept this payload, update the corresponding resource, and return a `200 OK` status code. The validation logic should not require a `resource` object wrapper for PUT requests.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/{sourcedId}](https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/%7BsourcedId%7D)\nThe bug was identified from logs generated on 2025-06-28.\n**Additional Notes:** This bug makes the `updateResource` endpoint unusable as documented, breaking a fundamental CRUD operation. The server is incorrectly applying the validation schema from the POST endpoint to the PUT endpoint.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-29T01:49:20.656Z",
    "updatedAt": "2025-07-01T22:52:21.120Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-67/critical-put-resourcesid-request-body-schema-is-incorrectly-validated"
  },
  {
    "id": "7116990d-f09f-4064-8615-607eda708577",
    "identifier": "BUG-66",
    "title": "Unstable Sorting on getAllResources Endpoint When Paginating",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** When paginating through sorted results using the `sort` and `offset` parameters, the sort order is not stable between requests. A resource with a lexicographically smaller title (\"...Question 3\") appears on a later page than a resource with a larger title (\"...Question 29\"). This indicates the underlying data set is re-ordered between calls, making reliable pagination impossible and causing records to be skipped or duplicated across pages.\n\n**Summary:** \nWhen paginating through sorted results using the `sort` and `offset` parameters, the sort order is not stable between requests. A resource with a lexicographically smaller title (\"...Question 3\") appears on a later page than a resource with a larger title (\"...Question 29\"). This indicates the underlying data set is re-ordered between calls, making reliable pagination impossible and causing records to be skipped or duplicated across pages.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\n1. Make a series of paginated GET requests to the `/ims/oneroster/resources/v1p2/resources/` endpoint with `sort=title` and `orderBy=asc`, using a `limit` of 3.\n2. The log shows that a request with `offset=9894` returns records where a title \"Which word is a noun? - Question 3\" appears after \"Which word is a noun? - Question 29\".\n3. The very next request with `offset=9897` then returns a page containing only records with the title \"Which word is a noun? - Question 3\".\n4. This demonstrates that the sort order is not stable across paginated requests, as the dataset's order changes between API calls.\n\n---\n\nCURL Request Steps:\n\n1. Execute the first request and observe the inconsistent sorting in the response body.\n   `curl -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/?filter=status%3D%27active%27&limit=3&offset=9894&orderBy=asc&sort=title\" -H \"Authorization: Bearer <YOUR_TOKEN>\"`\n2. Execute the second request and observe that the result set seems to have \"reset\" its position in the sort order, repeating items that should have appeared on earlier pages.\n   `curl -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/resources/v1p2/resources/?filter=status%3D%27active%27&limit=3&offset=9897&orderBy=asc&sort=title\" -H \"Authorization: Bearer <YOUR_TOKEN>\"`\n\n**Expected:** \nThe sorting should be stable across all paginated requests. When using `sort` and `offset`, the order of items must be deterministic and consistent, ensuring that a client can iterate through all pages without encountering skipped or repeated records. Each page should be a contiguous block of the fully sorted dataset.\n\n**Environment:** API: [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com). The issue was observed in the provided logs dated Sun, 29 Jun 2025.\n**Additional Notes:** This bug makes it impossible for a client to reliably retrieve a complete, sorted list of all resources, as the pagination contract is broken. This is a severe issue for any data synchronization or comprehensive listing feature.",
    "state": {
      "name": "In Review",
      "type": "started"
    },
    "priority": 4,
    "createdAt": "2025-06-29T01:38:42.496Z",
    "updatedAt": "2025-07-02T13:36:08.804Z",
    "assignee": {
      "name": "Marcelo Pereira",
      "email": "marcelo.pereira@ae.studio"
    },
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-66/unstable-sorting-on-getallresources-endpoint-when-paginating"
  },
  {
    "id": "f40dd49f-248a-41eb-8f29-ec86e269b75c",
    "identifier": "BUG-65",
    "title": "OneRoster-AcademicSessions-POST",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to create an assessment line item associated with a nonexistent class returns the following error.\n<error>\nerror: insert or update on table \"assessment_line_items\" violates foreign key constraint \"assessment_line_items_class_sourced_id_classes_sourced_id_fk\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async AssessmentService.postAssessmentLineItem (file:///app/dist/server/modules/assessments/service.js:23:23)\n    at async file:///app/dist/server/common/handlers.js:102:22\n</error>\n\n**Summary:** \nAttempting to create an assessment line item associated with a nonexistent class returns the following error.\n<error>\nerror: insert or update on table \"assessment_line_items\" violates foreign key constraint \"assessment_line_items_class_sourced_id_classes_sourced_id_fk\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async AssessmentService.postAssessmentLineItem (file:///app/dist/server/modules/assessments/service.js:23:23)\n    at async file:///app/dist/server/common/handlers.js:102:22\n</error>\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"assessmentLineItem\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"dateLastModified\": \"2025-06-28T14:30:00.123Z\",\n    \"title\": \"\",\n    \"description\": \"Test assessment line item\",\n    \"class\": {\n      \"sourcedId\": \"\"\n    },\n    \"parentAssessmentLineItem\": {\n      \"sourcedId\": \"\"\n    },\n    \"scoreScale\": {\n      \"sourcedId\": \"\"\n    },\n    \"resultValueMin\": null,\n    \"resultValueMax\": null,\n    \"component\": {\n      \"sourcedId\": \"\"\n    },\n    \"componentResource\": {\n      \"sourcedId\": \"\"\n    },\n    \"learningObjectiveSet\": \\[\n      {\n        \"source\": \"\",\n        \"learningObjectiveIds\": \\[\n          \"\"\n        \\]\n      }\n    \\]\n  }\n}'\n\n**Expected:** \nAttempting to create an assessment line item associated with a nonexistent class may be handled through appropriate HTTP status codes and appropriate server responses.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-29T01:34:40.821Z",
    "updatedAt": "2025-07-01T22:52:27.156Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-65/oneroster-academicsessions-post"
  },
  {
    "id": "ce91e292-fe26-4db1-ace4-849e51597e45",
    "identifier": "BUG-64",
    "title": "GET /schools/{schoolId}/classes/{classId}/teachers returns 500 Internal Server Error (SQL \u201cusers.role\u201d column missing)",
    "description": "**Reporter:** Kay (kutlu.okan@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** When I call GET /ims/oneroster/rostering/v1p2/schools/{schoolId}/classes/{classId}/teachers, the API crashes instead of returning JSON. It responds with HTTP 500 and an HTML error page showing a PostgreSQL stack-trace:\n\u201cerror: column users.role does not exist / missing FROM-clause entry for table 'user_roles'.\u201d\n\n**Summary:** \nWhen I call GET /ims/oneroster/rostering/v1p2/schools/{schoolId}/classes/{classId}/teachers, the API crashes instead of returning JSON. It responds with HTTP 500 and an HTML error page showing a PostgreSQL stack-trace:\n\u201cerror: column users.role does not exist / missing FROM-clause entry for table 'user_roles'.\u201d\n\n**Steps to Reproduce:**\ncurl -v -X POST -H \"Authorization: Bearer $TOKEN\" \n-H \"Content-Type: application/json\" \n-d '{}' \n\"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/827d69dc-1312-4b07-89e3-c2e2d9822fb1/classes/3AD9D3EECC894ADA9215F597890FBE94/teachers](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/schools/827d69dc-1312-4b07-89e3-c2e2d9822fb1/classes/3AD9D3EECC894ADA9215F597890FBE94/teachers)\"\n\n**Expected:** \nThe endpoint should respond gracefully according to the OneRoster spec.\n\n**Environment:** Linux\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-29T00:26:55.138Z",
    "updatedAt": "2025-07-01T22:51:57.015Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-64/get-schoolsschoolidclassesclassidteachers-returns-500-internal-server"
  },
  {
    "id": "94541b7e-098b-48c8-8295-33ebff810587",
    "identifier": "BUG-63",
    "title": "PUT /orgs/{sourcedId} returns incorrect HTTP status 201 Created and is missing Content-Type header",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** When updating an existing organization via a PUT request, the API responds with a 201 Created status code. The response also has a content-length of 0 but is missing the Content-Type header. This caused the test script to crash because the SDK expected a 200 OK or 204 No Content for a successful update, not 201 Created.\n\n**Summary:** \nWhen updating an existing organization via a PUT request, the API responds with a 201 Created status code. The response also has a content-length of 0 but is missing the Content-Type header. This caused the test script to crash because the SDK expected a 200 OK or 204 No Content for a successful update, not 201 Created.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\nCreate a new organization using a POST request to /orgs. Note the sourcedId from the response.\n\nUpdate the newly created organization using a PUT request to /orgs/{sourcedId} with a new name.\n\nObserve that the server responds with a 201 Created status code and no Content-Type header, which is incorrect for an update operation.\n\ncURL Steps:\n\nCreate a new organization and extract its sourcedId:\n\nGenerated bash\n\n# The 'jq' command requires the jq utility to be installed.\n\n# Alternatively, manually copy the allocatedSourcedId from the response.\n\nSOURCED_ID=$(curl -s -X POST \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/)\" \n-H \"accept: application/json\" \n-H \"authorization: Bearer <YOUR_BEARER_TOKEN>\" \n-H \"content-type: application/json\" \n-d '{\"org\":{\"status\":\"active\",\"name\":\"bug-report-org-2\",\"type\":\"district\"}}' | jq -r '.sourcedIdPairs.allocatedSourcedId')\n\necho \"Created org with sourcedId: $SOURCED_ID\"\n\nUpdate the organization using a PUT request and observe the headers (-i flag):\n\nGenerated bash\ncurl -i -X PUT \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/$SOURCED_ID](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/$SOURCED_ID)\" \n-H \"accept: application/json\" \n-H \"authorization: Bearer <YOUR_BEARER_TOKEN>\" \n-H \"content-type: application/json\" \n-d '{\"org\":{\"status\":\"active\",\"name\":\"bug-report-org-2-updated\",\"type\":\"district\"}}'\n\n**Expected:** \nAccording to HTTP standards and the openapi spec, a PUT request that updates an existing resource should respond with:\n\n200 OK if the response body contains a representation of the updated resource.\n\n204 No Content if the response body is empty.\n\nThe status code 201 Created should only be used when a new resource is created, such as from a POST request or a PUT that creates a resource at a client-specified URI. The current behavior is misleading and breaks standard client implementations.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/{sourcedId}](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/%7BsourcedId%7D)\nSDK: @superbuilders/oneroster (speakeasy-sdk/typescript 0.7.0)\nTimestamp: 2025/06/28 18:47:30\n**Additional Notes:** This is a clear violation of the OpenAPI spec, REST principles and the HTTP specification. It directly caused the test script to fail and will likely cause issues for any standard-compliant API client or SDK. The deleteOrg call in the log is a cleanup attempt after the updateOrg call failed in the script.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T23:56:22.765Z",
    "updatedAt": "2025-07-02T11:57:07.323Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-63/put-orgssourcedid-returns-incorrect-http-status-201-created-and-is"
  },
  {
    "id": "b9dfd782-5b29-4263-8d99-5c7ef5965b44",
    "identifier": "BUG-62",
    "title": "Unstable sorting in getAllOrgs causes duplicate records and broken pagination",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** When making paginated requests to the getAllOrgs endpoint with sort=name, the sorting is not stable. Because many organizations have an identical name (e.g., an empty string), the API returns the same records on different pages. This makes it impossible for a client to reliably iterate through the full set of organizations, as some will be duplicated and others may be skipped entirely.\n\n**Summary:** \nWhen making paginated requests to the getAllOrgs endpoint with sort=name, the sorting is not stable. Because many organizations have an identical name (e.g., an empty string), the API returns the same records on different pages. This makes it impossible for a client to reliably iterate through the full set of organizations, as some will be duplicated and others may be skipped entirely.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\nMake a paginated request to the getAllOrgs endpoint, sorting by the name field, with a limit of 5 and offset of 0.\n\nNote the sourcedId values returned.\n\nMake a second request, incrementing the offset to 5.\n\nObserve that some of the sourcedId values from the first request appear again in the second request.\n\ncURL Steps:\n\nRun the first request (Page 1):\n\nGenerated bash\ncurl -X GET \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/?filter=status%3D'active'&limit=5&offset=0&sort=name](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/?filter=status%3D%27active%27&limit=5&offset=0&sort=name)\" \n-H \"accept: application/json\" \n-H \"authorization: Bearer <YOUR_BEARER_TOKEN>\"\n\nNote the sourcedId values in the response, for example: 3038078d-71e4-4d27-9ccc-eab6ccd7368c.\n\nRun the second request (Page 2):\n\nGenerated bash\ncurl -X GET \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/?filter=status%3D'active'&limit=5&offset=5&sort=name](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/?filter=status%3D%27active%27&limit=5&offset=5&sort=name)\" \n-H \"accept: application/json\" \n-H \"authorization: Bearer <YOUR_BEARER_TOKEN>\"\n\nObserve that the same sourcedId (3038078d-71e4-4d27-9ccc-eab6ccd7368c) appears again in this response.\n\n**Expected:** \nThe API should implement stable sorting. When the primary sort field (name) has identical values for multiple records, a unique secondary sort key (such as sourcedId) should be used to break ties. This would ensure that each record appears exactly once in the paginated results and the order is consistent between requests.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/)\nSDK: @superbuilders/oneroster (speakeasy-sdk/typescript 0.7.0)\nTimestamp: 2025/06/28 18:47:26\n**Additional Notes:** This bug breaks a fundamental data retrieval feature and prevents clients from building a complete and accurate list of all organizations. The issue is most prominent when sorting on fields with low cardinality, like name in the provided test data.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T23:54:06.863Z",
    "updatedAt": "2025-07-02T13:37:04.731Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-62/unstable-sorting-in-getallorgs-causes-duplicate-records-and-broken"
  },
  {
    "id": "80b22cd2-bc17-4f65-b3b5-210329107bb9",
    "identifier": "BUG-61",
    "title": "Data Integrity Violation: API accepts an 'object' for learningObjectiveSet field on write operations, violating the schema which requires an 'array'.",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API endpoints that handle creating or updating line items (POST or PUT) do not correctly validate the data type of the learningObjectiveSet field. The API incorrectly accepts a JSON object for this field. This action directly violates the OpenAPI specification, which explicitly defines learningObjectiveSet as a type that can be an array or null, but not an object. This allows corrupted, schema-non-compliant data to be persisted in the database.\n\n**Summary:** \nThe API endpoints that handle creating or updating line items (POST or PUT) do not correctly validate the data type of the learningObjectiveSet field. The API incorrectly accepts a JSON object for this field. This action directly violates the OpenAPI specification, which explicitly defines learningObjectiveSet as a type that can be an array or null, but not an object. This allows corrupted, schema-non-compliant data to be persisted in the database.\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\nIdentify a sourcedId for an existing lineItem to update.\n\nSend a PUT request to the endpoint for that specific line item. (Note: The endpoint is inferred as /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId} based on standard REST practices).\n\nIn the JSON request body, set the learningObjectiveSet field to be a single JSON object instead of an array of objects as required by the OpenAPI specification.\n\nObserve that the API server accepts this request (likely with a 200 OK status), thereby writing malformed data to the database. This is the root bug.\n\nAs a secondary verification, attempting to GET a collection of line items that includes this corrupted record will then fail with a 422 error, as seen in the logs.\n\ncURL Request:\n\nGenerated bash\n\n# This cURL demonstrates the PUT request that introduces the corrupt data.\n\n# Replace <VALID_LINEITEM_ID> with the sourcedId of a real line item.\n\ncurl -X PUT '[https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/)<VALID_LINEITEM_ID>' \n-H 'accept: application/json' \n-H 'Content-Type: application/json' \n-H 'Authorization: Bearer <YOUR_BEARER_TOKEN>' \n-d '{\n  \"lineItem\": {\n    \"title\": \"Item to test data corruption\",\n    \"learningObjectiveSet\": { \n      \"source\": \"Invalid Object Type\", \n      \"learningObjectiveIds\": \\[\"objective-1\", \"objective-2\"\\] \n    }\n  }\n}'\n\n**Expected:** \nThe API must perform strict schema validation on all incoming write requests (POST/PUT). When a request is received containing a learningObjectiveSet field that is an object, the server must reject the request. It should return a 400 Bad Request or 422 Unprocessable Entity error with a clear message indicating that the learningObjectiveSet field must be an array of objects. The API must never allow schema-violating data to be saved.\n\n**Environment:** API Server: [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n\nInferred Endpoint: PUT /ims/oneroster/gradebook/v1p2/lineItems/{sourcedId}\n\nTimestamp of discovery: 2025/06/28 18:40:17 (when the GET request failed due to this data)\n**Additional Notes:** This is a critical data integrity bug. It is the root cause of the 422 failure observed on the GET /lineItems collection endpoint. Allowing invalid data to be written to the system creates cascading failures, making other parts of the API unreliable and difficult to debug. Preventing the creation of corrupt data is paramount.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T23:44:59.990Z",
    "updatedAt": "2025-07-02T13:29:26.576Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-61/data-integrity-violation-api-accepts-an-object-for"
  },
  {
    "id": "54162a99-928b-432f-8c00-70950f37ef1a",
    "identifier": "BUG-60",
    "title": "API error response for imsx_description uses incorrect casing, causing client-side validation failures",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returned an error response where imsx_description has the value \"Invalid Data\" (PascalCase). The client-side SDK, however, was expecting a specific lowercase literal, \"invaliddata\", as shown by the log error: Invalid literal value, expected \"invaliddata\". This indicates a mismatch in the expected enumeration or literal value between the server's response and the client's schema definition.\nWhat Should Happen?\n\n**Summary:** \nThe API returned an error response where imsx_description has the value \"Invalid Data\" (PascalCase). The client-side SDK, however, was expecting a specific lowercase literal, \"invaliddata\", as shown by the log error: Invalid literal value, expected \"invaliddata\". This indicates a mismatch in the expected enumeration or literal value between the server's response and the client's schema definition.\nWhat Should Happen?\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\nTrigger any API error that returns an IMS-standard error response, such as the 422 error from the previous bug report.\n\nInspect the JSON body of the error response.\n\nNote the value of the imsx_description field.\n\ncURL Request:\n(This is the same request as Bug 1 , as it reliably reproduces this error response)\n\nGenerated bash\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/?filter=status%3D'active'&limit=3&offset=0&orderBy=asc&sort=title](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/?filter=status%3D%27active%27&limit=3&offset=0&orderBy=asc&sort=title)' \n-H 'accept: application/json' \n-H 'Authorization: Bearer <YOUR_BEARER_TOKEN>'\nIGNORE_WHEN_COPYING_START\ncontent_copy\ndownload\nUse code with caution.\nBash\nIGNORE_WHEN_COPYING_END\n\n**Expected:** \nThe API server should return error codes and descriptions that strictly adhere to a consistent, documented schema. If the schema expects lowercase enum values (e.g., \"invaliddata\"), the server must return \"invaliddata\", not \"Invalid Data\". Case-sensitivity is crucial for machine-to-machine communication and client-side validation.\nEnvironment Details\n\n**Environment:** API Server: [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n\nEndpoint: GET /ims/oneroster/gradebook/v1p2/lineItems/\n\nTimestamp: 2025/06/28 18:25:29\n**Additional Notes:** This bug breaks automatically generated SDKs and clients that perform strict validation on response bodies. It forces developers to implement custom, brittle parsing logic to account for inconsistent casing from the server.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-28T23:33:12.842Z",
    "updatedAt": "2025-07-01T22:51:20.880Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-60/api-error-response-for-imsx-description-uses-incorrect-casing-causing"
  },
  {
    "id": "d07a8d06-1ad3-4a10-9be0-6ce87ef6e906",
    "identifier": "BUG-59",
    "title": "API endpoint GET /lineItems fails with 422 Unprocessable Entity when a single record in the result set is malformed",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returned a 422 Unprocessable Entity error with the message \"Expected array, received object\" for the path \"learningObjectiveSet\". The entire request fails because a single record that matches the filter criteria has corrupt data. This makes it impossible to list any line items if even one is malformed.\nWhat Should Happen?\n\n**Summary:** \nThe API returned a 422 Unprocessable Entity error with the message \"Expected array, received object\" for the path \"learningObjectiveSet\". The entire request fails because a single record that matches the filter criteria has corrupt data. This makes it impossible to list any line items if even one is malformed.\nWhat Should Happen?\n\n**Steps to Reproduce:**\nHuman-Friendly Steps:\n\nEnsure there is at least one lineItem record in the database where the learningObjectiveSet field is an object instead of the required array or null.\n\nMake an API call to the GET /ims/oneroster/gradebook/v1p2/lineItems/ endpoint.\n\nInclude a filter that will match the malformed record, for example ?filter=status%3D%27active%27.\n\nObserve the API response.\n\ncURL Request:\n\nGenerated bash\ncurl -X GET '[https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/?filter=status%3D'active'&limit=3&offset=0&orderBy=asc&sort=title](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/lineItems/?filter=status%3D%27active%27&limit=3&offset=0&orderBy=asc&sort=title)' \n-H 'accept: application/json' \n-H 'Authorization: Bearer <YOUR_BEARER_TOKEN>'\n\n**Expected:** \nThe API should gracefully handle data corruption in individual records on a collection GET endpoint. It should either:\n\nSkip the single malformed record and return a 200 OK response with the remaining valid line items.\n\nReturn the malformed record but with the learningObjectiveSet field as null to conform to the schema.\n\nAt worst, it should return a 500 Internal Server Error to indicate an unexpected server-side state, not a 422 which implies a client-side syntax issue.\n\nA GET request for a collection should not fail entirely due to a single bad record.\n\n**Environment:** \nAPI Server: [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n\nEndpoint: GET /ims/oneroster/gradebook/v1p2/lineItems/\n\nTimestamp: 2025/06/28 18:25:27\n**Additional Notes:** This bug makes the getAllLineItems endpoint unreliable and can cause a complete outage of functionality for clients if any data integrity issues arise on the backend. The API should be resilient to such issues.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-28T23:30:34.872Z",
    "updatedAt": "2025-07-03T16:50:25.152Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-59/api-endpoint-get-lineitems-fails-with-422-unprocessable-entity-when-a"
  },
  {
    "id": "a38461e3-bf45-43ab-9218-883996fab7c9",
    "identifier": "BUG-58",
    "title": "Inconsistent 'schoolYear' Data Type: API Accepts String but Returns Number, Violating Its Own Specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returns the schoolYear field as a number in GET responses but accepts it as a string in POST/PUT requests. This creates a data type mismatch between read and write operations and violates the API's own OpenAPI specification.\n\n**Summary:** \nThe API returns the schoolYear field as a number in GET responses but accepts it as a string in POST/PUT requests. This creates a data type mismatch between read and write operations and violates the API's own OpenAPI specification.\n\n**Steps to Reproduce:**\n\n#### Summary\n\nThe API exhibits inconsistent behavior regarding the `schoolYear` field for academic sessions, directly contradicting its own OpenAPI specification. The `GET /gradingPeriods/` endpoint correctly returns `schoolYear` as a JSON number (e.g., `2024`), and its OpenAPI specification defines it as `type: number`. However, the `POST` endpoints for creating academic sessions incorrectly accept `schoolYear` as a JSON string (e.g., `\"2025\"`). This inconsistency violates the API's own contract and can cause deserialization errors in strictly-typed client applications.\n\n#### Human-Friendly Reproduction Steps:\n\n1. Make a GET request to the `/ims/oneroster/rostering/v1p2/gradingPeriods/` endpoint.\n2. Observe the response and note that the `schoolYear` field is a number (e.g., `2024`), which matches the OpenAPI spec.\n3. Now, create a new academic session (e.g., a term) by making a POST request to `/ims/oneroster/rostering/v1p2/academicSessions/`.\n4. In the request body, provide the `schoolYear` as a string (e.g., `\"2025\"`), which contradicts the spec.\n5. Observe that the request is accepted successfully, demonstrating the API accepts a string for a field that its specification defines as a number.\n\n#### cURL Reproduction:\n\n**Step 1: Observe the returned data type (Number, as per spec)**\n\n```bash\n# This request shows that the API returns `schoolYear` as a number, which is correct.\n# Note the lack of quotes around the value for `schoolYear` in the response.\ncurl -X GET 'https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/gradingPeriods/?limit=1' \\\n  -H 'Authorization: Bearer <TOKEN>' \\\n  -H 'Accept: application/json'\n\n\nExpected a response snippet like: ...\"schoolYear\": 2024,...\n\nStep 2: Observe the accepted data type (String, violating spec)\n\nGenerated bash\n# This request shows that the API incorrectly accepts `schoolYear` as a string.\n# A prerequisite is having a valid org sourcedId.\n# The logs show '84515b71-7026-4c0f-8d4d-7778454dfd8d' is a valid org sourcedId.\nUNIQUE_ID=\"term-$(date +%s)\"\ncurl -X POST 'https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/' \\\n  -H 'Authorization: Bearer <TOKEN>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"academicSession\": {\n      \"sourcedId\": \"'$UNIQUE_ID'\",\n      \"status\": \"active\",\n      \"title\": \"Test Term for Type Bug\",\n      \"startDate\": \"2025-01-01\",\n      \"endDate\": \"2025-12-31\",\n      \"type\": \"term\",\n      \"schoolYear\": \"2025\",\n      \"org\": {\n        \"sourcedId\": \"84515b71-7026-4c0f-8d4d-7778454dfd8d\"\n      }\n    }\n  }'\nIGNORE_WHEN_COPYING_START\ncontent_copy\ndownload\nUse code with caution.\nBash\nIGNORE_WHEN_COPYING_END\n\nA successful 201 Created response confirms the bug.\n\n**Expected:** \nThe API must be consistent and adhere to its own specification. The provided OpenAPI spec for OneRoster v1.2 correctly defines schoolYear as type: number. Therefore, the API should enforce this type on write operations (POST/PUT) by rejecting requests that provide schoolYear as a string and returning a 400 Bad Request error. The GET operation is already behaving correctly.\n\n\n**Environment:** API Endpoint: https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/\n\nObserved in logs dated: 2025/06/28 17:54:32\n**Additional Notes:** This type of inconsistency can lead to subtle bugs and serialization/deserialization issues in client applications, especially those generated from the OpenAPI spec or written in strongly-typed languages. The official OneRoster spec (as reflected in the provided OpenAPI doc) implies a numeric year, and strict adherence is crucial for interoperability and developer experience.\n```",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-28T23:24:17.299Z",
    "updatedAt": "2025-07-02T01:20:53.825Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-58/inconsistent-schoolyear-data-type-api-accepts-string-but-returns"
  },
  {
    "id": "823da5e6-cc4d-465f-af4b-62238772a6a2",
    "identifier": "BUG-57",
    "title": "API returns 500 Internal Server Error instead of 4xx Client Error when creating a grading period with a non-existent Organization sourcedId",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**BUG-55: OneRoster-AcademicSessions-PUT-org**](https://linear.app/ae-studio/issue/BUG-55/oneroster-academicsessions-put-org) - Similarity: 95% - Same foreign key constraint violation pattern for academic_sessions org_sourced_id. Human review needed.\n\n---\n\n**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API request to create a grading period failed with a 500 Internal Server Error. The response body was an HTML page containing a database error message: `error: insert or update on table \"academic_sessions\" violates foreign key constraint \"academic_sessions_org_sourced_id_orgs_sourced_id_fk\"`.\n\n**Summary:** \nThe API request to create a grading period failed with a 500 Internal Server Error. The response body was an HTML page containing a database error message: `error: insert or update on table \"academic_sessions\" violates foreign key constraint \"academic_sessions_org_sourced_id_orgs_sourced_id_fk\"`.\n\n**Steps to Reproduce:**\nThe bug is reproduced by attempting to create a new grading period and linking it to an `org.sourcedId` that does not exist. Instead of returning a client error like 400 or 422 to indicate the provided ID is invalid, the server crashes with a 500 error due to a database foreign key constraint violation.\n\n**Human-Friendly Steps:**\n\n1. Create a parent academic session (a 'term') to house the new grading period. This requires a valid organization `sourcedId`.\n2. Attempt to create a new grading period that is a child of the term created in step 1, but provide a non-existent or placeholder `sourcedId` for the organization.\n3. Observe the 500 Internal Server Error response.\n\n**cURL Commands to Reproduce:**\n\nFirst, ensure you have a valid Bearer token and set it as an environment variable:\n`export TOKEN=\"your_bearer_token_here\"`\n\nThen, run the following commands sequentially.\n\n1. **Get a valid** `orgSourcedId` (this org exists):\n\n```bash\nVALID_ORG_ID=$(curl -s -X GET \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/?limit=1\" \\\n-H \"accept: application/json\" \\\n-H \"authorization: Bearer $TOKEN\" | jq -r '.orgs[0].sourcedId')\necho \"Using Org ID: $VALID_ORG_ID\"\n```\n\n2. **Create a parent 'term' academic session. This step should succeed.**\n\n```bash\nTERM_ID=\"test-term-for-bug-$$\"\necho \"Creating Term ID: $TERM_ID\"\ncurl -i -X POST \"https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/\" \\\n-H \"accept: application/json\" \\\n-H \"authorization: Bearer $TOKEN\" \\\n-H \"content-type: application/json\" \\\n-d '{\n  \"academicSession\": {\n    \"sourcedId\": \"'$TERM_ID'\",\n    \"status\": \"active\",\n    \"title\": \"Parent Term for Bug Report\",\n    \"startDate\": \"2025-01-01\",\n    \"endDate\": \"2025-12-31\",\n    \"type\":...\n```",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T23:06:33.560Z",
    "updatedAt": "2025-07-02T14:20:22.595Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-57/api-returns-500-internal-server-error-instead-of-4xx-client-error-when"
  },
  {
    "id": "ab5ae45e-2238-4bad-96b1-e2514a3e1e26",
    "identifier": "BUG-56",
    "title": "OneRoster-AcademicSessions-DELETE",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to delete academic session associated with the following sourcedId returns HTTP 204 status code.\n123\n\n**Summary:** \nAttempting to delete academic session associated with the following sourcedId returns HTTP 204 status code.\n123\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123) \n--request DELETE\n\n**Expected:** \nSince delete operations are not idempotent, the following may be an appropriate server response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"academicSessions with sourcedId 123 not found\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"unknownobject\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Not Qualified Bug",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-28T23:01:29.577Z",
    "updatedAt": "2025-07-02T19:40:23.830Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-56/oneroster-academicsessions-delete"
  },
  {
    "id": "3e181317-9c99-4768-b0a2-d1ae67b7745b",
    "identifier": "BUG-55",
    "title": "OneRoster-AcademicSessions-PUT-org",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to create academic session with inappropriate organization sourcedId returns the following error.\n<error>\nerror: insert or update on table \"academic_sessions\" violates foreign key constraint \"academic_sessions_org_sourced_id_orgs_sourced_id_fk\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async AcademicSessionsService.putAcademicSession (file:///app/dist/server/modules/academicSessions/service.js:94:5)\n    at async file:///app/dist/server/common/handlers.js:133:7\n</error>\n\n**Summary:** \nAttempting to create academic session with inappropriate organization sourcedId returns the following error.\n<error>\nerror: insert or update on table \"academic_sessions\" violates foreign key constraint \"academic_sessions_org_sourced_id_orgs_sourced_id_fk\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async AcademicSessionsService.putAcademicSession (file:///app/dist/server/modules/academicSessions/service.js:94:5)\n    at async file:///app/dist/server/common/handlers.js:133:7\n</error>\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123) \n--request PUT \n--header 'Content-Type: application/json' \n--data '{\n  \"academicSession\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"metadata\": null,\n    \"type\": \"gradingPeriod\",\n    \"title\": \"\",\n    \"startDate\": \"1/1/2001\",\n    \"endDate\": \"1/1/2002\",\n    \"schoolYear\": \"\",\n    \"org\": {\n      \"sourcedId\": \"\"\n    }\n  }\n}'\n\n**Expected:** \nServer may appropriately handle inappropriate organization sourcedId input.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T22:57:51.300Z",
    "updatedAt": "2025-07-02T12:51:27.075Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-55/oneroster-academicsessions-put-org"
  },
  {
    "id": "52248d7d-ac3e-487d-adca-667ac0a771bb",
    "identifier": "BUG-54",
    "title": "Enrollment schema in OpenAPI spec is missing the 'school' object, a required field in the OneRoster standard",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The TimeBack API's OpenAPI specification for the `Enrollment` object completely omits the `school` field. This field is a fundamental and required component in the official IMS Global OneRoster v1.0 specification, representing the link to the organization (school) where the class and enrollment are based. Later versions of the standard (like v1.2, which the API endpoint path indicates) also include this field as a standard property. Its absence in the TimeBack spec is a critical deviation from the standard.\n\n**Summary:** \nThe TimeBack API's OpenAPI specification for the `Enrollment` object completely omits the `school` field. This field is a fundamental and required component in the official IMS Global OneRoster v1.0 specification, representing the link to the organization (school) where the class and enrollment are based. Later versions of the standard (like v1.2, which the API endpoint path indicates) also include this field as a standard property. Its absence in the TimeBack spec is a critical deviation from the standard.\n\n**Steps to Reproduce:**\n\n1. Review the official IMS Global OneRoster specification (v1.0 or v1.2).\n2. Observe that the `enrollment` data model contains a mandatory reference to the `school` (an `org`) where the enrollment occurs.\n3. Review the TimeBack API's internal OpenAPI specification for the `Enrollment` schema.\n4. Compare the fields. Note that the `school` property is entirely absent from the TimeBack API's schema definition.\n\n**Expected:** \nThe `Enrollment` schema in the TimeBack OpenAPI specification must include a `school` property to conform to the OneRoster standard. This property should be an object containing `href`, `sourcedId`, and `type`, structured identically to the `user` and `class` objects. According to the upstream v1.0 specification, this field is mandatory and should be marked as required in the schema. This allows API consumers to understand the full context of an enrollment, specifically which school it belongs to, from a single record.\n\n**Environment:** This is a specification and data model bug, not a runtime issue.\n\n* API Specification: The provided `Enrollment` schema for the TimeBack API.\n* Reference Specification: IMS Global OneRoster v1.0 / v1.2.\n  **Additional Notes:** This is a severe data model integrity issue. Omitting the `school` link from an enrollment breaks the relational model defined by the OneRoster standard. It makes it impossible for an API consumer to answer the basic question \"Which school does this enrollment belong to?\" without performing additional, potentially complex lookups. This significantly degrades the utility and compliance of the API.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T22:53:48.220Z",
    "updatedAt": "2025-07-03T20:51:42.324Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-54/enrollment-schema-in-openapi-spec-is-missing-the-school-object-a"
  },
  {
    "id": "a8a411f6-ebe8-4dd6-99a8-c7ffa918e9b6",
    "identifier": "BUG-53",
    "title": "OneRoster-AcademicSessions-PUT-time",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to create academic session with invalid time entry returns the following error.\n<error>\nRangeError: Invalid time value\n    at Date.toISOString (<anonymous>)\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n</error>\n\n**Summary:** \nAttempting to create academic session with invalid time entry returns the following error.\n<error>\nRangeError: Invalid time value\n    at Date.toISOString (<anonymous>)\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n</error>\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123) \n--request PUT \n--header 'Content-Type: application/json' \n--data '{\n  \"academicSession\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"metadata\": null,\n    \"type\": \"gradingPeriod\",\n    \"title\": \"\",\n    \"startDate\": \"\",\n    \"endDate\": \"\",\n    \"schoolYear\": \"\",\n    \"org\": {\n      \"sourcedId\": \"\"\n    }\n  }\n}'\n\n**Expected:** \nProper resource creation HTTP response.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T22:53:47.164Z",
    "updatedAt": "2025-07-02T12:28:01.902Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-53/oneroster-academicsessions-put-time"
  },
  {
    "id": "9cd5a194-8c17-4be4-b527-0167adec7c10",
    "identifier": "BUG-52",
    "title": "OneRoster-AcademicSessions-PUT-sourcedId",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to modify academic session associated with the following sourcedId returns the following response.\n\n<query>\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123) \n--request PUT \n--header 'Content-Type: application/json' \n--data '{\n  \"academicSession\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"metadata\": null,\n    \"type\": \"gradingPeriod\",\n\\[truncated\\]\n  }\n}'\n</query>\n\nThe response states that academic session associated with the aforementioned sourcedId may have not been identified.\n\n**Summary:** \nAttempting to modify academic session associated with the following sourcedId returns the following response.\n\n<query>\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123) \n--request PUT \n--header 'Content-Type: application/json' \n--data '{\n  \"academicSession\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"metadata\": null,\n    \"type\": \"gradingPeriod\",\n\\[truncated\\]\n  }\n}'\n</query>\n\nThe response states that academic session associated with the aforementioned sourcedId may have not been identified.\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"academicSession\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"metadata\": null,\n    \"title\": \"\",\n    \"startDate\": \"123\",\n    \"endDate\": \"123\",\n    \"type\": \"gradingPeriod\",\n    \"schoolYear\": \"\",\n    \"org\": {\n      \"sourcedId\": \"D860C00EF2EB4E47AD1C200078E81BF2\"\n    }\n  }\n}'\n\n**Expected:** \nThe academic session associated with the following ID may be properly modified.\n123\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-28T22:51:09.751Z",
    "updatedAt": "2025-07-02T12:51:20.738Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-52/oneroster-academicsessions-put-sourcedid"
  },
  {
    "id": "a60eb1e5-9777-4cec-b8ab-3a38cec08542",
    "identifier": "BUG-51",
    "title": "getAllEnrollments endpoint accepts the 'sort' query parameter but silently ignores it",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** he API endpoint accepts the `sort=beginDate` and `orderBy=desc` query parameters, as seen in the request log. However, the server does not perform the sort. The log shows that the `beginDate` field, which was the basis for the requested sort, is not even included in the response payload. The server does not throw an error; it silently ignores the sorting instruction and returns data in what appears to be a default order (possibly descending by `dateLastModified`).\n\n**Summary:** \nhe API endpoint accepts the `sort=beginDate` and `orderBy=desc` query parameters, as seen in the request log. However, the server does not perform the sort. The log shows that the `beginDate` field, which was the basis for the requested sort, is not even included in the response payload. The server does not throw an error; it silently ignores the sorting instruction and returns data in what appears to be a default order (possibly descending by `dateLastModified`).\n\n**Steps to Reproduce:**\n\n1. Authenticate with the OneRoster API.\n2. Make a GET request to the `/ims/oneroster/rostering/v1p2/enrollments/` endpoint.\n3. Add the query parameters `sort=beginDate` and `orderBy=desc`.\n4. Observe the response from the server.\n\n**Expected:** \nThe server should honor the `sort` and `orderBy` parameters. When `sort=beginDate` is requested, the response collection should be ordered by the `beginDate` of the enrollments. Alternatively, if sorting by `beginDate` is not supported, the API should return a `400 Bad Request` error with a message indicating that the field is not sortable. Silently accepting a parameter and then failing to act on it is incorrect and misleading behavior.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/)\nRequest Timestamp: 2025/06/28 17:42:55\nClient SDK: @superbuilders/oneroster (via speakeasy-sdk/typescript 0.7.0)\nQuery Parameters: filter=status%3D'active'&limit=2&offset=0&orderBy=desc&sort=beginDate\n**Additional Notes:** This bug prevents users from being able to reliably order the data they retrieve from a core listing endpoint. While it doesn't cause a crash like the missing fields bug, it breaks expected functionality and can lead to incorrect data processing on the client side if a specific order is assumed. This is a separate issue from the missing fields; even if the fields were present, the sorting logic is demonstrably not being applied.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-28T22:48:54.753Z",
    "updatedAt": "2025-07-01T22:50:05.955Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-51/getallenrollments-endpoint-accepts-the-sort-query-parameter-but"
  },
  {
    "id": "00456e29-3142-4d29-8847-941e4b88c998",
    "identifier": "BUG-50",
    "title": "getAllEnrollments response is missing required 'beginDate' and 'endDate' fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The `getAllEnrollments` endpoint returns a `200 OK` status, but the `enrollment` objects in the response payload do not contain the `beginDate` and `endDate` fields. The provided logs show a `ResponseValidationError` from the client-side SDK because it correctly expects these fields based on the API's own OpenAPI specification. The server is returning an invalid payload according to its contract.\n\n**Summary:** \nThe `getAllEnrollments` endpoint returns a `200 OK` status, but the `enrollment` objects in the response payload do not contain the `beginDate` and `endDate` fields. The provided logs show a `ResponseValidationError` from the client-side SDK because it correctly expects these fields based on the API's own OpenAPI specification. The server is returning an invalid payload according to its contract.\n\n**Steps to Reproduce:**\n\n1. Authenticate with the OneRoster API.\n2. Make a GET request to the `/ims/oneroster/rostering/v1p2/enrollments/` endpoint.\n3. Use any valid query parameters, such as `limit=2` and `offset=0`.\n4. Observe the JSON response body.\n5. Notice that the enrollment objects inside the `enrollments` array are missing the `beginDate` and `endDate` fields.\n\n**Expected:** \nAccording to the provided OpenAPI specification for both the `GET /enrollments/` endpoint and the referenced `Enrollment` schema, the `beginDate` and `endDate` fields are listed in the `required` array for each enrollment object. The API must return these fields in the response. The schema allows for these fields to be `null` (`type: ['string', 'null']`), so if an enrollment does not have a date set, the API should return the field with a `null` value, not omit the field entirely.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/enrollments/)\nRequest Timestamp: 2025/06/28 17:42:55\nClient SDK: @superbuilders/oneroster (via speakeasy-sdk/typescript 0.7.0)\n**Additional Notes:** This is a critical contract violation. The API is not adhering to its own public schema, which breaks any strictly-typed client or SDK that relies on the OpenAPI specification for response validation and object hydration. It makes the endpoint unreliable for retrieving complete enrollment data.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-28T22:47:07.140Z",
    "updatedAt": "2025-07-02T12:30:19.009Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-50/getallenrollments-response-is-missing-required-begindate-and-enddate"
  },
  {
    "id": "07d4e8d6-3051-46e9-bbcc-032cc7acff89",
    "identifier": "BUG-49",
    "title": "OneRoster-AcademicSessions-GET",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Academic session with the following source ID was successfully created. However, attempting to query the academic session returns the following server response.\n\n<query>\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123)\n</query>\n\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Invalid Data\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"InvalidData\"\n      }\n    \\]\n  },\n  \"imsx_error_details\": \\[\n    {\n      \"path\": \"schoolYear\",\n      \"message\": \"Expected number, received nan\"\n    }\n  \\]\n}\n</response>\n\n**Summary:** \nAcademic session with the following source ID was successfully created. However, attempting to query the academic session returns the following server response.\n\n<query>\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/123)\n</query>\n\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Invalid Data\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"InvalidData\"\n      }\n    \\]\n  },\n  \"imsx_error_details\": \\[\n    {\n      \"path\": \"schoolYear\",\n      \"message\": \"Expected number, received nan\"\n    }\n  \\]\n}\n</response>\n\n**Steps to Reproduce:**\ncurl [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/) \n--request POST \n--header 'Content-Type: application/json' \n--data '{\n  \"academicSession\": {\n    \"sourcedId\": \"123\",\n    \"status\": \"active\",\n    \"metadata\": null,\n    \"title\": \"\",\n    \"startDate\": \"123\",\n    \"endDate\": \"123\",\n    \"type\": \"gradingPeriod\",\n    \"schoolYear\": \"\",\n    \"org\": {\n      \"sourcedId\": \"D860C00EF2EB4E47AD1C200078E81BF2\"\n    }\n  }\n}'\n\n**Expected:** \nServer may return the academic session associated with the following source Id.\n123\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T22:42:18.468Z",
    "updatedAt": "2025-07-01T22:49:51.043Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-49/oneroster-academicsessions-get"
  },
  {
    "id": "614d30cc-fa2e-4237-addc-e6372b3aa1b4",
    "identifier": "BUG-48",
    "title": "Demographics schema incorrectly marks optional fields as required, directly violating OneRoster spec multiplicity",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The OpenAPI specification incorrectly mandates the presence of numerous fields in the Demographics response that are explicitly defined as optional (`Multiplicity [0..1]`) in the governing OneRoster 1.2 standard. This is the root cause of the `ResponseValidationError` in the logs.\n\n**Summary:** \nThe OpenAPI specification incorrectly mandates the presence of numerous fields in the Demographics response that are explicitly defined as optional (`Multiplicity [0..1]`) in the governing OneRoster 1.2 standard. This is the root cause of the `ResponseValidationError` in the logs.\n\n**Steps to Reproduce:**\n\n1. Review the 1EdTech OneRoster 1.2 specification for the Demographics class (Tables 6.1.12.1 through 6.1.12.13).\n2. Note that every single attribute from `birthDate` to `publicSchoolResidenceStatus` has a \"Multiplicity\" of `[0..1]`. This explicitly defines them as optional fields.\n3. Review the TimeBack OpenAPI specification for the Demographics object returned by `GET` requests.\n4. Observe that the `required` array includes nearly all of these optional fields, such as `birthDate`, `sex`, `stateOfBirthAbbreviation`, `cityOfBirth`, and `publicSchoolResidenceStatus`.\n5. This discrepancy causes the client-side validation error seen in the logs, as the API correctly omits optional fields that have no value, but the client SDK expects them to be present based on the incorrect `required` list.\n\n**Expected:** \nThe `required` array in the TimeBack OpenAPI `Demographics` schema must be corrected to align with the OneRoster 1.2 specification. The only fields that should be in the `required` list are those with a multiplicity of `[1..1]` or `[1..unbounded]`, which in this case are `sourcedId` and `status` (inherited from the Base class). All other fields from `birthDate` onwards should be removed from the `required` list.\n\n**Environment:** - API Specification: The provided OpenAPI YAML file for the TimeBack OneRoster API.\n\n* Upstream Standard: 1EdTech OneRoster API v1.2 Specification (specifically Demographics class attribute tables 6.1.12.1-13).\n  **Additional Notes:** This is a critical bug because it makes the `getAllDemographics` endpoint completely unusable for any client that performs response validation against the provided OpenAPI spec. It breaks the primary mechanism for discovering and retrieving data from the endpoint.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T22:41:04.554Z",
    "updatedAt": "2025-07-02T12:13:58.378Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-48/demographics-schema-incorrectly-marks-optional-fields-as-required"
  },
  {
    "id": "3d044934-430c-41ec-b5a8-f6a8eef3574d",
    "identifier": "BUG-47",
    "title": "Inconsistent 'sex' Enum values between operations, violating upstream OneRoster 1.2 specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API's specification for creating/updating a record (`POST`/`PUT`) is non-compliant with the OneRoster 1.2 standard. It omits the `other` and `unspecified` values for the `sex` field, which are part of the standard. This creates a data asymmetry where the API can return data that it will not accept back as valid input, making it impossible to edit certain records.\n\n**Summary:** \nThe API's specification for creating/updating a record (`POST`/`PUT`) is non-compliant with the OneRoster 1.2 standard. It omits the `other` and `unspecified` values for the `sex` field, which are part of the standard. This creates a data asymmetry where the API can return data that it will not accept back as valid input, making it impossible to edit certain records.\n\n**Steps to Reproduce:**\n\n1. Compare the TimeBack OpenAPI specification for the `sex` field with the official 1EdTech OneRoster 1.2 specification (Table 6.3.7, \"GenderEnum\").\n2. The 1EdTech standard defines the valid enum values as `male`, `female`, `other`, and `unspecified`.\n3. Observe the TimeBack OpenAPI spec. For `POST` and `PUT` request bodies, the `sex` enum is defined as only `male`, `female`, and `null`.\n4. The `GET` response schema correctly includes `male`, `female`, `other`, `unspecified`, and `null`.\n5. This creates a situation where a client can `GET` a valid record with `sex: \"other\"`, but cannot `PUT` that record back to the server without causing a validation error, because `\"other\"` is not a defined enum value for the update operation.\n\n**Expected:** \nThe TimeBack OpenAPI specification must be brought into compliance with the 1EdTech OneRoster 1.2 standard. The `enum` definition for the `sex` field in the `POST` and `PUT` request body schemas must be updated to include all standard values: `male`, `female`, `other`, and `unspecified`. This will ensure data symmetry and allow clients to perform a full CRUD lifecycle on all demographic records, regardless of the value of the `sex` field.\n\n**Environment:** - API Specification: The provided OpenAPI YAML file for the TimeBack OneRoster API.\n\n* Upstream Standard: 1EdTech OneRoster API v1.2 Specification (specifically sections on Demographics and GenderEnum).\n  **Additional Notes:** This bug violates the OneRoster 1.2 specification (Table 6.3.7) and breaks the principle of data round-tripping. A client application should be able to GET a resource, make a change to an unrelated field, and PUT the resource back without it failing validation due to pre-existing, valid data. This bug prevents that fundamental workflow.",
    "state": {
      "name": "Triage",
      "type": "triage"
    },
    "priority": 0,
    "createdAt": "2025-06-28T22:34:34.262Z",
    "updatedAt": "2025-07-02T00:58:15.086Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-47/inconsistent-sex-enum-values-between-operations-violating-upstream"
  },
  {
    "id": "f6380a4d-0de6-4830-8b08-12d84742d424",
    "identifier": "BUG-46",
    "title": "Demographics endpoints fail client validation due to incorrect 'required' fields in OpenAPI specification",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API server returns a 200 OK with a list of demographic objects. However, these objects omit fields that don't have a value (e.g., `stateOfBirthAbbreviation`). The client-side SDK, strictly following the OpenAPI spec, sees that the spec marks these fields as `required`. Because the keys are missing from the response payload, the SDK throws a validation error, and the API call fails on the client side, as seen in the provided logs.\n\n**Summary:** \nThe API server returns a 200 OK with a list of demographic objects. However, these objects omit fields that don't have a value (e.g., `stateOfBirthAbbreviation`). The client-side SDK, strictly following the OpenAPI spec, sees that the spec marks these fields as `required`. Because the keys are missing from the response payload, the SDK throws a validation error, and the API call fails on the client side, as seen in the provided logs.\n\n**Steps to Reproduce:**\n\n1. Make a `GET` request to the `/ims/oneroster/rostering/v1p2/demographics/` endpoint using a client that validates responses against the OpenAPI specification (e.g., the Speakeasy-generated SDK).\n2. Observe the API response. It will contain demographic objects where optional fields (like `stateOfBirthAbbreviation` for non-US births, or `publicSchoolResidenceStatus`) are omitted from the JSON payload.\n3. The client will raise a `ResponseValidationError` because the received objects are missing keys that are listed in the `required` array of the response schema in the OpenAPI spec.\n4. This issue also affects the `GET /demographics/{sourcedId}` and `PUT /demographics/{sourcedId}` endpoints as they use the same or an identically flawed schema.\n\n**Expected:** \nThe OpenAPI specification should be corrected. Fields that are optional and may be omitted from the response (like `stateOfBirthAbbreviation`, `publicSchoolResidenceStatus`, `cityOfBirth`, and potentially all race/ethnicity fields) should be removed from the `required` list in the schema definitions for Demographics objects. The server's behavior of omitting null/inapplicable fields is standard, and the spec should be updated to match it. This will allow client SDKs to correctly parse the successful response without validation errors.\n\n**Environment:** - API Endpoint: `https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/demographics/`\n\n* Client: Speakeasy-generated Typescript SDK (`@superbuilders/oneroster`)\n* Timestamp from logs: 2025/06/28 17:17:35\n  **Additional Notes:** The root cause is an overly strict `required` array in the OpenAPI schema for the Demographics object. The list is `[sourcedId, status, birthDate, sex, americanIndianOrAlaskaNative, asian, blackOrAfricanAmerican, nativeHawaiianOrOtherPacificIslander, white, demographicRaceTwoOrMoreRaces, hispanicOrLatinoEthnicity, countryOfBirthCode, stateOfBirthAbbreviation, cityOfBirth, publicSchoolResidenceStatus]`. Many of these fields are not guaranteed to be present for every record, causing a discrepancy between the specification and the implementation.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T22:23:36.888Z",
    "updatedAt": "2025-07-02T12:08:37.745Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-46/demographics-endpoints-fail-client-validation-due-to-incorrect"
  },
  {
    "id": "659f9575-3711-4ca9-a23d-ed1086a6ce49",
    "identifier": "BUG-45",
    "title": "Pagination metadata is inconsistent when requesting a page beyond the total number of records.",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returns pageNumber: 1509 while also returning pageCount: 1508. This is a logical contradiction. If there are only 1508 pages of data, a request for the 1509th page should not be reported as a success with an inconsistent page number.\n\n**Summary:** \nThe API returns pageNumber: 1509 while also returning pageCount: 1508. This is a logical contradiction. If there are only 1508 pages of data, a request for the 1509th page should not be reported as a success with an inconsistent page number.\n\n**Steps to Reproduce:**\nObserve the getAllCourses call in the logs as it reaches the end of the dataset.\nThe last valid page of results is requested with offset=3014. The response correctly shows pageNumber: 1508 and pageCount: 1508.\nThe next request is made with offset=3016, which is beyond the total record count of 3016.\nThe API responds with Status Code: 200 OK and an empty courses array.\nInspect the pagination metadata in this final response body.\n\n**Expected:** \nThe API should handle requests for pages beyond the available data in one of two ways:\nIdeal: Return an HTTP 404 Not Found status code, as the requested resource (the page of data) does not exist.\nAcceptable: If returning a 200 OK with an empty list is the desired behavior, the pagination metadata must remain consistent. It should still report pageCount: 1508 and could report pageNumber: 1509 but this is less than ideal. A more robust implementation would cap the returned pageNumber at the pageCount or omit the pageNumber entirely for out-of-bounds requests. The core issue is the contradictory metadata (pageNumber > pageCount).\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\nAPI Component: ims/oneroster/rostering/v1p2/courses/\nClient: N/A (Observed directly in API response logs)\nLog Files: Provided in the prompt. See the response for Request: GET [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?filter=status%3D'active'&limit=2&offset=2942&orderBy=asc&sort=title](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/courses/?filter=status%3D%27active%27&limit=2&offset=2942&orderBy=asc&sort=title)\n**Additional Notes:** This bug represents a data integrity issue in the API's pagination metadata. While it doesn't cause a crash, it can lead to confusion and faulty logic in client applications, especially those that rely on pageNumber and pageCount for building pagination controls or determining if more data is available. It violates the principle of providing reliable and consistent metadata.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T22:17:20.126Z",
    "updatedAt": "2025-07-02T12:00:12.635Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-45/pagination-metadata-is-inconsistent-when-requesting-a-page-beyond-the"
  },
  {
    "id": "5bdf84c9-0db6-4084-990d-6132caa4c7f9",
    "identifier": "BUG-44",
    "title": "POST /ims/oneroster/rostering/v1p2/courses/ returns 201 Created but the OpenAPI spec incorrectly defines the success response as 200 OK, causing SDKs to fail.",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API server correctly returns a 201 Created status code upon successful course creation, which is the standard and proper RESTful practice for resource creation. However, the OpenAPI documentation for the createCourse operation specifies 200 OK as the only success response. This discrepancy between the documentation and the actual API implementation causes strictly generated client SDKs to fail, as they interpret the 201 status as an unhandled or erroneous response. The provided log file confirms this client-side failure despite the server-side success of the operation.\n\n**Summary:** \nThe API server correctly returns a 201 Created status code upon successful course creation, which is the standard and proper RESTful practice for resource creation. However, the OpenAPI documentation for the createCourse operation specifies 200 OK as the only success response. This discrepancy between the documentation and the actual API implementation causes strictly generated client SDKs to fail, as they interpret the 201 status as an unhandled or erroneous response. The provided log file confirms this client-side failure despite the server-side success of the operation.\n\n**Steps to Reproduce:**\nUsing an SDK generated from the provided OpenAPI specification (e.g., @superbuilders/oneroster), make a valid POST request to the /ims/oneroster/rostering/v1p2/courses/ endpoint to create a new course.\nProvide a valid request body as shown in the logs: {\"course\": {\"status\": \"active\", \"title\": \"test-course-1751143567069\", \"courseCode\": \"TEST-1751143567070\", \"grades\": \\[\"9\", \"10\"\\], \"subjects\": \\[\"Mathematics\"\\], \"org\": {\"sourcedId\": \"84515b71-7026-4c0f-8d4d-7778454dfd8d\"}}}\nObserve the API's response. The server correctly returns an HTTP status code of 201 Created along with the sourcedIdPairs in the body. This is visible in the log: Status Code: 201 Created.\nObserve the client SDK's behavior. The SDK, which was generated to strictly follow the OpenAPI specification, expects a 200 OK status for a successful creation. Because it received an unexpected 201 Created status, it throws an error, which is captured in the logs: ERROR createCourse failed error=APIError: Unexpected Status or Content-Type: Status 201 Content-Type \"application/json; charset=utf-8\".\n\n**Expected:** \nThe OpenAPI specification should be corrected to reflect the actual and correct RESTful behavior of the API. The success response for a POST that creates a resource (createCourse) should be documented as 201 Created, not 200 OK. The response body schema, which is currently under the 200 response, should be moved under the 201 response.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\nAPI Component: ims/oneroster/rostering/v1p2/courses/\nClient: Speakeasy-generated Typescript SDK (@superbuilders/oneroster@1.0.0)\nLog Files: Provided in the prompt. See the POST request at 2025/06/28 15:46:06.\n**Additional Notes:** This is a critical-severity bug because it breaks a fundamental CRUD operation (Create) for any client using an SDK that is strictly generated from the provided OpenAPI specification. While the data is successfully created on the backend, the client receives an error, making it impossible to confirm the operation's success or retrieve the sourcedId of the newly created resource without manual workarounds. The bug lies purely in the OpenAPI specification being out of sync with the (correct) server implementation. Updating the spec to expect a 201 Created will resolve the issue.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T22:08:58.028Z",
    "updatedAt": "2025-07-03T12:36:36.185Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-44/post-imsonerosterrosteringv1p2courses-returns-201-created-but-the"
  },
  {
    "id": "66f8494d-381a-424b-ae85-392a8e839c12",
    "identifier": "BUG-43",
    "title": "OneRoster-AcademicSessions-GET-fields",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Including the field parameter does appropriate filter the fields included in the server response. The following may be the server response.\n<response>\n{\n  \"academicSessions\": \\[\n    {\n      \"sourcedId\": \"c9e3a068-09db-40eb-b1f2-d1dfa9fe8552\",\n      \"status\": \"active\",\n      \"dateLastModified\": \"2025-01-14T20:05:03.946Z\",\n      \"title\": \"Elementary Fall Semester 2023\",\n      \"startDate\": \"2023-08-15T00:00:00.000Z\",\n      \"endDate\": \"2023-12-20T00:00:00.000Z\",\n      \"type\": \"semester\",\n      \"parent\": {\n        \"href\": \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/4da6dca7-87dc-4711-adcc-bf3f713a740b](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/4da6dca7-87dc-4711-adcc-bf3f713a740b)\",\n        \"sourcedId\": \"4da6dca7-87dc-4711-adcc-bf3f713a740b\",\n        \"type\": \"academicSession\"\n      },\n      \"schoolYear\": 2023,\n      \"org\": {\n        \"href\": \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/84515b71-7026-4c0f-8d4d-7778454dfd8d](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/84515b71-7026-4c0f-8d4d-7778454dfd8d)\",\n        \"sourcedId\": \"84515b71-7026-4c0f-8d4d-7778454dfd8d\",\n        \"type\": \"org\"\n      }\n    },\n    {\n      \"sourcedId\": \"47cff4a9-3a1a-43ca-9f49-d0b180f19324\",\n      \"status\": \"active\",\n      \"dateLastModified\": \"2025-01-14T20:05:03.946Z\",\n      \"title\": \"Elementary Spring Semester 2024\",\n      \"startDate\": \"2024-01-05T00:00:00.000Z\",\n      \"endDate\": \"2024-05-30T00:00:00.000Z\",\n      \"type\": \"semester\",\n      \"parent\": {\n        \"href\": \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/4da6dca7-87dc-4711-adcc-bf3f713a740b](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/4da6dca7-87dc-4711-adcc-bf3f713a740b)\",\n        \"sourcedId\": \"4da6dca7-87dc-4711-adcc-bf3f713a740b\",\n        \"type\": \"academicSession\"\n      },\n      \"schoolYear\": 2023,\n      \"org\": {\n        \"href\": \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/84515b71-7026-4c0f-8d4d-7778454dfd8d](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/84515b71-7026-4c0f-8d4d-7778454dfd8d)\",\n        \"sourcedId\": \"84515b71-7026-4c0f-8d4d-7778454dfd8d\",\n        \"type\": \"org\"\n      }\n\n\\[truncated\\]\n</response>\n\n**Summary:** \nIncluding the field parameter does appropriate filter the fields included in the server response. The following may be the server response.\n<response>\n{\n  \"academicSessions\": \\[\n    {\n      \"sourcedId\": \"c9e3a068-09db-40eb-b1f2-d1dfa9fe8552\",\n      \"status\": \"active\",\n      \"dateLastModified\": \"2025-01-14T20:05:03.946Z\",\n      \"title\": \"Elementary Fall Semester 2023\",\n      \"startDate\": \"2023-08-15T00:00:00.000Z\",\n      \"endDate\": \"2023-12-20T00:00:00.000Z\",\n      \"type\": \"semester\",\n      \"parent\": {\n        \"href\": \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/4da6dca7-87dc-4711-adcc-bf3f713a740b](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/4da6dca7-87dc-4711-adcc-bf3f713a740b)\",\n        \"sourcedId\": \"4da6dca7-87dc-4711-adcc-bf3f713a740b\",\n        \"type\": \"academicSession\"\n      },\n      \"schoolYear\": 2023,\n      \"org\": {\n        \"href\": \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/84515b71-7026-4c0f-8d4d-7778454dfd8d](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/84515b71-7026-4c0f-8d4d-7778454dfd8d)\",\n        \"sourcedId\": \"84515b71-7026-4c0f-8d4d-7778454dfd8d\",\n        \"type\": \"org\"\n      }\n    },\n    {\n      \"sourcedId\": \"47cff4a9-3a1a-43ca-9f49-d0b180f19324\",\n      \"status\": \"active\",\n      \"dateLastModified\": \"2025-01-14T20:05:03.946Z\",\n      \"title\": \"Elementary Spring Semester 2024\",\n      \"startDate\": \"2024-01-05T00:00:00.000Z\",\n      \"endDate\": \"2024-05-30T00:00:00.000Z\",\n      \"type\": \"semester\",\n      \"parent\": {\n        \"href\": \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/4da6dca7-87dc-4711-adcc-bf3f713a740b](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/4da6dca7-87dc-4711-adcc-bf3f713a740b)\",\n        \"sourcedId\": \"4da6dca7-87dc-4711-adcc-bf3f713a740b\",\n        \"type\": \"academicSession\"\n      },\n      \"schoolYear\": 2023,\n      \"org\": {\n        \"href\": \"[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/84515b71-7026-4c0f-8d4d-7778454dfd8d](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/orgs/84515b71-7026-4c0f-8d4d-7778454dfd8d)\",\n        \"sourcedId\": \"84515b71-7026-4c0f-8d4d-7778454dfd8d\",\n        \"type\": \"org\"\n      }\n\n\\[truncated\\]\n</response>\n\n**Steps to Reproduce:**\ncurl '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?fields=sourcedId%2Cname&filter=status%3D'active'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?fields=sourcedId%2Cname&filter=status%3D'active')'\n\n**Expected:** \nThe response may filter the included academic session fields to sourceId and name.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T21:51:03.186Z",
    "updatedAt": "2025-07-01T22:49:22.683Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-43/oneroster-academicsessions-get-fields"
  },
  {
    "id": "7e6a87ee-5c97-4e29-8443-00da05b85022",
    "identifier": "BUG-42",
    "title": "OneRoster-AssessmentLineItems-GET-filter-scoreScale",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter assessment line items by score scale Id returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter assessment line items by score scale Id returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=scoreScale.sourceId%3D'1ad1f7a3-f633-41a4-b794-aeee43566744](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=scoreScale.sourceId%3D%271ad1f7a3%2Df633%2D41a4%2Db794%2Daeee43566744)\n%27'\n\n**Expected:** \nThe 1EdTech specifications state that entities including assessment line items may be filtered by entity properties that are associated including scoreScale. Therefore, the following may be an appropriate server response.\n<response>\n{\n  \"assessmentLineItems\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T21:20:33.946Z",
    "updatedAt": "2025-07-01T22:49:15.690Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-42/oneroster-assessmentlineitems-get-filter-scorescale"
  },
  {
    "id": "024d70aa-0fef-47a1-a489-4b5036901f4e",
    "identifier": "BUG-41",
    "title": "OneRoster-AssessmentLineItems-GET-filter-operator",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter assessment line items by status using the contains '\\~' operator returns the following error.\n<error>\nerror: operator does not exist: status_type \\~\\~\\* unknown\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Summary:** \nAttempting to filter assessment line items by status using the contains '\\~' operator returns the following error.\n<error>\nerror: operator does not exist: status_type \\~\\~\\* unknown\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=status\\~'active'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=status%7E%27active%27)'\n\n**Expected:** \nThe 1EdTech specifications states that the contains '\\~' operator may be used to filter entities. Therefore, the server may return set of all assessment line items that may be active.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T21:15:53.217Z",
    "updatedAt": "2025-07-01T22:49:07.472Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-41/oneroster-assessmentlineitems-get-filter-operator"
  },
  {
    "id": "1849091b-024f-440a-a213-3acc22c39f1c",
    "identifier": "BUG-40",
    "title": "OneRoster-AssessmentLineItems-GET-filter-class",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter assessment line items by class sourceId returns response stating that the class sourceId may not be filtered on. The following response is returned.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter assessment line items by class sourceId returns response stating that the class sourceId may not be filtered on. The following response is returned.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=class.sourceId%3D'15fec1b4-1cc1-4051-98fe-2dba66704853'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=class.sourceId%3D%2715fec1b4%2D1cc1%2D4051%2D98fe%2D2dba66704853%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities including classes may be filtered by entity properties that are associated including terms. Therefore, the following may be an appropriate response.\n<response>\n{\n  \"assessmentLineItems\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T21:13:05.469Z",
    "updatedAt": "2025-07-01T22:48:57.694Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-40/oneroster-assessmentlineitems-get-filter-class"
  },
  {
    "id": "118cfccd-7b19-4eb4-b1a7-d23602714810",
    "identifier": "BUG-39",
    "title": "OneRoster-AcademicSessions-GET-filter-sourceId",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by sourceId returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Field sourceId not found in entity \\[academic_sessions\\]\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter academic sessions by sourceId returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Field sourceId not found in entity \\[academic_sessions\\]\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=sourceId%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=sourceId%3D%27ABC%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities including academic sessions may be filtered by entity properties including sourceId. Therefore, the following may be an appropriate server response.\n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:49:12.608Z",
    "updatedAt": "2025-07-01T22:48:51.382Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-39/oneroster-academicsessions-get-filter-sourceid"
  },
  {
    "id": "20d1c8e8-df6b-4520-919e-75210251520e",
    "identifier": "BUG-38",
    "title": "Unstable Pagination with sort on Non-Unique Fields Causes Duplicate Records Across Pages",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** When paginating through the list of courses sorted by the title field, the same course record is returned on consecutive pages. For example, the course with sourcedId: \"3RDGRADELANGUAGE-b9c04b\" is the last item on the page with offset=2 and the first item on the page with offset=4. This indicates that the pagination is not stable and is skipping or duplicating records.\n\n**Summary:** \nWhen paginating through the list of courses sorted by the title field, the same course record is returned on consecutive pages. For example, the course with sourcedId: \"3RDGRADELANGUAGE-b9c04b\" is the last item on the page with offset=2 and the first item on the page with offset=4. This indicates that the pagination is not stable and is skipping or duplicating records.\n\n**Steps to Reproduce:**\nMake a GET request to the /ims/oneroster/rostering/v1p2/courses/ endpoint with the following parameters: ?filter=status%3D%27active%27&limit=2&offset=2&orderBy=asc&sort=title.\nObserve the response. It includes a course with sourcedId: \"3RDGRADELANGUAGE-b9c04b\" and title: \"3rd Grade - Language\" as the second item.\nMake a subsequent GET request to the same endpoint, incrementing the offset for the next page: ?filter=status%3D%27active%27&limit=2&offset=4&orderBy=asc&sort=title.\nObserve this second response. It includes the exact same course (sourcedId: \"3RDGRADELANGUAGE-b9c04b\") as the first item.\nThis duplication is observed for many other courses with non-unique titles, such as \"Async Orphan Course\", which appears on multiple consecutive pages with overlapping sourcedIds.\n\n**Expected:** \nEach course record should appear only once in the full paginated result set. When a client iterates through pages using limit and offset, no records should be duplicated or skipped. The API should ensure stable pagination, likely by automatically applying a secondary, unique sort key (like sourcedId) whenever a non-unique field like title is used for sorting.\n\n**Environment:** user-agent: speakeasy-sdk/typescript 0.7.0 2.640.2 1.0.0 @superbuilders/oneroster\n**Additional Notes:** This bug is critical for any client attempting to retrieve a complete and accurate list of all courses. It breaks the fundamental contract of pagination and can lead to incorrect data processing. The likely cause is an unstable database sort (ORDER BY title) on a column with duplicate values. The fix should be to enforce a deterministic sort order, for example, ORDER BY title ASC, sourcedId ASC.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:47:54.692Z",
    "updatedAt": "2025-07-02T11:49:23.859Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-38/unstable-pagination-with-sort-on-non-unique-fields-causes-duplicate"
  },
  {
    "id": "3fc2c729-960e-4118-bffc-fd50faf2565b",
    "identifier": "BUG-37",
    "title": "OneRoster-AssessmentLineItems-GET-filter-sourceId",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter assessment line items by sourceId returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Field sourceId not found in entity assessment_line_items\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter assessment line items by sourceId returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Field sourceId not found in entity assessment_line_items\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=sourceId%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=sourceId%3D%27ABC%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities including academic line items may be filtered by entity properties including sourceId. Therefore, the following may be an appropriate server response.\n<response>\n{\n  \"assessmentLineItems\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:46:59.969Z",
    "updatedAt": "2025-07-02T11:41:43.104Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-37/oneroster-assessmentlineitems-get-filter-sourceid"
  },
  {
    "id": "24f45901-144d-4909-bf35-4f0284d15068",
    "identifier": "BUG-36",
    "title": "OneRoster-AssessmentLineItems-GET-filter-dateLastModified",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**#BUG-5**](https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified) - Similarity: 96% - Human review needed\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter assessment line items by date last modified returns the following error.\n<e>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Summary:** \nAttempting to filter assessment line items by date last modified returns the following error.\n<e>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=dateLastModified%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=dateLastModified%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate server response.\n<response>\n{\n  \"assessmentLineItems\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:42:00.290Z",
    "updatedAt": "2025-07-01T22:48:28.175Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-36/oneroster-assessmentlineitems-get-filter-datelastmodified"
  },
  {
    "id": "582ec796-8b73-4753-9187-abcfc67f41e2",
    "identifier": "BUG-35",
    "title": "OneRoster-AssessmentLineItems-GET-filter-status",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter assessment line items by status returns the following error.\n<error>\nerror: invalid input value for enum status_type: \"active\\]\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Summary:** \nAttempting to filter assessment line items by status returns the following error.\n<error>\nerror: invalid input value for enum status_type: \"active\\]\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=status%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/assessmentLineItems/?filter=status%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate server response.\n<response>\n{\n  \"assessmentLineItems\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:40:13.583Z",
    "updatedAt": "2025-07-03T05:26:44.341Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-35/oneroster-assessmentlineitems-get-filter-status"
  },
  {
    "id": "4ff1e5df-10b1-4ced-8e77-d1d58b18a98d",
    "identifier": "BUG-34",
    "title": "getAllClasses endpoint returns class objects missing the required classCode field",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API responded with a 200 OK status and a list of class objects. However, the class objects within the classes array are missing the classCode field entirely. This violates the API's own OpenAPI specification, which marks classCode as a required field in the response. The provided log shows this caused a ResponseValidationError in the client-side SDK, which correctly identified the missing field.\n\n**Summary:** \nThe API responded with a 200 OK status and a list of class objects. However, the class objects within the classes array are missing the classCode field entirely. This violates the API's own OpenAPI specification, which marks classCode as a required field in the response. The provided log shows this caused a ResponseValidationError in the client-side SDK, which correctly identified the missing field.\n\n**Steps to Reproduce:**\nAuthenticate and obtain a valid bearer token.\nMake a GET request to the endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/).\nInclude any valid query parameters, for example: ?limit=2&offset=0.\nObserve the JSON response from the server.\n\n**Expected:** \nAccording to the OpenAPI specification for the GET /classes endpoint, each class object in the classes array must contain a classCode field. The schema defines it as type: \\['string', 'null'\\] and it is listed under the required properties for a class object. Therefore, the server should return the classCode key in every class object, with its value being either a string or null.\n\n**Environment:** API Endpoint: GET [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/)\nTimestamp: 2025/06/28 15:36:19\nEnvironment: staging\n**Additional Notes:** This is a direct violation of the API contract. Any client generated from or strictly adhering to the OpenAPI specification will fail to parse this response, effectively breaking the getAllClasses functionality. The server is not compliant with its own documentation.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:40:13.199Z",
    "updatedAt": "2025-07-01T22:48:12.029Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-34/getallclasses-endpoint-returns-class-objects-missing-the-required"
  },
  {
    "id": "73c78b15-43d8-407b-8494-37eaafb450b4",
    "identifier": "BUG-33",
    "title": "OneRoster-AcademicSessions-GET-filter-org",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by organization type returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Field org not found in entity academic_sessions\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter academic sessions by organization type returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Field org not found in entity academic_sessions\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=org.type%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=org.type%3D%27ABC%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities including classes may be filtered by entity properties that are associated including terms. Therefore, the following may be an appropriate server response.\n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:35:35.481Z",
    "updatedAt": "2025-07-01T22:48:08.434Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-33/oneroster-academicsessions-get-filter-org"
  },
  {
    "id": "54d4e208-ee4d-41c3-b6f5-5e3b612bba3a",
    "identifier": "BUG-32",
    "title": "PUT /categories/{sourcedId} Returns Incorrect HTTP Status 201 and Empty Body on Successful Update",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Upon a successful update of a category via a PUT request, the API returns an HTTP 201 Created status code. The response body is empty (content-length: 0) and the Content-Type header is missing. This behavior is incorrect for a PUT operation and directly violates the provided OpenAPI specification.\nWhat Should Happen?\n\n**Summary:** \nUpon a successful update of a category via a PUT request, the API returns an HTTP 201 Created status code. The response body is empty (content-length: 0) and the Content-Type header is missing. This behavior is incorrect for a PUT operation and directly violates the provided OpenAPI specification.\nWhat Should Happen?\n\n**Steps to Reproduce:**\nCreate a category using POST /ims/oneroster/gradebook/v1p2/categories/ to get a valid sourcedId.\nSend a PUT request to /ims/oneroster/gradebook/v1p2/categories/{sourcedId} to update the existing category.\nProvide a valid request body, for example: { \"category\": { \"title\": \"new-updated-title\", \"status\": \"active\" } }.\nObserve the HTTP status code, response headers, and response body from the server.\n\n**Expected:** \nAccording to the OpenAPI specification for the updateCategory operation (PUT /categories/{sourcedId}), a successful update must return an HTTP 200 OK status code. The response body should be application/json and must contain the full, updated category object.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/{sourcedId}](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/%7BsourcedId%7D)\nTimestamp: Observed in logs from 2025/06/28 15:27:04\nRequest Method: PUT\n**Additional Notes:** This bug represents a critical deviation from the API's documented contract. It breaks any client or SDK (like the one used in the test script) that is built according to the specification. The 201 Created status is meant for POST requests that create new resources, not for PUT requests that update existing ones. This indicates a fundamental logic error in the endpoint handler.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:34:57.931Z",
    "updatedAt": "2025-07-02T11:57:07.495Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-32/put-categoriessourcedid-returns-incorrect-http-status-201-and-empty"
  },
  {
    "id": "63125482-2e77-4446-9119-5e6abef6db25",
    "identifier": "BUG-31",
    "title": "OneRoster-AcademicSessions-GET-filter-parent",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by parent type returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter academic sessions by parent type returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=parent.type%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=parent.type%3D%27ABC%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities including classes may be filtered by entity properties that are associated including terms. Therefore, the following may be an appropriate server response.\n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:32:59.238Z",
    "updatedAt": "2025-07-01T22:47:57.624Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-31/oneroster-academicsessions-get-filter-parent"
  },
  {
    "id": "15150c2e-eb87-4174-8097-196eae9173d1",
    "identifier": "BUG-30",
    "title": "Unstable Sorting on getAllCategories Causes Duplicated Records in Paginated Responses Steps to Reproduce",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** When paginating through the getAllCategories endpoint while sorting by a non-unique field like title, the API returns duplicate records. The last record of a given page is repeated as the first record of the subsequent page. This is a classic symptom of an unstable sort algorithm, where the order of items with identical sort keys is not guaranteed between requests. This makes it impossible to reliably retrieve a complete and unique set of all categories using pagination.\nWhat Should Happen?\n\n**Summary:** \nWhen paginating through the getAllCategories endpoint while sorting by a non-unique field like title, the API returns duplicate records. The last record of a given page is repeated as the first record of the subsequent page. This is a classic symptom of an unstable sort algorithm, where the order of items with identical sort keys is not guaranteed between requests. This makes it impossible to reliably retrieve a complete and unique set of all categories using pagination.\nWhat Should Happen?\n\n**Steps to Reproduce:**\nEnsure the database contains multiple category records that share the same value for the title field (e.g., an empty string \"\" or any other non-unique title).\nMake a GET request to /ims/oneroster/gradebook/v1p2/categories/.\nInclude the following query parameters: sort=title, orderBy=asc, limit=3, offset=0.\nObserve the list of categories returned and note the sourcedId of the last item in the list.\nMake a second GET request to the same endpoint with the same parameters, but increment the offset: offset=3.\nCompare the last item from the first request with the first item from the second request. They will be the same record, indicating a duplication across page boundaries.\n\n**Expected:** \nThe API should implement a stable sort. When sorting by a field that may contain duplicate values (like title), a secondary, unique sort key (such as sourcedId or dateLastModified) should be used implicitly to break ties. This would ensure a deterministic and consistent ordering of records across all paginated requests. Each category record should appear exactly once in the complete, paginated result set.\nEnvironment Details\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/categories/)\nTimestamp: Observed in logs from 2025/06/28 15:27:02\nParameters: filter=status%3D%27active%27&limit=3&offset=0&orderBy=asc&sort=title\nScreenshots/Files\nUpload 1 supported file. Max 10 MB.\n**Additional Notes:** This bug breaks the core functionality of pagination and sorting, which are essential for clients to process large datasets. It can lead to data corruption, infinite loops in client-side logic, and an inability to view all available resources.",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:32:58.553Z",
    "updatedAt": "2025-07-02T11:48:53.572Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-30/unstable-sorting-on-getallcategories-causes-duplicated-records-in"
  },
  {
    "id": "06673382-a416-4dfe-ae3e-8bb856327b1b",
    "identifier": "BUG-29",
    "title": "OneRoster-AcademicSessions-GET-filter-type",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by type returns the following error.\n<error>\nerror: invalid input value for enum session_type: \"active\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Summary:** \nAttempting to filter academic sessions by type returns the following error.\n<error>\nerror: invalid input value for enum session_type: \"active\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=type%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=type%3D%27ABC%27)'\n\n**Expected:** \n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:28:58.432Z",
    "updatedAt": "2025-07-01T22:47:44.563Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-29/oneroster-academicsessions-get-filter-type"
  },
  {
    "id": "b3de3678-18f8-432c-a809-4d1025adef18",
    "identifier": "BUG-28",
    "title": "OneRoster-AcademicSessions-GET-filter-endDate",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**#BUG-5**](https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified) - Similarity: 94% - Human review needed\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by end date returns the following error.\n<e>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Summary:** \nAttempting to filter academic sessions by end date returns the following error.\n<e>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=endDate%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=endDate%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate server response.\n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:27:38.840Z",
    "updatedAt": "2025-07-02T12:27:31.090Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-28/oneroster-academicsessions-get-filter-enddate"
  },
  {
    "id": "d0b2da69-5330-4f02-afb1-9c5e22385fd5",
    "identifier": "BUG-27",
    "title": "OneRoster-AcademicSessions-GET-filter-endDate",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by start date returns the following error.\n<error>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</error>\n\n**Summary:** \nAttempting to filter academic sessions by start date returns the following error.\n<error>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</error>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=endDate%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=endDate%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate server response.\n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:25:56.721Z",
    "updatedAt": "2025-07-02T12:22:30.245Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-27/oneroster-academicsessions-get-filter-enddate"
  },
  {
    "id": "092e12e7-38fd-43ec-92b8-f7f3acb7c256",
    "identifier": "BUG-26",
    "title": "GET /assessmentResults Fails with 422 Error on Pagination Due to Malformed Data",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API endpoint, which had been successfully returning 200 OK responses for all previous pages, abruptly returns a 422 Unprocessable Entity status code for the request with offset=3464. The response body indicates a data validation failure, specifically {\"path\": \"learningObjectiveSet\", \"message\": \"Expected array, received object\"}. This suggests that at least one record in the database that would be returned on this page has an invalid data type for the learningObjectiveSet field, causing the entire read operation to fail.\n\n**Summary:** \nThe API endpoint, which had been successfully returning 200 OK responses for all previous pages, abruptly returns a 422 Unprocessable Entity status code for the request with offset=3464. The response body indicates a data validation failure, specifically {\"path\": \"learningObjectiveSet\", \"message\": \"Expected array, received object\"}. This suggests that at least one record in the database that would be returned on this page has an invalid data type for the learningObjectiveSet field, causing the entire read operation to fail.\n\n**Steps to Reproduce:**\nMake a series of paginated GET requests to the /ims/oneroster/gradebook/v1p2/assessmentResults/ endpoint.\nUse a limit of 2 and increment the offset by 2 for each subsequent request.\nContinue paginating until the request GET .../?limit=2&offset=3464 is made.\nObserve the server's response.\n\n**Expected:** \nThe API should always return data that conforms to its OpenAPI specification. The spec defines learningObjectiveSet as a field that must be of type array or null. The GET endpoint for a collection of resources should not fail entirely because of a single malformed record in the database. The API should handle this gracefully by either:\nSkipping the malformed record and returning the other valid records on the page with a 200 OK status.\nSanitizing the malformed record before sending the response (e.g., setting the invalid field to null).\nA GET request should not fail due to server-side data integrity issues.\n\n**Environment:** Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/)\nMethod: GET\nParameters: limit=2, offset=3464\n**Additional Notes:** This bug prevents clients from paginating through the entire set of assessment results, effectively breaking the getAllAssessmentResults functionality for any dataset containing this type of malformed entry. The test script that generated these logs also confirms this with a ResponseValidationError.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:25:55.725Z",
    "updatedAt": "2025-07-03T16:45:34.890Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-26/get-assessmentresults-fails-with-422-error-on-pagination-due-to"
  },
  {
    "id": "29f8df5d-62c9-422d-a495-82561ceaca9a",
    "identifier": "BUG-25",
    "title": "OneRoster-AcademicSessions-GET-filter-startDate",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**#BUG-5**](https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified) - Similarity: 94% - Human review needed\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by start date returns the following error.\n<e>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Summary:** \nAttempting to filter academic sessions by start date returns the following error.\n<e>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=startDate%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=startDate%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate server response.\n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:24:23.247Z",
    "updatedAt": "2025-07-02T12:27:31.537Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-25/oneroster-academicsessions-get-filter-startdate"
  },
  {
    "id": "c8e29255-b434-4453-98a8-0053de22e3a0",
    "identifier": "BUG-24",
    "title": "Inconsistent assessmentResult Object Shape: The score field is sometimes omitted, violating the schema contract.",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API returns assessmentResult objects with an inconsistent structure. The score field, which is defined in the OpenAPI specification for this endpoint, is present in some records but completely omitted from others. This inconsistent object shape forces client applications to implement extra logic to handle cases where the key may or may not exist, making parsing more complex and error-prone.\n\n**Summary:** \nThe API returns assessmentResult objects with an inconsistent structure. The score field, which is defined in the OpenAPI specification for this endpoint, is present in some records but completely omitted from others. This inconsistent object shape forces client applications to implement extra logic to handle cases where the key may or may not exist, making parsing more complex and error-prone.\n\n**Steps to Reproduce:**\nMake a GET request to the /ims/oneroster/gradebook/v1p2/assessmentResults/ endpoint.\nObserve a response where the score field is correctly present, for example, by setting query parameters to limit=2&offset=1676. The record with sourcedId: \"a6ab7cf7-fc33-4c6e-b412-d49048b81b0e\" will contain \"score\": 100.\nMake another GET request to the same endpoint, but with different query parameters, such as limit=2&offset=1736.\nObserve the response and inspect the record with sourcedId: \"d9e18654-9af2-451a-a842-27e69a317774\".\nNote that the score key is completely absent from this JSON object, demonstrating the inconsistency.\n\n**Expected:** \nThe provided OpenAPI specification for the GET /ims/oneroster/gradebook/v1p2/assessmentResults/ endpoint defines the score field within the properties of an assessmentResult object as type: \\['number', 'null'\\].\nWhile this definition makes the value of the field nullable, it does not make the key itself optional. Standard API contract principles dictate that if a field is defined in a schema, it should be present in the response. If no score value exists for a given result, the API should explicitly return \"score\": null.\nBy omitting the key entirely, the API violates the implicit contract of the schema, which is to provide a consistent data structure for the assessmentResult resource. This makes client-side data modeling and deserialization unnecessarily difficult.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentResults/)\nRequest Method: GET\nParameters: limit=2&offset=1736 (and others)\nSDK: @superbuilders/oneroster via speakeasy-sdk/typescript 0.7.0\n**Additional Notes:** This issue forces client-side developers to write defensive code to check for the existence of the score key before attempting to access it, which should not be necessary for a field defined in the API's schema. This violates the principle of predictable and consistent API responses.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:22:21.070Z",
    "updatedAt": "2025-07-01T22:47:09.757Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-24/inconsistent-assessmentresult-object-shape-the-score-field-is"
  },
  {
    "id": "ff57f10e-0687-4050-ad80-e7a2f3aaa2b0",
    "identifier": "BUG-23",
    "title": "OneRoster-AcademicSessions-GET-filter-dateLastModified",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**#BUG-5**](https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified) - Similarity: 96% - Human review needed\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by date last modified returns the following error.\n<e>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Summary:** \nAttempting to filter academic sessions by date last modified returns the following error.\n<e>\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=dateLastModified%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=dateLastModified%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate server response.\n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:21:18.532Z",
    "updatedAt": "2025-07-02T12:27:30.584Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-23/oneroster-academicsessions-get-filter-datelastmodified"
  },
  {
    "id": "4a287165-550b-4e28-953f-4296565581ed",
    "identifier": "BUG-22",
    "title": "OneRoster-AcademicSessions-GET-filter-status",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter academic sessions by status that does not adhere to the status enum types returns the following error.\n<error>\nerror: invalid input value for enum status_type: \"active\\]\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 1)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Summary:** \nAttempting to filter academic sessions by status that does not adhere to the status enum types returns the following error.\n<error>\nerror: invalid input value for enum status_type: \"active\\]\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 1)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=classType%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=classType%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate server response.\n<response>\n{\n  \"academicSessions\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n</response>\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:18:49.926Z",
    "updatedAt": "2025-07-03T05:26:43.506Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-22/oneroster-academicsessions-get-filter-status"
  },
  {
    "id": "fb041a10-a8da-4609-9e5e-bb82bf11149a",
    "identifier": "BUG-21",
    "title": "OneRoster-Class-GET-filter-resources",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter classes by resource types returns the following server response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter classes by resource types returns the following server response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=resources.type%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=resources.type%3D%27ABC%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities including classes may be filtered by entity properties that are associated including resources.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:14:23.893Z",
    "updatedAt": "2025-07-01T22:46:43.283Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-21/oneroster-class-get-filter-resources"
  },
  {
    "id": "6eac1e3c-f3b8-4758-b8e6-176900e6c25f",
    "identifier": "BUG-20",
    "title": "Incorrect pageNumber in pagination metadata when requesting a page beyond the last page.",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API correctly returned an empty assessmentLineItems array. However, the metadata in the response body was logically inconsistent. It reported \"pageCount\": 3109 and \"pageNumber\": 3110. The current page number cannot be greater than the total number of pages.\n\n**Summary:** \nThe API correctly returned an empty assessmentLineItems array. However, the metadata in the response body was logically inconsistent. It reported \"pageCount\": 3109 and \"pageNumber\": 3110. The current page number cannot be greater than the total number of pages.\n\n**Steps to Reproduce:**\nDetermine the totalCount of records (in this case, 6218) and the limit (in this case, 2).\nCalculate the total number of pages: pageCount = ceil(totalCount / limit) which is 3109.\nSend a GET request with an offset that corresponds to the page after the last page. In this case, offset=6218. The URL is ...?limit=2&offset=6218.\nInspect the pagination fields (pageCount, pageNumber) in the response body.\n\n**Expected:** \nWhen a client requests a page beyond the final page, the API should return a consistent and logical response. The pageNumber should not exceed the pageCount. A better response would be to return pageNumber: 3109 (the last valid page) or handle this boundary case in another documented, consistent manner.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/)\nClient: speakeasy-sdk/typescript 0.7.0 2.640.2 1.0.0 @superbuilders/oneroster\nTimestamp of Occurrence: Sat, 28 Jun 2025 19:47:10 GMT\n**Additional Notes:** The provided logs show this clearly in the final GET request:\nRequest: GET .../assessmentLineItems/?limit=2&offset=6218\nResponse Body: { \"assessmentLineItems\": \\[\\], \"totalCount\": 6218, \"pageCount\": 3109, \"pageNumber\": 3110, \"offset\": 6218, \"limit\": 2 }\n\nThis bug can lead to infinite loops in client-side pagination logic that relies on pageNumber <= pageCount to determine when to stop fetching pages. It indicates a likely off-by-one error in the server's pagination calculation.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:12:03.247Z",
    "updatedAt": "2025-07-02T12:00:21.475Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-20/incorrect-pagenumber-in-pagination-metadata-when-requesting-a-page"
  },
  {
    "id": "dd4dadcc-2d7d-4d65-9256-3463eaaeabc0",
    "identifier": "BUG-19",
    "title": "OneRoster-Class-GET-filter-periods",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**#BUG-5**](https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified) - Similarity: 91% - Human review needed\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter classes by periods returns the following error.\n<e>\nTypeError: value.map is not a function\n    at PgArray.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/common.js:183:21)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Summary:** \nAttempting to filter classes by periods returns the following error.\n<e>\nTypeError: value.map is not a function\n    at PgArray.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/common.js:183:21)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=periods%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=periods%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate response.\n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:11:21.163Z",
    "updatedAt": "2025-07-01T22:47:00.809Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-19/oneroster-class-get-filter-periods"
  },
  {
    "id": "3e2db373-6583-4d57-ae75-e583284db8b7",
    "identifier": "BUG-18",
    "title": "PUT request to update an assessmentLineItem returns incorrect HTTP Status Code (201 Created) and an empty body, violating REST standards and causing client failure.",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API responded with a 201 Created status code and an empty response body with Content-Length: 0. This is incorrect for an update operation. The client SDK, expecting a JSON body as per the API's standard behavior, failed to parse the empty response and threw an APIError: Unexpected Status or Content-Type.\n\n**Summary:** \nThe API responded with a 201 Created status code and an empty response body with Content-Length: 0. This is incorrect for an update operation. The client SDK, expecting a JSON body as per the API's standard behavior, failed to parse the empty response and threw an APIError: Unexpected Status or Content-Type.\n\n**Steps to Reproduce:**\nCreate a new assessmentLineItem using a POST request to /ims/oneroster/gradebook/v1p2/assessmentLineItems/.\nNote the allocatedSourcedId returned in the response (e.g., a7cf631d-8ef1-45c7-9ec4-2a0acc41fa93).\nSend a PUT request to /ims/oneroster/gradebook/v1p2/assessmentLineItems/{sourcedId} using the ID from step 2. The request body should contain an updated version of the resource.\nObserve the HTTP response from the server.\n\n**Expected:** \nA successful PUT request that updates an existing resource should return a 200 OK status code. The response body should contain the full, updated resource in JSON format, allowing the client to confirm the changes and have the latest representation of the object.\n\n**Environment:** API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/)\nClient: speakeasy-sdk/typescript 0.7.0 2.640.2 1.0.0 @superbuilders/oneroster\nTimestamp of Occurrence: Sat, 28 Jun 2025 19:47:10 GMT\n**Additional Notes:** Request: PUT .../assessmentLineItems/a7cf631d-8ef1-45c7-9ec4-2a0acc41fa93 with an updated title.\nResponse: Status Code: 201 Created, content-length: 0, and Body: <null>.\nClient Error: ERROR updateAssessmentLineItem failed error=APIError: Unexpected Status or Content-Type: Status 201 Content-Type \"\" Body \"\"\n\nThis bug breaks a core CRUD (Create, Read, Update, Delete) operation. The incorrect status code is a violation of HTTP semantics, and the empty body makes it impossible for the client to verify the update and caused the test script to fail.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:09:17.968Z",
    "updatedAt": "2025-07-02T11:57:06.850Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-18/put-request-to-update-an-assessmentlineitem-returns-incorrect-http"
  },
  {
    "id": "d9104206-f497-423d-be0f-2434e5682ef4",
    "identifier": "BUG-17",
    "title": "OneRoster-Class-GET-filter-subjectCodes",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**#BUG-5**](https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified) - Similarity: 91% - Human review needed\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter classes by subjectCodes returns the following error.\n<e>\nTypeError: value.map is not a function\n    at PgArray.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/common.js:183:21)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Summary:** \nAttempting to filter classes by subjectCodes returns the following error.\n<e>\nTypeError: value.map is not a function\n    at PgArray.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/common.js:183:21)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=subjectCodes%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=subjectCodes%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate response.\n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:09:16.422Z",
    "updatedAt": "2025-07-01T22:47:03.281Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-17/oneroster-class-get-filter-subjectcodes"
  },
  {
    "id": "4cc28878-3a6c-473c-9582-bae373d53a45",
    "identifier": "BUG-16",
    "title": "OneRoster-Class-GET-filter-terms",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter classes by term type returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter classes by term type returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=terms.type%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=terms.type%3D%27ABC%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities including classes may be filtered by entity properties that are associated including terms.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:07:45.044Z",
    "updatedAt": "2025-07-01T22:40:50.855Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-16/oneroster-class-get-filter-terms"
  },
  {
    "id": "7ac0e594-7da4-498d-89c0-7e8c91f228f0",
    "identifier": "BUG-15",
    "title": "getAllAssessmentLineItems pagination is unstable and skips records due to lack of a default sort order",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** When paginating through the getAllAssessmentLineItems endpoint without an explicit 'sort' parameter, the order of the returned records is not stable or predictable. The sequence of items is non-alphabetical and non-chronological. For instance, \"Algebra I Final Exam\" is returned before \"Chapter 1 Quiz\". More critically, this unstable ordering leads to records being skipped. The response for offset=2 includes \"Chapter 2 Quiz\" (sourcedId: \"7fb975fe-9ddd-4a68-8c81-8a43c2933688\"), but a client paginating from offset=0 to offset=4 would have missed this record entirely. This makes it impossible to reliably retrieve a complete set of all assessment line items.\n\n**Summary:** \nWhen paginating through the getAllAssessmentLineItems endpoint without an explicit 'sort' parameter, the order of the returned records is not stable or predictable. The sequence of items is non-alphabetical and non-chronological. For instance, \"Algebra I Final Exam\" is returned before \"Chapter 1 Quiz\". More critically, this unstable ordering leads to records being skipped. The response for offset=2 includes \"Chapter 2 Quiz\" (sourcedId: \"7fb975fe-9ddd-4a68-8c81-8a43c2933688\"), but a client paginating from offset=0 to offset=4 would have missed this record entirely. This makes it impossible to reliably retrieve a complete set of all assessment line items.\n\n**Steps to Reproduce:**\n\n1. Authenticate with a valid Bearer token.\n2. Make a GET request to the endpoint without a 'sort' parameter:\n   GET .../assessmentLineItems/?limit=2&offset=0\n3. Observe the response. The log shows it returns \"Algebra I Midterm Exam\" and \"Algebra I Final Exam\".\n4. Make a second GET request, advancing the page:\n   GET .../assessmentLineItems/?limit=2&offset=2\n5. Observe the response. The log shows it returns \"Chapter 1 Quiz\" and \"Chapter 2 Quiz\".\n6. Make a third GET request, advancing the page again:\n   GET .../assessmentLineItems/?limit=2&offset=4\n7. Observe the response. The log shows it returns two records both titled \"Chapter 3 Test\".\n\n**Expected:** \nFor limit/offset pagination to function correctly, the underlying data set must be sorted in a stable, deterministic way for every request. If a client does not provide a 'sort' parameter, the API backend MUST apply a non-negotiable default sort order. A common and effective default is to sort by a unique identifier, such as 'sourcedId' ascending. This guarantees that every client paginating through the collection will see the exact same sequence of records every time, ensuring that no items are skipped and no duplicates are introduced. The current behavior of returning items in an arbitrary order is a major flaw that leads to silent data loss.\n\n**Environment:** \\* API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/)\n\n* Environment: Staging\n* SDK: speakeasy-sdk/typescript 0.7.0\n* Date/Time: 2025-06-28 14:40:37 GMT\n  **Additional Notes:** The attached log file \"buglog.txt\" demonstrates this issue. By comparing the responses for offset=0, offset=2, and offset=4, the unstable and illogical ordering is clear. Specifically, \"Chapter 2 Quiz\" (sourcedId: \"7fb975fe-9ddd-4a68-8c81-8a43c2933688\") is present in the response for the offset=2 request, proving it exists, but it would have been missed by a client paginating with a step of 2 from offset=0, as the API jumps from \"Algebra I Final Exam\" to \"Chapter 3 Test\".\n\nThis is a silent data corruption bug. A client attempting to sync a complete list of assessment items will fail to do so, missing an unknown number of records without receiving any error. This undermines the core purpose of the endpoint. The fix is to implement a stable default sort order on the backend.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:06:16.942Z",
    "updatedAt": "2025-07-01T22:40:45.382Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-15/getallassessmentlineitems-pagination-is-unstable-and-skips-records-due"
  },
  {
    "id": "17724e16-ae9a-4b4d-8103-239f8f7fd77b",
    "identifier": "BUG-14",
    "title": "OneRoster-Class-GET-filter-school",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter classes by school type may have not been implemented properly. The following response is returned.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter classes by school type may have not been implemented properly. The following response is returned.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=school.type%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=school.type%3D%27ABC%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities may be filtered by entity properties that are associated. Therefore, the following may be an appropriate response.\n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Duplicate",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T20:05:16.904Z",
    "updatedAt": "2025-07-01T22:40:39.259Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-14/oneroster-class-get-filter-school"
  },
  {
    "id": "53c587d1-cb75-4c3e-bb35-c9e8845c754e",
    "identifier": "BUG-13",
    "title": "OneRoster-Class-GET-filter-course.type",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter classes by course type may not be implemented properly. The server returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter classes by course type may not be implemented properly. The server returns the following response.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Error in filter query\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=course.type%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=course.type%3D%27ABC%27)'\n\n**Expected:** \nThe 1EdTech specifications state that entities including classes may be filtered by entity properties that are associated including courses.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T20:03:02.555Z",
    "updatedAt": "2025-07-01T22:40:32.812Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-13/oneroster-class-get-filter-coursetype"
  },
  {
    "id": "cc3812b1-4ba7-4414-bc2d-434a17189655",
    "identifier": "BUG-12",
    "title": "OneRoster-Class-GET-filter-operator-contains",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The contains operator '\\~' may have not been properly implemented. Attempting to filter by status using the contains operator returns the following error.\n<error>\nerror: operator does not exist: status_type \\~\\~\\* unknown\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n<error>\n\n**Summary:** \nThe contains operator '\\~' may have not been properly implemented. Attempting to filter by status using the contains operator returns the following error.\n<error>\nerror: operator does not exist: status_type \\~\\~\\* unknown\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n<error>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=status\\~'active'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=status%7E%27active%27)'\n\n**Expected:** \nThe server may return response containing the set of all classes associated with status that may contain the substring 'active'.\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:58:57.110Z",
    "updatedAt": "2025-07-01T22:49:07.027Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-12/oneroster-class-get-filter-operator-contains"
  },
  {
    "id": "3ef83833-9d09-407b-9c0f-1d2138800890",
    "identifier": "BUG-11",
    "title": "Bug Title",
    "description": "**Reporter:** ben cappello ([bencappello@gmail.com](mailto:bencappello@gmail.com))\n**API/Component:** QTI API\n**Bug Type:** Brief Bug Summary (What Actually Happened?)\n\n**Summary:** \nBrief Bug Summary (What Actually Happened?)\n\n**Steps to Reproduce:**\nSteps to Reproduce\n\n**Expected:** \nWhat Should Happen?\n\n**Environment:** Environment Details\n\n**Additional Notes:** Additional Notes",
    "state": {
      "name": "Canceled",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-28T19:54:11.499Z",
    "updatedAt": "2025-07-01T22:40:22.810Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-11/bug-title"
  },
  {
    "id": "81b6816c-232b-47c4-a3e0-25425fe97339",
    "identifier": "BUG-10",
    "title": "OneRoster-Class-GET-filter-subjects",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**#BUG-5**](https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified) - Similarity: 90% - Human review needed\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter by subjects returns the following error.\n<e>\nTypeError: value.map is not a function\n    at PgArray.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/common.js:183:21)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Summary:** \nAttempting to filter by subjects returns the following error.\n<e>\nTypeError: value.map is not a function\n    at PgArray.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/common.js:183:21)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=subjects%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=subjects%3D%27ABC%27)'\n\n**Expected:** \n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:51:45.208Z",
    "updatedAt": "2025-07-01T22:47:02.592Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        },
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-10/oneroster-class-get-filter-subjects"
  },
  {
    "id": "06f5f112-4630-4ea7-88d3-149e60de803c",
    "identifier": "BUG-9",
    "title": "getAllAssessmentLineItems Returns Objects That Violate the OpenAPI Spec by Omitting Required Fields",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The API endpoint for getAllAssessmentLineItems is returning objects that do not conform to its own OpenAPI specification. Several records are missing fields that are explicitly marked as 'required' in the schema. For example, the record with sourcedId \"as-3d5c1e34-91fd-4e65-b256-b5afb47eb092\" is returned with only 'sourcedId', 'status', 'dateLastModified', and 'title'. It is missing the required fields 'assignDate', 'dueDate', 'class', 'school', and 'category'. This data integrity issue causes a direct violation of the API contract.\n\n**Summary:** \nThe API endpoint for getAllAssessmentLineItems is returning objects that do not conform to its own OpenAPI specification. Several records are missing fields that are explicitly marked as 'required' in the schema. For example, the record with sourcedId \"as-3d5c1e34-91fd-4e65-b256-b5afb47eb092\" is returned with only 'sourcedId', 'status', 'dateLastModified', and 'title'. It is missing the required fields 'assignDate', 'dueDate', 'class', 'school', and 'category'. This data integrity issue causes a direct violation of the API contract.\n\n**Steps to Reproduce:**\n\n1. Authenticate with a valid Bearer token for the staging environment.\n2. Make a GET request to the endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/?limit=2&offset=10](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/?limit=2&offset=10)\n3. Inspect the first object in the 'assessmentLineItems' array of the response.\n4. Compare the fields present in this object with the 'required' fields list in the provided OpenAPI specification for a LineItem.\n\n**Expected:** \nAccording to the provided OpenAPI specification, every LineItem object must contain the fields listed in its 'required' array. The response from the API should be strictly compliant with its own schema. Therefore, every assessmentLineItem object returned in the array must include the fields: 'title', 'assignDate', 'dueDate', 'class', 'school', and 'category'. If a field is optional and has no value (e.g., 'scoreScale'), it should be present and set to 'null' as the schema permits, not be omitted entirely. The API should never return an object that is missing a required field.\n\n**Environment:** \\* API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/](https://api.staging.alpha-1edtech.com/ims/oneroster/gradebook/v1p2/assessmentLineItems/)\n\n* Environment: Staging\n* SDK: speakeasy-sdk/typescript 0.7.0\n* Date/Time: 2025-06-28 14:40:38 GMT\n  **Additional Notes:** The attached log file \"buglog.txt\" provides the full trace. The key evidence is the response for the request with offset=10.\n  Non-compliant record (from offset=10):\n  {\n  \"sourcedId\": \"as-3d5c1e34-91fd-4e65-b256-b5afb47eb092\",\n  \"status\": \"active\",\n  \"dateLastModified\": \"2025-03-03T17:10:24.495Z\",\n  \"title\": \"\"\n  }\n  This record is missing 'assignDate', 'dueDate', 'class', 'school', and 'category', which are defined as required in the OpenAPI specification.\n\nThis bug is critical because it breaks the API contract. Any client application built using code generation from the OpenAPI specification will fail with parsing or serialization errors when it encounters these malformed objects, as it expects the required fields to be present. This points to a severe lack of data validation on write operations and/or a bug in the serialization logic on read operations.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:51:44.226Z",
    "updatedAt": "2025-07-02T12:13:27.004Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-9/getallassessmentlineitems-returns-objects-that-violate-the-openapi"
  },
  {
    "id": "b19209c8-488b-4633-87b4-5b3b4bfeff80",
    "identifier": "BUG-8",
    "title": "OneRoster-Class-GET-filter-source",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter by source that does not adhere to the specific set of source enum values returns the following error.\n<error>\nerror: invalid input value for enum status_type: \"activ\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Summary:** \nAttempting to filter by source that does not adhere to the specific set of source enum values returns the following error.\n<error>\nerror: invalid input value for enum status_type: \"activ\"\n    at /app/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///app/node_modules/drizzle-orm/node-postgres/session.js:83:22\n    at async Promise.all (index 0)\n    at async findMany (file:///app/dist/server/db/query.js:71:7)\n    at async file:///app/dist/server/common/handlers.js:51:39\n</error>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=source%3D'activ'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=source%3D%27activ%27)'\n\n**Expected:** \nThe following may be an appropriate response.\n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:49:54.898Z",
    "updatedAt": "2025-07-01T22:40:13.115Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-8/oneroster-class-get-filter-source"
  },
  {
    "id": "ee9e85ab-3eb1-4d32-b804-a5967bbb5d34",
    "identifier": "BUG-7",
    "title": "OneRoster-Class-GET-filter-sourceId",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter classes by Source Id returns server response stating that sourceId may not be a valid entity in classes. The following is returned.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Field sourceId not found in entity classes\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Summary:** \nAttempting to filter classes by Source Id returns server response stating that sourceId may not be a valid entity in classes. The following is returned.\n<response>\n{\n  \"imsx_codeMajor\": \"failure\",\n  \"imsx_severity\": \"error\",\n  \"imsx_description\": \"Field sourceId not found in entity classes\",\n  \"imsx_CodeMinor\": {\n    \"imsx_codeMinorField\": \\[\n      {\n        \"imsx_codeMinorFieldName\": \"TargetEndSystem\",\n        \"imsx_codeMinorFieldValue\": \"invalid_filter_field\"\n      }\n    \\]\n  }\n}\n</response>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=sourceId%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=sourceId%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate response.\n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:47:10.425Z",
    "updatedAt": "2025-07-02T11:41:43.104Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-7/oneroster-class-get-filter-sourceid"
  },
  {
    "id": "b1d44272-941c-4884-92fe-2d65b3090b3c",
    "identifier": "BUG-6",
    "title": "OneRoster-Class-GET-filter-Grades",
    "description": "**\ud83d\udd04 POTENTIAL DUPLICATE OF **[**#BUG-5**](https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified) - Similarity: 90% - Human review needed\n\n---\n\n**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter by grades returns the following error.\n<e>\nTypeError: value.map is not a function\n    at PgArray.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/common.js:183:21)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Summary:** \nAttempting to filter by grades returns the following error.\n<e>\nTypeError: value.map is not a function\n    at PgArray.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/common.js:183:21)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n</e>\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=grades%3D'active'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=grades%3D%27active%27)'\n\n**Expected:** \nThe following may be an appropriate response.\n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:44:20.351Z",
    "updatedAt": "2025-07-01T22:47:01.715Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "ai-flagged-duplicate"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-6/oneroster-class-get-filter-grades"
  },
  {
    "id": "fff931ac-75ef-4c95-8e01-a522e94d4fd6",
    "identifier": "BUG-5",
    "title": "OneRoster-Class-GET-filter-DateLastModified",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter Classes by Date Last Modified returns the following error.\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n\n**Summary:** \nAttempting to filter Classes by Date Last Modified returns the following error.\nTypeError: value.toISOString is not a function\n    at PgTimestamp.mapToDriverValue (file:///app/node_modules/drizzle-orm/pg-core/columns/timestamp.js:34:18)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:131:73\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n    at file:///app/node_modules/drizzle-orm/sql/sql.js:95:21\n    at Array.map (<anonymous>)\n    at SQL.buildQueryFromSourceParams (file:///app/node_modules/drizzle-orm/sql/sql.js:73:32)\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=dateLastModified%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=dateLastModified%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate response.\n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:41:28.825Z",
    "updatedAt": "2025-07-01T22:48:25.604Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-5/oneroster-class-get-filter-datelastmodified"
  },
  {
    "id": "62ac156a-1999-4ff7-b1e8-56e6370227a8",
    "identifier": "BUG-4",
    "title": "Pagination for getAllAcademicSessions is unreliable due to unstable sort order, causing record duplication and data loss",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** The pagination mechanism for the getAllAcademicSessions endpoint is unreliable. When sorting by a non-unique field like 'title', the last record of one page is frequently repeated as the first record of the subsequent page. This was observed multiple times in the provided logs (e.g., the record with sourcedId '70C7832A4E1A47D1B3822C76FEDEFFE4' appears at the end of the page with offset=0 and at the start of the page with offset=2). This unstable ordering causes clients to process duplicate records and, more critically, means some records are likely being skipped entirely between pages, leading to an incomplete dataset.\n\n**Summary:** \nThe pagination mechanism for the getAllAcademicSessions endpoint is unreliable. When sorting by a non-unique field like 'title', the last record of one page is frequently repeated as the first record of the subsequent page. This was observed multiple times in the provided logs (e.g., the record with sourcedId '70C7832A4E1A47D1B3822C76FEDEFFE4' appears at the end of the page with offset=0 and at the start of the page with offset=2). This unstable ordering causes clients to process duplicate records and, more critically, means some records are likely being skipped entirely between pages, leading to an incomplete dataset.\n\n**Steps to Reproduce:**\n\n1. Use a valid Bearer token to authenticate against the staging environment.\n2. Make a GET request to /ims/oneroster/rostering/v1p2/academicSessions/ with the following parameters:\n\n* limit=2\n* offset=0\n* sort=title\n\n3. Note the 'sourcedId' of the second (last) record returned.\n4. Make a second GET request with the same parameters, but change the offset to the next page:\n\n* offset=2\n\n5. Compare the 'sourcedId' of the first record from the second call to the last record from the first call.\n6. This can be repeated for subsequent pages (offset=2 and offset=4, offset=12 and offset=14, etc.) to observe the pattern.\n\n**Expected:** \nA paginated and sorted API endpoint must return a stable, deterministic, and unique set of records for each page. The set of records on page N and page N+1 should be completely disjoint. When sorting, if the primary sort key ('title' in this case) has duplicate values, a secondary, unique key (like 'sourcedId') must be used as a tie-breaker to guarantee a consistent order across all requests. This ensures that a client paginating through the entire set will receive every record exactly once.\n\n**Environment:** \\* API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/)\n\n* Environment: Staging\n* SDK: speakeasy-sdk/typescript 0.7.0\n* Test Script: academic-sessions.ts\n  **Additional Notes:** This is a critical bug because it breaks the fundamental contract of a 'getAll' endpoint and can lead to silent data corruption on the client side. The recommended fix is to update the backend sorting logic to always include a unique identifier as a secondary sort criterion. For example, the database query should be modified to use 'ORDER BY title ASC, sourcedId ASC' to ensure a stable and predictable order.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:40:25.199Z",
    "updatedAt": "2025-07-02T13:36:07.949Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-4/pagination-for-getallacademicsessions-is-unreliable-due-to-unstable"
  },
  {
    "id": "712fec2b-8716-4b01-ac67-9ed7526bb07a",
    "identifier": "BUG-3",
    "title": "OneRoster-Class-GET-filter-classType",
    "description": "**Reporter:** Azaldin Freidoon (azaldin.freidoon@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** Attempting to filter by Class Type that does not exist returns server error.\n\n**Summary:** \nAttempting to filter by Class Type that does not exist returns server error.\n\n**Steps to Reproduce:**\ncurl -X GET -H 'Authorization: \\[Filtered\\]' '[https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=classType%3D'ABC'](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/classes/?filter=classType%3D%27ABC%27)'\n\n**Expected:** \nThe following may be an appropriate response.\n{\n  \"classes\": \\[\\],\n  \"totalCount\": 0,\n  \"pageCount\": 0,\n  \"pageNumber\": 1,\n  \"offset\": 0,\n  \"limit\": 100\n}\n\n**Environment:** [https://api.staging.alpha-1edtech.com](https://api.staging.alpha-1edtech.com)\n**Additional Notes:**",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:38:03.550Z",
    "updatedAt": "2025-07-01T22:36:35.366Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-3/oneroster-class-get-filter-classtype"
  },
  {
    "id": "003e75e8-bb66-48a6-9d08-e466d1c605b2",
    "identifier": "BUG-2",
    "title": "getAllAcademicSessions crashes with 422 Unprocessable Entity during pagination due to invalid data",
    "description": "**Reporter:** Bjorn Pagen (bjorn.pagen@superbuilders.school)\n**API/Component:** OneRoster API\n**Bug Type:** While paginating through the full list of active academic sessions, the API call abruptly fails on the 47th page (offset=92). The server returns a \"422 Unprocessable Entity\" error. The response body explicitly states the reason is \"Invalid Data\" and provides error details pointing to a specific record: { \"path\": \"schoolYear\", \"message\": \"Expected number, received nan\" }. This indicates a data quality issue on the backend (a non-numeric schoolYear) is causing the entire request to fail, which blocks the client from retrieving any further pages.\n\n**Summary:** \nWhile paginating through the full list of active academic sessions, the API call abruptly fails on the 47th page (offset=92). The server returns a \"422 Unprocessable Entity\" error. The response body explicitly states the reason is \"Invalid Data\" and provides error details pointing to a specific record: { \"path\": \"schoolYear\", \"message\": \"Expected number, received nan\" }. This indicates a data quality issue on the backend (a non-numeric schoolYear) is causing the entire request to fail, which blocks the client from retrieving any further pages.\n\n**Steps to Reproduce:**\n\n1. Use a valid Bearer token to authenticate against the staging environment.\n2. Execute a test script that paginates through all academic sessions. Specifically, make a series of GET requests to the /ims/oneroster/rostering/v1p2/academicSessions/ endpoint with the following query parameters:\n\n* limit=2\n* filter=status%3D'active'\n* sort=title\n* orderBy=asc\n\n3. Start with offset=0 and increment the offset by 2 for each subsequent request (e.g., offset=0, offset=2, offset=4, ...).\n4. Observe that requests succeed for many pages.\n5. The request for the 47th page, using offset=92, will fail.\n   GET [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=status%3D'active'&limit=2&offset=92&orderBy=asc&sort=title](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/?filter=status%3D%27active%27&limit=2&offset=92&orderBy=asc&sort=title)\n\n**Expected:** \nThe API should be resilient to isolated data corruption within a large dataset. When a record with invalid data is encountered during a collection request, the API should not crash the entire operation. Instead, it should:\n\n1. Gracefully handle the error, for instance, by skipping the malformed record and returning the next valid records to complete the page.\n2. Log the data integrity issue internally for later cleanup.\n3. The client should be able to successfully paginate through all available records reported in the 'totalCount' field (185 in this case) without being blocked by a single bad entry.\n\n**Environment:** \\* API Endpoint: [https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/](https://api.staging.alpha-1edtech.com/ims/oneroster/rostering/v1p2/academicSessions/)\n\n* Environment: Staging\n* SDK: speakeasy-sdk/typescript 0.7.0\n* Test Script: academic-sessions.ts\n  **Additional Notes:** The last successful response (at offset=90) correctly reported a \"totalCount\" of 185 records and a \"pageCount\" of 93. This confirms that the client was correct to request the next page at offset=92 and that the server failed while attempting to serve data it claims to have. The failure prevents access to the remaining \\~93 records, which is a critical functionality break.",
    "state": {
      "name": "Dev Bug Validation",
      "type": "unstarted"
    },
    "priority": 4,
    "createdAt": "2025-06-28T19:33:39.859Z",
    "updatedAt": "2025-07-02T12:58:02.560Z",
    "assignee": null,
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-2/getallacademicsessions-crashes-with-422-unprocessable-entity-during"
  },
  {
    "id": "5304bc77-1759-4e2f-8f7d-b4b3222a776b",
    "identifier": "BUG-1",
    "title": "Bug Title",
    "description": "**Reporter:** ben cappello ([bencappello@gmail.com](mailto:bencappello@gmail.com))\n**API/Component:** QTI API\n**Bug Type:** Brief Bug Summary (What Actually Happened?)\n\n**Summary:** \nBrief Bug Summary (What Actually Happened?)\n\n**Steps to Reproduce:**\nSteps to Reproduce\n\n**Expected:** \nWhat Should Happen?\n\n**Environment:** Environment Details\n\n**Additional Notes:** Additional Notes",
    "state": {
      "name": "Canceled",
      "type": "canceled"
    },
    "priority": 0,
    "createdAt": "2025-06-27T23:05:55.352Z",
    "updatedAt": "2025-07-01T22:40:22.401Z",
    "assignee": {
      "name": "benjamin.cappello@ae.studio",
      "email": "benjamin.cappello@ae.studio"
    },
    "creator": null,
    "team": {
      "id": "d9c4b135-c5f6-4eec-a504-085f1c4e13dc",
      "name": "TimeBack Bug Bounty Program",
      "key": "BUG"
    },
    "labels": {
      "nodes": [
        {
          "name": "Bug"
        }
      ]
    },
    "project": {
      "name": "Superbuilders Bug Reports"
    },
    "url": "https://linear.app/ae-studio/issue/BUG-1/bug-title"
  }
]