name: Linear Duplicate Detection

on:
  schedule:
    # Run daily at 1 AM UTC (adjust timezone as needed)
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      tickets:
        description: 'Specific tickets to process (space-separated, e.g., BUG-123 BUG-456)'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (no changes to Linear)'
        required: false
        type: boolean
        default: false

jobs:
  duplicate-detection:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Fetch Linear issues
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
        run: |
          echo "Fetching Linear issues..."
          python fetch_linear_issues.py
          echo "Issues fetched successfully"

      - name: Cache ChromaDB
        uses: actions/cache@v3
        with:
          path: ~/.chroma
          key: chromadb-v1-${{ hashFiles('linear_issues.json') }}
          restore-keys: |
            chromadb-v1-

      - name: Seed ChromaDB (if needed)
        env:
          CHROMA_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LINEAR_OAUTH_ACCESS_TOKEN: ${{ secrets.LINEAR_API_KEY }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
        run: |
          echo "Seeding ChromaDB with latest issues..."
          python ai_flag_duplicates_improved.py --seed --update-existing
          echo "ChromaDB seeding completed"

      - name: Process specific tickets (manual trigger)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.tickets != ''
        env:
          CHROMA_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LINEAR_OAUTH_ACCESS_TOKEN: ${{ secrets.LINEAR_API_KEY }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
        run: |
          echo "Processing specific tickets: ${{ github.event.inputs.tickets }}"
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            python ai_flag_duplicates_improved.py --tickets ${{ github.event.inputs.tickets }} --dry-run
          else
            python ai_flag_duplicates_improved.py --tickets ${{ github.event.inputs.tickets }}
          fi

      - name: Process latest tickets (scheduled run)
        if: github.event_name == 'schedule'
        env:
          CHROMA_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LINEAR_OAUTH_ACCESS_TOKEN: ${{ secrets.LINEAR_API_KEY }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
        run: |
          echo "Processing latest tickets from the past 24 hours..."
          python process_recent_tickets.py

      - name: Upload logs (if there are any issues)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: duplicate-detection-logs
          path: |
            *.log
            linear_issues.json
          retention-days: 7 